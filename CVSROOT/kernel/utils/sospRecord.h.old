#ifdef SOSP91
/*
 * sospRecord.h --
 *
 *	Declarations of macros to insert log records for the sosp paper
 *	measurements.
 *
 * Copyright 1990 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header$ SPRITE (Berkeley)
 */

#ifndef _SOSP_RECORD
#define _SOSP_RECORD


#ifdef KERNEL
#include <traceLog.h>
#include <fs.h>

extern TraceLog_Header *SOSP91TracePtr;
#endif

/*
 * Definitions for the types of log records.  These are the events being
 * traced.
 */
#define	SOSP_OPEN		1
#define	SOSP_DELETE		2
#define	SOSP_CREATE		3
#define	SOSP_MKLINK		4
#define	SOSP_SET_ATTR		5
#define	SOSP_GET_ATTR		6
#define	SOSP_LSEEK		7
#define	SOSP_CLOSE		8
#define	SOSP_MIGRATE		9
#define	SOSP_TRUNCATE		10
#define	SOSP_CONSIST_CHANGE	11
#define	SOSP_READ		12
#define	SOSP_LOOKUP		13
#define	SOSP_CONSIST_ACTION	14

#ifdef KERNEL
/*
 * The following are macros to call for each type of event to trace.  All
 * parameters are int's, unless otherwise marked (such as Fs_FileID's).
 */

/*
 * Trace an open command.  The parameters are
 *
 * currentHostID:	Current client requesting open command
 * homeHostID:		HostID of process requesting open before migration
 * fileID		The file ID for the file being opened
 * streamID		Fs_FileID in the header of stream returned for this open
 * userID:		User id associated with process doing the open
 * mode			Mode flags of the open command
 * numAlreadyReading	Number of clients with file already open for reading
 * numAlreadyWriting	Number of clients with file already open for writing
 * fileAge		The create time for the file
 * fileSize		Size in bytes of the file
 */
#define	SOSP_ADD_OPEN_TRACE(currentHostID, homeHostID, fileID, streamID, userID, mode, numAlreadyReading, numAlreadyWriting, fileAge, fileSize) \
{\
	unsigned int	sospBuffer[68];\
\
	sospBuffer[0] = SOSP_OPEN;\
	sospBuffer[1] = currentHostID;\
	sospBuffer[2] = homeHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	*((Fs_FileID *) &(sospBuffer[7])) = streamID;\
	sospBuffer[11] = userID;\
	sospBuffer[12] = mode;\
	sospBuffer[13] = numAlreadyReading;\
	sospBuffer[14] = numAlreadyWriting;\
	sospBuffer[15] = fileAge;\
	sospBuffer[16] = fileSize;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(17 * sizeof (int)), SOSP_OPEN);\
}

/*
 * Trace a delete operation.  The fields are
 * 
 * currentHostID:	Current client requesting delete
 * homeHostID:		HostID of process requesting delete before migration
 * fileID		The file ID for the file being deleted
 * fileAge		The create time for the file
 * fileSize		Size in bytes of the file
 */ 
#define	SOSP_ADD_DELETE_TRACE(currentHostID, homeHostID, fileID, fileAge, fileSize) \
{\
	unsigned int	sospBuffer[36];\
\
	sospBuffer[0] = SOSP_DELETE;\
	sospBuffer[1] = currentHostID;\
	sospBuffer[2] = homeHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	sospBuffer[7] = fileAge;\
	sospBuffer[8] = fileSize;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(9 * sizeof (int)), SOSP_DELETE);\
}
	
/*
 * Trace a create operation.  The fields are
 * 
 * currentHostID:	Current client requesting create command
 * homeHostID:		HostID of process requesting create before migration
 * fileID		The file ID for the file being created
 */ 
#define	SOSP_ADD_CREATE_TRACE(currentHostID, homeHostID, fileID)\
{\
	unsigned int	sospBuffer[28];\
\
	sospBuffer[0] = SOSP_DELETE;\
	sospBuffer[1] = currentHostID;\
	sospBuffer[2] = homeHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)), SOSP_DELETE);\
}

/*
 * Trace a mklink operation.  The fields are
 * 
 * currentHostID:	Current client requesting mklink command
 * homeHostID:		HostID of process requesting mklink before migration
 * fileID		The file ID for the file being mklink'ed
 */ 
#define	SOSP_ADD_MKLINK_TRACE(currentHostID, homeHostID, fileID)\
{\
	unsigned int	sospBuffer[28];\
\
	sospBuffer[0] = SOSP_MKLINK;\
	sospBuffer[1] = currentHostID;\
	sospBuffer[2] = homeHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)), SOSP_MKLINK);\
}


/*
 * Trace a set attr operation.  The fields are
 * 
 * currentHostID:	Current client requesting set attr command
 * homeHostID:		HostID of process requesting set attr before migration
 * fileID		The file ID for the file being set attr'ed
 */ 
#define	SOSP_ADD_SET_ATTR_TRACE(currentHostID, homeHostID, fileID)\
{\
	unsigned int	sospBuffer[28];\
\
	sospBuffer[0] = SOSP_SET_ATTR;\
	sospBuffer[1] = currentHostID;\
	sospBuffer[2] = homeHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)), SOSP_SET_ATTR);\
}


/*
 * Trace a get attr operation.  The fields are
 * 
 * currentHostID:	Current client requesting get attr command
 * homeHostID:		HostID of process requesting get attr before migration
 * fileID		The file ID for the file being get attr'ed
 */ 
#define	SOSP_ADD_GET_ATTR_TRACE(currentHostID, homeHostID, fileID)\
{\
	unsigned int	sospBuffer[28];\
\
	sospBuffer[0] = SOSP_GET_ATTR;\
	sospBuffer[1] = currentHostID;\
	sospBuffer[2] = homeHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)), SOSP_GET_ATTR);\
}

/*
 * Trace an lseek operation.  The fields are
 * 
 * streamID		Fs_FileID in the header of stream for this operation
 * oldOffset		Offset of stream before lseek
 * newOffset		Offset of stream after lseek
 */ 
#define	SOSP_ADD_LSEEK_TRACE(streamID, oldOffset, newOffset)\
{\
	unsigned int	sospBuffer[7];\
\
	sospBuffer[0] = SOSP_LSEEK;\
	*((Fs_FileID *) &(sospBuffer[1])) = streamID;\
	sospBuffer[5] = oldOffset;\
	sospBuffer[6] = newOffset;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)),SOSP_LSEEK);\
}

/*
 * Trace a close operation.  The fields are
 * 
 * streamID		Fs_FileID in the header of stream for this operation
 * currentOffset	Offset of stream
 * fileSize		Size of file being closed
 */ 
#define	SOSP_ADD_CLOSE_TRACE(streamID, currentOffset, fileSize)\
{\
	unsigned int	sospBuffer[7];\
\
	sospBuffer[0] = SOSP_CLOSE;\
	*((Fs_FileID *) &(sospBuffer[1])) = streamID;\
	sospBuffer[5] = currentOffset;\
	sospBuffer[6] = fileSize;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)),SOSP_CLOSE);\
}

/*
 * Trace a migrate operation.  The fields are
 * 
 * fromHostID:		Current client requesting migrate command
 * toHostID:		HostID of machine to which to migrate
 * streamID		Fs_FileID in the header of stream for this operation
 * currentOffset	Offset of stream
 */ 
#define	SOSP_ADD_MIGRATE_TRACE(fromHostID, toHostID, streamID, currentOffset)\
{\
	unsigned int	sospBuffer[8];\
\
	sospBuffer[0] = SOSP_MIGRATE;\
	sospBuffer[1] = fromHostID;\
	sospBuffer[2] = toHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = streamID;\
	sospBuffer[7] = currentOffset;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
	(8 * sizeof (int)),SOSP_MIGRATE);\
}

/*
 * Trace a truncate operation.  The fields are
 * 
 * streamID		Fs_FileID in the header of stream for this operation
 * oldLength		Old length of the file
 * newLength		New length of the file
 */ 
#define	SOSP_ADD_TRUNCATE_TRACE(streamID, oldLength, newLength) \
{\
	unsigned int	sospBuffer[7];\
\
	sospBuffer[0] = SOSP_TRUNCATE;\
	*((Fs_FileID *) &(sospBuffer[1])) = streamID;\
	sospBuffer[5] = oldLength;\
	sospBuffer[6] = newLength;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)),SOSP_TRUNCATE);\
}

/*
 * Trace a consistency change operation.  The fields are
 * 
 * hostID:		ID of host causing the consistency change
 * fileID		file ID of file causing the fuss
 * operation		Is change due to an open or a close or what?
 *			This uses SOSP_OPEN, etc, defines.
 * writeOp		Whether the open/etc operation is for writing (TRUE)
 *			or reading (FALSE).
 */ 
#define	SOSP_ADD_CONSIST_CHANGE_TRACE(hostID, fileID, operation, writeOp) \
{\
	unsigned int	sospBuffer[8];\
\
	sospBuffer[0] = SOSP_CONSIST_CHANGE;\
	sospBuffer[1] = hostID;\
	*((Fs_FileID *) &(sospBuffer[2])) = fileID;\
	sospBuffer[6] = operation;\
	sospBuffer[7] = writeOp;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(8 * sizeof (int)),SOSP_CONSIST_CHANGE);\
}


/*
 * Trace a consistency action operation.  The fields are
 * 
 * causingHostID:	ID of host causing the consistency change
 * affectedHostID:	ID of host affected by consistency change
 * fileID		fileID of file causing the fuss
 * action		Whether the action to take on the client is
 *			FSCONSIST_WRITE_BACK_BLOCKS and/or
 * 			FSCONSIST_INVALIDATE_BLOCKS and/or
 *			FSCONSIST_DELETE_FILE, etc.
 *			These flags must be &'ed out since other flags may
 *			also be set.
 */ 
#define	SOSP_ADD_CONSIST_ACTION_TRACE(causingHostID, affectedHostID, fileID, action) \
{\
	unsigned int	sospBuffer[8];\
\
	sospBuffer[0] = SOSP_CONSIST_ACTION;\
	sospBuffer[1] = causingHostID;\
	sospBuffer[2] = affectedHostID;\
	*((Fs_FileID *) &(sospBuffer[3])) = fileID;\
	sospBuffer[7] = action;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(8 * sizeof (int)),SOSP_CONSIST_ACTION);\
}

/*
 * Trace a read operation on a write-shared file.  The fields are
 * 
 * hostID:		ID of host causing the consistency change
 * streamID		Stream ID of file causing the fuss
 * readIt		Whether the request is to read the file (TRUE) or
 *			to write the file (FALSE)
 * offset		Offset in the file at which to start operation
 * numBytes		Number of bytes to read or write
 */ 
#define	SOSP_ADD_READ_TRACE(hostID, streamID, readIt, offset, numBytes)\
{\
	unsigned int	sospBuffer[9];\
\
	sospBuffer[0] = SOSP_READ;\
	sospBuffer[1] = hostID;\
	*((Fs_FileID *) &(sospBuffer[2])) = streamID;\
	sospBuffer[6] = readIt;\
	sospBuffer[7] = offset;\
	sospBuffer[8] = numBytes;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(9 * sizeof (int)),SOSP_READ);\
}

/*
 * Trace a lookup operation.  The fields are
 * 
 * hostID:		ID of host causing the consistency change
 * streamID		Resulting stream ID of file.
 * numIDs		Number of id's we got.
 * status		Status of the lookup.
 * IDs			The ids we looked up (The caller stores these.)
 */ 
#define SOSP_LOOKUP_OFFSET 7*sizeof(int)
#define	SOSP_ADD_LOOKUP(sospBuffer, hostID, streamID, status, numIDs)\
{\
\
	sospBuffer[0] = SOSP_LOOKUP;\
	sospBuffer[1] = hostID;\
	*((Fs_FileID *) &(sospBuffer[2])) = streamID;\
	sospBuffer[6] = status;\
	sospBuffer[7] = numIDs;\
	TraceLog_Insert(SOSP91TracePtr, (Address) sospBuffer,\
		(7 * sizeof (int)+ numIDs*sizeof(Fs_FileID)),SOSP_LOOKUP);\
}

#endif /* KERNEL */
#endif /* _SOSP_RECORD */
#endif /* SOSP91 */
