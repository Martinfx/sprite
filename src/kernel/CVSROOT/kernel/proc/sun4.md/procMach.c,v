head     9.11;
branch   ;
access   ;
symbols  ds3100:9.11 sun3:9.11 sun4nw:9.9 symm:9.9 spur:9.9 sprited:9.9.1 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.11
date     92.01.08.01.11.53;  author shirriff;  state Exp;
branches ;
next     9.10;

9.10
date     91.11.11.15.52.57;  author shirriff;  state Exp;
branches ;
next     9.9;

9.9
date     91.08.12.15.01.55;  author shirriff;  state Exp;
branches 9.9.1.1;
next     9.8;

9.8
date     91.08.10.17.36.00;  author shirriff;  state Exp;
branches ;
next     9.7;

9.7
date     91.08.09.14.54.38;  author shirriff;  state Exp;
branches ;
next     9.6;

9.6
date     91.07.26.17.10.05;  author shirriff;  state Exp;
branches ;
next     9.5;

9.5
date     91.05.30.13.21.10;  author shirriff;  state Exp;
branches ;
next     9.4;

9.4
date     91.03.29.17.59.21;  author shirriff;  state Exp;
branches ;
next     9.3;

9.3
date     90.12.07.23.45.42;  author rab;  state Exp;
branches ;
next     9.2;

9.2
date     90.09.12.16.49.35;  author jhh;  state Exp;
branches ;
next     9.1;

9.1
date     90.06.21.13.08.24;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.16.13;  author douglis;  state Stable;
branches ;
next     1.2;

1.2
date     89.08.30.12.58.07;  author mgbaker;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.10.19.47.30;  author nelson;  state Exp;
branches ;
next     ;

9.9.1.1
date     91.08.15.21.20.31;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Translates a.out format into machine independent format.
@


9.11
log
@Fixed code to detect Sprite binaries so it would detect profiled programs
correctly.
@
text
@/* procMach.c --
 *
 *	Routine to interpret file header.
 *
 * Copyright (C) 1989 Digital Equipment Corporation.
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies.  
 * Digital Equipment Corporation makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/proc/sun3.md/procMach.c,v 9.10 91/11/11 15:52:57 shirriff Exp $ SPRITE (DECWRL)";
#endif /* not lint */

#include <sprite.h>
#include <stdio.h>
#include <procMach.h>
#include <proc.h>
#include <procInt.h>
#include <status.h>

extern int debugProcStubs;


/*
 *----------------------------------------------------------------------
 *
 * ProcGetObjInfo --
 *
 *	Translate the object file information into the machine independent
 *	form.
 *
 * Results:
 *	SUCCESS if could translate.
 *	PROC_BAD_AOUT_FORMAT if could not.
 *
 * Side effects:
 *	*objInfoPtr is filled in.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
ProcGetObjInfo(filePtr, execPtr, objInfoPtr)
    Fs_Stream		*filePtr;
    ProcExecHeader	*execPtr;
    ProcObjInfo		*objInfoPtr;
{

    int data[14];
    int sizeRead;
    ReturnStatus status;
#ifndef sun3
    int excess;
#endif
#define TYPE_SPRITE 0
#define TYPE_UNIX 0x1000
    int type;

#ifdef sun2
    if (execPtr->machineType != PROC_MC68010) {
	return(PROC_BAD_AOUT_FORMAT);
    }
#endif
#ifdef sun3
    if (execPtr->machineType != PROC_MC68010 &&
        execPtr->machineType != PROC_MC68020) {
	return(PROC_BAD_AOUT_FORMAT);
    }
#endif
#ifdef sun4
    /*
     * Sun's compiler includes a tool version number or something in the
     * top 16 bits of the machineType field, so we can only look at the
     * low 16 bits.
     */
    if ((execPtr->machineType & 0xff) != PROC_SPARC) {
	return(PROC_BAD_AOUT_FORMAT);
    }
#endif
    /*
     * The following few lines are total hack.  The idea is to look at
     * the startup code to see if it was a Sprite-compiled file, or
     * a Unix-compiled file.
     */
    sizeRead = 14*sizeof(int);
    status = Fs_Read(filePtr, (char *)data,
	execPtr->entry-PROC_CODE_LOAD_ADDR(*execPtr), &sizeRead);
    if (status != SUCCESS) {
	printf("READ failed\n");
	return(PROC_BAD_AOUT_FORMAT);
    }
#ifdef sun3
    if (data[0]==0x241747ef && data[1]==0x42002 &&
	    (data[2]==0x52807204 || data[2]==0x5280223c) &&
	    ((data[3]&0xffff0000)==0x4eb90000 || data[3]==4)) {
#else
    /* Normal sun4 startup code */
    if ((data[0]==0xac10000e && data[1]==0xac05a060 &&
	    data[2]==0xd0058000 && data[3]==0x9205a004) ||
    /* Profiled sun4 startup code */
	(data[10]==0xac10000e && data[11]==0xac05a060 &&
	    data[12]==0xd0058000 && data[13]==0x9205a004)) {

#endif
	type = TYPE_SPRITE;
    } else {
	type = TYPE_UNIX;
#ifdef sun3
	/*
	 * Special check for emacs, which has weird startup code.
	 */
	if (data[0]==0x4e560000 && data[1]==0x61064e5e &&
		data[2]==0x4e750000) {
	    type = TYPE_SPRITE;
	}
#endif
    }

    switch (execPtr->magic | type) {

    case PROC_ZMAGIC:		/* demand-paged */
	objInfoPtr->codeLoadAddr = (Address)PROC_CODE_LOAD_ADDR(*execPtr);
	objInfoPtr->codeFileOffset = PROC_CODE_FILE_OFFSET(*execPtr);
	objInfoPtr->codeSize = execPtr->code;
	objInfoPtr->heapLoadAddr = (Address)PROC_DATA_LOAD_ADDR(*execPtr);
	objInfoPtr->heapFileOffset = PROC_DATA_FILE_OFFSET(*execPtr);
	objInfoPtr->heapSize = execPtr->data;
	objInfoPtr->bssLoadAddr = (Address)PROC_BSS_LOAD_ADDR(*execPtr);
	objInfoPtr->bssSize = execPtr->bss;
	objInfoPtr->entry = (Address)execPtr->entry;
	objInfoPtr->unixCompat = 0;

	break;

    case PROC_OMAGIC:
	objInfoPtr->codeLoadAddr = (Address)PROC_CODE_LOAD_ADDR(*execPtr);
	objInfoPtr->codeFileOffset = 0;
	objInfoPtr->codeSize = 0;
	objInfoPtr->heapLoadAddr = (Address)PROC_CODE_LOAD_ADDR(*execPtr);
	objInfoPtr->heapFileOffset = PROC_CODE_FILE_OFFSET(*execPtr);
	objInfoPtr->heapSize = execPtr->data + execPtr->code;
	objInfoPtr->bssLoadAddr = (Address)PROC_BSS_LOAD_ADDR(*execPtr);
	objInfoPtr->bssSize = execPtr->bss;
	objInfoPtr->entry = (Address)execPtr->entry;
	objInfoPtr->unixCompat = 0;
	break;

    case UNIX_ZMAGIC:
    case PROC_ZMAGIC|TYPE_UNIX:
	if (debugProcStubs) {
	    printf("Executing UNIX file in compatibility mode.\n");
	}
	objInfoPtr->codeLoadAddr = (Address) PROC_BASEADDR(*execPtr);

	objInfoPtr->codeFileOffset = PROC_CODE_FILE_OFFSET(*execPtr);
	objInfoPtr->codeSize = execPtr->code;
#ifdef sun3
	objInfoPtr->heapLoadAddr = (Address) PROC_SUN_DATA_LOAD_ADDR(*execPtr);
	objInfoPtr->heapFileOffset = PROC_DATA_FILE_OFFSET(*execPtr);
	objInfoPtr->heapSize = execPtr->data;
	objInfoPtr->bssLoadAddr = objInfoPtr->heapLoadAddr + execPtr->data;
#else
	/*
	 * We have to shuffle things around so the heap is on a pmeg
	 * boundary.  This involves loading some of the code as heap.
	 */
	objInfoPtr->heapLoadAddr = (Address) (((int) objInfoPtr->codeLoadAddr +
		execPtr->code) & ~(NEW_SEG_SIZE - 1));

	if (objInfoPtr->heapLoadAddr < objInfoPtr->codeLoadAddr) {
	    objInfoPtr->heapLoadAddr = objInfoPtr->codeLoadAddr;
	}
	objInfoPtr->heapFileOffset = PROC_DATA_FILE_OFFSET(*execPtr);
	objInfoPtr->heapSize = execPtr->data;
	excess = (objInfoPtr->codeLoadAddr+execPtr->code) -
		objInfoPtr->heapLoadAddr;
	objInfoPtr->heapFileOffset -= excess;
	objInfoPtr->heapSize += excess;
	objInfoPtr->codeSize -= excess;
	objInfoPtr->bssLoadAddr = objInfoPtr->codeLoadAddr + execPtr->code +
		execPtr->data;
	if (debugProcStubs) {
	    printf("excess = %x\n", excess);
	}
#endif

	objInfoPtr->bssSize = execPtr->bss;
	objInfoPtr->entry = (Address)execPtr->entry;
	objInfoPtr->unixCompat = 1;
	if (debugProcStubs) {
	    printf("ZMAGIC: code at %x (%x), heap at %x (%x), bss at %x (%x)\n",
		    objInfoPtr->codeLoadAddr, objInfoPtr->codeSize,
		    objInfoPtr->heapLoadAddr, objInfoPtr->heapSize,
		    objInfoPtr->bssLoadAddr, objInfoPtr->bssSize);
	}
	break;

    case PROC_NMAGIC|TYPE_UNIX:
	objInfoPtr->codeLoadAddr = (Address) PROC_BASEADDR(*execPtr);

	objInfoPtr->codeFileOffset = PROC_CODE_FILE_OFFSET(*execPtr);
	objInfoPtr->codeSize = execPtr->code;
#if 1
#ifdef sun3
	objInfoPtr->heapLoadAddr = (Address) PROC_DATA_LOAD_ADDR(*execPtr);
#else
	objInfoPtr->heapLoadAddr = (Address) PROC_SUN_DATA_LOAD_ADDR(*execPtr);
#endif
	objInfoPtr->heapFileOffset = PROC_CODE_FILE_OFFSET(*execPtr)+
		execPtr->code;
	objInfoPtr->heapSize = execPtr->data;
#else
#ifdef sun3
	objInfoPtr->heapLoadAddr = (Address) PROC_DATA_LOAD_ADDR(*execPtr);
	objInfoPtr->heapFileOffset = PROC_CODE_FILE_OFFSET(*execPtr)+
		execPtr->code;
	objInfoPtr->heapSize = execPtr->data;
#else

	/*
	 * We have to shuffle things around so the heap is on a pmeg
	 * boundary.  This involves loading some of the code as heap.
	 */
	objInfoPtr->heapLoadAddr = (Address) (((int) objInfoPtr->codeLoadAddr +
		execPtr->code) & ~(NEW_SEG_SIZE - 1));
	if (objInfoPtr->heapLoadAddr < objInfoPtr->codeLoadAddr) {
	    objInfoPtr->heapLoadAddr = objInfoPtr->codeLoadAddr;
	}
	objInfoPtr->heapFileOffset = PROC_DATA_FILE_OFFSET(*execPtr);
	objInfoPtr->heapSize = execPtr->data;
	excess = (objInfoPtr->codeLoadAddr+execPtr->code) -
		objInfoPtr->heapLoadAddr;
	objInfoPtr->heapFileOffset -= excess;
	objInfoPtr->heapSize += excess;
	objInfoPtr->codeSize -= excess;
#endif
#endif

	objInfoPtr->bssLoadAddr = objInfoPtr->heapLoadAddr + execPtr->data;
	objInfoPtr->bssSize = execPtr->bss;
	objInfoPtr->entry = (Address)execPtr->entry;
	objInfoPtr->unixCompat = 1;
	break;

    default:
	return(PROC_BAD_AOUT_FORMAT);
    }
    if (debugProcStubs && type==TYPE_UNIX) {
	printf("Code: %x bytes, file %x, mem %x, heap: %x bytes, file %x\n",
		objInfoPtr->codeSize, objInfoPtr->codeFileOffset,
		objInfoPtr->codeLoadAddr, objInfoPtr->heapSize,
		objInfoPtr->heapFileOffset, objInfoPtr->heapLoadAddr);
	printf("bss: %x bytes, mem %x\n", objInfoPtr->bssSize,
		objInfoPtr->bssLoadAddr);
    }
    return(SUCCESS);
}
@


9.10
log
@Fixed a problem with how the kernel examines the executable to decide
if it's a Unix-compiled program or a Sprite-compiled program.  It was
messing up on sun4 profiled programs.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/proc/sun3.md/procMach.c,v 9.9 91/08/12 15:01:55 shirriff Exp $ SPRITE (DECWRL)";
d52 1
a52 1
    int data[4];
d88 1
a88 1
    sizeRead = 4*sizeof(int);
d104 2
a105 2
	    (data[0]==0xbc100000 && data[1]==0x11000008 &&
		data[2]==0x13000028)) {
@


9.9
log
@A debugging printf escaped its surrounding 'if'.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.8 91/08/10 17:36:00 shirriff Exp $ SPRITE (DECWRL)";
d105 1
a105 1
		data[2]==0x13000208 && data[3]==0x400038df)) {
@


9.9.1.1
log
@Initial branch for Sprite server.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.9 91/08/12 15:01:55 shirriff Exp $ SPRITE (DECWRL)";
@


9.8
log
@Fixed small bug.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.7 91/08/09 14:54:38 shirriff Exp Locker: shirriff $ SPRITE (DECWRL)";
d185 3
a187 1
	printf("excess = %x\n", excess);
@


9.7
log
@Maybe this time I got the code layout right for all the cases.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.6 91/07/26 17:10:05 shirriff Exp Locker: shirriff $ SPRITE (DECWRL)";
d185 1
a195 1
	    printf("excess = %x\n", excess);
@


9.6
log
@Large install for unix compatibility
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc.ken/sun3.md/RCS/procMach.c,v 1.1 91/04/30 13:12:24 shirriff Exp Locker: shirriff $ SPRITE (DECWRL)";
d183 1
a183 1
	objInfoPtr->bssLoadAddr = objInfoPtr->heapLoadAddr + execPtr->code +
d195 1
d248 8
@


9.5
log
@Added check so profiled sun4 code gets counted as sprite, not unix.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.4 91/03/29 17:59:21 shirriff Exp Locker: shirriff $ SPRITE (DECWRL)";
d25 2
d55 1
d57 4
d82 11
a92 1
    if (execPtr->dynamic) {
d95 12
d108 4
a111 3
    switch (execPtr->magic) {

    case PROC_ZMAGIC:
d113 1
a113 3
	 * The following few lines are total hack.  The idea is to look at
	 * the startup code to see if it was a Sprite-compiled file, or
	 * a Unix-compiled file.
d115 3
a117 6
	sizeRead = 4*sizeof(int);
	status = Fs_Read(filePtr, (char *)data,
	    execPtr->entry-PROC_CODE_LOAD_ADDR(*execPtr), &sizeRead);
	if (status != SUCCESS) {
	    printf("READ failed\n");
	    return(PROC_BAD_AOUT_FORMAT);
a118 20
#ifdef sun3
	if (data[0]==0x241747ef && data[1]==0x42002 &&
		(data[2]==0x52807204 || data[2]==0x5280223c) &&
		((data[3]&0xffff0000)==0x4eb90000 || data[3]==4)) {
#else
	/* Normal sun4 startup code */
	if ((data[0]==0xac10000e && data[1]==0xac05a060 &&
		data[2]==0xd0058000 && data[3]==0x9205a004) ||
	/* Profiled sun4 startup code */
		(data[0]==0xbc100000 && data[1]==0x11000008 &&
		    data[2]==0x13000208 && data[3]==0x400038df)) {
#endif
	    goto spriteMagic;
	} else {
#ifdef sun3
	    /*
	     * Special check for emacs, which has weird startup code.
	     */
	    if (data[0]==0x4e560000 && data[1]==0x61064e5e &&
		    data[2]==0x4e750000) goto spriteMagic;
d120 3
d124 1
a124 4
	    printf("Executing UNIX file in compatibility mode.\n");
	    goto unixMagic;
	}
spriteMagic:
d152 34
a185 1
    unixMagic:
d187 10
a196 2
	objInfoPtr->codeLoadAddr =
	    (Address) (execPtr->entry < 0x2000 ? 0 : 0x2000);
d198 3
d203 10
d214 3
a216 4
	objInfoPtr->heapLoadAddr = (Address) 0x20000
	    + (((int) objInfoPtr->codeLoadAddr +
	        execPtr->code - 1) & ~(0x20000 - 1));
	objInfoPtr->heapFileOffset = PROC_DATA_FILE_OFFSET(*execPtr);
d219 1
d224 2
a225 3
	objInfoPtr->heapLoadAddr = (Address)
	    (((int) objInfoPtr->codeLoadAddr +
	        execPtr->code) & ~(0x20000 - 1));
d236 1
@


9.4
log
@Added code to decide if we're running a Unix binary, and to set things
up appropriately if we are.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.3 90/12/07 23:45:42 rab Exp Locker: shirriff $ SPRITE (DECWRL)";
d99 6
a104 2
	if (data[0]==0xac10000e && data[1]==0xac05a060 &&
		data[2]==0xd0058000 && data[3]==0x9205a004) {
d106 1
d108 8
d119 1
@


9.3
log
@Unix compatibility.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.2 90/09/12 16:49:35 jhh Exp Locker: rab $ SPRITE (DECWRL)";
d44 2
a45 1
ProcGetObjInfo(execPtr, objInfoPtr)
d50 5
d75 3
d82 24
d115 2
d129 1
d133 2
a134 1
	printf("ProcGetObjInfo: UNIX_ZMAGIC\n");
d140 1
d144 13
a156 1

d159 7
d169 1
a169 5

printf("codeLoadAddr = %x, codeFileOffset = %x, codeSize = %x, entry = %x\n",
    objInfoPtr->codeLoadAddr, objInfoPtr->codeFileOffset,
    objInfoPtr->codeSize, objInfoPtr->entry);

@


9.2
log
@fixed include statements
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.1 90/06/21 13:08:24 rab Exp Locker: jhh $ SPRITE (DECWRL)";
d19 1
d94 23
@


9.1
log
@Added support for OMAGIC files.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 9.0 89/09/12 15:16:13 douglis Stable Locker: rab $ SPRITE (DECWRL)";
d18 5
a22 5
#include "sprite.h"
#include "procMach.h"
#include "proc.h"
#include "procInt.h"
#include "status.h"
@


9.0
log
@Changing version numbers.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 1.2 89/08/30 12:58:07 mgbaker Exp Locker: douglis $ SPRITE (DECWRL)";
d47 1
a47 3
    if (execPtr->magic != PROC_ZMAGIC) {
	return(PROC_BAD_AOUT_FORMAT);
    }
d69 13
a81 9
    objInfoPtr->codeLoadAddr = (Address)PROC_CODE_LOAD_ADDR(*execPtr);
    objInfoPtr->codeFileOffset = PROC_CODE_FILE_OFFSET(*execPtr);
    objInfoPtr->codeSize = execPtr->code;
    objInfoPtr->heapLoadAddr = (Address)PROC_DATA_LOAD_ADDR(*execPtr);
    objInfoPtr->heapFileOffset = PROC_DATA_FILE_OFFSET(*execPtr);
    objInfoPtr->heapSize = execPtr->data;
    objInfoPtr->bssLoadAddr = (Address)PROC_BSS_LOAD_ADDR(*execPtr);
    objInfoPtr->bssSize = execPtr->bss;
    objInfoPtr->entry = (Address)execPtr->entry;
d83 15
@


1.2
log
@sun4 stuff.
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/sun3.md/RCS/procMach.c,v 1.1 89/07/10 19:47:30 nelson Exp Locker: mgbaker $ SPRITE (DECWRL)";
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
static char rcsid[] = "$Header: procMach.c,v 1.2 89/06/29 10:11:29 mnelson Exp $ SPRITE (DECWRL)";
d62 6
a67 1
    if (execPtr->machineType != PROC_SPARC) {
@
