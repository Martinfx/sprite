head     1.4;
branch   ;
access   ;
symbols  ds3100:1.4 sun3:1.4 sun4nw:1.4 symm:1.4 spur:1.4;
locks    ; strict;
comment  @ * @;


1.4
date     90.10.19.17.23.10;  author mendel;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.02.16.19.45;  author mendel;  state Exp;
branches ;
next     1.2;

1.2
date     90.05.25.15.33.22;  author mendel;  state Exp;
branches ;
next     1.1;

1.1
date     90.01.16.17.12.33;  author mendel;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Many bug fixed. First installed LFS.
@
text
@/*
 * lfsStableMem.h --
 *
 *	Declarations of interface for maintaining the in memory data structures
 *	of LFS.
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/kernel/lfs/RCS/lfsStableMem.h,v 1.3 90/08/02 16:19:45 mendel Exp Locker: mendel $ SPRITE (Berkeley)
 */

#ifndef _LFSSTABLEMEM
#define _LFSSTABLEMEM

/* constants */

/* data structures */

/*
 * LfsStableMemCheckPoint - data values written at stable memory checkpoints.
 */
typedef struct LfsStableMemCheckPoint {
    int	numBlocks;	/* Number of block pointers written in this 
			 * checkpoint. */
} LfsStableMemCheckPoint;

/*
 * LfsStableMemParams - Configuration parameters for stable memory data
 *			structures
 */
typedef struct LfsStableMemParams {
    int	memType;	/* Stable memory type */
    int blockSize;	/* Block size in bytes for index.  Must be
			 * a multiple of the file system block size. */
    int entrySize;	/* Size of each entry in bytes. */
    int	maxNumEntries;	/* Maximum number of entries supported. */
    int	entriesPerBlock; /* Number of entries per block. */
    int maxNumBlocks;	/* Maximum number of blocks supported by this
			 * index. */
} LfsStableMemParams;


/*
 * An on disk header for each stable memory block.
 */
typedef struct LfsStableMemBlockHdr {
    int	magic;		/* Better be LFS_STABLE_MEM_BLOCK_MAGIC. */
    int	memType;	/* Memory type from params of this block. */
    int	blockNum;	/* Block number in stable memory of this block. */
    int	reserved;	/* Reserved must be zero. */
} LfsStableMemBlockHdr;

#define	LFS_STABLE_MEM_BLOCK_MAGIC	0x1f55da

#endif /* _LFSSTABLEMEM */

@


1.3
log
@Checkin before adding recovery
./
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/lfs/RCS/lfsStableMem.h,v 1.2 90/05/25 15:33:22 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d26 3
d34 4
d39 1
d42 3
d50 11
a60 16
typedef struct LfsStableMem {
    char 	*dataPtr;	/* Pointer to metadata. */
    int *blockIndexPtr; 	/* Index of current buffer addresses. */
    char	*dirtyBlocksBitMapPtr; /* Bitmap of dirty blocks. */
    int		blockSizeShift;	       /* Log base 2 of params.blockSize. */
    LfsStableMemCheckPoint checkPoint; /* Data to be checkpoint. */
    LfsStableMemParams params;  /* A copy of the parameters of the index. */
} LfsStableMem;

/* procedures */

extern Boolean LfsStableMemClean();
extern Boolean LfsStableMemCheckpoint();
extern void LfsStableMemWriteDone();
extern ReturnStatus LfsStableMemLoad();
extern void LfsStableMemMarkDirty();
@


1.2
log
@*** empty log message ***
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/fs.mendel/RCS/lfsStableMem.h,v 1.1 90/01/16 17:12:33 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d32 4
a35 4
    int blockSize;		/* Block size in bytes for index.  Must be
				 * a multiple of the file system block size. */
    unsigned int maxNumBlocks;	/* Maximum number of blocks supported by this
				 * index. */
d41 1
a41 1
    unsigned int *blockIndexPtr; /* Index of current buffer addresses. */
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
 * $Header: /sprite/lib/forms/RCS/proto.h,v 1.4 89/10/28 15:57:26 rab Exp $ SPRITE (Berkeley)
d32 1
a32 1
    unsigned int blockSize;	/* Block size in bytes for index.  Must be
d41 1
a41 1
    int		*blockIndexPtr; /* Index of current buffer addresses. */
@
