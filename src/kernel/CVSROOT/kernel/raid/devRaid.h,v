head     1.11;
branch   ;
access   ;
symbols  ds3100:1.11 sun3:1.11 sun4nw:1.10 symm:1.10 spur:1.10;
locks    ; strict;
comment  @ * @;


1.11
date     92.06.25.17.20.55;  author eklee;  state Exp;
branches ;
next     1.10;

1.10
date     90.10.12.14.01.20;  author eklee;  state Exp;
branches ;
next     1.9;

1.9
date     90.09.28.18.48.36;  author eklee;  state Exp;
branches ;
next     1.8;

1.8
date     90.09.19.14.54.15;  author eklee;  state Exp;
branches ;
next     1.7;

1.7
date     90.09.05.12.35.28;  author eklee;  state Exp;
branches ;
next     1.6;

1.6
date     90.08.29.13.52.57;  author eklee;  state Exp;
branches ;
next     1.5;

1.5
date     90.06.22.13.38.52;  author eklee;  state Exp;
branches ;
next     1.4;

1.4
date     90.05.15.18.51.43;  author eklee;  state Exp;
branches ;
next     1.3;

1.3
date     89.08.30.11.27.16;  author eklee;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.30.11.10.14;  author eklee;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.27.13.05.34;  author eklee;  state Exp;
branches ;
next     ;


desc
@@


1.11
log
@Fixed bug where data was sometimes trashed during writes with a failed disk.
Fixed up consistency problems while a disk is failed.
Redid logging.
@
text
@/* 
 * devRaid.h --
 *
 *	Declarations for RAID device drivers.
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/raid/devRaid.h,v 1.10 90/10/12 14:01:20 eklee Exp $ SPRITE (Berkeley)
 */

#ifndef _DEVRAID
#define _DEVRAID

#include "sprite.h"
#include "sync.h"
#include "fs.h"
#include "devBlockDevice.h"
#include "devRaidDisk.h"
#include "devRaidLog.h"

#ifndef MIN
#define MIN(a,b) ( (a) < (b) ? (a) : (b) )
#endif  MIN

#ifndef MAX
#define MAX(a,b) ( (a) > (b) ? (a) : (b) )
#endif  MAX

#define BITS_PER_ADDR			32
#define RAID_MAX_XFER_SIZE		(1<<30)
#ifdef TESTING
#define RAID_ROOT_CONFIG_FILE_NAME	"RAID"
#else
#define RAID_ROOT_CONFIG_FILE_NAME	"/ra/raid/RAID"
#endif TESTING

/*
 * Data structure each RAID device.
 *
 * RAID_INVALID	==> Array has not been configured.
 * RAID_ATTACHED==> Array attached but not configured.
 * RAID_VALID	==> Array is configured and ready to service requests.
 */
typedef enum { RAID_INVALID, RAID_ATTACHED, RAID_VALID } RaidState;

typedef struct Raid {
    RaidState		 state;		/* must be first field */
    Sync_Semaphore	 mutex;		/* must be second field */
    Sync_Condition	 waitExclusive;
    Sync_Condition	 waitNonExclusive;
    int			 numReqInSys; /* -1 => exclusive access */
    int			 numWaitExclusive; /* number waiting for */
					  /* exclusive access. */

    Fs_Device		*devicePtr; /* Device corresponding to this raid. */
    int			 numCol;
    int			 numRow;
    RaidDisk	      ***disk;	    /* 2D array of disks (column major) */

    RaidLog		 log;

    unsigned		 numSector;
    int		 	 numStripe;
    int			 dataSectorsPerStripe;
    int			 dataStripeUnitsPerDisk;
    int		 	 sectorsPerDisk;
    int		 	 bytesPerStripeUnit;
    int		 	 dataBytesPerStripe;

    int		 	 numDataCol;
    int		 	 logBytesPerSector;
    int		 	 bytesPerSector;
    int		 	 sectorsPerStripeUnit;
    int		 	 rowsPerGroup;
    int		 	 stripeUnitsPerDisk;
    int		 	 groupsPerArray;
    char		 parityConfig;
} Raid;

/*
 * RaidHandle.
 */
typedef struct RaidHandle {		/* Subclass of DevBlockDeviceHandle. */
    DevBlockDeviceHandle blockHandle;	/* Must be FIRST field. */
    Fs_Device		*devPtr;	/* Device corresponding to handle */
    Raid		*raidPtr;
} RaidHandle;

/*
 * RaidBlockRequest
 *
 * REQ_INVALID	==> the request is to a failed device
 * REQ_FAILED	==> an error code was returned by the device
 * REQ_READY	==> the request is ready to be issued
 * REQ_COMPLETED==> the request has successfully completed
 * REQ_PENDING 	==> the request has been issued and is waiting for completion
 */
typedef enum RaidBlockRequestState {	/* Subclass of DevBlockDeviceRequest */
    REQ_INVALID, REQ_FAILED, REQ_READY, REQ_COMPLETED, REQ_PENDING
} RaidBlockRequestState;

typedef struct RaidBlockRequest {
    DevBlockDeviceRequest devReq;
    RaidBlockRequestState state;
    ReturnStatus	  status;
    Raid		 *raidPtr;
    int			  col;
    int			  row;
    RaidDisk		 *diskPtr;
    int			  version;
} RaidBlockRequest;

/*
 * Raid Control structures for syncronizing/communicating with
 * interrupt routines.
 */
typedef struct RaidIOControl {
    Sync_Semaphore	 mutex;
    Raid		*raidPtr;
    int			 numIO;
    void	       (*doneProc)();
    ClientData		 clientData;
    ReturnStatus	 status;
    int			 amountTransferred;
    int			 numFailed;
    RaidBlockRequest	*failedReqPtr;
} RaidIOControl;

typedef struct RaidRequestControl {
    RaidBlockRequest	*reqPtr;
    int			 numReq;
    int			 numFailed;
    RaidBlockRequest	*failedReqPtr;
} RaidRequestControl;

typedef struct RaidStripeIOControl {
    Raid		*raidPtr;
    int			 operation;
    unsigned		 firstSector;
    unsigned		 nthSector;
    Address		 buffer;
    void	       (*doneProc)();
    ClientData		 clientData;
    void	       (*recoverProc)();
    int			 ctrlData;
    RaidRequestControl	*reqControlPtr;
    char		*parityBuf;
    char		*readBuf;
    int			 rangeOff;
    int			 rangeLen;
} RaidStripeIOControl;

typedef struct RaidReconstructionControl {
    Raid		*raidPtr;
    int			 col;
    int			 row;
    RaidDisk		*diskPtr;
    int			 stripeID;
    int			 numStripe;
    void	       (*doneProc)();
    ClientData		 clientData;
    int			 ctrlData;
    RaidRequestControl	*reqControlPtr;
    ReturnStatus	 status;
    char		*parityBuf;
    char		*readBuf;
} RaidReconstructionControl;

extern DevBlockDeviceHandle *DevRaidAttach _ARGS_((Fs_Device *devicePtr));

#endif _DEVRAID
@


1.10
log
@Added Raid_ prefix to external names and cleaned up warning messages.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/raid/RCS/devRaid.h,v 1.9 90/09/28 18:48:36 eklee Exp Locker: eklee $ SPRITE (Berkeley)
a26 1
#include "bitvec.h"
a60 1
    int			 numStripeLocked;
a66 3
    DevBlockDeviceHandle *logHandlePtr;
    Fs_Device		 logDev;
    int			 logDevOffset;
d79 1
@


1.9
log
@No change.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/raid/RCS/devRaid.h,v 1.8 90/09/19 14:54:15 eklee Exp Locker: eklee $ SPRITE (Berkeley)
d179 2
@


1.8
log
@Added prototypes.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/raid/RCS/devRaid.h,v 1.7 90/09/05 12:35:28 eklee Exp $ SPRITE (Berkeley)
@


1.7
log
@Logs to raw disk instead of file.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/raid/RCS/devRaid.h,v 1.6 90/08/29 13:52:57 eklee Exp Locker: eklee $ SPRITE (Berkeley)
@


1.6
log
@Added lockedVec.
Changed config dir from /sprite/admin/raid/ to /ra/raid/.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/raid/RCS/devRaid.h,v 1.5 90/06/22 13:38:52 eklee Exp Locker: eklee $ SPRITE (Berkeley)
d49 1
d52 1
a52 1
typedef enum { RAID_INVALID, RAID_VALID } RaidState;
d55 2
a56 2
    RaidState		 state;
    Sync_Semaphore	 mutex;
d60 2
d63 1
d65 1
a66 1
    int			 numCol;
d68 4
a71 1
    BitVec		 lockedVec;
d175 1
@


1.5
log
@Added support for logging RAID state changes.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/raid/RCS/devRaid.h,v 1.4 90/05/15 18:51:43 eklee Exp Locker: eklee $ SPRITE (Berkeley)
d27 1
d42 1
a42 1
#define RAID_ROOT_CONFIG_FILE_NAME	"/sprite/admin/raid/RAID"
d59 1
d64 1
@


1.4
log
@Moved Raid Disk related code to separate module (devRaidDisk.h).
@
text
@d15 1
a15 1
 * $Header: /user4/eklee/raidlib/RCS/devRaid.h,v 1.1 90/03/05 11:39:02 eklee Exp Locker: eklee $ SPRITE (Berkeley)
d26 1
d36 8
d47 2
a48 5
 * RAID_INVALID	==> array has not been configured
 * RAID_BUSY	==> the configuration of the array is currently being changed
 *			(used to ensure only one configuration process per
 *			 array is ever active)
 * RAID_VALID	==> array is configured
d50 1
a50 1
typedef enum { RAID_INVALID, RAID_BUSY, RAID_VALID, RAID_EXCLUSIVE } RaidState;
d57 1
a57 1
    int			 numReqInSys;
d62 1
d161 2
@


1.3
log
@*** empty log message ***
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/dev.new/RCS/devBlockDevice.h,v 1.1 89/05/01 15:27:18 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d25 1
a35 26
 * Data structure for each disk used by raid device.
 *
 * RAID_DISK_INVALID	==> could not attach device
 * RAID_DISK_READY	==> device operational
 * RAID_DISK_FAILED	==> device considered failed (a write error occured)
 * RAID_DISK_REPLACED	==> the device is nolonger a part of the array
 * RAID_DISK_RECONSTRUCT==> the device is currently being reonstructed
 *				(IO's to the reconstructed part of the device
 *				 are allowed)
 */
typedef enum {
    RAID_DISK_INVALID, RAID_DISK_READY, RAID_DISK_FAILED, RAID_DISK_REPLACED,
    RAID_DISK_RECONSTRUCT
} RaidDiskState;

typedef struct RaidDisk {
    Sync_Semaphore	  mutex;
    RaidDiskState	  state;
    unsigned		  numValidSector; /* Used during reconstruction. */
    int			  version;
    int			  useCount;
    Fs_Device	          device;
    DevBlockDeviceHandle *handlePtr;
} RaidDisk;

/*
d44 1
a44 1
typedef enum { RAID_INVALID, RAID_BUSY, RAID_VALID } RaidState;
d49 3
d60 1
d113 1
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*
d28 1
a28 1
#endif /*  MIN */
d32 1
a32 1
#endif /*  MAX */
d180 1
a180 1
#endif /* _DEVRAID */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* 
d28 1
a28 1
#endif  MIN
d32 1
a32 1
#endif  MAX
d36 8
d62 6
d106 6
d114 1
a114 1
    REQ_FAILED, REQ_READY, REQ_COMPLETED, REQ_PENDING
d180 1
a180 1
#endif _DEVRAID
@
