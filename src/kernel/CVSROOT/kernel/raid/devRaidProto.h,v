head     1.4;
branch   ;
access   ;
symbols  ds3100:1.4 sun3:1.4 sun4nw:1.3 symm:1.3 spur:1.3;
locks    ; strict;
comment  @ * @;


1.4
date     92.06.25.17.21.10;  author eklee;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.12.14.01.25;  author eklee;  state Exp;
branches ;
next     1.2;

1.2
date     90.09.28.18.51.49;  author eklee;  state Exp;
branches ;
next     1.1;

1.1
date     90.09.19.14.54.19;  author eklee;  state Exp;
branches ;
next     ;


desc
@Prototype file.
@


1.4
log
@Fixed bug where data was sometimes trashed during writes with a failed disk.
Fixed up consistency problems while a disk is failed.
Redid logging.
@
text
@#include "sprite.h"

/*
 * bxor.c
 */
extern void Xor2 _ARGS_((register int numBytes, char *sourcePtr, char *destPtr));

/*
 * debugMem.c
 */
extern void InitDebugMem _ARGS_((void));
extern void Free _ARGS_((char *memPtr));
extern char *Malloc _ARGS_((unsigned size));

/*
 * devDebug.c
 */
#ifdef _FS
extern DevBlockDeviceHandle *DevDebugAttach _ARGS_((Fs_Device *devicePtr));
#endif

/*
 * devPrint.c
 */
#ifdef _DEVRAID
extern void PrintHandle _ARGS_((DevBlockDeviceHandle *handlePtr));
extern void PrintDevice _ARGS_((Fs_Device *devicePtr));
extern void PrintRequest _ARGS_((DevBlockDeviceRequest *requestPtr));
extern void PrintRaid _ARGS_((Raid *raidPtr));
extern void PrintTime _ARGS_((void));
#endif

/*
 * devRaidDisk.c (Put here to prevent circular reference.)
 */
#ifdef _DEVRAID
extern void Raid_ReportDiskAttachError _ARGS_((int type, int unit));
extern RaidDisk *Raid_MakeDisk _ARGS_((int col, int row, int type, int unit, int version, int numSector));
extern void Raid_FreeDisk _ARGS_((RaidDisk *diskPtr));
extern void Raid_FailDisk _ARGS_((Raid *raidPtr, int col, int row, int version));
extern void Raid_ReplaceDisk _ARGS_((Raid *raidPtr, int col, int row, int version, int type, int unit, int numValidSector));
#endif

/*
 * devRaidHardInit.c
 */
#ifdef _DEVRAID
extern void Raid_InitiateHardInit _ARGS_((Raid *raidPtr, int startStripe, int numStripe, void (*doneProc)(), ClientData clientData, int ctrlData));
#endif

/*
 * devRaidIOC.c
 */
#ifdef _DEVRAID
extern void Raid_ReportRequestError _ARGS_((RaidBlockRequest *reqPtr));
extern void Raid_ReportHardInitFailure _ARGS_((int stripeID));
extern void Raid_ReportParityCheckFailure _ARGS_((int stripeID));
extern void Raid_ReportReconstructionFailure _ARGS_((int col, int row));
#endif

/*
 * devRaidInitiate.c
 */
#ifdef _DEVRAID
extern void Raid_InitiateIORequests _ARGS_((RaidRequestControl *reqControlPtr, void (*doneProc)(), ClientData clientData));
extern void Raid_InitiateStripeIOs _ARGS_((Raid *raidPtr, int operation, unsigned firstSector, unsigned nthSector, Address buffer, void (*doneProc)(), ClientData clientData, int ctrlData));
extern void Raid_InitiateSimpleStripeIOs _ARGS_((Raid *raidPtr, int operation, unsigned firstSector, unsigned nthSector, Address buffer, void (*doneProc)(), ClientData clientData, int ctrlData));
#endif

/*
 * devRaidLock.c
 */
#ifdef _DEVRAID
extern void Raid_InitStripeLocks _ARGS_((void));
extern void Raid_SLockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void Raid_CheckPoint _ARGS_((Raid *raidPtr));
extern void Raid_XLockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void Raid_SUnlockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void Raid_XUnlockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void Raid_Disable _ARGS_((Raid *raidPtr));
extern void Raid_Enable _ARGS_((Raid *raidPtr));
extern void Raid_Lock _ARGS_((Raid *raidPtr));
extern void Raid_Unlock _ARGS_((Raid *raidPtr));
extern void Raid_BeginUse _ARGS_((Raid *raidPtr));
extern void Raid_EndUse _ARGS_((Raid *raidPtr));
extern void InitSema _ARGS_((Sema *semaPtr, char *name, int val));
extern void DownSema _ARGS_((Sema *semaPtr));
extern void UpSema _ARGS_((Sema *semaPtr));
#endif

/*
 * devRaidLog.c
 */
#ifdef _DEVRAID
extern ReturnStatus Raid_AttachLogDev _ARGS_((Raid *raidPtr, int type, int unit, int offset));
extern void Raid_InitLog _ARGS_((Raid *raidPtr));
extern void Raid_EnableLog _ARGS_((Raid *raidPtr));
extern void Raid_DisableLog _ARGS_((Raid *raidPtr));
extern ReturnStatus Raid_ApplyLog _ARGS_((Raid *raidPtr));
extern ReturnStatus Raid_SaveDisk _ARGS_((Raid *raidPtr, int col, int row, int type, int unit, int version, int numValidSector));
extern ReturnStatus Raid_SaveParam _ARGS_((Raid *raidPtr));
extern ReturnStatus Raid_SaveLog _ARGS_((Raid *raidPtr));
extern ReturnStatus Raid_SaveState _ARGS_((Raid *raidPtr));
extern ReturnStatus Raid_Configure _ARGS_((Raid *raidPtr, char *charBuf));
extern ReturnStatus Raid_RestoreState _ARGS_((Raid *raidPtr, int type, int unit, int offset));
extern void Raid_MasterFlushLog _ARGS_((Raid *raidPtr));
extern void Raid_LogStripe _ARGS_((Raid *raidPtr, int stripeID));
extern void Raid_UnlogStripe _ARGS_((Raid *raidPtr, int stripeID));
#endif

/*
 * devRaidMap.c
 */
#ifdef _DEVRAID
extern void Raid_MapPhysicalToStripeID _ARGS_((Raid *raidPtr, int col, int row, unsigned sector, int *outStripeIDPtr));
extern void Raid_MapParity _ARGS_((Raid *raidPtr, unsigned sectorNum, int *outColPtr, int *outRowPtr, unsigned *sectorNumPtr));
extern void Raid_MapSector _ARGS_((Raid *raidPtr, unsigned sectorNum, int *outColPtr, int *outRowPtr, unsigned *sectorNumPtr));
#endif

/*
 * devRaidParityCheck.c
 */
#ifdef _DEVRAID
extern void Raid_InitiateParityCheck _ARGS_((Raid *raidPtr, int startStripe, int numStripe, void (*doneProc)(), ClientData clientData, int ctrlData));
#endif

/*
 * devRaidReconstruct.c
 */
#ifdef _DEVRAID
extern void Raid_InitiateReconstruction _ARGS_((Raid *raidPtr, int col, int row, int version, int numSector, int uSec, void (*doneProc)(), ClientData clientData, int ctrlData));
#endif

/*
 * strUtil.c
 */
extern char *ScanLine _ARGS_((char **ps1, char *s2));
extern char *ScanWord _ARGS_((char **ps1, char *s2));
@


1.3
log
@Added Raid_ prefix to external names and cleaned up warning messages.
@
text
@d80 2
d95 1
d100 1
a100 1
extern ReturnStatus Raid_SaveDiskState _ARGS_((Raid *raidPtr, int col, int row, int type, int unit, int version, int numValidSector));
d105 1
a105 1
extern ReturnStatus Raid_RestoreState _ARGS_((Raid *raidPtr));
d108 1
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 12
#include "cfuncproto.h"
#include "bitvec.h"
#include "devRaidLock.h"
#include "devRaidLog.h"
#include "devRaid.h"

/*
 * bitvec.c
 */
extern BitVec MakeBitVec _ARGS_((int n));
extern int ClearBitVec _ARGS_((BitVec bitVec, int n));
extern int GetBitIndex _ARGS_((BitVec bitVec, int i, int n));
d18 1
d20 1
d25 18
a42 19
extern int PrintHandle _ARGS_((DevBlockDeviceHandle *handlePtr));
extern int PrintDevice _ARGS_((Fs_Device *devicePtr));
extern int PrintRequest _ARGS_((DevBlockDeviceRequest *requestPtr));
extern int PrintRaid _ARGS_((Raid *raidPtr));
extern int PrintTime _ARGS_((void));

/*
 * devRaid.c
 */
extern DevBlockDeviceHandle *DevRaidAttach _ARGS_((Fs_Device *devicePtr));

/*
 * devRaidDisk.c
 */
extern void ReportRaidDiskAttachError _ARGS_((int type, int unit));
extern RaidDisk *MakeRaidDisk _ARGS_((int col, int row, int type, int unit, int version, int numSector));
extern void FreeRaidDisk _ARGS_((RaidDisk *diskPtr));
extern void FailRaidDisk _ARGS_((Raid *raidPtr, int col, int row, int version));
extern void ReplaceRaidDisk _ARGS_((Raid *raidPtr, int col, int row, int version, int type, int unit, int numValidSector));
d47 3
a49 1
extern void InitiateHardInit _ARGS_((Raid *raidPtr, int startStripe, int numStripe, void (*doneProc)(), ClientData clientData, int ctrlData));
d54 6
a59 4
extern void ReportRequestError _ARGS_((RaidBlockRequest *reqPtr));
extern void ReportHardInitFailure _ARGS_((int stripeID));
extern void ReportParityCheckFailure _ARGS_((int stripeID));
extern void ReportReconstructionFailure _ARGS_((int col, int row));
d64 5
a68 3
extern void InitiateIORequests _ARGS_((RaidRequestControl *reqControlPtr, void (*doneProc)(), ClientData clientData));
extern void InitiateStripeIOs _ARGS_((Raid *raidPtr, int operation, unsigned firstSector, unsigned nthSector, Address buffer, void (*doneProc)(), ClientData clientData, int ctrlData));
extern void InitiateSimpleStripeIOs _ARGS_((Raid *raidPtr, int operation, unsigned firstSector, unsigned nthSector, Address buffer, void (*doneProc)(), ClientData clientData, int ctrlData));
d73 11
a83 10
extern void InitStripeLocks _ARGS_((void));
extern void SLockStripe _ARGS_((Raid *raidPtr, int stripe));
extern int CheckPointRaid _ARGS_((Raid *raidPtr));
extern void XLockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void SUnlockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void XUnlockStripe _ARGS_((Raid *raidPtr, int stripe));
extern void LockRaid _ARGS_((Raid *raidPtr));
extern void UnlockRaid _ARGS_((Raid *raidPtr));
extern void BeginRaidUse _ARGS_((Raid *raidPtr));
extern void EndRaidUse _ARGS_((Raid *raidPtr));
d87 1
d92 14
a105 12
extern void InitRaidLog _ARGS_((Raid *raidPtr));
extern void EnableLog _ARGS_((Raid *raidPtr));
extern void DisableLog _ARGS_((Raid *raidPtr));
extern ReturnStatus ApplyRaidLog _ARGS_((Raid *raidPtr));
extern ReturnStatus SaveDiskState _ARGS_((Raid *raidPtr, int col, int row, int type, int unit, int version, int numValidSector));
extern ReturnStatus SaveRaidParam _ARGS_((Raid *raidPtr));
extern ReturnStatus SaveRaidLog _ARGS_((Raid *raidPtr));
extern ReturnStatus SaveRaidState _ARGS_((Raid *raidPtr));
extern ReturnStatus RaidConfigure _ARGS_((Raid *raidPtr, char *charBuf));
extern ReturnStatus RestoreRaidState _ARGS_((Raid *raidPtr));
extern void MasterFlushLog _ARGS_((Raid *raidPtr));
extern void LogStripe _ARGS_((Raid *raidPtr, int stripeID));
d110 5
a114 3
extern void MapPhysicalToStripeID _ARGS_((Raid *raidPtr, int col, int row, unsigned sector, int *outStripeIDPtr));
extern void MapParity _ARGS_((Raid *raidPtr, unsigned sectorNum, int *outColPtr, int *outRowPtr, unsigned *sectorNumPtr));
extern void MapSector _ARGS_((Raid *raidPtr, unsigned sectorNum, int *outColPtr, int *outRowPtr, unsigned *sectorNumPtr));
d119 3
a121 1
extern void InitiateParityCheck _ARGS_((Raid *raidPtr, int startStripe, int numStripe, void (*doneProc)(), ClientData clientData, int ctrlData));
d126 3
a128 19
extern void InitiateReconstruction _ARGS_((Raid *raidPtr, int col, int row, int version, int numSector, int uSec, void (*doneProc)(), ClientData clientData, int ctrlData));

/*
 * devRaidUtil.c
 */
extern DevBlockDeviceRequest *MakeBlockDeviceRequest _ARGS_((Raid *raidPtr, int operation, unsigned diskSector, int numSectorsToTransfer, Address buffer, void (*doneProc)(), ClientData clientData, int ctrlData));
extern void FreeBlockDeviceRequest _ARGS_((DevBlockDeviceRequest *requestPtr));
extern RaidIOControl *MakeIOControl _ARGS_((void (*doneProc)(), ClientData clientData));
extern void FreeIOControl _ARGS_((RaidIOControl *IOControlPtr));
extern RaidRequestControl *MakeRequestControl _ARGS_((Raid *raidPtr));
extern void FreeRequestControl _ARGS_((RaidRequestControl *reqControlPtr));
extern RaidStripeIOControl *MakeStripeIOControl _ARGS_((Raid *raidPtr, int operation, unsigned firstSector, unsigned nthSector, Address buffer, void (*doneProc)(), ClientData clientData, int ctrlData));
extern void FreeStripeIOControl _ARGS_((RaidStripeIOControl *stripeIOControlPtr));
extern RaidReconstructionControl *MakeReconstructionControl _ARGS_((Raid *raidPtr, int col, int row, RaidDisk *diskPtr, void (*doneProc)(), ClientData clientData, int ctrlData));
extern void FreeReconstructionControl _ARGS_((RaidReconstructionControl *reconstructionControlPtr));
extern void RangeRestrict _ARGS_((int start, int len, int rangeOffset, int rangeLen, int fieldLen, int *newStart, int *newLen));
extern void XorRaidRangeRequests _ARGS_((RaidRequestControl *reqControlPtr, Raid *raidPtr, char *destBuf, int rangeOffset, int rangeLen));
extern void AddRaidParityRangeRequest _ARGS_((RaidRequestControl *reqControlPtr, Raid *raidPtr, int operation, unsigned sector, Address buffer, int ctrlData, int rangeOffset, int rangeLen));
extern void AddRaidDataRangeRequests _ARGS_((RaidRequestControl *reqControlPtr, Raid *raidPtr, int operation, unsigned firstSector, unsigned nthSector, Address buffer, int ctrlData, int rangeOffset, int rangeLen));
@


1.1
log
@Added prototypes.
@
text
@d122 1
a122 1
extern void InitiateReconstruction _ARGS_((Raid *raidPtr, int col, int row, int version, int numSector, int uSec, int ctrlData));
@
