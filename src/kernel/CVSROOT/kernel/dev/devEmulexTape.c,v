head     9.1;
branch   ;
access   ;
symbols  ds3100:9.1 sun3:9.1 sun4nw:9.1 symm:9.1 spur:9.1 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.1
date     91.08.19.13.47.25;  author jhh;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.58.53;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.05.24.07.50.39;  author rab;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.23.10.26.59;  author mendel;  state Exp;
branches ;
next     8.2;

8.2
date     88.12.05.10.47.09;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.21.09.04.22;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.16.15.19.52;  author brent;  state Exp;
branches ;
next     ;


desc
@Code to support the Emulex controller found in Sun shoeboxes
@


9.1
log
@new format for DevScsiSendCmdSync
@
text
@/* 
 * devEmulexTape.c --
 *
 *      Procedures that set up command blocks and process sense
 *	data for Emulex tape drives.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devEmulexTape.c,v 8.4 89/05/24 07:50:39 rab Exp $ SPRITE (Berkeley)";
#endif not lint


#include <sprite.h>
#include <dev.h>
#include <devInt.h>
#include <sys/scsi.h>
#include <scsiDevice.h>
#include <scsiHBA.h>
#include <scsiTape.h>
#include <emulexTape.h>

/*
 * Sense data returned from the Emulex tape controller in the shoeboxes.
 */
#define EMULEX_SENSE_BYTES	11
typedef struct {
    ScsiClass7Sense	extSense;	/* 8 Bytes */
    unsigned char pad1		:1;
    unsigned char error		:7;	/* Regular SCSI error code */
    unsigned char highRetries;		/* High byte of retry count */
    unsigned char lowRetries;		/* Low byte of retry count */
} EmulexTapeSense;			/* Known to be 11 Bytes big */


/*
 * Definitions for the mode select command.  This is specific to the
 * Emulex controller.  The mode select command is used to change from
 * QIC_24 format (one standard, not the one we use) to QIC_02 format
 * (the more common, older, standard that we do use).
 */

typedef struct EmulexModeSelBlock {
    unsigned char density;		/* Density code */
    unsigned char highCount;		/* Count of blocks at this density */
    unsigned char midCount;		/*	middle byte of above */
    unsigned char lowCount;		/*	low byte */
    unsigned char pad1;			/* Reserved */
    unsigned char highLength;		/* Length of the blocks */
    unsigned char midLength;		/*	middle byte of above */
    unsigned char lowLength;		/*	low byte */
} EmulexModeSelBlock;

/*
 * Density values for the mode select block.
 */
#define EMULEX_QIC_24	0x05
#define EMULEX_QIC_02	0x84

typedef struct EmulexModeSelParams {
    ScsiTapeModeSelectHdr	header;
    EmulexModeSelBlock	block;
    unsigned char		:5;	/* Reserved */
    unsigned char disableErase	:1;	/* disable erase ahead */
    unsigned char autoLoadInhibit :1;
    unsigned char softErrorCount  :1;
} EmulexModeSelParams;


/*
 *----------------------------------------------------------------------
 *
 * DevEmulexAttach --
 *
 *	Verify and initialize the attached scsi device as a emulex tape..
 *
 * Results:
 *	SUCCESS if the device is a working emulex tape drive.
 *	DEV_NO_DEVICE if the device is not a emulex tape drive.
 *	A Sprite return status if the device is a broken emulex tape drive.
 *
 * Side effects:
 *	Sets the type and call-back procedures.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
DevEmulexAttach(devicePtr, devPtr, tapePtr)
    Fs_Device	*devicePtr;	/* Fs_Device being attached. */
    ScsiDevice	*devPtr;	/* SCSI device handle for drive. */
    ScsiTape	*tapePtr;	/* Tape drive state to be filled in. */
{
    ScsiCmd		senseCmd;
    ReturnStatus	status;
    static char		senseData[SCSI_MAX_SENSE_LEN];
    int			length;
    /*
     * Since we don't know about the inquiry data (if any) returned by 
     * the Emulex tape, check using the size of the SENSE data returned.
     */
    DevScsiSenseCmd(devPtr, SCSI_MAX_SENSE_LEN, senseData, &senseCmd);
    status = DevScsiSendCmdSync(devPtr, &senseCmd, &length);
    if ( (status != SUCCESS) || 
         (senseCmd.statusByte != 0) ||
	 ((senseCmd.senseLen != EMULEX_SENSE_BYTES) &&
	  (senseCmd.senseLen != SCSI_MAX_SENSE_LEN) &&
	  (senseCmd.senseLen != 14)) ){
	return DEV_NO_DEVICE;
    }
    /*
     * Take all the defaults for the tapePtr.
     */
    tapePtr->name = "Emulex Tape";
    return SUCCESS;
}
@


9.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devEmulexTape.c,v 8.4 89/05/24 07:50:39 rab Exp Locker: douglis $ SPRITE (Berkeley)";
d23 8
a30 8
#include "sprite.h"
#include "dev.h"
#include "devInt.h"
#include "scsi.h"
#include "scsiDevice.h"
#include "scsiHBA.h"
#include "scsiTape.h"
#include "emulexTape.h"
d103 1
a103 4
    unsigned char statusByte;
    ScsiCmd	senseCmd;
    char	senseData[SCSI_MAX_SENSE_LEN];
    int		length;
d105 2
d112 1
a112 2
    status = DevScsiSendCmdSync(devPtr, &senseCmd, &statusByte, &length,
			      (int *) NIL, (char *) NIL);
d114 4
a117 4
         (statusByte != 0) ||
	 ((length != EMULEX_SENSE_BYTES) &&
	  (length != SCSI_MAX_SENSE_LEN) &&
	  (length != 14)) ){
@


8.4
log
@Changes to allow optimization.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devEmulexTape.c,v 8.3 89/05/23 10:26:59 mendel Exp Locker: rab $ SPRITE (Berkeley)";
@


8.3
log
@Converted to use new SCSI Tape interface.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev.new/sun3.md/RCS/devEmulexTape.c,v 8.2 88/12/05 10:47:09 brent Exp Locker: mendel $ SPRITE (Berkeley)";
@


8.2
log
@Working version of Emulex support code
@
text
@d2 1
a2 1
 * devSCSIEmulex.c --
d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSIEmulex.c,v 8.1 88/11/21 09:04:22 brent Exp Locker: brent $ SPRITE (Berkeley)";
d26 5
a30 3
#include "devSCSI.h"
#include "devSCSITape.h"
#include "devSCSIEmulex.h"
a31 5
void EmulexSetup();
void EmulexStatus();
ReturnStatus EmulexError();


d33 1
a33 13
 *----------------------------------------------------------------------
 *
 * DevEmulexInit --
 *
 *	Initialize the DevSCSITape state for a Emulex drive.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Sets the type and call-back procedures.
 *
 *----------------------------------------------------------------------
d35 9
a43 10
void
DevEmulexInit(tapePtr)
    DevSCSITape	*tapePtr;	/* Tape drive state */
{
    tapePtr->type = SCSI_EMULEX;
    tapePtr->blockSize = DEV_EMULEX_BLOCK_SIZE;
    tapePtr->setupProc = EmulexSetup;
    tapePtr->statusProc = EmulexStatus;
    tapePtr->errorProc = EmulexError;
}
d46 4
a49 16
 *----------------------------------------------------------------------
 *
 * EmulexSetup --
 *
 *	This customizes the control block and sets the count and dmaCount
 *	to be correct for Emulex based tape drives.
 *
 * Results:
 *	Various reserved bits may be set in the control block.
 *	count is set for the count field in the command block.
 *	dmaCount is set for the dma transfer count.
 *
 * Side effects:
 *	The tapePtr->state may be modified regarding EOF and RETENSION.
 *
 *----------------------------------------------------------------------
d51 12
a62 64
void
EmulexSetup(tapePtr, commandPtr, controlBlockPtr, countPtr, dmaCountPtr)
    DevSCSITape	*tapePtr;	/* Tape drive state */
    int *commandPtr;		/* In/Out tape command */
    DevSCSITapeControlBlock *controlBlockPtr;	/* CMD Block to set up */
    int *countPtr;		/* In - Transfer count, blocks or bytes!
				 * Out - The proper byte count for CMD block */
    int *dmaCountPtr;		/* In - Transfer count, blocks or bytes!
				 * Out - The proper DMA byte count for caller */
{
    switch (*commandPtr) {
	case SCSI_TEST_UNIT_READY:
	    break;
	case SCSI_REWIND:
	    /*
	     * Can do tape retension by using SCSI_START_STOP
	     * and setting count to 3 (wild but true)
	     */
	    if (tapePtr->state & SCSI_TAPE_RETENSION) {
		tapePtr->state &= ~SCSI_TAPE_RETENSION;
		*commandPtr = SCSI_START_STOP;
		*dmaCountPtr = 0;
		*countPtr = 3;
	    }
	    tapePtr->state &= ~SCSI_TAPE_AT_EOF;
	    break;
	case SCSI_REQUEST_SENSE:
	    *dmaCountPtr = *countPtr = sizeof(DevEmulexTapeSense);
	    break;
	case SCSI_MODE_SELECT:
	    break;
	case SCSI_READ:
	case SCSI_WRITE:
	    controlBlockPtr->code = 1;
	    *countPtr /= tapePtr->blockSize;
	    break;
	case SCSI_WRITE_EOF:
	    *countPtr = 1;
	    *dmaCountPtr = 0;
	    break;
	case SCSI_SPACE:
	case SCSI_SPACE_FILES:
	    *dmaCountPtr = 0;
	    controlBlockPtr->code = 1;
	    *commandPtr = SCSI_SPACE;
	    tapePtr->state &= ~SCSI_TAPE_AT_EOF;
	    break;
	case SCSI_SPACE_BLOCKS:
	    *dmaCountPtr = 0;
	    controlBlockPtr->code = 0;
	    *commandPtr = SCSI_SPACE;
	    break;
	case SCSI_SPACE_EOT:
	    *dmaCountPtr = 0;
	    controlBlockPtr->code = 3;
	    *commandPtr = SCSI_SPACE;
	    tapePtr->state |= SCSI_TAPE_AT_EOF;
	    break;
	case SCSI_ERASE_TAPE:
	    controlBlockPtr->code = 1;
	    break;
    }
}

d64 1
a64 14
 *----------------------------------------------------------------------
 *
 * EmulexStatus --
 *
 *	Support for the IOC_TAPE_STATUS I/O control.  This generates
 *	a status error word from sense data.
 *
 * Results:
 *	An error code.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
d66 2
a67 14
void
EmulexStatus(devPtr, statusPtr)
    DevSCSIDevice *devPtr;
    Dev_TapeStatus *statusPtr;
{
    /*
     * Return byte2 from the class 7 extended sense plus
     * the standard SCSI error byte.  Byte2 of Extended Sense
     * has a fileMark bit, endOfMedia bit, badBlockLen bit, a reserved bit,
     * and a 4 bit sense key.
     */
    DevEmulexTapeSense *emulexSensePtr =
	    (DevEmulexTapeSense *)devPtr->scsiPtr->senseBuffer;
    unsigned char *senseBytes = (unsigned char *)devPtr->scsiPtr->senseBuffer;
d69 8
a76 2
    statusPtr->type = DEV_TAPE_EMULEX;
    statusPtr->errorReg = senseBytes[2] | (emulexSensePtr->error << 24);
a77 1
}
d82 1
a82 1
 * EmulexError --
d84 1
a84 1
 *	Handle error conditions from a Emulex based tape drive.
d87 3
a89 1
 *	An error code.
d92 1
a92 1
 *	None.
d96 1
d98 4
a101 3
EmulexError(devPtr, sensePtr)
    DevSCSIDevice *devPtr;
    DevSCSISense *sensePtr;
d103 18
a120 67
    register ReturnStatus status = SUCCESS;
    DevSCSITape *tapePtr = (DevSCSITape *)devPtr->data;
    register DevEmulexTapeSense *emulexSensePtr =
	    (DevEmulexTapeSense *)sensePtr;

/*
 * One way to do this is look at the extended sense "key", however
 * this isn't fully understood yet.  Instead, the Emulex has its own
 * special bits, plus it returns a regular SCSI error code.
 */
#ifdef notdef
    switch (emulexSensePtr->extSense.key) {
	case SCSI_NO_SENSE:
	    break;
	case SCSI_RECOVERABLE:
	    /*
	     * The drive recovered from an error.
	     */
	    printf("Warning: SCSI-%d drive %d, recoverable error\n",
			devPtr->scsiPtr->number, devPtr->slaveID);
	    break;
	case SCSI_NOT_READY:
	    status = DEV_OFFLINE;
	    break;
	case SCSI_ILLEGAL_REQUEST:
	    /*
	     * Probably a programming error.
	     */
	    printf("Warning: SCSI-%d drive %d, illegal request %d\n",
			devPtr->scsiPtr->number, devPtr->slaveID,
			command);
	    status = DEV_INVALID_ARG;
	    break;
	case SCSI_MEDIA_ERROR:
	case SCSI_HARDWARE_ERROR:
	    printf("Warning: SCSI-%d drive %d, hard class7 error %d\n",
			devPtr->scsiPtr->number, devPtr->slaveID,
			extSensePtr->key);
	    status = DEV_HARD_ERROR;
	    break;
	case SCSI_WRITE_PROTECT:
	    if (command == SCSI_WRITE ||
		command == SCSI_WRITE_EOF ||
		command == SCSI_ERASE_TAPE) {
		status = FS_NO_ACCESS;
	    }
	    break;
	case SCSI_DIAGNOSTIC:
	    printf("Warning: SCSI-%d drive %d, \"blank check\"\n",
		devPtr->scsiPtr->number, devPtr->slaveID);
	    printf("\tInfo bytes 0x%x 0x%x 0x%x 0x%x\n",
		extSensePtr->info1 & 0xff,
		extSensePtr->info2 & 0xff,
		extSensePtr->info3 & 0xff,
		extSensePtr->info4 & 0xff);
	    break;
	case SCSI_MEDIA_CHANGE:
	case SCSI_VENDOR:
	case SCSI_POWER_UP_FAILURE:
	case SCSI_ABORT_KEY:
	case SCSI_EQUAL:
	case SCSI_OVERFLOW:
	    printf("Warning: SCSI-%d drive %d, unsupported class7 error %d\n",
		devPtr->scsiPtr->number, devPtr->slaveID,
		extSensePtr->key);
	    status = DEV_HARD_ERROR;
	    break;
d122 5
a126 56
#endif notdef
    switch (emulexSensePtr->error) {
	case SCSI_NOT_READY:
	    status = DEV_OFFLINE;
	    break;
	case SCSI_NOT_LOADED:
	    status = DEV_NO_MEDIA;
	    break;
	case SCSI_INSUF_CAPACITY:
	    printf("Warning: Emulex: Insufficient tape capacity");
	    /* fall thru */
	case SCSI_END_OF_MEDIA:
	    status = DEV_END_OF_TAPE;
	    break;
	case SCSI_HARD_DATA_ERROR:
	    status = DEV_HARD_ERROR;
	    break;
	case SCSI_WRITE_PROTECT: {
	    register int command = devPtr->scsiPtr->command;
	    if (command == SCSI_WRITE ||
		command == SCSI_ERASE_TAPE ||
		command == SCSI_WRITE_EOF) {
		status = FS_NO_ACCESS;
	    }
	    break;
	}
	case SCSI_CORRECTABLE_ERROR:
	    printf("Warning: SCSI-%d drive %d, correctable error",
		    devPtr->scsiPtr->number, devPtr->targetID);
	    break;
	case SCSI_FILE_MARK:
	    if (devPtr->scsiPtr->command == SCSI_READ) {
		/*
		 * Hit the file mark after reading good data.
		 * Setting this bit causes the next read to
		 * return zero bytes.
		 */
		tapePtr->state |= SCSI_TAPE_AT_EOF;
	    }
	    break;
	case SCSI_INVALID_COMMAND:
	    printf("Warning: SCSI-%d drive %d, invalid command 0x%x",
		    devPtr->scsiPtr->number, devPtr->targetID,
		    devPtr->scsiPtr->command);
	    break;

	case SCSI_UNIT_ATTENTION:
	    /*
	     * The drive has been reset since the last command.
	     * This status will be handled by the retry in
	     * the tape open routine.
	     */
	    status = DEV_NO_MEDIA;
	    break;
    }
    return(status);
@


8.1
log
@Stable version after code reorganization
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSIEmulex.c,v 8.0 88/11/16 15:19:52 brent Exp $ SPRITE (Berkeley)";
d55 1
d113 1
a113 1
	    *dmaCountPtr = *countPtr * DEV_BYTES_PER_SECTOR;
@


8.0
log
@New file for SCSI clean up
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSIEmulex.c,v 8.0 88/11/16 14:42:48 brent Exp $ SPRITE (Berkeley)";
a28 1
#include "dev/tape.h"
d58 1
a58 1

a162 3
    unsigned char *senseBytes;

    statusPtr->type = DEV_TAPE_EMULEX;
d257 1
a257 1
	case SCSI_ABORT:
d267 1
a267 1
    switch (emuluxSensePtr->error) {
d283 2
a284 1
	case SCSI_WRITE_PROTECT:
d291 1
d294 1
a294 1
		    devPtr->scsiPtr->number, devPtr->slaveID);
d297 1
a297 1
	    if (command == SCSI_READ) {
d308 2
a309 2
		    devPtr->scsiPtr->number, devPtr->slaveID,
		    command);
@
