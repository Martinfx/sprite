head     9.5;
branch   ;
access   ;
symbols  ds3100:9.5 sun3:9.5 sun4nw:9.5 symm:9.5 spur:9.5 Summer89:9.0 newlib:8.0 Summer88:6.0 sbc:5.3;
locks    ; strict;
comment  @ * @;


9.5
date     91.10.18.01.21.43;  author dlong;  state Exp;
branches ;
next     9.4;

9.4
date     90.12.07.12.52.19;  author mgbaker;  state Exp;
branches ;
next     9.3;

9.3
date     90.11.27.12.55.31;  author mgbaker;  state Exp;
branches ;
next     9.2;

9.2
date     90.09.11.13.56.06;  author rab;  state Exp;
branches ;
next     9.1;

9.1
date     90.09.11.12.43.03;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.00.22;  author douglis;  state Stable;
branches ;
next     8.5;

8.5
date     89.08.01.18.03.52;  author mgbaker;  state Exp;
branches ;
next     8.4;

8.4
date     89.07.14.17.36.42;  author ouster;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.24.07.50.56;  author rab;  state Exp;
branches ;
next     8.2;

8.2
date     89.05.23.10.25.32;  author mendel;  state Exp;
branches ;
next     8.1;

8.1
date     88.12.12.14.26.06;  author nelson;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.11.14;  author douglis;  state Stable;
branches ;
next     6.5;

6.5
date     88.10.30.21.24.50;  author jhh;  state Exp;
branches ;
next     6.4;

6.4
date     88.10.07.11.03.06;  author mendel;  state Exp;
branches ;
next     6.3;

6.3
date     88.09.07.11.28.29;  author nelson;  state Exp;
branches ;
next     6.2;

6.2
date     88.09.06.14.15.34;  author nelson;  state Exp;
branches ;
next     6.1;

6.1
date     88.09.05.12.36.03;  author brent;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.29.05;  author douglis;  state Stable;
branches ;
next     5.3;

5.3
date     88.05.05.17.49.44;  author nelson;  state Exp;
branches ;
next     5.2;

5.2
date     88.05.04.17.05.09;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     87.12.12.16.33.48;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.39.46;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.5
log
@sun4c/sun4c2 merge
@
text
@/*
 * devInit.c --
 *
 *	This has a weak form of autoconfiguration for mapping in various
 *	devices and calling their initialization routines.  The file
 *	devConfig.c has the tables which list devices, their physical
 *	addresses, and their initialization routines.
 *
 *	The Sun Memory Managment setup is explained in the proprietary
 *	architecture documents, and also in the manual entitled
 *	"Writing Device Drivers for the Sun Workstation"
 *
 *
 * Copyright 1985, 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 9.4 90/12/07 12:52:19 mgbaker Exp $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "stdio.h"
#include "devInt.h"
#include "devMultibus.h"
#include "vm.h"
#include "vmMach.h"
#include "dbg.h"
#include "string.h"
#include "ttyAttach.h"
#ifdef sun4c
#include "machMon.h"
#endif

int devConfigDebug = FALSE;

/*
 * ----------------------------------------------------------------------------
 *
 * Dev_Init --
 *
 *	Device initialization.
 *
 * Results:
 *	None
 *
 * Side effects:
 *	Set up interrupt routine for built-in UART interrupts.
 *
 * ----------------------------------------------------------------------------
 */

void
Dev_Init()
{
    DevTtyInit();
}


/*
 *----------------------------------------------------------------------
 *
 * Dev_Config --
 *
 *	Call the initialization routines for various controllers and
 *	devices based on configuration tables.  This should be called
 *	after the regular memory allocater is set up so the drivers
 *	can use it to configure themselves.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Call the controller and device initialization routines.
 *
 *----------------------------------------------------------------------
 */
void
Dev_Config()
{
    register int index;
    int memoryType = 0;		/* This is ultimatly for the page table
				 * type field used to map in the device */
    Boolean mapItIn = FALSE;	/* If TRUE we need to map the device into
				 * kernel virtual space */

    if (devConfigDebug) {
	printf("Dev_Config calling debugger:");
	DBG_CALL;
    }
    for (index = 0 ; index < devNumConfigCntrlrs ; index++) {
	register DevConfigController *cntrlrPtr;
	cntrlrPtr = &devCntrlr[index];
	/*
	 * The following makes sure that the physical address for the
	 * controller is correct, and then maps that into the kernel's virtual
	 * address space (if it hasn't already been done by the Boot PROM).
	 * There are two things happening here.  First, each device has
	 * its own physical address on its own kind of bus - A device may
	 * think it's in Multibus Memory, or VME bus 16 bit data 16 bit address,
	 * or some other permutation.  For Multibus Memory devices, like
	 * the SCSI controller, Multibus memory is the low megabyte of
	 * the physical addresses, with Multibus I/O being the last 64K
	 * of this first Meg.  Furthermore, the Boot PROM maps this low
	 * meg of physical memory into the 16'th Meg of the kernel's virtual
	 * address space.  All that needs to be done is imitate this mapping
	 * by adding the MULTIBUS BASE to the controller address and the
	 * controller can forge ahead.
	 * It's more complicated for VME devices.  There are six subsets
	 * of address/data spaces supported by the VME bus, and each one
	 * belongs to a special range of physical addresses and has a
	 * corresponding "page type" which goes into the page table.
	 * Furthermore, we arn't depending on the boot PROM and so once
	 * the correct physical address is gen'ed up we need to map it
	 * into a kernel virtual address that the device driver can use.
	 */
#ifdef sun4c
	if (Mach_MonSearchProm(cntrlrPtr->dev_name, "address",
		(char *)cntrlrPtr->address,
		sizeof cntrlrPtr->address) == sizeof cntrlrPtr->address) {
	    mapItIn = FALSE;
	} else {
	    MachDevReg reg;
	    if (Mach_MonSearchProm(cntrlrPtr->dev_name, "reg",
		    (char *)&reg, sizeof reg) == sizeof reg) {
		mapItIn = TRUE;
		memoryType = 1;
		if (romVectorPtr->v_romvec_version < 2
			&& reg.addr >= (Address)SBUS_BASE
			&& reg.bustype == 1) {		/* old style */
		    cntrlrPtr->address = (int)reg.addr;
		} else {				/* new style */
		    cntrlrPtr->address = (int)reg.addr + SBUS_BASE +
			   reg.bustype * SBUS_SIZE;
		}
	    }
	}
#else
	if (Mach_GetMachineType() == SYS_SUN_2_120 &&
	    cntrlrPtr->space != DEV_MULTIBUS &&
	    cntrlrPtr->space != DEV_MULTIBUS_IO) {
	    /*
	     * Mapping VME addresses into a multibus based kernel
	     * messes things up.
	     */
	    continue;
	}
	switch(cntrlrPtr->space) {
	    case DEV_MULTIBUS:
	    case DEV_MULTIBUS_IO:
		/*
		 * Things are already mapped in by the Boot PROM.
		 * We just relocate the address into the high meg.
		 */
		if (Mach_GetMachineType() != SYS_SUN_2_120) {
		    continue;
		}
		mapItIn = FALSE;
		cntrlrPtr->address += DEV_MULTIBUS_BASE;
		break;
	    /*
	     * We have to relocate the controller address to the
	     * true VME PHYSICAL address that the Sun MMU uses for
	     * the different types of VME spaces.
	     */
	    case DEV_VME_D32A16:
	    case DEV_VME_D16A16:
		/*
		 * The high 64K of the VME address range is stolen for the
		 * 16 bit address subset.
		 */
		mapItIn = TRUE;
		cntrlrPtr->address += 0xFFFF0000;
		break;
	    case DEV_VME_D32A24:
	    case DEV_VME_D16A24:
		/*
		 * The high 16 Megabytes of the VME address range is stolen
		 * for the 24 bit address subset.
		 */
		mapItIn = TRUE;
		cntrlrPtr->address += 0xFF000000;
		break;
		/*
		 * The addresses for the full 32 bit VME bus are ok.
		 */
	    case DEV_VME_D16A32:
	    case DEV_VME_D32A32:
		mapItIn = TRUE;
		break;
	    case DEV_OBIO:
		mapItIn = FALSE;
		break;
	}
	/*
	 * Each different Sun architecture arranges pieces of memory into
	 * 4 different spaces.  The I/O devices fall into type 2 or 3 space.
	 */
	switch(cntrlrPtr->space) {
	    case DEV_MULTIBUS:
		memoryType = 2;
		break;
	    case DEV_VME_D16A16:
	    case DEV_VME_D16A24:
	    case DEV_VME_D16A32:
		if (Mach_GetMachineType() == SYS_SUN_2_50) {
		    if (cntrlrPtr->address >= 0xFF800000) {
			memoryType = 3;
		    } else {
			memoryType = 2;
		    }
		} else {
		    memoryType = 2;
		}
		break;
	    case DEV_MULTIBUS_IO:
	    case DEV_VME_D32A16:
	    case DEV_VME_D32A24:
	    case DEV_VME_D32A32:
		memoryType = 3;
		break;
	    case DEV_OBIO:
		memoryType = 1;
		break;
	}
#endif
	if (mapItIn) {
	    if (devConfigDebug) {
		printf("Dev config mapping %s at 0x%x, memType %d.\n",
			cntrlrPtr->name, cntrlrPtr->address, memoryType);
	    }
	    cntrlrPtr->address =
		    (int) VmMach_MapInDevice((Address) cntrlrPtr->address,
		    memoryType);
	    if (devConfigDebug) { printf("Dev config virtual addr is 0x%x.\n",
		    cntrlrPtr->address);
	    }
	}
	if (cntrlrPtr->address != NIL) {
	    ClientData	callBackData;

	    if (cntrlrPtr->initProc != (ClientData (*)()) NIL) {
		callBackData = (*cntrlrPtr->initProc)(cntrlrPtr);
		if (callBackData != DEV_NO_CONTROLLER) {
		    printf("%s at kernel address %x\n", cntrlrPtr->name,
				   cntrlrPtr->address);
		    if (cntrlrPtr->vectorNumber > 0) {
			Mach_SetHandler(cntrlrPtr->vectorNumber,
			    cntrlrPtr->intrProc, callBackData);
		    }
		}
	    }
	}
    }
    return;
}
@


9.4
log
@Turned off scsi debug flag.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 9.3 90/11/27 12:55:31 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
d123 22
a199 9
	    case DEV_SBUS_OB:
		if (devConfigDebug) {
		    printf("Dev config looking at DEV_SBUS_OB.\n");
		}
		mapItIn = TRUE;
		break;
	    case DEV_SBUS:
		printf("Regular SBUS devices not handled yet.\n");
		continue;
a230 9
	    case DEV_SBUS_OB:
		if (devConfigDebug) {
		    printf("Dev config setting mem type for DEV_SBUS_OB.\n");
		}
		memoryType = 1;
		break;
	    case DEV_SBUS:
		/* Regular SBUS devices not handled yet. */
		continue;
d232 1
@


9.3
log
@new sparcstation scsi driver additions.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev.mgb/sun3.md/RCS/devInit.c,v 1.1 90/11/14 14:49:35 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
d41 1
a41 1
int devConfigDebug = TRUE;
@


9.2
log
@ #include "stdio.h" for forward decl of printf.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 9.1 90/09/11 12:43:03 rab Exp Locker: rab $ SPRITE (Berkeley)";
d41 1
a41 1
int devConfigDebug = FALSE;
d178 9
d218 9
d229 4
d234 5
a238 1
		(int)VmMach_MapInDevice((Address)cntrlrPtr->address,memoryType);
d242 10
a251 7
	    callBackData = (*cntrlrPtr->initProc)(cntrlrPtr);
	    if (callBackData != DEV_NO_CONTROLLER) {
		printf("%s at kernel address %x\n", cntrlrPtr->name,
			       cntrlrPtr->address);
		if (cntrlrPtr->vectorNumber > 0) {
		    Mach_SetHandler(cntrlrPtr->vectorNumber,
			cntrlrPtr->intrProc, callBackData);
d256 1
@


9.1
log
@Fixed uninitialized variables.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 9.0 89/09/12 15:00:22 douglis Stable Locker: rab $ SPRITE (Berkeley)";
d29 1
@


9.0
log
@Changing version numbers.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 8.5 89/08/01 18:03:52 mgbaker Exp Locker: douglis $ SPRITE (Berkeley)";
d87 1
a87 1
    int memoryType;		/* This is ultimatly for the page table
d89 1
a89 1
    Boolean mapItIn;		/* If TRUE we need to map the device into
@


8.5
log
@Some debugging stuff for the sun4c inserted and removed.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 8.4 89/07/14 17:36:42 ouster Exp Locker: mgbaker $ SPRITE (Berkeley)";
@


8.4
log
@Changes for new tty driver.
@
text
@d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 8.3 89/05/24 07:50:56 rab Exp $ SPRITE (Berkeley)";
d36 3
@


8.3
log
@Changes to allow optimization.
@
text
@d14 8
a21 2
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
d25 1
a25 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 8.2 89/05/23 10:25:32 mendel Exp Locker: rab $ SPRITE (Berkeley)";
a29 1
#include "devKeyboard.h"
d35 1
a36 1

d44 1
a44 3
 *	Initialize the timer and the keyboard, and set up the allocator
 *	for the device spaces.  Device initialization routines are called
 *	later by Dev_Config.
d47 1
a47 1
 *     none
d50 1
a50 1
 *     Some devices are initialized, and the IO buffer allocater is set up.
d58 1
a58 1
    Dev_KbdInit();
a223 1

@


8.2
log
@Added interrupt callback register and removed disk stat routines.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev.new/sun3.md/RCS/devInit.c,v 8.1 88/12/12 14:26:06 nelson Exp Locker: mendel $ SPRITE (Berkeley)";
@


8.1
log
@Removed call to VmMach_DevBufferInit.  Things are now initialized by
the vm module automatically.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 6.5 88/10/30 21:24:50 jhh Exp $ SPRITE (Berkeley)";
a28 1
#include "sysStats.h"
a30 5
/*
 * This holds the state of the simple allocate for multibus memory.
 */

VmMach_DevBuffer devIOBuffer;
d208 5
a212 4
	    cntrlrPtr->exists = (*cntrlrPtr->initProc)(cntrlrPtr);
	    if (cntrlrPtr->exists) {
		printf("%s-%d at kernel address %x\n", cntrlrPtr->name,
			      cntrlrPtr->controllerID, cntrlrPtr->address);
d215 1
a215 1
				    cntrlrPtr->intrProc);
a219 40
    /*
     * Spin through all potentially attached devices and initialize them.
     * These routines have to be able to tell if their controller init
     * routine succeeded.
     */
    for (index = 0 ; index < devNumConfigDevices ; index++) {
	register DevConfigDevice *devPtr;
	devPtr = &devDevice[index];
	(void)(*devPtr->initProc)(devPtr);
    }
}


/*
 *----------------------------------------------------------------------
 *
 * Dev_GatherDiskStats --
 *
 *	Determine which disks are idle.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
Dev_GatherDiskStats()
{
    register int		 index;
    register DevConfigController *cntrlrPtr;

    for (index = 0; index < devNumConfigCntrlrs; index++) {
	cntrlrPtr = &devCntrlr[index];
	if (cntrlrPtr->exists) {
	    (*cntrlrPtr->idleProc)(cntrlrPtr);
	}
    }
a221 44

/*
 *----------------------------------------------------------------------
 *
 * Dev_GetDiskStats --
 *
 *	Return statistics about the different disks.
 *
 * Results:
 *	Number of statistics entries returned.
 *
 * Side effects:
 *	Entries in *diskStatPtr filled in.
 *
 *----------------------------------------------------------------------
 */
int
Dev_GetDiskStats(diskStatArr, numEntries)
    register Sys_DiskStats *diskStatArr;	/* Where to store the disk 
						 * stats. */
    int			   numEntries;		/* The number of elements in 
						 * diskStatArr. */
{
    register int		 index;
    register DevConfigController *cntrlrPtr;
    int				 entriesUsed = 0;

    for (index = 0;
         index < devNumConfigCntrlrs && entriesUsed < numEntries;
	 index++) {
	cntrlrPtr = &devCntrlr[index];
	if (cntrlrPtr->exists) {
	    (void)strcpy(diskStatArr->name, cntrlrPtr->name);
	    diskStatArr->controllerID = cntrlrPtr->controllerID;
	    diskStatArr->numSamples = cntrlrPtr->numSamples;
	    diskStatArr->idleCount = cntrlrPtr->idleCount;
	    diskStatArr->diskReads = cntrlrPtr->diskReads;
	    diskStatArr->diskWrites = cntrlrPtr->diskWrites;
	    entriesUsed++;
	    diskStatArr++;
	}
    }
    return(entriesUsed);
}
@


8.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 6.5 88/10/30 21:24:50 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
a60 1

d62 1
a63 6
    /*
     * Initialize a simple allocator for Device DMA Space.
     */
    VmMach_DevBufferInit(&devIOBuffer, (Address)VMMACH_DMA_START_ADDR, 
			 (int)VMMACH_DMA_SIZE);
}
@


6.5
log
@multiprocessor port, change to new C lib
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devInit.c,v 6.4 88/10/07 11:03:06 mendel Exp Locker: jhh $ SPRITE (Berkeley)";
@


6.4
log
@Removed the devTimer routines.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 6.3 88/09/07 11:28:29 nelson Exp $ SPRITE (Berkeley)";
d99 1
a99 1
	Sys_Printf("Dev_Config calling debugger:");
d222 1
a222 1
		Sys_Printf("%s-%d at kernel address %x\n", cntrlrPtr->name,
d305 1
a305 1
	    (void)String_Copy(cntrlrPtr->name, diskStatArr->name);
@


6.3
log
@Fixed lint errors.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 6.2 88/09/06 14:15:34 nelson Exp $ SPRITE (Berkeley)";
a23 1
#include "devTimer.h"
a60 3
    Dev_CounterInit();
    Dev_TimerInit(DEV_CALLBACK_TIMER);
    Dev_TimerStart(DEV_CALLBACK_TIMER);
@


6.2
log
@Added disk idle stats and read/write counts.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 6.1 88/09/05 12:36:03 brent Exp $ SPRITE (Berkeley)";
d31 1
d71 2
a72 1
    VmMach_DevBufferInit(&devIOBuffer, VMMACH_DMA_START_ADDR, VMMACH_DMA_SIZE);
d221 1
a221 1
		(int)VmMach_MapInDevice(cntrlrPtr->address, memoryType);
d309 1
a309 1
	    String_Copy(cntrlrPtr->name, diskStatArr->name);
@


6.1
log
@Added initialization code for onboard SCSI driver
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 5.3 88/05/05 17:49:44 nelson Exp $ SPRITE (Berkeley)";
d30 1
a98 1
    Boolean exists;		/* If TRUE the device exists */
d222 2
a223 2
	    exists = (*cntrlrPtr->initProc)(cntrlrPtr);
	    if (exists) {
d243 75
@


6.0
log
@Changing version numbers.
@
text
@d182 3
d212 3
@


5.3
log
@Changed to handle movement of functionality from sys to mach.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 5.2 88/05/04 17:05:09 nelson Exp $ SPRITE (Berkeley)";
@


5.2
log
@Changed for new arrangement of mach module.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 5.1 87/12/12 16:33:48 nelson Exp $ SPRITE (Berkeley)";
a23 1
#include "sunMon.h"
d26 1
a26 1
#include "multibus.h"
d150 1
a150 1
		cntrlrPtr->address += MULTIBUS_BASE;
@


5.1
log
@Handles moving of hardware dependencies from vm to sun.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 5.0 87/08/11 10:39:46 sprite Exp $ SPRITE (Berkeley)";
a30 2
#include "exc.h"
#include "machineConst.h"
d222 2
a223 2
		    Exc_SetHandler(cntrlrPtr->vectorNumber,
				   cntrlrPtr->intrProc);
@


5.0
log
@First Sprite native copy
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 4.4 87/05/09 11:07:41 douglis Exp $ SPRITE (Berkeley)";
d29 1
a29 1
#include "vmMachInt.h"
d32 1
d38 1
a38 1
Vm_DevBuffer devIOBuffer;
d72 1
a72 1
    Vm_DevBufferInit(&devIOBuffer, VM_DMA_START_ADDR, VM_DMA_SIZE);
d216 1
a216 1
		(int)Vm_MapInDevice(cntrlrPtr->address, memoryType);
@
