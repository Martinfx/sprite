head     9.0;
branch   ;
access   ;
symbols  Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.0
date     89.09.12.14.59.55;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.05.24.07.49.56;  author rab;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.23.10.27.02;  author mendel;  state Exp;
branches ;
next     8.2;

8.2
date     88.11.29.09.31.24;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.21.09.08.36;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.16.15.21.11;  author brent;  state Exp;
branches ;
next     ;


desc
@Definitions for the Exabyte tape drives
@


9.0
log
@Changing version numbers.
@
text
@/*
 * exabyteTape.h
 *
 * Definitions for attach procedure for Exabyte tape drives.  
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 *
 * $Header: /sprite/src/kernel/dev/sun3.md/RCS/exabyteTape.h,v 8.4 89/05/24 07:49:56 rab Exp Locker: douglis $ SPRITE (Berkeley)
 */

#ifndef _DEVEXABYTE
#define _DEVEXABYTE


extern ReturnStatus DevExabyteAttach();

#endif /* _DEVSCSIEXABYTE */
@


8.4
log
@Changes to allow optimization.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/kernel/dev/sun3.md/RCS/exabyteTape.h,v 8.3 89/05/23 10:27:02 mendel Exp Locker: rab $ SPRITE (Berkeley)
@


8.3
log
@Converted to use new SCSI Tape interface.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/kernel/dev.new/sun3.md/RCS/devSCSIExabyte.h,v 8.2 88/11/29 09:31:24 brent Exp Locker: mendel $ SPRITE (Berkeley)
d26 1
a26 1
#endif _DEVSCSIEXABYTE
@


8.2
log
@Added a block size constant
@
text
@d2 1
a2 1
 * devSCSIExabyte.h
d4 1
a4 3
 * Definitions for sense data format and status information returned
 * from Exabyte tape drives.  Reference, the "EXB-8200 8mm Tape Drive
 * User's Guide" by Perfect Byte, Inc. 7121 Cass St. Omaha, NE 68132
d17 1
a17 1
 * $Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSIExabyte.h,v 8.1 88/11/21 09:08:36 brent Exp Locker: brent $ SPRITE (Berkeley)
d20 2
a21 2
#ifndef _DEVSCSIEXABYTE
#define _DEVSCSIEXABYTE
a22 113
/*
 * The Exabyte drives have 1K blocks.
 */
#define DEV_EXABYTE_BLOCK_SIZE	1024

/*
 * Sense data returned from the Exabyte tape controller.
 */
#define DEV_EXABYTE_SENSE_BYTES	26
typedef struct {
    DevSCSIExtendedSense	extSense;	/* 8 Bytes */
    unsigned char pad8;			/* Reserved */
    unsigned char pad;			/* Reserved */
    unsigned char pad10;		/* Reserved */
    unsigned char pad11;		/* Reserved */
    /*
     * SCSI 2 support.
     */
    unsigned char senseCode;		/* 0x4 if sense key is NOT_READY */
    unsigned char senseCodeQualifier;	/* 00 - volume not mounted.
					 * 01 - rewinding or loading */
    unsigned char pad14;		/* Reserved */
    unsigned char pad15;		/* Reserved */
    unsigned char highErrorCnt;		/* High byte of error count */
    unsigned char midErrorCnt;		/* Middle byte of error count */
    unsigned char lowErrorCnt;		/* Low byte of error count */
    /*
     * Error bits that are command dependent.  0 is ok, 1 means error.
     * These are defined on pages 37-38 of the User Manual, Rev.03
     */
    unsigned char PF		:1;	/* Power failure */
    unsigned char BPE		:1;	/* SCSI Bus Parity Error */
    unsigned char FPE		:1;	/* Formatted buffer parity error */
    unsigned char ME		:1;	/* Media error */
    unsigned char ECO		:1;	/* Error counter overflow */
    unsigned char TME		:1;	/* Tape motion error */
    unsigned char TNP		:1;	/* Tape not present */
    unsigned char BOT		:1;	/* Set when tape is at BOT */

    unsigned char XFR		:1;	/* Transfer Abort Error */
    unsigned char TMD		:1;	/* Tape Mark Detect Error */
    unsigned char WP		:1;	/* Write Protect */
    unsigned char FMKE		:1;	/* File Mark Error */
    unsigned char URE		:1;	/* Data flow underrun. Media error. */
    unsigned char WE1		:1;	/* Max write retries attempted */
    unsigned char SSE		:1;	/* Servo System error.  Catastrophic */
    unsigned char FE		:1;	/* Formatter error.  Catastrophic */

    unsigned char pad21		:6;	/* Reserved */
    unsigned char WSEB		:1;	/* Write Splice Error, hit blank tape */
    unsigned char WSEO		:1;	/* Write Splice Error, overshoot */

    unsigned char pad22;		/* Reserved */
    unsigned char highRemainingTape;	/* High byte of remaining tape len */
    unsigned char midRemainingTape;	/* Middle byte of remaining tape len */
    unsigned char lowRemainingTape;	/* Low byte of remaining tape len */

} DevExabyteSense;			/* Known to be 26 Bytes big (for
					 * Drives made in/after 1988) */


/*
 * Definitions for the mode select command.  The MODE_SELECT data
 * consists of a 4 byte header, zero or one 8 byte block descriptors,
 * and finally from zero to 4 bytes of Vendor Unique Parameters.
 * For simplicity we'll always send 1 block descriptor and 4 parameter bytes.
 */

typedef struct DevExabyteModeSelBlock {
    unsigned char density;		/* Density code == 0.  Only one dens. */
    unsigned char highCount;		/* == 0 */
    unsigned char midCount;		/* == 0 */
    unsigned char lowCount;		/* == 0 */
    unsigned char pad1;			/* Reserved */
    unsigned char highLength;		/* Length of the blocks on tape */
    unsigned char midLength;		/*	0 means variable length */
    unsigned char lowLength;		/*	Default is 1024 bytes */
} DevExabyteModeSelBlock;		/* 8 Bytes */


typedef struct DevExabyteModeSelParams {
    DevSCSIModeSelectHdr	header;
    DevExabyteModeSelBlock	block;
    unsigned char cartidgeType	:1;	/* 1 == p5 European.
					 * 0 == P6 Domestic */
    unsigned char		:3;	/* Reserved */
    unsigned char noBusyEnable	:1;	/* 0 == Report Busy Status (default)
					 * 1 == No Busy Enable, cmd queued */
    unsigned char evenByteDscnct :1;	/* 0 == Even or Odd byte disconnect
					 * 1 == Even Byte disconnect */
    unsigned char parityEnable	:1;	/* 0 == Parity disabled (default) */
    unsigned char noAutoLoad	:1;	/* 0 == Auto load enabled (default) */
    unsigned char pad1;			/* RESERVED */
    /*
     * The Motion threashold must exceed the Reconnect threshold.
     * Values represent 1K byte increments.
     * Motion - default 0xF0, valid range 0x01 -> 0xF7
     * Reconnect - default 0x40, valid range 0x01 to 0xF7
     * WRITE - lower motion threshold for faster transfer.
     * READ - raise reconnect threshold for faster transfer.
     *	Basically these control the amount of data kept in the buffer
     *	and hence the latency.
     */
    unsigned char motion;		/* Defines how many Kbytes are buffered
					 * before writing to the tape begins,
					 * or when reconnecting on a read */
    unsigned char reconnect;		/* Defines how many Kbytes are left
					 * in the buffer when the drive
					 * begins filling it again, either
					 * by reading the tape or reconnecting
					 * and getting more data from the 
					 * SCSI bus. */
} DevModeSelParams;
d24 1
a24 1
void DevExabyteInit();
@


8.1
log
@Stable version after code reorganization
@
text
@d19 1
a19 1
 * $Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSIExabyte.h,v 8.0 88/11/16 15:21:11 brent Exp $ SPRITE (Berkeley)
d26 5
d33 1
d139 1
a139 1

@


8.0
log
@New file for SCSI clean up
@
text
@d19 1
a19 1
 * $Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSIExabyte.h,v 8.0 88/11/16 14:44:12 brent Exp $ SPRITE (Berkeley)
d30 4
a33 4
    unsigned char pad8			/* Reserved */
    unsigned char pad9			/* Reserved */
    unsigned char pad10			/* Reserved */
    unsigned char pad11			/* Reserved */
d40 2
a41 2
    unsigned char pad14			/* Reserved */
    unsigned char pad15			/* Reserved */
a78 14
/*
 * Sense data returned from the Emulex disk drive in the scsibox.  There's
 * some more information available past the additional sense code, but we don't
 * use it (at least for now).
 */
typedef struct {
    DevSCSIExtendedSense	extSense;
    unsigned char pad1;		/* reserved */
    unsigned char pad2;		/* reserved */
    unsigned char pad3;		/* reserved */
    unsigned char pad4;		/* reserved */
    unsigned char code2;	/* additional sense code */
}  DevEmulexDiskSense;

d81 4
a84 4
 * Definitions for the mode select command.  This is specific to the
 * Emulux controller.  The mode select command is used to change from
 * QIC_24 format (one standard, not the one we use) to QIC_02 format
 * (the more common, older, standard that we do use).
a85 9
typedef struct DevEmuluxModeSelHdr {
    unsigned char pad1;			/* Reserved */
    unsigned char pad2;			/* Reserved */
    unsigned char		:1;	/* Reserved */
    unsigned char bufMode	:3;	/* == 1 */
    unsigned char speed		:4;	/* == 0 */
    unsigned char blockLength;		/* Length of block descriptors that
					 * follow the header */
} DevEmuluxModeSelHdr;
d87 5
a91 5
typedef struct DevEmuluxModeSelBlock {
    unsigned char density;		/* Density code */
    unsigned char highCount;		/* Count of blocks at this density */
    unsigned char midCount;		/*	middle byte of above */
    unsigned char lowCount;		/*	low byte */
d93 4
a96 4
    unsigned char highLength;		/* Length of the blocks */
    unsigned char midLength;		/*	middle byte of above */
    unsigned char lowLength;		/*	low byte */
} DevEmuluxModeSelBlock;
a97 5
/*
 * Density values for the mode select block.
 */
#define SCSI_EMULUX_QIC_24	0x05
#define SCSI_EMULUX_QIC_02	0x84
d99 33
a131 8
typedef struct DevEmuluxModeSelParams {
    DevEmuluxModeSelHdr		header;
    DevEmuluxModeSelBlock	block;
    unsigned char		:5;	/* Reserved */
    unsigned char disableErase	:1;	/* disable erase ahead */
    unsigned char autoLoadInhibit :1;
    unsigned char softErrorCount  :1;
} DevEmuluxModeSelParams;
@
