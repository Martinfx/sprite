head     9.1;
branch   ;
access   ;
symbols  ds3100:9.1 sun3:9.1 sun4nw:9.1 symm:9.1 spur:9.1 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.1
date     91.08.19.13.48.15;  author jhh;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.59.30;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.05.24.07.51.53;  author rab;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.23.10.26.53;  author mendel;  state Exp;
branches ;
next     8.2;

8.2
date     88.12.05.10.47.22;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.21.09.08.45;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.16.15.20.47;  author brent;  state Exp;
branches ;
next     ;


desc
@Code to support Sysgen based tape drives
@


9.1
log
@new format for DevScsiSendCmdSync
@
text
@/* 
 * devSCSISysgen.c --
 *
 *      Procedures that set up command blocks and process sense
 *	data for Sysgen tape drives.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/dev.jhh/sun3.md/RCS/devSysgenTape.c,v 9.0 89/09/12 14:59:30 douglis Stable Locker: jhh $ SPRITE (Berkeley)";
#endif /* not lint */


#include <sprite.h>
#include <dev.h>
#include <devInt.h>
#include <sys/scsi.h>
#include <scsiDevice.h>
#include <scsiHBA.h>
#include <scsiTape.h>
#include <fs.h>
#include <sysgenTape.h>

/*
 * Sense data returned from the Sysgen tape controller.
 * This matches the ARCHIVE Sidewinder drive specifications, and the
 * CIPHER Quarterback drive specifications.
 */
#define SYSGEN_SENSE_BYTES	16
typedef struct {
    /*
     * Standard 4-bytes of sense data, not class 7 extended sense.
     */
    unsigned char valid		:1;	/* Sense data is valid */
    unsigned char error		:7;	/* 3 bits class and 4 bits code */
    unsigned char highAddr;		/* High byte of block address */
    unsigned char midAddr;		/* Middle byte of block address */
    unsigned char lowAddr;		/* Low byte of block address */
    /*
     * Additional 12 bytes of sense data specific to Sysgen drives.
     */
    unsigned char bitSet1	:1;	/* More bits set in this byte */
    unsigned char noCartridge	:1;	/* The tape cartridge isn't there */
    unsigned char noDrive	:1;	/* No such drive (check subUnitID) */
    unsigned char writeProtect	:1;	/* The drive is write protected */
    unsigned char endOfTape	:1;	/* End of tape encountered */
    unsigned char dataError	:1;	/* Data error on the tape, fatal */
    unsigned char noError	:1;	/* No error in the data */
    unsigned char fileMark	:1;	/* File mark encountered */

    unsigned char bitSet2	:1;	/* More bits set in this byte */
    unsigned char badCommand	:1;	/* A bad command was specified */
    unsigned char noData	:1;	/* Counld't find the data */
    unsigned char retries	:1;	/* Had to retry more than 8 times */
    unsigned char beginOfTape	:1;	/* At beginning of tape */
    unsigned char pad1		:2;	/* reserved */
    unsigned char powerOnReset	:1;	/* Drive reset sinse last command */

    short	numRetries;		/* Number of retries */
    short	underruns;		/* Number of underruns */
    /*
     * The following comes from the sysgen controller in copy commands
     * which we don't use.
     */
    char numDiskBlocks[3];		/* Num disk blocks transferred */
    char numTapeBlocks[3];		/* Num tape blocks transferred */

} DevQICIISense;			/* Known to be 16 Bytes big */


/*
 *----------------------------------------------------------------------
 *
 * DevSysgenAttach --
 *
 *	Verify and attach a Sysgen tape drive.
 *
 * Results:
 *	SUCCESS if the device is a working Sysgen tape drive.
 *	DEV_NO_DEVICE if the device is not a working Sysgen tape drive.
 *
 * Side effects:
 *	Sets the type and call-back procedures.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
DevSysgenAttach(devicePtr, devPtr, tapePtr)
    Fs_Device	*devicePtr;	/* Fs_Device being attached. */
    ScsiDevice	*devPtr;	/* SCSI device handle for drive. */
    ScsiTape	*tapePtr;	/* Tape drive state to be filled in. */
{
    ScsiCmd		senseCmd;
    ReturnStatus	status;
    static char		senseData[SCSI_MAX_SENSE_LEN];
    int			length;

    /*
     * Since we don't know about the inquiry data (if any) returned by 
     * the Sysgen tape, check using the size of the SENSE data returned.
     */
    DevScsiSenseCmd(devPtr, SCSI_MAX_SENSE_LEN, senseData, &senseCmd);
    status = DevScsiSendCmdSync(devPtr, &senseCmd, &length);
    if ( (status != SUCCESS) || 
         (senseCmd.statusByte != 0) ||
	 (senseCmd.senseLen != SYSGEN_SENSE_BYTES)) {
	return DEV_NO_DEVICE;
    }
    /*
     * Take all the defaults for the tapePtr.
     */
    tapePtr->name = "Sysgen Tape";
    return SUCCESS;
}
@


9.0
log
@Changing version numbers.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSysgenTape.c,v 8.4 89/05/24 07:51:53 rab Exp Locker: douglis $ SPRITE (Berkeley)";
d16 9
a24 9
#include "sprite.h"
#include "dev.h"
#include "devInt.h"
#include "scsi.h"
#include "scsiDevice.h"
#include "scsiHBA.h"
#include "scsiTape.h"
#include "fs.h"
#include "sysgenTape.h"
d96 1
a96 4
    unsigned char statusByte;
    ScsiCmd	senseCmd;
    char	senseData[SCSI_MAX_SENSE_LEN];
    int		length;
d98 2
d106 1
a106 2
    status = DevScsiSendCmdSync(devPtr, &senseCmd, &statusByte, &length,
			      (int *) NIL, (char *) NIL);
d108 2
a109 2
         (statusByte != 0) ||
	 (length != SYSGEN_SENSE_BYTES)) {
@


8.4
log
@Changes to allow optimization.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSysgenTape.c,v 8.3 89/05/23 10:26:53 mendel Exp Locker: rab $ SPRITE (Berkeley)";
@


8.3
log
@Converted to use new SCSI Tape interface.
@
text
@d12 2
a13 2
static char rcsid[] = "$Header: /sprite/src/kernel/dev.new/sun3.md/RCS/devSysgenTape.c,v 8.2 88/12/05 10:47:22 brent Exp Locker: mendel $ SPRITE (Berkeley)";
#endif not lint
@


8.2
log
@Working version of Sysgen support code
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSISysgen.c,v 8.1 88/11/21 09:08:45 brent Exp Locker: brent $ SPRITE (Berkeley)";
d19 6
a24 3
#include "devSCSI.h"
#include "devSCSITape.h"
#include "devSCSISysgen.h"
a25 5
void SysgenSetup();
void SysgenStatus();
ReturnStatus SysgenError();


d27 3
a29 13
 *----------------------------------------------------------------------
 *
 * DevSysgenInit --
 *
 *	Initialize the DevSCSITape state for a Sysgen drive.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Sets the type and call-back procedures.
 *
 *----------------------------------------------------------------------
d31 29
a59 108
void
DevSysgenInit(tapePtr)
    DevSCSITape	*tapePtr;	/* Tape drive state */
{
    tapePtr->type = SCSI_SYSGEN;
    tapePtr->blockSize = DEV_SYSGEN_BLOCK_SIZE;
    tapePtr->setupProc = SysgenSetup;
    tapePtr->statusProc = SysgenStatus;
    tapePtr->errorProc = SysgenError;
}

/*
 *----------------------------------------------------------------------
 *
 * SysgenSetup --
 *
 *	This customizes the control block and sets the count and dmaCount
 *	to be correct for Sysgen based tape drives.
 *
 * Results:
 *	Various reserved bits may be set in the control block.
 *	count is set for the count field in the command block.
 *	dmaCount is set for the dma transfer count.
 *
 * Side effects:
 *	The tapePtr->state may be modified regarding EOF and RETENSION.
 *
 *----------------------------------------------------------------------
 */
void
SysgenSetup(tapePtr, commandPtr, controlBlockPtr, countPtr, dmaCountPtr)
    DevSCSITape	*tapePtr;	/* Tape drive state */
    int *commandPtr;		/* In/Out tape command */
    DevSCSITapeControlBlock *controlBlockPtr;	/* CMD Block to set up */
    int *countPtr;		/* In - Transfer count, blocks or bytes!
				 * Out - The proper byte count for CMD block */
    int *dmaCountPtr;		/* In - Transfer count, blocks or bytes!
				 * Out - The proper DMA byte count for caller */
{
    switch (*commandPtr) {
	case SCSI_TEST_UNIT_READY:
	    break;
	case SCSI_REWIND:
	    /*
	     * Do a tape retension by setting vendor57 bit.
	     */
	    if (tapePtr->state & SCSI_TAPE_RETENSION) {
		tapePtr->state &= ~SCSI_TAPE_RETENSION;
		controlBlockPtr->vendor57 = 1;
	    }
	    tapePtr->state &= ~SCSI_TAPE_AT_EOF;
	    break;
	case SCSI_REQUEST_SENSE:
	    *dmaCountPtr = *countPtr = sizeof(DevQICIISense);
	    break;
	case SCSI_READ:
	case SCSI_WRITE:
	    *countPtr /= tapePtr->blockSize;
	    break;
	case SCSI_WRITE_EOF:
	    *dmaCountPtr = 0;
	    *countPtr = 1;
	    break;
	case SCSI_SPACE:
	case SCSI_SPACE_FILES:
	    *dmaCountPtr = 0;
	    *commandPtr = SCSI_SPACE;
	    controlBlockPtr->code = 1;
	    tapePtr->state &= ~SCSI_TAPE_AT_EOF;
	    break;
	case SCSI_SPACE_BLOCKS:
	    *dmaCountPtr = 0;
	    *commandPtr = SCSI_SPACE;
	    controlBlockPtr->code = 0;
	    break;
	case SCSI_SPACE_EOT:
	    *dmaCountPtr = 0;
	    *commandPtr = SCSI_SPACE;
	    controlBlockPtr->code = 3;
	    tapePtr->state |= SCSI_TAPE_AT_EOF;
	    break;
	case SCSI_ERASE_TAPE:
	    break;
    }
}

/*
 *----------------------------------------------------------------------
 *
 * SysgenStatus --
 *
 *	Support for the IOC_TAPE_STATUS I/O control.  This generates
 *	a status error word from sense data.
 *
 * Results:
 *	An error code.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
SysgenStatus(devPtr, statusPtr)
    DevSCSIDevice *devPtr;
    Dev_TapeStatus *statusPtr;
{
    unsigned char *senseBytes;
d61 2
a62 1
    statusPtr->type = DEV_TAPE_SYSGEN;
d64 2
a65 5
     * Return the first two sense bytes from the sysgen controller.
     * This has the standard QIC 02 bits, see the typedef
     * for DevQICIISense.  In the high part of the error word
     * return the standard SCSI error byte that contains the
     * error class and code.
d67 5
a71 5
    senseBytes = devPtr->scsiPtr->senseBuffer->sense;
    statusPtr->errorReg = ((senseBytes[1] & 0xFF) << 8) |
			    (senseBytes[0] & 0xFF) |
			   (devPtr->scsiPtr->senseBuffer->error << 24);
}
d76 1
a76 1
 * SysgenError --
d78 1
a78 1
 *	Handle error conditions from a Sysgen based tape drive.
d81 2
a82 1
 *	An error code.
d85 1
a85 1
 *	None.
d89 1
d91 4
a94 3
SysgenError(devPtr, sensePtr)
    DevSCSIDevice *devPtr;
    DevSCSISense *sensePtr;
d96 5
a100 3
    register ReturnStatus status = SUCCESS;
    DevSCSITape *tapePtr = (DevSCSITape *)devPtr->data;
    register DevQICIISense *qicSensePtr = (DevQICIISense *)sensePtr;
d102 11
a112 32
    if (qicSensePtr->noCartridge) {
	status = DEV_OFFLINE;
    } else if (qicSensePtr->noDrive) {
	status = DEV_NO_DEVICE;
    } else if (qicSensePtr->dataError || qicSensePtr->retries) {
	status = DEV_HARD_ERROR;
    } else if (qicSensePtr->endOfTape) {
	status = DEV_END_OF_TAPE;
    } else {
	switch (devPtr->scsiPtr->command) {
	    case SCSI_TEST_UNIT_READY:
	    case SCSI_OPENING:
	    case SCSI_SPACE:
		break;
	    case SCSI_READ:
		if (qicSensePtr->fileMark) {
		    /*
		     * Hit the file mark after reading good data.
		     * Setting this bit causes the next read to
		     * return zero bytes.
		     */
		    tapePtr->state |= SCSI_TAPE_AT_EOF;
		}
		break;
	    case SCSI_WRITE:
	    case SCSI_WRITE_EOF:
	    case SCSI_ERASE_TAPE:
		if (qicSensePtr->writeProtect) {
		    status = FS_NO_ACCESS;
		}
		break;
	}
d114 5
a118 1
    return(status);
@


8.1
log
@Stable version after code reorganization
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSISysgen.c,v 8.0 88/11/16 15:20:47 brent Exp $ SPRITE (Berkeley)";
d48 1
d100 1
a100 1
	    *dmaCountPtr = *countPtr * DEV_BYTES_PER_SECTOR;
@


8.0
log
@New file for SCSI clean up
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun3.md/RCS/devSCSITape.c,v 8.0 88/11/11 18:14:01 douglis Stable Locker: brent $ SPRITE (Berkeley)";
a21 1
#include "dev/tape.h"
d51 1
a51 1

@
