head     1.6;
branch   ;
access   ;
symbols  ds3100:1.6 sun3:1.6 sun4nw:1.1 symm:1.1 spur:1.1;
locks    ; strict;
comment  @ * @;


1.6
date     92.10.23.15.04.42;  author elm;  state Exp;
branches ;
next     1.5;

1.5
date     92.08.27.10.19.00;  author elm;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.17.14.21.28;  author elm;  state Exp;
branches ;
next     1.3;

1.3
date     92.07.09.18.55.45;  author elm;  state Exp;
branches ;
next     1.2;

1.2
date     92.06.29.12.33.48;  author elm;  state Exp;
branches ;
next     1.1;

1.1
date     91.09.18.12.39.56;  author jhh;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@
Updated version of RAID/xbus device modules.  These versions have all
been tested and work as far as we know.
@
text
@/*
 * devVMElink.h --
 *
 *	Internal declarations of interface to the Bit-3 VME
 *	link driver routines.
 *
 * Copyright 1990 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4.md/devVMElink.h,v 1.5 92/08/27 10:19:00 elm Exp $ SPRITE (Berkeley)
 */

#ifndef _DEVVMELINK
#define _DEVVMELINK

#include <list.h>
#include <sys/param.h>
#include "devTypes.h"
#include "devQueue.h"
#include "devBlockDevice.h"
#include "dev/vmelink.h"

/*
 * This is the maximum number of VME link boards in a system.
 */
#define DEV_VMELINK_MAX_BOARDS		16

/*
 * Flags for the state word in the device driver information block.
 */
#define	DEV_VMELINK_STATE_DMA_IN_USE	0x1
#define	DEV_VMELINK_STATE_PAGE_MODE	0x2
#define	DEV_VMELINK_STATE_SAFE_COPY	0x4
#define	DEV_VMELINK_STATE_NO_MAP	0x8
#define	DEV_VMELINK_STATE_VME_A32	0x1000

#define	DEV_VMELINK_INTVEC0		220

#define	DEV_VMELINK_DMA_BUFSIZE_MASK	0xffffff00

#define DEV_VMELINK_MAX_TRANSFER_SIZE	(1 << 20)	/* 1 MB max */

#define DEV_VMELINK_HANDLE_MAGIC	0xface6789

typedef DevVMElinkCtrlRegs CtrlRegs;
typedef DevVMElinkDmaRegs DmaRegs;

/*
 * Structure that's returned to an attach.
 */
typedef struct DevVMElinkHandle {
    DevBlockDeviceHandle blockHandle;
    struct VMELinkInfo *linkInfo;
    unsigned int magic;
} DevVMElinkHandle;

/*
 *	This is the info stored for each VME link board.
 */
typedef struct VMELinkInfo {
    int unit;			/* unit # for this link */
    unsigned int state;
    CtrlRegs	*regArea;
    DmaRegs	*dmaRegs;
    unsigned int addrMsb;	/* MSbit of VME addresses, since offsets */
    				/* into a file can only be 31 bits long */
    unsigned char LocalFlags;	/* flags used to set the local and remote */
    unsigned char RemoteFlags1;	/* command registers.  They are kept here */
    unsigned char RemoteFlags2;	/* so the driver can fool with the link. */
    int vectorNumber;
    Sync_Semaphore mutex;
    Address smallMap;		/* 64K window for use with window register */
    int minDmaSize;		/* minimum size to DMA instead of bcopy */
    unsigned int position;	/* current position for read/write */
    unsigned int curAddrModifier; /* current address modifier */
    char	name[40];	/* device name (from devConfig.c) */
    char	semName[50];	/* semaphore name */
    List_Links		reqHdr;	/* queue of requests to this link board */
    DevVMElinkHandle handle;	/* handle to return to attach() */
    int numAttached;		/* # of attach calls (w/o releasing) */
    struct DevVMElinkReq *curReq;
} VMELinkInfo;

typedef struct DevVMElinkReq {
    List_Links		links;
    VMELinkInfo		*linkInfo;	/* -> link info for this request */
    int			operation;	/* FS_READ or FS_WRITE */
    unsigned int	startAddress;	/* start addr in remote memory */
    int			length;		/* length of xfer */
    Address		buffer;		/* addr of local buffer */
    Address		dmaSpace;	/* addr of DMA space (NIL if no DMA) */
    int			dmaSize;	/* # of bytes DMAed */
    DevBlockDeviceRequest *origReq;	/* -> original request block */
    ReturnStatus	status;
    ClientData		clientData;	/* data to pass to callback */
} DevVMElinkReq;

extern ClientData DevVMElinkInit ();
extern ReturnStatus DevVMElinkOpen ();
extern ReturnStatus DevVMElinkRead ();
extern ReturnStatus DevVMElinkWrite ();
extern ReturnStatus DevVMElinkIOControl ();
extern Boolean DevVMElinkIntr ();
extern DevBlockDeviceHandle *DevVMElinkAttach ();
extern ReturnStatus DevVMElinkRelease ();
extern ReturnStatus DevVMElinkBlockIO ();
extern ReturnStatus DevVMElinkBlockIOControl ();
extern Address VmMach_MapInDevicePages ();

#endif /* _DEVVMELINK */
@


1.5
log
@
Latest version of VME link software.  DMA transfers work (though not to
the xbus board yet).  Config file includes entries for two VME links.

@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4.md/devVMElink.h,v 1.4 92/08/17 14:21:28 elm Exp $ SPRITE (Berkeley)
d32 1
a32 1
#define DEV_VMELINK_MAX_BOARDS		8
d40 1
@


1.4
log
@
VME link driver now supports block device-type reads and writes.  The
Xbus driver is *always* installed, but only installs an interrupt
handler (which should never be used except when the xbus board is
present).
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4.md/devVMElink.h,v 1.3 92/07/09 18:55:45 elm Exp $ SPRITE (Berkeley)
d40 1
d46 1
a46 1
#define DEV_VMELINK_MAX_TRANSFER_SIZE	(1 << 22)	/* 4 MB max */
d80 3
@


1.3
log
@
Moved vmelink.h to /sprite/src/lib/include/dev.

The VME link board driver can now talk to any location in the remote
card cage, albeit slowly.  This currently works *only* for A24D32,
though it should be relatively easy to modify it to work for A32D32.
DMA is still written but not debugged.
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4.md/devVMElink.h,v 1.2 92/06/29 12:33:48 elm Exp $ SPRITE (Berkeley)
d79 1
a79 3
    Sync_Semaphore queueMutex;
    DevCtrlQueues ctrlQueues;
    DevQueue reqQueue;
d86 1
a86 1
    List_Links		links;		/* for DevQueue management */
a91 1
    void		(*doneProc)();	/* callback procedure */
a104 1
extern Boolean DevVMElinkXferData ();
@


1.2
log
@
These files are an update to the VME link board device driver.  They enable
the driver to access any location in A24D32 across the link.  The driver
still needs modifications for DMA to work.
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/dev/sun4.md/RCS/devVMElink.h,v 1.1 91/09/18 12:39:56 jhh Exp Locker: elm $ SPRITE (Berkeley)
d27 1
a27 1
#include "vmelink.h"
d39 1
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/jhh/dev/sun4.md/RCS/devVMElink.h,v 1.1 91/08/29 10:40:09 jhh Exp $ SPRITE (Berkeley)
d22 2
d25 2
a26 1
#include <sys/param.h>
d32 68
a99 1
#define VMELINK_MAX_BOARDS	8
d106 7
@
