head     9.0;
branch   ;
access   ;
symbols  ds3100:9.0 sun3:9.0 sun4nw:9.0 symm:9.0 spur:9.0 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.0
date     89.09.12.15.01.25;  author douglis;  state Stable;
branches ;
next     1.3;

1.3
date     89.07.26.20.02.24;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     89.07.14.13.08.46;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.10.19.51.51;  author nelson;  state Exp;
branches ;
next     ;


desc
@First code from DECWRL.
@


9.0
log
@Changing version numbers.
@
text
@/*
 * devInit.c --
 *
 *	This has a weak form of autoconfiguration for mapping in various
 *	devices and calling their initialization routines.  The file
 *	devConfig.c has the tables which list devices, their physical
 *	addresses, and their initialization routines.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.  
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/dev/ds3100.md/RCS/devInit.c,v 1.3 89/07/26 20:02:24 nelson Exp Locker: douglis $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "devInt.h"
#include "graphics.h"
#include "vm.h"
#include "dbg.h"
#include "sysStats.h"
#include "string.h"

int devConfigDebug = FALSE;

/*
 * ----------------------------------------------------------------------------
 *
 * Dev_Init --
 *
 *	Initialize the timer and the keyboard, and set up the allocator
 *	for the device spaces.  Device initialization routines are called
 *	later by Dev_Config.
 *
 * Results:
 *     none
 *
 * Side effects:
 *     Some devices are initialized, and the IO buffer allocater is set up.
 *
 * ----------------------------------------------------------------------------
 */

void
Dev_Init()
{
    DevTtyInit();
    DevGraphicsInit();
}


/*
 *----------------------------------------------------------------------
 *
 * Dev_Config --
 *
 *	Call the initialization routines for various controllers and
 *	devices based on configuration tables.  This should be called
 *	after the regular memory allocater is set up so the drivers
 *	can use it to configure themselves.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Call the controller and device initialization routines.
 *
 *----------------------------------------------------------------------
 */
void
Dev_Config()
{
    register int			index;
    ClientData				callBackData;
    register DevConfigController	*cntrlrPtr;

    if (devConfigDebug) {
	printf("Dev_Config calling debugger:");
	DBG_CALL;
    }
    for (index = 0; index < devNumConfigCntrlrs; index++) {
	cntrlrPtr = &devCntrlr[index];
	callBackData = (*cntrlrPtr->initProc)(cntrlrPtr);
	if (callBackData != DEV_NO_CONTROLLER) {
	    printf("%s at kernel address %x\n", cntrlrPtr->name,
			   cntrlrPtr->address);
	}
    }
}
@


1.3
log
@Converted over to new tty driver.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/ds3100.md/RCS/devInit.c,v 1.2 89/07/14 13:08:46 nelson Exp Locker: nelson $ SPRITE (Berkeley)";
@


1.2
log
@Integrated back into current source.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/ds3100.md/devInit.c,v 1.1 89/07/10 19:51:51 nelson Exp $ SPRITE (Berkeley)";
d24 1
a24 2
#include "devKeyboard.h"
#include "devGraphics.h"
d53 1
a53 1
    Dev_KbdInit();
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: devInit.c,v 1.5 89/06/29 09:49:15 mnelson Exp $ SPRITE (Berkeley)";
a95 47
}


/*
 *----------------------------------------------------------------------
 *
 * Dev_GatherDiskStats --
 *
 *	Determine which disks are idle.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
Dev_GatherDiskStats()
{
}


/*
 *----------------------------------------------------------------------
 *
 * Dev_GetDiskStats --
 *
 *	Return statistics about the different disks.
 *
 * Results:
 *	Number of statistics entries returned.
 *
 * Side effects:
 *	Entries in *diskStatPtr filled in.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
int
Dev_GetDiskStats(diskStatArr, numEntries)
    Sys_DiskStats	*diskStatArr;	/* Where to store the disk stats. */
    int			numEntries;	/* The number of elements in 
					 * diskStatArr. */
{
    return(0);
@
