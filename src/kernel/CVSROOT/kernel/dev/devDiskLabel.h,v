head     9.5;
branch   ;
access   ;
symbols  ds3100:9.5 sun3:9.5 sun4nw:9.5 symm:9.5 spur:9.5 Summer89:9.0 newlib:8.0 Summer88:6.0 sbc:5.1;
locks    ; strict;
comment  @ * @;


9.5
date     90.09.11.12.12.45;  author rab;  state Exp;
branches ;
next     9.4;

9.4
date     90.03.01.12.22.36;  author jhh;  state Exp;
branches ;
next     9.3;

9.3
date     90.02.20.15.32.35;  author jhh;  state Exp;
branches ;
next     9.2;

9.2
date     90.02.13.16.07.58;  author shirriff;  state Exp;
branches ;
next     9.1;

9.1
date     90.02.08.09.44.12;  author shirriff;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.56.55;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.08.15.18.33.41;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     89.05.23.09.51.54;  author mendel;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.10.04;  author douglis;  state Stable;
branches ;
next     6.0;

6.0
date     88.08.11.12.11.27;  author brent;  state Stable;
branches ;
next     5.1;

5.1
date     88.05.05.17.51.12;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.50.28;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.5
log
@Added prototypes.
@
text
@/*
 * devDiskLabel.h --
 *
 *      This defines the disk label that Sun writes on the 0'th sector of
 *      the 0'th cylinder of its SMD disks.  The disk label contains some
 *      geometry information and also the division of the disk into a
 *      number of partitions.  Each partition is identified to the drive
 *      by a different unit number.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 9.4 90/03/01 12:22:36 jhh Exp Locker: rab $ SPRITE (Berkeley)
 */

#ifndef _DEVDISKLABEL
#define _DEVDISKLABEL

/*
 * SUN_NUM_DISK_PARTS is the number of partitions that are recorded in
 * the label information.  The size of the padding in the Sun_DiskLabel
 * type is dependend on this number...
 */
#define SUN_NUM_DISK_PARTS  8

/*
 * A disk is divided into partitions and this type specifies where a
 * partition starts and how many blocks (sectors) it contains.
 */
typedef struct Sun_DiskMap {
    int cylinder;
    int numBlocks;
} Sun_DiskMap;

/*
 * Label information on the zero'th sector.  The partition map and the
 * number of heads, sectors, and cylinders are used by the disk driver to
 * map from a block number in a disk partion to a block number on the raw
 * disk.  The gap and interleaving information are used by the block
 * allocation routines.
 */
typedef struct Sun_DiskLabel {
    char    asciiLabel[128];    	/* For compatibility with other systems
					 * that write an ascii label on a disk*/
    char    pad[512-(128+8*8+11*2)];	/* The sector size is 512 bytes, and
					 * padding puts our label info at the
					 * end of the sector. */
    unsigned short  gap1;		/* size of gap 1 */
    unsigned short  gap2;		/* size of gap 2 */
    unsigned short  interleave;		/* interleave factor */
    unsigned short  numCylinders;	/* # of data cylinders */
    unsigned short  numAltCylinders;	/* # of alternate cylinders */
    unsigned short  numHeads;		/* # of heads in this partition */
    unsigned short  numSectors;		/* # of 512 byte sectors per track */
    unsigned short  bhead;		/* ?? Head number under which this
					 * label is found, consistency chk */
    unsigned short  partitionID;	/* physical partition # */
    Sun_DiskMap map[SUN_NUM_DISK_PARTS]; /* Indicates the size and starting
					 * cylinder of the disk partitions */
    unsigned short  magic;		/* Identifies this label format */
    unsigned short  checkSum;		/* XOR checksum of sector */
} Sun_DiskLabel;
 
#define SUN_DISK_MAGIC       0xDABE

/*
 * The sun label does not describe the location of the filesystem header
 * information that comes after the zero'th label sector.  (The sprite label
 * will, but is never used.)  Instead, the following constants are used.
 * SUN_SUMMARY_SECTOR  one sector of summary info
 * SUN_DOMAIN_SECTOR  the first sector of the static domain header
 */
#define SUN_SUMMARY_SECTOR	17
#define SUN_DOMAIN_SECTOR	18

/* 
 * SUN_LABEL_SECTOR -- sector holding the disk label
 * SUN_BOOT_SECTOR -- first sector of the boot program
 */
#define SUN_LABEL_SECTOR 0
#define SUN_BOOT_SECTOR 1

/*
 * DEC_NUM_DISK_PARTS is the number of partitions that are recorded in
 * the label information.  The size of the padding in the Dec_DiskLabel
 * type is dependend on this number...
 */
#define DEC_NUM_DISK_PARTS  8

#define DEC_LABEL_VERSION 1

/*
 * A disk is divided into partitions and this type specifies where a
 * partition starts and how many bytes it contains.
 */
typedef struct Dec_DiskMap {
    int numBytes;	/* Bytes in partition. */
    int offsetBytes;	/* Start of partition in bytes. */
} Dec_DiskMap;

typedef struct Dec_BootMap {
    int numBlocks;	/* Number of blocks to read. */
    int startBlock;	/* Starting block on disk. */
} Dec_BootMap;

/*
 * Label information on the 31st (DEC_LABEL_SECTOR)  sector.
 */
typedef struct Dec_DiskLabel {

    int		magic;			/* DEC_LABEL_MAGIC */
    int		isPartitioned;		/* 1 if disk is partitioned. */
    Dec_DiskMap map[DEC_NUM_DISK_PARTS]; /* Indicates disk partitions. */
    /*
     * The following stuff is a Sprite addition to the standard
     *  Dec disk label.
     */
    int		numCylinders;
    int		numAltCylinders;
    int		numHeads;
    int		numSectors;
    int		bootSector;
    int		numBootSectors;
    int		summarySector;
    int		domainSector;
    int		numDomainSectors;
    int		spriteMagic;		/* FSDM_DISK_MAGIC */
    char	asciiLabel[128];    	/* For compatibility. */
    int		version;
    char	pad[512-(13*4+DEC_NUM_DISK_PARTS*8+128)];/* 512 byte sector. */
} Dec_DiskLabel;

/*
 * Boot block information on the 0th sector.
 * The boot program is stored in sequences of contiguous blocks.
 * If mode is 0, there is just one sequence of blocks and one Dec_BootMap
 * is used.  If mode is 1, there are multiple sequences of blocks
 * and multiple Dec_BootMaps are used, the last with numBlocks = 0.
 */
typedef struct Dec_DiskBoot {
    char	pad[8];
    int		magic;			/* DEC_BOOT_MAGIC */
    int		mode;			/* Mode for boot info. */
    int		loadAddr;		/* Address to start loading. */
    int		execAddr;		/* Address to start execing. */
    Dec_BootMap	map[61];		/* Position of boot program. */
} Dec_DiskBoot;
 
#define DEC_BOOT_MAGIC	0x02757a
#define DEC_LABEL_MAGIC	0x032957

/*
 * The following default values are used:
 * DEC_BOOT_SECTOR	The sector holding the boot information.
 * DEC_SUMMARY_SECTOR  one sector of summary info
 * DEC_DOMAIN_SECTOR  the first sector of the static domain header
 * DEC_LABEL_SECTOR	The sector holding the disk label.
 */
#define DEC_BOOT_SECTOR		0
#define DEC_SUMMARY_SECTOR	17
#define DEC_DOMAIN_SECTOR	18
#define DEC_LABEL_SECTOR	31

/*
 * Macro's to compute partition numbers from Fs_Device structures. Devices
 * may be treated as non-partitioned.  In non-partitioned device the entire
 * disk is treated as one partition.
 * Disk device encode the Fs_Device unit number as follows:
 *	bit 3	  = if 1 treat disk as a raw disk with no partition. if 0
 *		    treat as partition disk.
 *	bit 0 - 2 = if partitioned disk, bits 0 - 2 are the partition number.
 *
 * DISK_PARTITION() - Compute the partition number from the Fs_Device
 *		      structure.
 * DISK_IS_PARTITIONED() - Return TRUE if a Fs_Device structure specifies a
 *			   non partitioned disk.
 * WHOLE_DISK_PARTITION - The partition number specifing an entire disk.
 */

#define	DISK_IS_PARTITIONED(fsDevice)	(!((fsDevice)->unit&0x8))
#define	DISK_PARTITION(fsDevice)  	((fsDevice)->unit&0x7)
#define	WHOLE_DISK_PARTITION (-1)

/*
 * Disks contain a map that defines the way the disk is partitioned.
 * Each partition corresponds to a different device unit.  Partitions
 * are made up of complete cylinders because the disk layout and
 * allocation strategies are cylinder oriented.
 */
typedef struct DevDiskMap {
    int firstCylinder;		/* The first cylinder in the partition */
    int numCylinders;		/* The number of cylinders in the partition */
} DevDiskMap;

/*
 * There are generally 8 disk partitions defined for a disk.
 */
#define DEV_NUM_DISK_PARTS	8



#endif /* _DEVDISKLABEL */
@


9.4
log
@Reverted DOMAIN_SECTOR and SUMMARY_SECTOR to be #17 and #18
instead of being after the DEC_LABEL, which is at sector #31
(brent)
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 9.3 90/02/20 15:32:35 jhh Exp $ SPRITE (Berkeley)
a163 12

/*
 * Macro's to compute partition numbers from Fs_Device structures. Devices
 * may be treated as non-partitioned.  In non-partitioned device the entire
 * disk is treated as one partition.
 * Disk device encode the Fs_Device unit number as follows:
 *	bit 3	  = if 1 treat disk as a raw disk with no partition. if 0
 *		    treat as partition disk.
 *	bit 0 - 2 = if partitioned disk, bits 0 - 2 are the partition
number.
 *

@


9.3
log
@added a couple Sun constants
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 9.2 90/02/13 16:07:58 shirriff Exp $ SPRITE (Berkeley)
d161 2
a162 2
#define DEC_SUMMARY_SECTOR	(DEC_LABEL_SECTOR+1)
#define DEC_DOMAIN_SECTOR	(DEC_LABEL_SECTOR+2)
@


9.2
log
@Made some changes to the dec disk label definitions.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 9.1 90/02/08 09:44:12 shirriff Exp $ SPRITE (Berkeley)
d76 7
@


9.1
log
@Added stuff for DEC labels
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 9.0 89/09/12 14:56:55 douglis Stable Locker: shirriff $ SPRITE (Berkeley)
d84 2
d108 4
a111 2
    /* The following stuff is a Sprite addition to the standard
       Dec disk label. */
d122 3
a124 1
    char    pad[512-(28+DEC_NUM_DISK_PARTS*8)];	/* 512 byte sector. */
d140 1
a140 1
    Dec_BootMap	map[29];		/* Position of boot program. */
d147 1
a147 3
 * The dec label does not describe the location of the filesystem header
 * information that comes after the zero'th label sector.  (The sprite label
 * will, but is never used.)  Instead, the following constants are used.
d154 2
a155 2
#define DEC_SUMMARY_SECTOR	17
#define DEC_DOMAIN_SECTOR	18
@


9.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 8.2 89/08/15 18:33:41 rab Exp Locker: douglis $ SPRITE (Berkeley)
d76 89
@


8.2
log
@Commented #endif labels.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 8.1 89/05/23 09:51:54 mendel Exp Locker: rab $ SPRITE (Berkeley)
@


8.1
log
@Added disk partitioning defintions.
@
text
@d14 1
a14 1
 * $Header: devDiskLabel.h,v 5.1 88/05/05 17:51:12 nelson Exp $ SPRITE (Berkeley)
d80 1
a80 1
 * disk is treated as one partition. 
d85 2
a86 2
 * 
 * DISK_PARTITION() - Compute the partition number from the Fs_Device 
d115 1
a115 1
#endif _DEVDISKLABEL
@


8.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/dev/RCS/devDiskLabel.h,v 6.0 88/08/11 12:11:27 brent Stable Locker: douglis $ SPRITE (Berkeley)
d76 38
@


6.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
 * $Header: devDiskLabel.h,v 5.1 88/05/05 17:51:12 nelson Exp $ SPRITE (Berkeley)
@


5.1
log
@Changed to handle movement of functionality from sys to mach.
@
text
@d14 1
a14 1
 * $Header: devDiskLabel.h,v 5.0 87/08/11 10:50:28 sprite Exp $ SPRITE (Berkeley)
@


5.0
log
@First Sprite native copy
@
text
@d2 1
a2 1
 * sunDiskLabel.h --
d14 1
a14 1
 * $Header: sunDiskLabel.h,v 4.1 87/06/02 12:45:45 brent Exp $ SPRITE (Berkeley)
d17 2
a18 2
#ifndef _SUNDISKLABEL
#define _SUNDISKLABEL
d77 1
a77 1
#endif _SUNDISKLABEL
@
