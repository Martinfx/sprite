head     1.5;
branch   ;
access   ;
symbols  ds3100:1.5 sun3:1.5 sun4nw:1.5 symm:1.5 spur:1.5;
locks    ; strict;
comment  @ * @;


1.5
date     91.10.18.01.20.02;  author dlong;  state Exp;
branches ;
next     1.4;

1.4
date     91.07.17.11.48.04;  author jhh;  state Exp;
branches ;
next     1.3;

1.3
date     91.01.08.17.27.04;  author mgbaker;  state Exp;
branches ;
next     1.2;

1.2
date     90.11.27.12.48.29;  author mgbaker;  state Exp;
branches ;
next     1.1;

1.1
date     89.08.09.12.49.41;  author mendel;  state Exp;
branches ;
next     ;


desc
@Stable kernel now.
@


1.5
log
@sun4c/sun4c2 merge
@
text
@/* 
 * devConfig.c --
 *
 *	Configuration table for the devices in the system.  There is
 *	a table for the possible controllers in the system, and
 *	then a table for devices.  Devices are implicitly associated
 *	with a controller.  This file should be automatically generated
 *	by a config program, but it isn't.
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun4c.md/RCS/devConfig.c,v 1.4 91/07/17 11:48:04 jhh Exp $ SPRITE (Berkeley)";
#endif not lint


#include "sprite.h"
#include "devAddrs.h"
#include "devInt.h"
#include "scsiC90.h"
#include "devTypes.h"
#include "scsiHBA.h"

/*
 * Per device include files.
 */
/*
 * The controller configuration table.
 */
DevConfigController devCntrlr[] = {
   /* Name   Dev_Name Address ID InitProc   IntrVector  IntrRoutine. */
   { "SCSIC90",  "esp", NIL, 0, DevSCSIC90Init, 3, DevSCSIC90Intr},
};
/*
 * We want to treat the dma controller and scsi device as the same device,
 * but the both must be mapped separately, so we give them separate entries,
 * but with only one init routine.
 */
int devNumConfigCntrlrs = sizeof(devCntrlr) / sizeof(DevConfigController);
/*
 * Table of SCSI HBA types attached to this system.
 */

ScsiDevice *((*devScsiAttachProcs[]) _ARGS_((Fs_Device *devicePtr,
		void (*insertProc) (List_Links *elementPtr,
				    List_Links *elementListHdrPtr)))) = {
    DevSCSIC90AttachDevice,		/* SCSI Controller type 0. */
};
int devScsiNumHBATypes = sizeof(devScsiAttachProcs) / 
			 sizeof(devScsiAttachProcs[0]);
/*
 * A list of disk devices that is used when probing for a root partition.
 * The choices are:
 * SCSI Disk target ID 0 LUN 0 partition 0 on SCSIC90 HBA 0. 
 * SCSI Disk target ID 0 LUN 0 partition 2 on SCSIC90 HBA 0. 
 * SCSI Disk target ID 0 LUN 0 partition 6 on SCSIC90 HBA 0. 
 */
Fs_Device devFsDefaultDiskPartitions[] = { 
    { -1, SCSI_MAKE_DEVICE_TYPE(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 2),
          SCSI_MAKE_DEVICE_UNIT(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 2),
	(ClientData) NIL },
    { -1, SCSI_MAKE_DEVICE_TYPE(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 0),
          SCSI_MAKE_DEVICE_UNIT(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 0),
	(ClientData) NIL },
    { -1, SCSI_MAKE_DEVICE_TYPE(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 6),
          SCSI_MAKE_DEVICE_UNIT(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 6),
	(ClientData) NIL },
  };
int devNumDefaultDiskPartitions = sizeof(devFsDefaultDiskPartitions) / 
			  sizeof(Fs_Device);
@


1.4
log
@added a few more default partitions to check
@
text
@d21 1
a21 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun4c.md/RCS/devConfig.c,v 1.3 91/01/08 17:27:04 mgbaker Exp $ SPRITE (Berkeley)";
d39 2
a40 8
   /* Name     Address,  Addr space, ID, InitProc   IntrVector  IntrRoutine. */
#ifdef NOTDEF
/* This seems already to be mapped at a virtual address. */
   { "DMA_UNIT", DEV_DMA_ADDR, DEV_SBUS_OB, 0, (ClientData (*)()) NIL, 3,
	   DevSCSIC90Intr},
#endif
   { "SCSIC90", DEV_SCSI_ADDR, DEV_SBUS_OB, 0, DevSCSIC90Init, 3,
	   DevSCSIC90Intr},
@


1.3
log
@Now you can have a sparcstation root file server.
@
text
@d21 1
a21 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun4c.md/RCS/devConfig.c,v 1.2 90/11/27 12:48:29 mgbaker Exp $ SPRITE (Berkeley)";
d69 2
d75 6
@


1.2
log
@New sparcstation scsi driver.
@
text
@d21 1
a21 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev.mgb/sun4c.md/RCS/devConfig.c,v 1.1 90/11/14 14:48:16 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
d71 2
a72 2
    { -1, SCSI_MAKE_DEVICE_TYPE(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 0),
          SCSI_MAKE_DEVICE_UNIT(DEV_SCSI_DISK, DEV_SCSIC90_HBA, 0, 0, 0, 0),
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev.jo/sun4.md/RCS/devConfig.c,v 1.1 89/07/15 11:56:42 ouster Exp $ SPRITE (Berkeley)";
d26 1
d28 2
a30 1
#include "devTypes.h"
d40 7
d48 5
a52 1
#ifdef notdef
a53 2
#endif
int devNumConfigCntrlrs = 0;
d58 4
a61 1
ScsiDevice *((*devScsiAttachProcs[])()) = {
a62 1
#ifdef notdef
a64 2
#endif
int devScsiNumHBATypes = 0;
d68 1
a68 2
 * Drive 0 partition 0 of xylogics 450 controller 0.
 * SCSI Disk target ID 0 LUN 0 partition 0 on SCSI3 HBA 0. 
d71 4
a74 2
    };
#ifdef notdef
a76 2
#endif
int devNumDefaultDiskPartitions = 0;
@
