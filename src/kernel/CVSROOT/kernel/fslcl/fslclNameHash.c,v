head     9.4;
branch   ;
access   ;
symbols  ds3100:9.4 sun3:9.4 sprited:9.4.1 sun4nw:9.4 symm:9.4 spur:9.4 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.4
date     90.10.08.15.38.49;  author mendel;  state Exp;
branches 9.4.1.1;
next     9.3;

9.3
date     89.10.26.18.43.17;  author brent;  state Exp;
branches ;
next     9.2;

9.2
date     89.10.23.09.56.20;  author brent;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.23.08.46.54;  author brent;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.07.20;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.08.21.15.27.07;  author mendel;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.30.16.11.40;  author jhh;  state Exp;
branches ;
next     8.2;

8.2
date     89.02.14.10.56.25;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     89.01.06.11.19.50;  author jhh;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.20.49;  author douglis;  state Stable;
branches ;
next     7.0;

7.0
date     88.11.11.15.32.20;  author brent;  state Exp;
branches ;
next     6.2;

6.2
date     88.10.22.14.39.23;  author brent;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.31.12.05.37;  author brent;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.16.42;  author brent;  state Stable;
branches ;
next     1.2;

1.2
date     88.06.15.17.08.51;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.04.10.34.57;  author brent;  state Exp;
branches ;
next     ;

9.4.1.1
date     91.11.15.16.20.06;  author kupfer;  state Exp;
branches ;
next     ;


desc
@The component name hash table module
@


9.4
log
@Changed name to fslclNameHash.c
Fixed includes to use <> rather than "", added functions prototypes, and
removed lint.
@
text
@/* fslclNameHash.c --
 *
 *      This is a modified version of the hashing utilities used for the
 *      filesystem name cache.  The main difference is that there is a two
 *      part key, the string and a file identifier. Also, entries are kept
 *      in LRU order (in another list) for replacement when the table is
 *      full.
 *
 * Copyright (C) 1983 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/fs.mendel/RCS/fsNameHash.c,v 1.1 90/01/16 17:10:59 mendel Exp Locker: mendel $ SPRITE (Berkeley)";
#endif  not lint

#include <sprite.h>
#include <fs.h>
#include <fsutil.h>
#include <fslclNameHash.h>
#include <fslcl.h>
#include <fsStat.h>
#include <string.h>
#include <list.h>
#include <sys.h>

#include <stdio.h>

static	Sync_Lock nameHashLock = Sync_LockInitStatic("Fs:nameHashLock");
#define	LOCKPTR	&nameHashLock

static void HashInit _ARGS_((FslclHashTable *table, int numBuckets));
static int Hash _ARGS_((FslclHashTable *table, char *string, 
			Fs_HandleHeader *keyHdrPtr));
static FslclHashEntry *ChainSearch _ARGS_((FslclHashTable *table, char *string,
			Fs_HandleHeader *keyHdrPtr,  List_Links *hashList));


/*
 *---------------------------------------------------------
 * 
 * HashInit --
 *
 *	This routine just sets up the hash table with the given size.
 *
 * Results:	
 *	None.
 *
 * Side Effects:
 *	Memory is allocated for the initial bucket area.
 *
 *---------------------------------------------------------
 */

static void
HashInit(table, numBuckets)
    register FslclHashTable	*table;
    int			numBuckets;	/* How many buckets to create for 
					 * starters. This number is rounded up 
					 * to a power of two. */
{
    register	int 		i;
    register	FslclHashBucket 	*tablePtr;

    /* 
     * Round up the size to a power of two, and compute a shift and mask
     * used to index into the hash header table.
     */

    if (numBuckets < 0) {
	numBuckets = -numBuckets;
    }
    table->numEntries = 0;
    table->size = 2;
    table->mask = 1;
    table->downShift = 29;
    while (table->size < numBuckets) {
	table->size <<= 1;
	table->mask = (table->mask << 1) + 1;
	table->downShift--;
    }

    fs_Stats.nameCache.size = table->size;

    List_Init(&(table->lruList));
    table->table =
	(FslclHashBucket *) malloc(sizeof(FslclHashBucket) * table->size);
    for (i=0, tablePtr = table->table; i < table->size; i++, tablePtr++) {
	List_Init(&(tablePtr->list));
    }
}

/*
 *----------------------------------------------------------------------
 *
 * Fslcl_NameHashInit --
 *
 *	Make sure the local name hash table is initialized.  Called
 *	when disks are attached so that diskless clients don't allocate
 *	space for the name hash table.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	HashInit is called which allocates memory for the initial bucket area.
 *	
 *
 *----------------------------------------------------------------------
 */

void
Fslcl_NameHashInit()
{
    if (fslclNameTablePtr == (FslclHashTable *)NIL) {
	fslclNameTablePtr = &fslclNameTable;
	HashInit(fslclNameTablePtr, fslclNameHashSize);
    }
}


/*
 *---------------------------------------------------------
 *
 * Hash --
 *	This is a local procedure to compute a hash table
 *	bucket address based on a pair <string, fileHdrPtr>.
 *	The file information needs to be used to randomize the same
 *	names found in different directories.
 *
 * Results:
 *	The return value is an integer between 0 and size - 1.
 *
 * Side Effects:	
 *	None.
 *
 * Note:
 *	The randomizing code is stolen straight from the rand library routine.
 *
 *---------------------------------------------------------
 */

INTERNAL static int
Hash(table, string, keyHdrPtr)
    register FslclHashTable *table;	/* The hash table (per domain?) */
    register char 	*string;	/* Name of the component */
    Fs_HandleHeader	*keyHdrPtr;	/* Handle of the parent directory */
{
    register int 	i = 0;

    while (*string != 0) {
	i = i * 10 + *string++;
    }
    i += (int) keyHdrPtr;
    return(((i*1103515245 + 12345) >> table->downShift) & table->mask);
}


/*
 *---------------------------------------------------------
 *
 * ChainSearch --
 *
 * 	Search the hash table for the entry in the hash chain.
 *
 * Results:
 *	Pointer to entry in hash chain, NIL if none found.
 *
 * Side Effects:
 *	None.
 *
 *---------------------------------------------------------
 */

INTERNAL static FslclHashEntry *
ChainSearch(table, string, keyHdrPtr, hashList)
    FslclHashTable 		*table;		/* Hash table to search. */
    register char		*string;	/* Hash key, part 1 */
    register Fs_HandleHeader	*keyHdrPtr;	/* Hash key, part 2 */
    register List_Links 	*hashList;	/* Bucket list indexed by Hash*/
{
    register FslclHashEntry *hashEntryPtr;

    LIST_FORALL(hashList, (List_Links *) hashEntryPtr) {
	if ((strcmp(hashEntryPtr->keyName, string) == 0) &&
		(hashEntryPtr->keyHdrPtr == keyHdrPtr)) {
	    /*
	     * Move the entry to the front of the LRU list.
	     */
	    List_Move(&(hashEntryPtr->lru.links),
			 LIST_ATFRONT(&(table->lruList)));
	    return(hashEntryPtr);
	}
    }
    /* 
     * The desired entry isn't there 
     */

    return ((FslclHashEntry *) NIL);
}

/*
 *---------------------------------------------------------
 *
 * FslclHashLookOnly --
 *
 * 	Searches a hash table for an entry corresponding to the string
 *	and parent file.
 *
 * Results:
 *	The return value is a pointer to the entry for string,
 *	if string was present in the table.  If string was not
 *	present, NIL is returned.
 *
 * Side Effects:
 *	None.
 *
 *---------------------------------------------------------
 */

ENTRY FslclHashEntry *
FslclHashLookOnly(table, string, keyHdrPtr)
    register FslclHashTable *table;		/* Hash table to search. */
    char		*string;		/* Hash key, part 1. */
    Fs_HandleHeader	*keyHdrPtr;		/* Hash key, part 2. */
{
    FslclHashEntry *hashEntryPtr;

    LOCK_MONITOR;
    fs_Stats.nameCache.accesses++;
    hashEntryPtr = ChainSearch(table, string, keyHdrPtr,
		  &(table->table[Hash(table, string, keyHdrPtr)].list));
    if (hashEntryPtr != (FslclHashEntry  *) NIL) {
	fs_Stats.nameCache.hits++;
    }

    UNLOCK_MONITOR;
    return(hashEntryPtr);
}


/*
 *---------------------------------------------------------
 *
 * FsHashFind --
 *
 *	Searches a hash table for an entry corresponding to
 *	key.  If no entry is found, then one is created.
 *
 * Results:
 *	The return value is a pointer to the entry for string.
 *	If the entry is a new one, then the pointer field is
 *	zero.
 *
 *	Side Effects:
 *	Memory is allocated, and the hash buckets may be modified.
 *---------------------------------------------------------
 */

ENTRY FslclHashEntry *
FslclHashInsert(table, string, keyHdrPtr, hdrPtr)
    register FslclHashTable	*table;		/* Hash table to search. */
    register	char		*string;	/* Hash key, part 1 */
    Fs_HandleHeader		*keyHdrPtr;	/* Hash key, part 2 */
    Fs_HandleHeader		*hdrPtr;	/* Value */
{
    register 	FslclHashBucket 	*bucketPtr;
    register 	FslclHashEntry	*hashEntryPtr;
    register	List_Links	*lruLinkPtr;

    LOCK_MONITOR;

    bucketPtr = &(table->table[Hash(table, string, keyHdrPtr)]);
    hashEntryPtr = ChainSearch(table, string, keyHdrPtr,
					&(bucketPtr->list));

    if (hashEntryPtr != (FslclHashEntry *) NIL) {
	UNLOCK_MONITOR;
	return(hashEntryPtr);
    }

    /* 
     * See if we have to do LRU replacement before adding another entry.
     */

    if (table->numEntries >= table->size) {
	fs_Stats.nameCache.replacements++;
	lruLinkPtr = LIST_ATREAR(&(table->lruList));
	hashEntryPtr = ((struct FsLruList *)lruLinkPtr)->entryPtr;
	Fsutil_HandleDecRefCount(hashEntryPtr->hdrPtr);
	Fsutil_HandleDecRefCount(hashEntryPtr->keyHdrPtr);
	List_Remove((List_Links *)hashEntryPtr);
	List_Remove(&(hashEntryPtr->lru.links));
	free((Address)hashEntryPtr);
    } else {
	table->numEntries += 1;
    }

    /*
     * Not there, we have to allocate.  If the string is longer than 3
     * bytes, then we have to allocate extra space in the entry.
     */

    hashEntryPtr = (FslclHashEntry *) malloc(sizeof(FslclHashEntry) + 
			strlen(string) - 3);
    (void)strcpy(hashEntryPtr->keyName, string);
    hashEntryPtr->keyHdrPtr = keyHdrPtr;
    hashEntryPtr->hdrPtr = hdrPtr;
    hashEntryPtr->bucketPtr = bucketPtr;
    List_Insert((List_Links *) hashEntryPtr, LIST_ATFRONT(&(bucketPtr->list)));
    hashEntryPtr->lru.entryPtr = hashEntryPtr;
    List_Insert(&(hashEntryPtr->lru.links), LIST_ATFRONT(&(table->lruList)));
    /*
     * Increment the reference count on the handle since we now have it
     * in the name cache.
     */
    Fsutil_HandleIncRefCount(hdrPtr, 1);
    Fsutil_HandleIncRefCount(keyHdrPtr, 1);
    UNLOCK_MONITOR;

    return(hashEntryPtr);
}

/*
 *---------------------------------------------------------
 *
 * FslclHashDelete --
 *
 * 	Search the hash table for an entry corresponding to the string
 *	and parent file and then delete it if it is there.
 *
 * Results:
 *	None.
 *
 * Side Effects:
 *	Hash chain that entry lives is modified and memory is freed.
 *
 *---------------------------------------------------------
 */

void
FslclHashDelete(table, string, keyHdrPtr)
    register FslclHashTable *table;	/* Hash table to search. */
    char		 *string;		/* Hash key, part 1. */
    Fs_HandleHeader	 *keyHdrPtr;		/* Hash key, part 2. */
{
    FslclHashEntry *hashEntryPtr;

    LOCK_MONITOR;

    fs_Stats.nameCache.accesses++;
    hashEntryPtr = ChainSearch(table, string, keyHdrPtr,
		  &(table->table[Hash(table, string, keyHdrPtr)].list));
    if (hashEntryPtr != (FslclHashEntry  *) NIL) {
	/*
	 * Release the two handles referenced by the name cache entry.
	 * This is called when deleting the file, at which point both
	 * the parent (keyHdrPtr) and the file itself (hdrPtr) are locked.
	 */
	Fsutil_HandleDecRefCount(hashEntryPtr->hdrPtr);
	Fsutil_HandleDecRefCount(hashEntryPtr->keyHdrPtr);
	List_Remove((List_Links *)hashEntryPtr);
	List_Remove(&(hashEntryPtr->lru.links));
	free((Address)hashEntryPtr);
	table->numEntries--;
    }

    UNLOCK_MONITOR;
}


/*
 *---------------------------------------------------------
 *
 * FsRebuildTable --
 *	This local routine makes a new hash table that
 *	is larger than the old one.
 *
 * Results:	
 * 	None.
 *
 * Side Effects:
 *	The entire hash table is moved, so any bucket numbers
 *	from the old table are invalid.
 *
 *---------------------------------------------------------
 */
#ifdef notdef
static void
FsRebuildTable(table)
    register	FslclHashTable 	*table;		/* Table to be enlarged. */
{
    register	FslclHashBucket	*oldTable;
    register	FslclHashEntry  	*hashEntryPtr;
    register	int 		oldSize;
    int 		 	bucket;
    FslclHashBucket		*saveTable;
    FslclHashBucket		*bucketPtr;
    Fs_HandleHeader		*keyHdrPtr;
    int			 	version;

    LOCK_MONITOR;

    saveTable = table->table;
    oldSize = table->size;

    /* 
     * Build a new table 4 times as large as the old one. 
     */

    HashInit(table, table->size * 4);

    for (oldTable = saveTable; oldSize > 0; oldSize--, oldTable++) {
	while (!List_IsEmpty(&(oldTable->list))) {
	    hashEntryPtr = (FslclHashEntry *) List_First(&(oldTable->list));
	    List_Remove((List_Links *) hashEntryPtr);
	    List_Remove(&(hashEntryPtr->lru.links));
	    keyHdrPtr = hashEntryPtr->keyHdrPtr;
	    bucket = Hash(table, hashEntryPtr->keyName, keyHdrPtr);
	    bucketPtr = &(table->table[bucket]);
	    List_Insert((List_Links *) hashEntryPtr, 
		LIST_ATFRONT(&(bucketPtr->list)));
	    List_Insert(&(hashEntryPtr->lru.links),
		LIST_ATFRONT(&(table->lruList)));
	    hashEntryPtr->bucketPtr = bucketPtr;
	    table->numEntries++;
	}
    }

    free((Address) saveTable);

    UNLOCK_MONITOR;
}
#endif notdef

/*
 *---------------------------------------------------------
 *
 * FsHashStats --
 *	This routine merely prints statistics about the
 *	current bucket situation.
 *
 * Results:	
 *	None.
 *
 * Side Effects:	
 *	Junk gets printed.
 *
 *---------------------------------------------------------
 */

void
FslclNameHashStats()
{
    FslclHashTable *table = fslclNameTablePtr;
    int count[10], overflow, i, j;
    FslclHashEntry 	*hashEntryPtr;
    List_Links	*hashList;

    if (table == (FslclHashTable *)NULL || table == (FslclHashTable *)NIL) {
	return;
    }
    for (i=0; i<10; i++) {
	count[i] = 0;
    }
    overflow = 0;
    for (i = 0; i < table->size; i++) {
	j = 0;
	hashList = &(table->table[i].list);
	LIST_FORALL(hashList, (List_Links *) hashEntryPtr) {
	    j++;
	}
	if (j < 10) {
	    count[j]++;
	} else {
	    overflow++;
	}
    }

    printf("FS Name Hash Table, %d entries in %d buckets\n", 
		table->numEntries, table->size);
    for (i = 0;  i < 10; i++) {
	printf("%d buckets with %d entries\n", count[i], i);
    }
    printf("%d buckets with > 9 entries\n", overflow);
}
@


9.4.1.1
log
@Initial branch for Sprite server.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/fslcl/fslclNameHash.c,v 9.4 90/10/08 15:38:49 mendel Exp $ SPRITE (Berkeley)";
@


9.3
log
@Removed Lint
@
text
@d1 1
a1 1
/* fsNameHash.c --
d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fslcl/RCS/fsNameHash.c,v 9.2 89/10/23 09:56:20 brent Exp Locker: brent $ SPRITE (Berkeley)";
d17 9
a25 9
#include "sprite.h"
#include "fs.h"
#include "fsutil.h"
#include "fsNameHash.h"
#include "fslcl.h"
#include "fsStat.h"
#include "string.h"
#include "list.h"
#include "sys.h"
d27 2
d32 5
@


9.2
log
@Fixed botch
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fslcl/RCS/fsNameHash.c,v 9.1 89/10/23 08:46:54 brent Exp Locker: brent $ SPRITE (Berkeley)";
d89 1
a89 1
 * FslclNameHashInit --
d91 3
a93 1
 *	Make sure the local name hash table is initialized.
d106 1
a106 1
FslclNameHashInit()
a107 3
    /*
     * Make sure a name hash table exists .
     */
@


9.1
log
@Fixed print routine so it does nothing if there is no hash table.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fslcl/RCS/fsNameHash.c,v 8.4 89/08/21 15:27:07 mendel Exp $ SPRITE (Berkeley)";
d454 1
a454 1
    if (table == (FslclHashTable *)NULL || table = (FslclHashTable *)NIL) {
@


9.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fslcl/RCS/fsNameHash.c,v 8.4 89/08/21 15:27:07 mendel Exp Locker: douglis $ SPRITE (Berkeley)";
d454 3
@


8.4
log
@Break up fs into many modules.    
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 8.3 89/05/30 16:11:40 jhh Exp $ SPRITE (Berkeley)";
@


8.3
log
@Removed call to Sync_LockRegister
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 8.2 89/02/14 10:56:25 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d19 1
a19 1
#include "fsInt.h"
d21 1
d30 1
d35 1
a35 1
 * FsNameHashInit --
d37 1
a37 1
 *	This routine just sets up the hash table.
d48 3
a50 3
void
FsNameHashInit(table, numBuckets)
    register FsHashTable	*table;
d56 1
a56 1
    register	FsHashBucket 	*tablePtr;
d76 1
a76 1
    fsStats.nameCache.size = table->size;
d80 1
a80 1
	(FsHashBucket *) malloc(sizeof(FsHashBucket) * table->size);
d85 29
d139 1
a139 1
    register FsHashTable *table;	/* The hash table (per domain?) */
d141 1
a141 1
    FsHandleHeader	*keyHdrPtr;	/* Handle of the parent directory */
d169 1
a169 1
INTERNAL static FsHashEntry *
d171 1
a171 1
    FsHashTable 		*table;		/* Hash table to search. */
d173 1
a173 1
    register FsHandleHeader	*keyHdrPtr;	/* Hash key, part 2 */
d176 1
a176 1
    register FsHashEntry *hashEntryPtr;
d193 1
a193 1
    return ((FsHashEntry *) NIL);
d199 1
a199 1
 * FsHashLookOnly --
d215 3
a217 3
ENTRY FsHashEntry *
FsHashLookOnly(table, string, keyHdrPtr)
    register FsHashTable *table;		/* Hash table to search. */
d219 1
a219 1
    FsHandleHeader	*keyHdrPtr;		/* Hash key, part 2. */
d221 1
a221 1
    FsHashEntry *hashEntryPtr;
d224 1
a224 1
    fsStats.nameCache.accesses++;
d227 2
a228 2
    if (hashEntryPtr != (FsHashEntry  *) NIL) {
	fsStats.nameCache.hits++;
d254 3
a256 3
ENTRY FsHashEntry *
FsHashInsert(table, string, keyHdrPtr, hdrPtr)
    register FsHashTable	*table;		/* Hash table to search. */
d258 2
a259 2
    FsHandleHeader		*keyHdrPtr;	/* Hash key, part 2 */
    FsHandleHeader		*hdrPtr;	/* Value */
d261 2
a262 2
    register 	FsHashBucket 	*bucketPtr;
    register 	FsHashEntry	*hashEntryPtr;
d271 1
a271 1
    if (hashEntryPtr != (FsHashEntry *) NIL) {
d281 1
a281 1
	fsStats.nameCache.replacements++;
d284 2
a285 2
	FsHandleDecRefCount(hashEntryPtr->hdrPtr);
	FsHandleDecRefCount(hashEntryPtr->keyHdrPtr);
d298 1
a298 1
    hashEntryPtr = (FsHashEntry *) malloc(sizeof(FsHashEntry) + 
d311 2
a312 2
    FsHandleIncRefCount(hdrPtr, 1);
    FsHandleIncRefCount(keyHdrPtr, 1);
d321 1
a321 1
 * FsHashDelete --
d336 2
a337 2
FsHashDelete(table, string, keyHdrPtr)
    register FsHashTable *table;	/* Hash table to search. */
d339 1
a339 1
    FsHandleHeader	 *keyHdrPtr;		/* Hash key, part 2. */
d341 1
a341 1
    FsHashEntry *hashEntryPtr;
d345 1
a345 1
    fsStats.nameCache.accesses++;
d348 1
a348 1
    if (hashEntryPtr != (FsHashEntry  *) NIL) {
d354 2
a355 2
	FsHandleDecRefCount(hashEntryPtr->hdrPtr);
	FsHandleDecRefCount(hashEntryPtr->keyHdrPtr);
d385 1
a385 1
    register	FsHashTable 	*table;		/* Table to be enlarged. */
d387 2
a388 2
    register	FsHashBucket	*oldTable;
    register	FsHashEntry  	*hashEntryPtr;
d391 3
a393 3
    FsHashBucket		*saveTable;
    FsHashBucket		*bucketPtr;
    FsHandleHeader		*keyHdrPtr;
d405 1
a405 1
    FsNameHashInit(table, table->size * 4);
d409 1
a409 1
	    hashEntryPtr = (FsHashEntry *) List_First(&(oldTable->list));
d447 1
a447 1
Fs_NameHashStats()
d449 1
a449 1
    FsHashTable *table = fsNameTablePtr;
d451 1
a451 1
    FsHashEntry 	*hashEntryPtr;
@


8.2
log
@Update Sync_Lock initialization and registration
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 8.1 89/01/06 11:19:50 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
a74 1
    Sync_LockRegister(&nameHashLock);
@


8.1
log
@new Sync_Lock definition
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 8.0 88/11/11 18:20:49 douglis Stable Locker: jhh $ SPRITE (Berkeley)";
d26 1
a26 1
static	Sync_Lock nameHashLock = SYNC_LOCK_INIT_STATIC();
d75 1
@


8.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 7.0 88/11/11 15:32:20 brent Exp Locker: douglis $ SPRITE (Berkeley)";
d26 1
a26 1
static	Sync_Lock nameHashLock = {0, 0};
@


7.0
log
@New version for conversion to new C library
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 6.2 88/10/22 14:39:23 brent Exp Locker: brent $ SPRITE (Berkeley)";
@


6.2
log
@Tweaked dump procedure print statements
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsNameHash.c,v 6.1 88/08/31 12:05:37 brent Exp Locker: brent $ SPRITE (Berkeley)";
a21 1
#include "mem.h"
a22 1
#include "byte.h"
d78 1
a78 1
	(FsHashBucket *) Mem_Alloc(sizeof(FsHashBucket) * table->size);
d148 1
a148 1
	if ((String_Compare(hashEntryPtr->keyName, string) == 0) &&
d257 1
a257 1
	Mem_Free((Address)hashEntryPtr);
d267 3
a269 3
    hashEntryPtr = (FsHashEntry *) Mem_Alloc(sizeof(FsHashEntry) + 
			String_Length(string) - 3);
    (void)String_Copy(string, hashEntryPtr->keyName);
d327 1
a327 1
	Mem_Free((Address)hashEntryPtr);
d393 1
a393 1
    Mem_Free((Address) saveTable);
d440 1
a440 1
    Sys_Printf("FS Name Hash Table, %d entries in %d buckets\n", 
d443 1
a443 1
	Sys_Printf("%d buckets with %d entries\n", count[i], i);
d445 1
a445 1
    Sys_Printf("%d buckets with > 9 entries\n", overflow);
@


6.1
log
@Removed lint.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: fsNameHash.c,v 6.0 88/08/11 12:16:42 brent Stable $ SPRITE (Berkeley)";
d418 1
a418 2
Fs_NameHashStats(table)
    FsHashTable *table;
d420 1
d442 1
a442 1
    Sys_Printf("Entries in table %d number of buckets %d\n", 
d445 1
a445 1
	Sys_Printf("Number of buckets with %d entries: %d.\n", i, count[i]);
d447 1
a447 1
    Sys_Printf("Number of buckets with > 9 entries: %d.\n", overflow);
@


6.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: fsNameHash.c,v 1.2 88/06/15 17:08:51 brent Exp $ SPRITE (Berkeley)";
d271 1
a271 1
    String_Copy(string, hashEntryPtr->keyName);
@


1.2
log
@Fixed name cache initialization
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: fsNameHash.c,v 1.1 88/04/04 10:34:57 brent Exp $ SPRITE (Berkeley)";
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: fsNameHash.c,v 5.3 87/11/02 10:45:32 brent Exp $ SPRITE (Berkeley)";
a26 3

Boolean fsNameCaching = TRUE;
int fsNameHashSize = FS_NAME_HASH_SIZE;
@
