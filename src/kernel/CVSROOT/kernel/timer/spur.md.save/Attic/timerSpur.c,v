head     8.6;
branch   ;
access   ;
symbols  sun4nw:8.6 symm:8.6 spur:8.6 newlib:8.0;
locks    ; strict;
comment  @ * @;


8.6
date     89.10.12.11.13.49;  author jhh;  state Exp;
branches ;
next     8.5;

8.5
date     89.09.12.14.43.02;  author jhh;  state Exp;
branches ;
next     8.4;

8.4
date     89.08.17.17.32.55;  author jhh;  state Exp;
branches ;
next     8.3;

8.3
date     89.02.19.22.12.51;  author jhh;  state Exp;
branches ;
next     8.2;

8.2
date     88.11.30.12.19.00;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.30.10.33.44;  author mendel;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.40.50;  author douglis;  state Stable;
branches ;
next     1.4;

1.4
date     88.10.27.13.26.21;  author mendel;  state Exp;
branches ;
next     1.3;

1.3
date     88.09.12.09.44.12;  author mendel;  state Exp;
branches ;
next     1.2;

1.2
date     88.08.23.10.22.25;  author mendel;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.08.10.18.07;  author mendel;  state Exp;
branches ;
next     ;


desc
@Spur devTimer and devCounter machine dependent routines.
@


8.6
log
@spur timer interrupts were all screwed up
@
text
@/*
 * timerSpur.c --
 *
 *	This file contains routines that manipulate the SPUR Cache Controller's
 *	timers. 
 *
 *	For a detailed explanation of the timers, see the reference [Wood87] 
 *	in devTimerSpurInt.h
 *
 *	From [Wood87] Section 4.3
 *
 *	There are three counters on the chip. Counter T0 is a 64bit timer
 *	that is incremented on every cycle. T0 is left running
 *	at all times and is used to compute time of day. Counter T1 and T2
 *	on the chip are 32 bit interval timers. T1 and T2 count up from a
 *	interval and will "stop within a few cycles of zero". Although it 
 *	is not stated in the reference manual, it is assumed that T1 and T2
 *	are also updated every cycle.
 *
 *	Many of the routines in here interact with the routines in the
 *	timer module. The timer module uses a free-running counter to
 *	calculate system up-time and the time of day. The timer module
 *	provides 64-bit (Timer_Ticks) and 32-bit (interval) time values 
 *	based on the value of the counter. See timerClock.c for details.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 8.5 89/09/12 14:43:02 jhh Exp $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "sys.h"
#include "timer.h"
#include "timerSpurInt.h"
#include "mach.h"
#include "sync.h"
#include "spriteTime.h"

/*
 * The timers must be loaded with the number of ticks to count
 * before causing an interrupt. The number of ticks is calculated
 * from the timer's interrupt interval (in milliseconds) and
 * the timer's counting frequency in routine Timer_TimerInit().
 */

static	unsigned int callbackTicks;
static  unsigned int profileTicks;

/*
 * A zero valued counter.
 */
static	 Timer_Ticks	zeroCount = {0,0};

/*
 * The largest interval value.
 */
#define	MAXINT	((unsigned int ) 0xffffffff)

/*
 * Processor containing the timer for each timer and counter
 */

#define	CALLBACK_COUNTER	0
#define	PROFILE_COUNTER		1
#define	CLOCK_COUNTER		2
#define	NUM_COUNTERS		3

static	int	processor[NUM_COUNTERS]; 

/*
 * Last value read from counter. This number is used to provide access to a
 * recent value of the counter for processors other than the processor with
 * the counter. It is assumed that the processor with the counter will also 
 * be the processor with the inteval times to Timer_GetCurrentTicks will
 * be called frequently. 
 */

static Timer_Ticks	currentTicks;

/*
 * Semaphore protecting the currentTicks variable.
 */

Sync_Semaphore	currentTicksMutex = 
    Sync_SemInitStatic("Timer:currentTicksMutex");

/*
 *  Time between callbacks.  */

static int interval;

static Time time = { 0, TIMER_CALLBACK_INTERVAL_APPROX};

/*
 *----------------------------------------------------------------------
 *
 * Timer_TimerInit --
 *
 *	Initialize the specified timer on the Cache Controller chip to
 *	cause interrupts at regular intervals. Initialize the call back
 *	interval ticks.
 *
 *	N.B. This routine must be called before Timer_TimerStart.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The specified timer is initialized and ready to start ticking.
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerInit(timer)
    register unsigned short 	timer;
{
     unsigned int modeRegister;		/* Local copy of CC mode register */
     unsigned int imaskRegister; 	/* Local copy of CC imask register */
     unsigned int intrMaskBit = 0; 	/* Set timer's bit in imask register */
     unsigned int modeRegBit = 0;	/* Set timer's bit in mode register */

    /*
     * Find the imask/istatus and the mode register bit for the specified
     * timer.  Also compute the timer's value.
     */

     if (timer == TIMER_CALLBACK_TIMER) {
	intrMaskBit = CALLBACK_TIMER_MASK_BIT;
	modeRegBit = CALLBACK_TIMER_MODE_BIT;
	callbackTicks = (int) (TIMER_FREQ/1000000.0 * 
		TIMER_CALLBACK_INTERVAL_APPROX); 
	interval = callbackTicks >> TIMER_INTERVAL_SHIFT;
	processor[CALLBACK_COUNTER] = Mach_GetProcessorNumber();
#ifdef NO_PROFILE_TIMER
    } else if (timer == TIMER_PROFILE_TIMER) {
	intrMaskBit = PROFILE_TIMER_MASK_BIT;
	modeRegBit = PROFILE_TIMER_MODE_BIT;
	profileTicks = (int) (TIMER_FREQ/1000.0 * TIMER_PROFILE_INTERVAL); 
	processor[PROFILE_COUNTER] = Mach_GetProcessorNumber();
#endif
    } else {
	panic("Timer_TimerInit: unknown timer %d\n", timer);
    }
    /*
     * Stop the timer in case it is ticking.
     */
    Mach_DisableNonmaskableIntr();
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    if (modeRegister & modeRegBit) { 
	modeRegister &= ((~modeRegBit) & 0xff);
	Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
    }
    Mach_EnableNonmaskableIntr();
    /*
     * Reset the timer's bit in the CC's Istatus register. Note that the
     * Istatus register always writes by anding the ones complement of the
     * data. ([Wood87] Section 5.1)
     */
    Mach_Write32bitCCReg(MACH_INTR_STATUS_0,intrMaskBit);
    /*
     * Register the routine to call on this interrupt.
     */
    Mach_SetHandler(intrMaskBit,Timer_TimerServiceInterrupts);
    Mach_EnableNonmaskableIntr();

}


/*
 *----------------------------------------------------------------------
 *
 * Timer_TimerStart --
 *
 *	Loads the specified timer with a new value to count from
 *	ands starts the timer.
 *
 *	N.B. The timer must have been initialized with Timer_TimerInit
 *	before this routine is called.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The timer starts ticking.
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerStart(timer)
    register unsigned short timer;
{
    unsigned int modeRegister;		/* Local copy of mode register. */
    unsigned int modeRegBit = 0;	/* Timer's bit in mode register. */
    unsigned int timerAddress = 0;	/* Timer's addresses in CC. */
    int ticks = 0;			/* Number of ticks to set timer to. */
    int		counter;		/* Processor number of counter. */

    if (timer == TIMER_CALLBACK_TIMER) {
	modeRegBit = CALLBACK_TIMER_MODE_BIT;
	timerAddress = CALLBACK_TIMER_ADDR;
	ticks = callbackTicks;
	counter	= CALLBACK_COUNTER;
#ifdef NO_PROFILE_TIMER
    } else if (timer == TIMER_PROFILE_TIMER) {
	modeRegBit = PROFILE_TIMER_MODE_BIT;
	timerAddress = PROFILE_TIMER_ADDR;
	ticks = profileTicks;
	counter	= PROFILE_COUNTER;
#endif
    } else {
	panic("Timer_TimerStart: unknown timer %d\n", timer);
    }
    if (processor[counter] != Mach_GetProcessorNumber()) {
	panic(
	    "Timer_TimerStart: timer %d started on wrong processor.\n", timer);
    }

    DISABLE_INTR();
    /*
     * Make sure the timer is really off.
     */
    Mach_DisableNonmaskableIntr();
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    if (modeRegister & modeRegBit) { 
	/*
	 * If it's not off, turn it off.
	 */
	modeRegister &= (~modeRegBit) & 0xff;
	Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
    }
    Mach_EnableNonmaskableIntr();

#ifdef NO_PROFILE_TIMER
    /*
     * Setup the nonMaskable interupt for the PROFILE/refresh timer.
     */
    if (timer == TIMER_PROFILE_TIMER) {
	Mach_SetNonmaskableIntr(PROFILE_TIMER_MASK_BIT);
	Mach_EnableNonmaskableIntr();
    }
#endif
    /*
     * Initialize the timer. Since the timers count up the a negative number
     * is loaded.
     */
    Mach_Write32bitCCReg(timerAddress,(unsigned int) -ticks);
    /*
     * Start the timer ticking. We re-read the mode register to narrow the
     * window for the race condition with the other counter reseting themselves.
     *
     */
    Mach_DisableNonmaskableIntr();
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    modeRegister |= modeRegBit;
    Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
    Mach_EnableNonmaskableIntr();
    ENABLE_INTR();
}

/*
 *----------------------------------------------------------------------
 *
 * RestartStart --
 *
 *	Reloads the specified timer with a new value to count from
 *	and start the timer. Timer is assumed to be stopped and 
 *	interrupts disabled.
 *
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The timer starts ticking.
 *
 *----------------------------------------------------------------------
 */

static void 
RestartTimer(timer)
    register unsigned short timer;
{
    unsigned int modeRegister;		/* Local copy of mode register */
    unsigned int modeRegBit = 0;	/* Timer's mode bit */
    unsigned int timerAddress = 0;	/* Timer's address */
    int ticks = 0;			/* Number of ticks to load */
    int		counter;		/* Processor number of counter. */

    if (timer == TIMER_CALLBACK_TIMER) {
	modeRegBit = CALLBACK_TIMER_MODE_BIT;
	timerAddress = CALLBACK_TIMER_ADDR;
	ticks = callbackTicks;
	counter	= CALLBACK_COUNTER;
#ifdef NO_PROFILE_TIMER
    } else if (timer == TIMER_PROFILE_TIMER) {
	modeRegBit = PROFILE_TIMER_MODE_BIT;
	timerAddress = PROFILE_TIMER_ADDR;
	ticks = profileTicks;
	counter	= PROFILE_COUNTER;
#endif
    } else {
	panic("RestartTimer: unknown timer %d\n", timer);
    }
    if (processor[counter] != Mach_GetProcessorNumber()) {
	panic(
	    "RestartTimer: timer %d restarted on wrong processor.\n", timer);
    }
    /*
     * Initialize the timer. Since the timers count up the a negative number
     * is loaded.
     */
    Mach_Write32bitCCReg(timerAddress,(unsigned int) -ticks);
    /*
     * Start the timer ticking. 
     */
    Mach_DisableNonmaskableIntr();
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    modeRegister |= modeRegBit;
    Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
    Mach_EnableNonmaskableIntr();

}

/*
 *----------------------------------------------------------------------
 *
 * Timer_TimerInactivate --
 *
 *      Stops the specified timer such that it will cease counting. 
 *      If the timer has already  stopped and has set its interrupt
 *	line high, clear the output so it won't cause an interrupt
 *	(because we don't care that it has expired).
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The timer is stopped.
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerInactivate(timer)
    register unsigned short timer;
{
    unsigned int modeRegister;
    unsigned int imaskRegister;
    unsigned int modeRegBit = 0;
    unsigned int timerAddress = 0;
    unsigned int intrMaskBit = 0; 
    int		counter;		/* Processor number of counter. */

    if (timer == TIMER_CALLBACK_TIMER) {
	modeRegBit = CALLBACK_TIMER_MODE_BIT;
	timerAddress = CALLBACK_TIMER_ADDR;
	intrMaskBit = CALLBACK_TIMER_MASK_BIT;
	counter	= CALLBACK_COUNTER;
#ifdef NO_PROFILE_TIMER
    } else if (timer == TIMER_PROFILE_TIMER) {
	modeRegBit = PROFILE_TIMER_MODE_BIT;
	timerAddress = PROFILE_TIMER_ADDR;
	intrMaskBit = PROFILE_TIMER_MASK_BIT;
	counter	= PROFILE_COUNTER;
#endif
    } else {
	panic("Timer_TimerStart: unknown timer %d\n", timer);
    }
    if (processor[counter] != Mach_GetProcessorNumber()) {
	panic(
	    "Timer_TimerInactivate: timer %d stopped on wrong processor.\n",
	    timer);
    }
    /*
     * Stop the timer in case it is ticking.
     */
    DISABLE_INTR();
    Mach_DisableNonmaskableIntr();
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    if (modeRegister & modeRegBit) { 
	modeRegister &= (~modeRegBit & 0xff);
	Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
    }
    Mach_EnableNonmaskableIntr();
    /*
     * Clear the interrupt status bit and turn the interrupt mask bit off.
     */
    Mach_Write32bitCCReg(MACH_INTR_STATUS_0,intrMaskBit);

    ENABLE_INTR();

}

/*
 *----------------------------------------------------------------------
 *
 *  Timer_TimerServiceInterrupts --
 *
 *      This routine is called at every timer interrupt. 
 *      It calls the timer callback queue handling if the callback timer 
 *	expired and calls the profiling interrupt handling if the 
 *	profile callback timer expired. The interval timers are reset to
 *	call again.
 *
 *  Results:
 *	None.
 *
 *  Side Effects:
 *	Routines on the timer queue may cause side effects. Profile
 *	collect may take place. Interval timers turned on.
 *	
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerServiceInterrupts(intrStatusPtr)
    unsigned int	*intrStatusPtr;		/* Copy of interrupt status 
						 * register.
						 */
{ 
    unsigned int modeRegister;
    unsigned int istatusReg = *intrStatusPtr;

    /*
     *  Determine if the callback and profile timers have expired.
     *
     *  The profile timer is checked first because routines on the callback
     *  queue might cause a delay in collecting profiling information.
     */
    DISABLE_INTR();
    if (istatusReg & PROFILE_TIMER_MASK_BIT) {
		/*
		 * Time to profile.  First make sure the timer didn't 
		 * accidentally get turned back on. 
		 * Race condition patch: Make sure the timer is really
		 * turned off by the interrupt so it won't both us again.
		 * Consider the following: when performing one of the several
		 * read-modify-writes of the mode register, a timer fires
		 * and clears its mode bit. When we write the mode register
		 * back we set the timer back on.  
		 */
	Mach_DisableNonmaskableIntr();
	modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
	if (modeRegister & PROFILE_TIMER_MODE_BIT) {  
	    modeRegister &= (~PROFILE_TIMER_MODE_BIT & 0xff);
	    Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
	}
	Mach_EnableNonmaskableIntr();
		/* 
		 * Reseting the interrupt bit in the status word is done in
		 * the routines calling us. 
		 */
		/*
		 * Collect the profile information.
		 */
	Prof_CollectInfo();
	RestartTimer(TIMER_PROFILE_TIMER);
     } 
     if (istatusReg & CALLBACK_TIMER_MASK_BIT) {
	/*
	 * Make sure the timer is off. See comment above.
	 */
	Mach_DisableNonmaskableIntr();
	modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
	if (modeRegister & CALLBACK_TIMER_MODE_BIT) {  
	    modeRegister &= (~CALLBACK_TIMER_MODE_BIT & 0xff);
	    Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
	}
	Mach_EnableNonmaskableIntr();
		/*
		 * Do the call back stuff. 
		 */
	Timer_CallBack(interval, time);

	RestartTimer(TIMER_CALLBACK_TIMER);
    }
    /*
     * Reset the two timer bits in the status register so we wont get called
     * twice when both timer's interrupt.
     */
    *intrStatusPtr = (*intrStatusPtr) & 
			~(CALLBACK_TIMER_MODE_BIT | PROFILE_TIMER_MODE_BIT);
    ENABLE_INTR();

    return;
}


/*
 *----------------------------------------------------------------------
 *
 * Timer_CounterInit --
 *
 *	Start the free running 64 bit counter on the Spur CC chip running.
 *	
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The T0 counter begin to count.
 *
 *----------------------------------------------------------------------
 */

void
Timer_CounterInit()
{
    unsigned int modeRegister;	/* Local copy of CC mode register */

    /*
     * Make sure the timer is not ticking.
     */
    Mach_DisableNonmaskableIntr();
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    if (modeRegister & FREERUNNING_TIMER_MODE_BIT) {
	modeRegister &= (~(FREERUNNING_TIMER_MODE_BIT) & 0xff);
	Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);
    }
    /*
     * Load the 64 bit register.
     */
    currentTicks = zeroCount;
    Timer_WriteT0(&zeroCount);
    /*
     * Start the counter running.
     */
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    modeRegister |= (FREERUNNING_TIMER_MODE_BIT);
    Mach_Write8bitCCReg(MACH_MODE_REG,modeRegister);

    processor[CLOCK_COUNTER] = Mach_GetProcessorNumber();
    Mach_EnableNonmaskableIntr();

}


/*
 *----------------------------------------------------------------------
 *
 * Timer_GetCurrentTicks --
 *
 *	Read the contents of the clock counter. 
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	CurrentTicks is updated if we are called on the processor with the
 *	counter.
 *
 *----------------------------------------------------------------------
 */

void
Timer_GetCurrentTicks(timePtr)
    Timer_Ticks	*timePtr;	/* Time from the counters. */
{
    MASTER_LOCK(&currentTicksMutex);
	/*
	 * Are we running on the CPU with the counter. If so then
	 * update the currentTicks structure.
	 */
    if (Mach_GetProcessorNumber() == processor[CLOCK_COUNTER]) {
	Timer_ReadT0(&currentTicks);
    }
    *timePtr = currentTicks;
    MASTER_UNLOCK(&currentTicksMutex);


}



/*  @@#@@#@@#@@#@@#@@#@@#@@#@@#@@#@@    DEBUGGING CODE    @@#@@#@@#@@#@@#@@#@@#@@#@@#@@#@@  */

/*
 *----------------------------------------------------------------------
 *
 * Timer_TimerGetInfo --
 *
 *	Reads the status and master mode registers of the chip and the
 *	specified counter's load, hold and mode registers and prints them
 *	on the console.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerGetInfo(data)
    ClientData data;	/* Ignored. */
{
    Timer_Ticks		timer;
    ReturnStatus	status;
    unsigned	int	modeRegister;
    unsigned	int	imaskRegister;

    DISABLE_INTR();
    Timer_GetCurrentTicks(&timer);
    modeRegister = Mach_Read8bitCCReg(MACH_MODE_REG);
    imaskRegister = Mach_Read32bitCCReg(MACH_INTR_MASK_0);
    ENABLE_INTR();

    printf("CounterT0 0x%x 0x%x\n",timer.high, timer.low);
    printf("Mode Reg:\n");
    printf("TIMER ENABLE %d\tCALLBACK ENABLE %d\tPROFILE ENABLE %d\n",
		((modeRegister & FREERUNNING_TIMER_MODE_BIT) != 0),
		((modeRegister & CALLBACK_TIMER_MODE_BIT) != 0),
		((modeRegister & PROFILE_TIMER_MODE_BIT) != 0));

    printf("Mask Reg:\n");
    printf("CALLBACK MASK %d PROFILE MASK %d\n",
		((imaskRegister & CALLBACK_TIMER_MASK_BIT) != 0),
		((imaskRegister & PROFILE_TIMER_MASK_BIT) != 0));
}

/*
 *----------------------------------------------------------------------
 *
 * TimerHardwareUniversalTimeInit --
 *
 * 	Not implemented.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

/*ARGSUSED*/
void
TimerHardwareUniversalTimeInit(timePtr, localOffsetPtr, DSTPtr)
    Time *timePtr;		/* Buffer to hold universal time. */
    int  *localOffsetPtr;	/* Buffer to hold local offset. */
    Boolean *DSTPtr;		/* Buffer to hold DST allowed flag. */
{
}

/*
 *----------------------------------------------------------------------
 *
 * TimerSetHardwareUniversalTime --
 *
 *	Not implemented.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

/*ARGSUSED*/
void
TimerSetHardwareUniversalTime(timePtr, localOffset, DST)
    Time *timePtr;		/* universal time. */
    int  localOffset;		/* local offset. */
    Boolean DST;		/* DST allowed flag. */
{
}

@


8.5
log
@added routines for hardware TOD clock
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 8.4 89/08/17 17:32:55 jhh Exp $ SPRITE (Berkeley)";
d98 3
a100 4
 *  Time between callbacks. This is expressed as an integer and as a Time.
 *  One tick on the spur is one millesecond. The spur has settable counters
 *  so we can pick our interval and adjust the counters appropriately.
 */
a101 1
static int interval = TIMER_CALLBACK_INTERVAL_APPROX / 1000;
d141 1
a141 1
	callbackTicks = (int) (TIMER_FREQ/1000.0 * 
d143 1
@


8.4
log
@New timer interface
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 8.3 89/02/19 22:12:51 jhh Exp $ SPRITE (Berkeley)";
d635 50
@


8.3
log
@Changes due to lock registration
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 8.2 88/11/30 12:19:00 brent Exp Locker: jhh $ SPRITE (Berkeley)";
d97 8
d143 2
a144 1
	callbackTicks = (int) (TIMER_FREQ/1000.0 * TIMER_CALLBACK_INTERVAL); 
d487 1
a487 1
	Timer_CallBack();
@


8.2
log
@Sys_Printf => printf  Sys_Panic => panic
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 8.1 88/11/30 10:33:44 mendel Exp Locker: brent $ SPRITE (Berkeley)";
d94 2
a95 1
Sync_Semaphore	currentTicksMutex = SYNC_SEM_INIT_STATIC("currentTicksMutex");
@


8.1
log
@Convert currentTicksMutex to use new MASTER_LOCK().
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 8.0 88/11/11 18:40:50 douglis Stable Locker: mendel $ SPRITE (Berkeley)";
d144 1
a144 1
	Sys_Panic(SYS_FATAL,"Timer_TimerInit: unknown timer %d\n", timer);
d214 1
a214 1
	Sys_Panic(SYS_FATAL,"Timer_TimerStart: unknown timer %d\n", timer);
d217 1
a217 1
	Sys_Panic(SYS_FATAL,
d305 1
a305 1
	Sys_Panic(SYS_FATAL,"RestartTimer: unknown timer %d\n", timer);
d308 1
a308 1
	Sys_Panic(SYS_FATAL,
d370 1
a370 1
	Sys_Panic(SYS_FATAL,"Timer_TimerStart: unknown timer %d\n", timer);
d373 1
a373 1
	Sys_Panic(SYS_FATAL,
d614 3
a616 3
    Sys_Printf("CounterT0 0x%x 0x%x\n",timer.high, timer.low);
    Sys_Printf("Mode Reg:\n");
    Sys_Printf("TIMER ENABLE %d\tCALLBACK ENABLE %d\tPROFILE ENABLE %d\n",
d621 2
a622 2
    Sys_Printf("Mask Reg:\n");
    Sys_Printf("CALLBACK MASK %d PROFILE MASK %d\n",
@


8.0
log
@Changing version numbers.
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/spur.md/RCS/timerSpur.c,v 1.4 88/10/27 13:26:21 mendel Exp Locker: douglis $ SPRITE (Berkeley)";
d94 1
a94 1
int	currentTicksMutex = 0;
d563 1
a563 1
    MASTER_LOCK(currentTicksMutex);
d572 1
a572 1
    MASTER_UNLOCK(currentTicksMutex);
@


1.4
log
@Intergated devTimer into timer module.
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: devTimerSpur.c,v 1.3 88/09/12 09:44:12 mendel Exp $ SPRITE (Berkeley)";
@


1.3
log
@Patched conversion from Count to Time.
@
text
@d2 1
a2 1
 * devTimer.c --
d38 1
a38 1
static char rcsid[] = "$Header: devTimerSpur.c,v 1.2 88/08/23 10:22:25 mendel Exp $ SPRITE (Berkeley)";
d43 2
a44 2
#include "devTimer.h"
#include "devTimerSpurInt.h"
d46 2
a47 1
#include "time.h"
d53 1
a53 1
 * the timer's counting frequency in routine Dev_TimerInit().
d62 1
a62 1
static	DevCounter	zeroCount = {0,0};
d65 1
a65 1
 * Time per tick of high 32bits of counter.
d67 1
a67 1
static Time		timeHigh;		
d70 1
a70 1
 * The largest interval value.
a71 1
#define	MAXINT	((unsigned int ) 0xffffffff)
d73 7
d81 5
a85 1
 * Scale factor to make integer division more accurate. 
a86 2
#define	SCALE_FACTOR	100

d88 2
d91 7
d100 1
a100 1
 * Dev_TimerInit --
d106 1
a106 1
 *	N.B. This routine must be called before Dev_TimerStart.
d118 1
a118 1
Dev_TimerInit(timer)
d131 1
a131 1
     if (timer == DEV_CALLBACK_TIMER) {
d134 4
a137 3
	callbackTicks = (int) (TIMER_FREQ/1000.0 * DEV_CALLBACK_INTERVAL); 
#ifdef notdef
    } else if (timer == DEV_PROFILE_TIMER) {
d140 2
a141 1
	profileTicks = (int) (TIMER_FREQ/1000.0 * DEV_PROFILE_INTERVAL); 
d144 1
a144 1
	Sys_Panic(SYS_FATAL,"Dev_TimerInit: unknown timer %d\n", timer);
a148 1
    DISABLE_INTR();
d165 3
a167 13
    Mach_SetHandler(intrMaskBit,Dev_TimerServiceInterrupts);
    /*
     * Enable interrupts from the timer. 
     *
     * The current thinking is that the imask register should always be 
     * either on or off. In that cause we wont need this code.
     */
#ifdef notdef
    imaskRegister = Mach_Read32bitCCReg(MACH_INTR_MASK_0);
    imaskRegister |= intrMaskBit;
    Mach_Write32bitCCReg(MACH_INTR_MASK_0,imaskRegister);
#endif
    ENABLE_INTR();
d174 1
a174 1
 * Dev_TimerStart --
d179 1
a179 1
 *	N.B. The timer must have been initialized with Dev_TimerInit
d192 1
a192 1
Dev_TimerStart(timer)
d199 1
d201 1
a201 1
    if (timer == DEV_CALLBACK_TIMER) {
d205 3
a207 2
#ifdef notdef
    } else if (timer == DEV_PROFILE_TIMER) {
d211 1
d214 1
a214 1
	Sys_Panic(SYS_FATAL,"Dev_TimerStart: unknown timer %d\n", timer);
d216 5
d236 1
a236 1
#ifdef notdef
d240 1
a240 1
    if (timer == DEV_PROFILE_TIMER) {
d290 1
d292 1
a292 1
    if (timer == DEV_CALLBACK_TIMER) {
d296 3
a298 2
#ifdef notdef
    } else if (timer == DEV_PROFILE_TIMER) {
d302 1
d307 4
d330 1
a330 1
 * Dev_TimerInactivate --
d347 1
a347 1
Dev_TimerInactivate(timer)
d355 1
d357 1
a357 1
    if (timer == DEV_CALLBACK_TIMER) {
d361 3
a363 2
#ifdef notdef
    } else if (timer == DEV_PROFILE_TIMER) {
d367 1
d370 1
a370 1
	Sys_Panic(SYS_FATAL,"Dev_TimerStart: unknown timer %d\n", timer);
d372 5
a391 3
    /*
     * Currently, we leave the interrupt mask turned on at all times.
     */
a392 6
#ifdef notdef
    imaskRegister = Mach_Read32bitCCReg(MACH_INTR_MASK_0);
    imaskRegister &= (~intrMaskBit) & 0xff;
    Mach_Write32bitCCReg(MACH_INTR_MASK_0,imaskRegister);
#endif

d400 1
a400 1
 *  Dev_TimerServiceInterrupts --
d420 1
a420 1
Dev_TimerServiceInterrupts(intrStatusPtr)
d461 1
a461 1
	RestartTimer(DEV_PROFILE_TIMER);
d479 1
a479 1
	RestartTimer(DEV_CALLBACK_TIMER);
d496 1
a496 1
 * Dev_CounterInit --
d511 1
a511 1
Dev_CounterInit()
a515 10
     * Initialized the number of seconds per tick of high word of 
     * counter.
     */

    timeHigh.seconds =  (int) (0xffffffff / TIMER_FREQ);
    timeHigh.microseconds = (int) (((0xffffffff % TIMER_FREQ) * SCALE_FACTOR) /
				((TIMER_FREQ * SCALE_FACTOR) / ONE_SECOND));

    DISABLE_INTR();
    /*
a523 1
    Mach_EnableNonmaskableIntr();
d527 2
a528 1
    Dev_TimerT0Write(&zeroCount);
a531 1
    Mach_DisableNonmaskableIntr();
d535 2
a537 1
    ENABLE_INTR();
d545 1
a545 1
 * Dev_CounterRead --
d547 1
a547 3
 *	Read the contents of the free running counter.
 *	To be used with interrupts disabled to assure that the
 *	counter is read atomically.
d550 1
a550 1
 *	The current value of the counter.
d553 2
a554 1
 *	None.
d560 2
a561 2
Dev_CounterRead(counterPtr)
    DevCounter *counterPtr;
d563 7
a569 6
    ReturnStatus	status;

    DISABLE_INTR();
    status = Dev_TimerT0Read(counterPtr);
    if (status != SUCCESS) {
	Sys_Panic(SYS_FATAL,"Dev_CounterRead: Can not read counter T0\n");
d571 2
a572 3
    ENABLE_INTR();
}

a573 17
/*
 *----------------------------------------------------------------------
 *
 *  Dev_CounterIntToTime --
 *
 *      Converts an interval value into a standard time value.
 *
 *	This routine is meant for use by the Timer module only.
 *
 *  Results:
 *	A time value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
a574 11
void
Dev_CounterIntToTime(interval, resultPtr)
    unsigned int interval;
    Time *resultPtr;
{
    DevCounter		tmp;
    unsigned int	overflow;

    Dev_CounterAddIntToCount(zeroCount,interval,&tmp,&overflow);
    Dev_CounterCountToTime(tmp,resultPtr);

a575 1

a576 35
/*
 *----------------------------------------------------------------------
 *
 *  Dev_CounterCountToTime --
 *
 *      Converts DevCounter into a standard time value.
 *
 *	This routine is meant for use by the Timer module only.
 *
 *  Results:
 *	A time value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
Dev_CounterCountToTime(count, resultPtr)
    DevCounter	count;
    Time *resultPtr;
{
    unsigned int leftOver;
    Time	tmp;

    resultPtr->seconds = (int) (count.low / TIMER_FREQ);
    leftOver = (unsigned int) (count.low - (resultPtr->seconds * TIMER_FREQ));
    resultPtr->microseconds = (int) ((leftOver * SCALE_FACTOR) /
				((TIMER_FREQ * SCALE_FACTOR) / ONE_SECOND));

    Time_Multiply(timeHigh,count.high,&tmp);
    Time_Add(*resultPtr, tmp, resultPtr);

}
a578 131
/*
 *----------------------------------------------------------------------
 *
 *  Dev_CounterTimeToInt --
 *
 *      Converts a standard time value into an interval  value.
 *	This routine is meant for use by the Timer module only.
 *
 *  Results:
 *	A counter interval value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
Dev_CounterTimeToInt(time, resultPtr)
    Time time;
    unsigned int *resultPtr;
{
    DevCounter		tmp;

    /*
     * Convert time to a DevCounter value 
     */
    Dev_CounterTimeToCount(time,&tmp);

    /*
     * Check to see if value is too bit for an interval.
     */
    if (tmp.high > INTERVAL_HIGH(MAXINT) || 
       ((tmp.high == INTERVAL_HIGH(MAXINT)) && 
	(tmp.low > INTERVAL_LOW(MAXINT)))) {
	Sys_Panic(SYS_WARNING, "Dev_CounterTimeToInt: time value too large\n");
	*resultPtr = MAXINT;
    } else {
        *resultPtr = COUNTER_TO_INTERVAL(tmp);
    }
}


/*
 *----------------------------------------------------------------------
 *
 *  Dev_CounterTimeToCount --
 *
 *      Converts a standard time value into an DevCounter  value.
 *	This routine is meant for use by the Timer module only.
 *
 *  Results:
 *	A DevCounter value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
Dev_CounterTimeToCount(time, resultPtr)
    Time time;
    DevCounter *resultPtr;
{
    unsigned int intervalLow;

    /*
     * Number of seconds in each DevCounter.high tick.
     */
#define	SECONDS_HIGH	((int)(MAXINT/TIMER_FREQ))

    resultPtr->high =  (time.seconds / SECONDS_HIGH);
    resultPtr->low = (int) ((time.seconds % SECONDS_HIGH) * TIMER_FREQ);
    intervalLow = (int) ((time.microseconds / SCALE_FACTOR) *
		((TIMER_FREQ * SCALE_FACTOR)/ONE_SECOND));
    resultPtr->low += intervalLow;
    if (resultPtr->low < intervalLow) {
	resultPtr->high += 1;
    }
#undef SECONDS_HIGH
}


/*
 *----------------------------------------------------------------------
 *
 *  Dev_CounterAddIntToCount --
 *
 *      Add an interval value to a DevCounter value returning a
 *	DevCounter value Int time units in the future. Specify in the
 *	variable overflow the number of times the addition caused the
 *	DevCounter to overflow.  
 *	
 *	This routine is meant for use by the Timer module only.
 *
 *  Results:
 *	A counter interval value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
Dev_CounterAddIntToCount(count, interval, resultPtr, overflowPtr)
    DevCounter	count;		/* Counter to add to */
    unsigned int	interval;	/* Interval to add */	
    DevCounter	*resultPtr;	/* Buffer to place the results */
    unsigned int	*overflowPtr;	/* Overflow count */
{
    unsigned	int	intervalLow;
    unsigned	int	intervalHigh;

    intervalLow = INTERVAL_LOW(interval);  
    intervalHigh = INTERVAL_HIGH(interval);
    resultPtr->low = count.low + intervalLow; 
    resultPtr->high = count.high + intervalHigh;

    if (resultPtr->low < intervalLow) {
	 resultPtr->high++;
    } 
    if (resultPtr->high < intervalHigh) {
	*overflowPtr = 1;
    } else {
	*overflowPtr = 0;
    }
}


d584 1
a584 1
 * Dev_TimerGetInfo --
d600 1
a600 1
Dev_TimerGetInfo(data)
d603 1
a603 1
    DevCounter		timer;
d609 1
a609 1
    status = Dev_TimerT0Read(&timer);
d614 1
a614 5
    if (status == SUCCESS) {
	Sys_Printf("CounterT0 0x%x 0x%x\n",timer.high, timer.low);
    } else {
	Sys_Printf("CounterT0 CAN NOT READ\n");
    }
@


1.2
log
@*** empty log message ***
@
text
@d38 1
a38 1
static char rcsid[] = "$Header: devTimerSpur.c,v 1.1 88/06/08 10:18:07 mendel Exp $ SPRITE (Berkeley)";
d64 5
d492 9
d525 1
d618 1
d624 3
a626 1
    Time_Multiply(*resultPtr,count.high,resultPtr);
@


1.1
log
@Initial revision
@
text
@d26 8
a34 2
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
d38 1
a38 1
static char rcsid[] = "$Header: devTimerSpur.c,v 5.3 88/06/01 17:53:29 mendel Exp $ SPRITE (Berkeley)";
d66 4
a69 3
#define	MAXINT	0xffffffff
/* 
 * Largest interval in floating point.
d71 1
a71 2
#define	MAXINT_FLOAT	((double) MAXINT)

d112 1
d117 1
d125 1
d131 1
d137 1
a137 1
    Write32bitCCRegister(MACH_INTR_STATUS_0,intrMaskBit);
d139 1
a139 1
     * Enable interrupts from the timer.
d141 8
d151 2
a152 1
    Write32bitCCRegister(MACH_INTR_MASK_0,imaskRegister);
d190 1
d195 1
d203 1
d212 3
d216 8
d227 1
a227 1
    Write32bitCCRegister(timerAddress,(unsigned int) -ticks);
d233 1
d237 1
d273 1
d278 1
d286 1
a286 1
    Write32bitCCRegister(timerAddress,(unsigned int) -ticks);
d290 1
d294 2
d331 1
d336 1
d344 1
d350 1
d354 4
a357 1
    Write32bitCCRegister(MACH_INTR_STATUS_0,intrMaskBit);
d359 1
d362 2
a363 1
    Write32bitCCRegister(MACH_INTR_MASK_0,imaskRegister);
d372 1
a372 1
 *  Dev_TimerServiceInterrupt --
d392 4
a395 2
Dev_TimerServiceInterrupt(stack)
    Mach_IntrStack stack;
d398 1
a398 1
    unsigned int istatusReg;
a405 2


a406 1
    istatusReg = Mach_Read32bitCCReg(MACH_INTR_STATUS_0);
d418 1
d424 1
d426 2
a427 1
		 * Reset the interrupt bit in the status word..
a428 1
	Write32bitCCRegister(MACH_INTR_STATUS_0,PROFILE_TIMER_MASK_BIT);
d432 1
a432 1
	Prof_CollectInfo(&stack);
d439 1
d445 1
a445 4
		/* 
		 * Reset the interrupt bit in the status word..
		 */
	Write32bitCCRegister(MACH_INTR_STATUS_0,CALLBACK_TIMER_MASK_BIT);
d453 6
d460 1
d491 1
d497 1
d505 1
d509 1
d602 1
d605 3
a607 3
    resultPtr->microseconds =
	(int) ((count.low - (resultPtr->seconds * TIMER_FREQ)) *
		((double) ONE_SECOND / TIMER_FREQ));
a681 3
     *	SECONDS_HIGH = (MAXINT+1)/TIMER_FREQ
     * We do the calculation at compile time in floating point because
     * we can't represent 2^32 in a 32-bit integer.
d683 1
a683 1
#define	SECONDS_HIGH	((int)((MAXINT_FLOAT+1)/TIMER_FREQ))
d687 2
a688 1
    intervalLow = (int) (time.microseconds * (TIMER_FREQ/(double)ONE_SECOND));
@
