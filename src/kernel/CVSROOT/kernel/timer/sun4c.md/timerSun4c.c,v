head     1.10;
branch   ;
access   ;
symbols  ds3100:1.10 sun3:1.10 sun4nw:1.10 symm:1.10 spur:1.10;
locks    ; strict;
comment  @ * @;


1.10
date     91.10.18.01.17.25;  author dlong;  state Exp;
branches ;
next     1.9;

1.9
date     90.11.08.21.02.41;  author rab;  state Exp;
branches ;
next     1.8;

1.8
date     90.09.11.16.32.07;  author jhh;  state Exp;
branches ;
next     1.7;

1.7
date     90.09.06.18.22.09;  author jhh;  state Exp;
branches ;
next     1.6;

1.6
date     89.11.07.09.21.11;  author mendel;  state Exp;
branches ;
next     1.5;

1.5
date     89.10.22.22.55.45;  author jhh;  state Exp;
branches ;
next     1.4;

1.4
date     89.09.21.17.16.40;  author mendel;  state Exp;
branches ;
next     1.3;

1.3
date     89.09.12.14.43.35;  author jhh;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.17.17.33.19;  author jhh;  state Exp;
branches ;
next     1.1;

1.1
date     89.08.16.22.26.50;  author jhh;  state Exp;
branches ;
next     ;


desc
@@


1.10
log
@adjust time support
sun4c/sun4c2 merge
@
text
@/* 
 * timerSun4c.c --
 *
 *	This file contains the routines that control the time of day clock 
 *	and interrupt timers on the sun4c (SparcStation 1) machine. The
 *	sun4c contains a Mostek MK48T12-15 chip for time of day and 
 *	two interrupt timers.  
 *
 *	Until we get the data sheets for the Mostek chip, we use the interrupt
 *	counters for both interupts and TOD.
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Installed/DL/timer/sun4c.md/timerSun4c.c,v 1.2 91/06/06 01:21:47 dlong Exp Locker: dlong $ SPRITE (Berkeley)";
#endif /* not lint */

#include "sprite.h"
#include "sys.h"
#include "timer.h"
#include "timerInt.h"
#include "timerTick.h"
#include "spriteTime.h"
#include "mach.h"
#include "machMon.h"
#include "prof.h"
#include "stdio.h"

#include "timerMK48T12Int.h"

#define abs(x) ((x) >= 0 ? (x) : -(x))

/*
 * The sun4c contains two counters that count up to value in the limit 
 * register and interrupt. The counters are defined by the following 
 * structure. (Campus-1 Programmer's Model Version 7.5 page 11).
 * We assign counter0 to be the call back interrupt timer and 
 * counter1 to be the profile interrupt timer. Each counter and limit
 * register is of the form:
 *	struct {
 *	   int	limitReached :1; -- 1 if counter reached limit. 
 *	   int  value	     :21; -- Value updated every microsecond. 
 *	   int  zeros	     :10; -- Read as zero. 
 *     }
 */

typedef struct {
    unsigned int callBackCounter; /* Call back counter */
    unsigned int callBackLimit;   /* Limit register for call back counter. */
    unsigned int profileCounter;  /* Profile counter. */
    unsigned int profileLimit;    /* Limit register for profile counter. */
} Counters;

/*
 * COUNTER_SHIFT	- Number of bits to shift microsecond value for
 *			  counter. 
 * COUNTER_LIMIT_REACH  - Bit signifying count has reached limit.
 */
#define	COUNTER_SHIFT 10
#define	COUNTER_LIMIT_REACH 0x80000000

static volatile Counters *counterPtr = (volatile Counters *)NIL;

/*
 * The "free running counter"
 */
static Timer_Ticks todCounter;

int Timer_TimerServiceInterrupt();

/*
 * Timer interval as a Time value. This is the period between callbacks.
 */

static Time time = { 0, TIMER_CALLBACK_INTERVAL_APPROX};


/* 
 *----------------------------------------------------------------------
 *
 * Timer_TimerInit --
 *
 *	Initialize the periodic timer. Since there is no way to turn off
 *	the counters will wait and do all the work in Timer_TimerStart().
 *
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The timer is initialized.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
void
Timer_TimerInit(timer)
    unsigned short 	timer;
{ 
    if (counterPtr == (volatile Counters *)NIL) {
	if (Mach_MonSearchProm("counter-timer", "address",
		(char *)&counterPtr,
		sizeof counterPtr) !=  sizeof counterPtr) {
	    panic("The counter-timer address is missing!\n");
	}
	printf("PROM: Counter-timer is at %x\n", counterPtr);
    }
    if (timer == TIMER_CALLBACK_TIMER) {
	Mach_SetHandler(10, Timer_TimerServiceInterrupt, (ClientData) timer); 
    } else if (timer == TIMER_PROFILE_TIMER) {
	Mach_SetHandler(14, Timer_TimerServiceInterrupt, (ClientData) timer); 
    } else {
	panic("Timer_TimerInit: unknown timer %d\n", timer);
    }
}


/*
 *----------------------------------------------------------------------
 *
 * Timer_TimerStart --
 *
 *	Loads the specified timer with a new value to count from
 *	and starts the timer.
 *
 *	N.B. The timer must have been initialized with Timer_TimerInit
 *	before this routine is called.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The timer starts ticking.
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerStart(timer)
    register unsigned short timer;
{
    unsigned int junk;

    /*
     * To start the timer we load the limit register with the correct 
     * count and clear any pending interrupt. 
     */
     if (timer == TIMER_CALLBACK_TIMER) {
	 counterPtr->callBackLimit =
		     ((TIMER_CALLBACK_INTERVAL_APPROX) << COUNTER_SHIFT);
	 junk = counterPtr->callBackLimit;
	 DISABLE_INTR();
	 *Mach_InterruptReg |= MACH_ENABLE_COUNTER0_INTR_LEVEL;
	 ENABLE_INTR();

     } else if (timer == TIMER_PROFILE_TIMER) {
	 counterPtr->profileLimit =
		     ((TIMER_PROFILE_INTERVAL_APPROX) << COUNTER_SHIFT);
	 junk = counterPtr->profileLimit;
         DISABLE_INTR();
	 *Mach_InterruptReg |= MACH_ENABLE_COUNTER1_INTR_LEVEL;
	 ENABLE_INTR();
     } else {
	panic("Timer_TimerInit: unknown timer %d\n", timer);
     }
#ifdef lint
    junk = junk;
#endif


}



/*
 *----------------------------------------------------------------------
 *
 * Timer_TimerInactivate --
 *
 *	Stops the timer so that it will not cause interrupts.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The timer is stopped.
 *
 *----------------------------------------------------------------------
 */

void
Timer_TimerInactivate(timer)
    register unsigned short timer;
{
    if (timer == TIMER_CALLBACK_TIMER) {
	/*
	 * As long as we use the callback timer to keep track of time
	 * we shouldn't turn it off.
	 */
#ifdef notdef
	 DISABLE_INTR();
	 *Mach_InterruptReg &= ~MACH_ENABLE_COUNTER0_INTR_LEVEL;
	 ENABLE_INTR();
#endif
    } else if (timer == TIMER_PROFILE_TIMER) {
	 DISABLE_INTR();
	 *Mach_InterruptReg &= ~MACH_ENABLE_COUNTER1_INTR_LEVEL;
	 ENABLE_INTR();
    } else {
	panic("Timer_TimerInactivate: unknown timer %d\n", timer);
    }

}

/*
 *----------------------------------------------------------------------
 *
 *  Timer_TimerServiceInterrupt --
 *
 *      This routine is called at every timer interrupt. 
 *      It calls the timer callback queue handling if the callback timer 
 *	expired and calls the profiling interrupt handling if the 
 *	profile callback timer expired.
 *
 *  Results:
 *	None.
 *
 *  Side Effects:
 *	Routines on the timer queue may cause side effects. Profile
 *	collect may take place. 
 *	
 *
 *----------------------------------------------------------------------
 */

int
Timer_TimerServiceInterrupt(clientData, pc)
    ClientData	clientData;	        /* Really Counter number */
    unsigned int	pc;		/* Only for sun4 version. */
{ 
    register unsigned int junk;

    if ((unsigned int) clientData == TIMER_PROFILE_TIMER) {
	/*
	 * Clear interrupt by reading limit register. 
	 */
	junk = counterPtr->profileLimit;
	TIMER_PROFILE_ROUTINE(pc);
#       ifdef GATHER_STAT
        timer_Statistics.profile++;
#       endif
    } else  if ((unsigned int) clientData == TIMER_CALLBACK_TIMER) {
	/*
	 * Clear interrupt by reading limit register. 
	 */
	junk = counterPtr->callBackLimit;
#ifndef TOD_WORKING
	/*
	 * Until we get the TOD chip working. Use the callback counter
	 * to keep track on time of day.
	 */
	 todCounter.microseconds += TIMER_CALLBACK_INTERVAL_APPROX;
#ifdef ADJTIME
	 if (timer_AdjustDelta.microseconds || timer_AdjustDelta.seconds) {
	     register int adjust;

	     if (timer_AdjustDelta.seconds == 0 &&
		     abs(timer_AdjustDelta.microseconds) < timer_TickAdjust) {
		 adjust = timer_AdjustDelta.microseconds;
	     } else {
		 adjust = timer_TickDelta;
	     }
	     todCounter.microseconds += adjust;
	     timer_AdjustDelta.microseconds -= adjust;
	     if (timer_TickDelta < 0) {
		 if (timer_AdjustDelta.microseconds > 0) {
		     ++timer_AdjustDelta.seconds;
		     timer_AdjustDelta.microseconds -= ONE_SECOND;
		 }
	     } else {
		 if (timer_AdjustDelta.microseconds < 0) {
		     --timer_AdjustDelta.seconds;
		     timer_AdjustDelta.microseconds += ONE_SECOND;
		 }
	     }
	 }
#endif /* ADJTIME */
	 if (todCounter.microseconds > ONE_SECOND) {
	     todCounter.seconds++;
	     todCounter.microseconds -= ONE_SECOND;
	 }
#endif
	if (mach_KernelMode == 0) {
	    Proc_GetCurrentProc()->Prof_PC = pc;
	}
        TIMER_CALLBACK_ROUTINE(TIMER_CALLBACK_INTERVAL_APPROX, time);
    } else {
	panic("Timer_TimerServiceInterrupt: Unknown timer %d\n", 
		    (int) clientData);
    }
#ifdef lint
    junk = junk;
#endif
    return 0;
}

/*
 *----------------------------------------------------------------------
 *
 * Timer_CounterInit --
 *
 *	Initializes the chip's free-running counters. Until we get the
 *	TOD chip just use a counter updated by the CALL BACK interrupt
 *	handler.
 *
 *	
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
Timer_CounterInit()
{
    todCounter.seconds = 0;
    todCounter.microseconds = 0;
}

/* 
 *----------------------------------------------------------------------
 *
 *  Timer_GetCurrentTicks --
 *
 *  	Return microseconds since boot.
 *
 *  Results:
 *	The system up-time in ticks.
 *
 *  Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
Timer_GetCurrentTicks(ticksPtr)
    Timer_Ticks	*ticksPtr;	/* Buffer to place current time. */
{
    DISABLE_INTR();

    *ticksPtr = todCounter;

    ENABLE_INTR();
}

/* 
 *----------------------------------------------------------------------
 *
 *  Timer_GetInfo --
 *
 *  	Dummy routine to dump timer state.
 *
 *  Results:
 *	None.
 *
 *  Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
void
Timer_TimerGetInfo(data)
    ClientData	data;	/* Not used. */
{
}

/*
 *----------------------------------------------------------------------
 *
 * TimerHardwareUniversalTimeInit --
 *
 * 	Not implemented yet.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

/*ARGSUSED*/
void
TimerHardwareUniversalTimeInit(timePtr, localOffsetPtr, DSTPtr)
    Time *timePtr;		/* Buffer to hold universal time. */
    int  *localOffsetPtr;	/* Buffer to hold local offset. */
    Boolean *DSTPtr;		/* Buffer to hold DST allowed flag. */
{
}

/*
 *----------------------------------------------------------------------
 *
 * TimerSetHardwareUniversalTime --
 *
 *	Not implemented yet.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

/*ARGSUSED*/
void
TimerSetHardwareUniversalTime(timePtr, localOffset, DST)
    Time *timePtr;		/* universal time. */
    int  localOffset;		/* local offset. */
    Boolean DST;		/* DST allowed flag. */
{
}
@


1.9
log
@Record pc in Timer_TimerServiceInterrrupt for user level profiling.
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.8 90/09/11 16:32:07 jhh Exp Locker: rab $ SPRITE (Berkeley)";
d33 1
d35 1
a35 1
#include "devAddrs.h"
d39 2
d70 1
a70 1
static volatile Counters *counterPtr = (volatile Counters *) DEV_COUNTER_ADDR;
d108 13
a120 5
     if (timer == TIMER_CALLBACK_TIMER) {
	 Mach_SetHandler(10, Timer_TimerServiceInterrupt, (ClientData) timer); 
     } else if (timer == TIMER_PROFILE_TIMER) {
	 Mach_SetHandler(14, Timer_TimerServiceInterrupt, (ClientData) timer); 
     } else {
d122 1
a122 1
     }
d160 1
a160 1
	  DISABLE_INTR();
d271 25
a437 1

@


1.8
log
@Fixed error in Timer_TimerGetInfo call sequence
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.7 90/09/06 18:22:09 jhh Exp $ SPRITE (Berkeley)";
d245 1
a245 1
        TIMER_PROFILE_ROUTINE(pc);
d265 3
@


1.7
log
@First pass at function prototypes
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.6 89/11/07 09:21:11 mendel Exp Locker: jhh $ SPRITE (Berkeley)";
d343 1
d345 2
a346 1
Timer_TimerGetInfo()
@


1.6
log
@Fixed TIMER_CALLBACK_ROUTINE to be passed the interval in the correct units.
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.5 89/10/22 22:55:45 jhh Exp $ SPRITE (Berkeley)";
d273 1
@


1.5
log
@Fixed lint errors
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.4 89/09/21 17:16:40 mendel Exp Locker: jhh $ SPRITE (Berkeley)";
d77 1
a77 3
 * Timer interval expressed as an integer and as a Time. This is the
 * period between callbacks, so it is actually twice the timer period
 * since we callback every other time. 
a79 1
static unsigned int interval = TIMER_CALLBACK_INTERVAL_APPROX / 1000;
d265 1
a265 1
        TIMER_CALLBACK_ROUTINE(interval, time);
@


1.4
log
@Someone changed TIMER_CALLBACK_INTERVAL from units of milliseconds to
units of microseconds but didn't change the code that used it.
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.3 89/09/12 14:43:35 jhh Exp $ SPRITE (Berkeley)";
d74 1
a74 1
void Timer_TimerServiceInterrupt();
d82 1
a82 1
static int interval = TIMER_CALLBACK_INTERVAL_APPROX / 1000;
d166 5
d236 1
a236 1
void
d273 3
@


1.3
log
@added routines for hardware TOD clock
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun4c.md/RCS/timerSun4c.c,v 1.2 89/08/17 17:33:19 jhh Exp $ SPRITE (Berkeley)";
d150 1
a150 1
		     ((TIMER_CALLBACK_INTERVAL_APPROX*1000) << COUNTER_SHIFT);
d158 1
a158 1
		     ((TIMER_PROFILE_INTERVAL_APPROX*1000) << COUNTER_SHIFT);
d257 1
a257 1
	 todCounter.microseconds += TIMER_CALLBACK_INTERVAL_APPROX*1000;
@


1.2
log
@New timer interface
@
text
@d23 1
a23 1
static char rcsid[] = "$Header: /sprite/lib/forms/RCS/proto.c,v 1.2 89/01/07 04:12:18 rab Exp $ SPRITE (Berkeley)";
d339 50
@


1.1
log
@Initial revision
@
text
@d28 1
a34 1
#include "timer.h"
d76 9
d150 1
a150 1
		     ((TIMER_CALLBACK_INTERVAL*1000) << COUNTER_SHIFT);
d158 1
a158 1
		     ((TIMER_PROFILE_INTERVAL*1000) << COUNTER_SHIFT);
d257 1
a257 1
	 todCounter.microseconds += TIMER_CALLBACK_INTERVAL*1000;
d263 1
a263 1
        TIMER_CALLBACK_ROUTINE();
@
