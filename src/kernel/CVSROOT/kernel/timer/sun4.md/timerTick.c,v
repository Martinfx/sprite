head     9.1;
branch   ;
access   ;
symbols  ds3100:9.1 sun3:9.1 sun4nw:9.1 symm:9.1 spur:9.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.1
date     90.09.06.18.17.47;  author jhh;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.21.21;  author douglis;  state Stable;
branches ;
next     8.3;

8.3
date     89.05.24.07.46.16;  author rab;  state Exp;
branches ;
next     8.2;

8.2
date     89.03.15.17.38.26;  author mendel;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.30.12.16.48;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.40.22;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.27.13.28.02;  author mendel;  state Exp;
branches ;
next     6.1;

6.1
date     88.10.07.10.54.54;  author mendel;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.28.26;  author brent;  state Stable;
branches ;
next     1.2;

1.2
date     88.06.27.10.39.00;  author mendel;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.27.16.26.46;  author mendel;  state Exp;
branches ;
next     ;


desc
@Timer_Ticks manipulation and conversion routines for the sun2.
@


9.1
log
@First pass at function prototypes
@
text
@/*
 * timerTick.c --
 *
 *	Kernel utility procedures to manipulate time Tick values for the Sun3.
 *
 *  The routines in this module manipulate time values that are
 *  represented in the Timer_Ticks format.  The Timer_Ticks format is used
 *  for a specific purpose: to make the operations associated with the
 *  callback timer and timer queue run fast. These operations include
 *  starting the timer, scheduling a routine and calling a routine at its
 *  scheduled time.  Unlike the Time format, which represents time in
 *  seconds and microseconds, the Timer_Ticks format represents time in a
 *  machine-dependent way. On the Sun-3, the hardware free-running
 *  counter format is easily converted to the Time format, so no
 *  distinction is made between Time and Timer_Ticks.
 *
 *
 *  There are several constraints imposed on the Timer_Ticks format to
 *  decrease complexity and overhead in using the format.  First, it can
 *  not be used to represent negative time values.  Second, the routines
 *  are not general. For example, there are no multiply and divide
 *  routines for Timer_Ticks values.  Full generality is obtained by using
 *  the Time module.
 *
 * Copyright 1986, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun3.md/RCS/timerTick.c,v 9.0 89/09/12 15:21:21 douglis Stable Locker: jhh $ SPRITE (Berkeley)";
#endif /* not lint */

#include "sprite.h"
#include "mach.h"
#include "timerTick.h"
#include "spriteTime.h"
#include "timerIntersilInt.h"
#include "sys.h"
#include "bstring.h"
#include "stdio.h"


/*
 *  Definition of the maximum number of seconds and microseconds that the
 *  hardware free-running counter can count to.  To make intervals fit in
 *  a 32-bit integer, they are constrained to be less than or equal to
 *  timer_MaxIntervalTime.seconds. To use intervals greater than this
 *  value, one must use the Time_ module arithmetic routines.
 */

Time timer_MaxIntervalTime;

/*
 * Some commonly used values for intervals.
 */

Timer_Ticks	timer_TicksZeroSeconds;
unsigned int    timer_IntZeroSeconds;
unsigned int    timer_IntOneSecond;
unsigned int    timer_IntOneMillisecond;
unsigned int    timer_IntOneMinute;
unsigned int    timer_IntOneHour;


/*
 * The interval value to represent one second. It must be at least 1000
 * so that one milliscond can be be represented in an interval.
 */

#define ONE_SEC_INTERVAL	1000


/*
 * The maximum amount of time that an interval can represent.
 */

#define MAXINT ((unsigned int) 0xFFFFFFFF)
static Time maxIntervalTime = {
    MAXINT / ONE_SEC_INTERVAL,
    ((MAXINT % ONE_SEC_INTERVAL) * ONE_SECOND) / ONE_SEC_INTERVAL,
};


/*
 * Forward declaration of routines.
 */
static void ConvertTimeToInt _ARGS_((Time time, unsigned int *resultPtr));
static void ConvertIntToTime _ARGS_((unsigned int counter, Time *resultPtr));


/*
 *----------------------------------------------------------------------
 *
 * TimerTicksInit --
 *
 *	Initializes the various tick and interval values.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
TimerTicksInit()
{
    Time tmp;

    ConvertIntToTime((unsigned int) 0xFFFFFFFF, &timer_MaxIntervalTime);

    tmp.seconds = 1;
    tmp.microseconds = 0;
    ConvertTimeToInt(tmp, &timer_IntOneSecond);

    tmp.seconds = 0;
    tmp.microseconds = 1000;
    ConvertTimeToInt(tmp, &timer_IntOneMillisecond);

    timer_IntZeroSeconds	= 0;
    timer_IntOneMinute		= timer_IntOneSecond * 60;
    timer_IntOneHour		= timer_IntOneSecond * 3600;

    bzero((Address)&timer_TicksZeroSeconds, sizeof(timer_TicksZeroSeconds));
}

/*
 *----------------------------------------------------------------------
 *
 *  Timer_AddTicks --
 *
 * 	Adds two tick values together.
 *	For the Sun-3, this routine is #defined to be Time_Add().
 *
 *
 *  Results:
 *	A time in ticks.
 *
 *  Side effects:
 *	None.
 *
 * This is macro defined in timerTick.h
 * #define Timer_AddTicks(a,b,c)		Time_Add(a,b,c)
 *
 *----------------------------------------------------------------------
 */


/*
 *----------------------------------------------------------------------
 *
 *  Timer_SubtractTicks --
 *
 * 	Subtracts the second parameter from the first parameter. 
 *	The second parameter must be less than the first, otherwise 
 *	a zero tick value is returned.
 *	For the Sun-3, this routine is #defined to be Time_Subtract().
 *
 *  Results:
 *	An absolute time in ticks.
 *
 *  Side effects:
 *	None.
 *
 * This is macro defined in timerTick.h
 * #define Timer_SubtractTicks(a,b,c)	Time_Subtract(a,b,c)
 *----------------------------------------------------------------------
 */


/*
 *----------------------------------------------------------------------
 *
 *  Timer_AddIntervalToTicks --
 *
 * 	Adds an interval (32-bit value) to an absolute time (64-bit value).
 *
 *  Results:
 *	An absolute time in ticks.
 *
 *  Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
Timer_AddIntervalToTicks(absolute, interval, resultPtr)
    Timer_Ticks		absolute;	/* Addend 1 */
    unsigned int	interval;	/* Addend 2 */
    Timer_Ticks		*resultPtr;	/* Sum */
{
    Time	tmp;
    /*
     * Since Timer_Ticks is a time value, convert the interval to a time
     * and use Timer_Add. .
     */

    ConvertIntToTime(interval, &tmp);
    Time_Add(absolute, tmp, resultPtr);

}


/*
 *----------------------------------------------------------------------
 *
 *  Timer_TicksToTime --
 *
 *  	Converts a Timer_Ticks value into a Time value.
 *
 *  Results:
 *	A time value in Time format.
 *
 *  Side effects:
 *	None.
 *
 *	For the Sun-3, this routine is #defined to be *timePtr = tick;
 * #define Timer_TicksToTime(a,b)		*(b) = a;
 *----------------------------------------------------------------------
 */


/*
 *----------------------------------------------------------------------
 *
 *  Timer_TimeToTicks --
 *
 *  	Converts a Time value into a Timer_Ticks value.
 *
 *
 *  Results:
 *	A time value in ticks.
 *
 *  Side effects:
 *	None.
 *
 *	For the Sun-3, this routine is #defined to be *ticksPtr = time;
 *
 *  #define Timer_TimeToTicks(a,b)		*(b) = a;
 *
 *----------------------------------------------------------------------
 */


/*
 *----------------------------------------------------------------------
 *
 *  ConvertTimeToInt --
 *
 *      Converts a standard time value into a 32-bit interval value.
 *
 *  Results:
 *	An interval value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

static void
ConvertTimeToInt(time, resultPtr)
    Time time;
    unsigned int *resultPtr;
{
    if (Time_LE(time, maxIntervalTime)) {
	*resultPtr = (time.seconds * ONE_SEC_INTERVAL) + 
		 ((time.microseconds * ONE_SEC_INTERVAL) / ONE_SECOND);
    } else {
	printf( "ConvertTimeToInt: time value too large\n");
	*resultPtr = 0xFFFFFFFF;
    }
}


/*
 *----------------------------------------------------------------------
 *
 *  Timer_TicksToInterval --
 *
 *      Converts a ticks value into a 32-bit interval value.
 *
 *  Results:
 *	An interval value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
Timer_TicksToInterval(ticks, resultPtr)
    Timer_Ticks ticks;
    unsigned int *resultPtr;
{
    ConvertTimeToInt(ticks, resultPtr);
}


/*
 *----------------------------------------------------------------------
 *
 *  ConvertIntToTime --
 *
 *      Converts a 32-bit interval value into a standard time value.
 *
 *  Results:
 *	A time value.
 *
 *  Side Effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

static void
ConvertIntToTime(counter, resultPtr)
    unsigned int counter;
    Time *resultPtr;
{
    resultPtr->seconds = counter / ONE_SEC_INTERVAL;
    resultPtr->microseconds = (counter % ONE_SEC_INTERVAL) * 
				(ONE_SECOND/ONE_SEC_INTERVAL);
}

@


9.0
log
@Changing version numbers.
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun3.md/RCS/timerTick.c,v 8.3 89/05/24 07:46:16 rab Exp Locker: douglis $ SPRITE (Berkeley)";
d45 2
d93 2
a94 2
static void ConvertTimeToInt();
static void ConvertIntToTime();
@


8.3
log
@Changes to allow optimiziation.
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun3.md/RCS/timerTick.c,v 8.2 89/03/15 17:38:26 mendel Exp Locker: rab $ SPRITE (Berkeley)";
@


8.2
log
@*** empty log message ***
@
text
@d36 2
a37 2
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun3.md/RCS/timerTick.c,v 8.1 88/11/30 12:16:48 brent Exp Locker: mendel $ SPRITE (Berkeley)";
#endif not lint
@


8.1
log
@Sys_Printf => printf  Sys_Panic => panic
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun3.md/RCS/timerTick.c,v 8.0 88/11/11 18:40:22 douglis Stable Locker: brent $ SPRITE (Berkeley)";
d43 1
a43 1
#include "timerSun3Int.h"
d281 1
d283 22
@


8.0
log
@Changing version numbers.
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: /sprite/src/kernel/timer/sun3.md/RCS/timerTick.c,v 6.2 88/10/27 13:28:02 mendel Exp Locker: douglis $ SPRITE (Berkeley)";
d277 1
a277 1
	Sys_Panic(SYS_WARNING, "ConvertTimeToInt: time value too large\n");
@


6.2
log
@Port to use new libc.a
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: timerTick.c,v 6.1 88/10/07 10:54:54 mendel Exp $ SPRITE (Berkeley)";
@


6.1
log
@Moved the devTimer routines into the timer module.
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: timerTick.c,v 6.0 88/08/11 12:28:26 brent Stable $ SPRITE (Berkeley)";
a41 1
#ifdef NEWLIB
a42 3
#else
#include "time.h"
#endif
a44 1
#include "byte.h"
d130 1
a130 1
    Byte_Zero(sizeof(timer_TicksZeroSeconds), (Address)&timer_TicksZeroSeconds);
@


6.0
log
@Changing version numbers.
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: timerTick.c,v 1.2 88/06/27 10:39:00 mendel Exp $ SPRITE (Berkeley)";
d42 3
d46 2
a47 1
#include "devTimer.h"
d73 26
d121 1
a121 1
    Dev_CounterIntToTime((unsigned int) 0xFFFFFFFF, &timer_MaxIntervalTime);
d125 1
a125 1
    Dev_CounterTimeToInt(tmp, &timer_IntOneSecond);
d129 1
a129 1
    Dev_CounterTimeToInt(tmp, &timer_IntOneMillisecond);
d204 5
a208 3
    unsigned int	overflow;
    
    Dev_CounterAddIntToCount(absolute,interval,resultPtr,&overflow);
d210 2
a211 2
}

a212 26
/*
 *----------------------------------------------------------------------
 *
 *  Timer_GetCurrentTicks --
 *
 *  	Computes the number of ticks since the system was booted
 *	by reading the free-running counter.
 *
 *
 *  Results:
 *	The system up-time in ticks.
 *
 *  Side effects:
 *	Node
 *
 *----------------------------------------------------------------------
 */


void
Timer_GetCurrentTicks(ticksPtr)
    Timer_Ticks	*ticksPtr;	/* Buffer to place current time. */
{
    DISABLE_INTR();
    Dev_CounterRead(ticksPtr);
    ENABLE_INTR();
a213 1

d255 59
@


1.2
log
@Updated Copyright notice.
@
text
@d36 1
a36 1
static char rcsid[] = "$Header: timerTick.c,v 1.1 88/05/27 16:26:46 mendel Exp $ SPRITE (Berkeley)";
@


1.1
log
@Initial revision
@
text
@d25 8
a32 2
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
d36 1
a36 1
static char rcsid[] = "$Header: timerClock.c,v 5.1 88/05/05 18:02:02 nelson Exp $ SPRITE (Berkeley)";
d174 3
a176 1
    Time	tmp;
a177 2
    Dev_CounterIntToTime(interval, &tmp);
    Time_Add(absolute, tmp, resultPtr);
@
