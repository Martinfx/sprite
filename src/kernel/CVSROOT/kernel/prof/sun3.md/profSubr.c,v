head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.3 symm:9.3 spur:9.3 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     91.05.30.15.16.50;  author kupfer;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.19.15.54.02;  author rab;  state Exp;
branches ;
next     9.1;

9.1
date     90.09.11.12.09.03;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.16.52;  author douglis;  state Stable;
branches ;
next     8.3;

8.3
date     89.03.15.16.03.43;  author brent;  state Exp;
branches ;
next     8.2;

8.2
date     88.12.04.15.22.33;  author ouster;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.30.12.11.28;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.33.34;  author douglis;  state Stable;
branches ;
next     6.4;

6.4
date     88.11.08.11.47.07;  author brent;  state Exp;
branches ;
next     6.3;

6.3
date     88.10.07.11.09.00;  author mendel;  state Exp;
branches ;
next     6.2;

6.2
date     88.09.26.10.22.16;  author nelson;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.24.20.25.01;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.23.46;  author brent;  state Stable;
branches ;
next     5.4;

5.4
date     88.05.05.17.59.09;  author nelson;  state Exp;
branches ;
next     5.3;

5.3
date     88.05.04.18.21.45;  author nelson;  state Exp;
branches ;
next     5.2;

5.2
date     88.03.31.09.59.30;  author brent;  state Exp;
branches ;
next     5.1;

5.1
date     88.02.08.11.21.51;  author brent;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.48.10;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@Proc_StringNCopy now checks Proc_IsMigratedProcess and calls
Vm_StringNCopy if necessary.
@
text
@/* 
 * prof.c --
 *
 *	Routines for initializing and collecting profile information.
 *
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 9.2 90/10/19 15:54:02 rab Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif not lint


#include <sprite.h>
#include <stdio.h>
#include <prof.h>
#include <profInt.h>
#include <dbg.h>
#include <sys.h>
#include <timer.h>
#include <mach.h>
#include <fs.h>
#include <vm.h>
#include <bstring.h>

extern	int	etext;

/*
 * An on/off profiling switch.
 */

Boolean profEnabled = FALSE;

Address savedStackPtr;

/*
 * A histogram of PC samples is kept for use by gprof. Each sample is a
 * counter that gets incremented when the PC is in the range for the counter.
 */

typedef struct {
    Address lowpc;
    Address highpc;
    int	    size;
} SampleHdr;

static int	pcSampleSize;
static short	*pcSamples;

/*
 * PC sampling data structures (shared with _mcount.c).
 */

int		profArcListSize;
ProfRawArc	*profArcList;
ProfRawArc	*profArcListFreePtr;
ProfRawArc	*profArcListEndPtr;

int		profArcIndexSize;
ProfRawArc	**profArcIndex;

/*
 * Flag to indicate if Prof_Init has been called.
 */
static Boolean	init = FALSE;


/*
 *----------------------------------------------------------------------
 *
 * Prof_Init --
 *
 *	Allocate the profile data structures and initialize the profile timer.
 *	The timer is initialized to automatically start ticking again
 *	once its interrupt line is reset.  The array of counters
 *	for sampling the PC is allocated, as is the table of call
 *	graph arc counts.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Uses Vm_RawAlloc.  Each structure is order(textSize).
 *	Sets a flag indicating it has been called.
 *
 *----------------------------------------------------------------------
 */

void
Prof_Init()
{
    int numInstructions;

    /*
     * We estimate the number of instructions in the text
     * by dividing the address range in half...  This determines
     * to PC to index calculations done in mcount and Prof_CollectInfo.
     */

    numInstructions = ((unsigned)&etext - (unsigned)&spriteStart) >>
						    PROF_INSTR_SIZE_SHIFT;
    printf("Prof_Init: # instructions in kernel = %d\n", numInstructions);

    /*
     * The size of the sample array reflects a compression down
     * by the group size.
     */

    pcSampleSize = numInstructions / PROF_PC_GROUP_SIZE;
    pcSamples = (short *) Vm_RawAlloc(pcSampleSize * sizeof(short));

    /*
     * Allocate an array indexed by PC and containing a pointer
     * to the call graph arc that starts at that PC.  This array is
     * compressed by the arc group size.
     */
    profArcIndexSize = numInstructions >> PROF_ARC_GROUP_SHIFT;
    profArcIndex = 
	(ProfRawArc **) Vm_RawAlloc(profArcIndexSize * sizeof(ProfRawArc *));

    /*
     * The arcList needs an element for every distinct call instruction
     * that gets executed in the kernel.  The size is just a guess.
     */

    profArcListSize = numInstructions / PROF_CALL_RATIO;
    profArcList = 
	    (ProfRawArc *) Vm_RawAlloc(profArcListSize * sizeof(ProfRawArc));

    init = TRUE;
}

/*
 *----------------------------------------------------------------------
 *
 * Prof_Start --
 *
 *	Initialize the profile data structures and the profile timer.
 *	This clears the PC sample counters, the call graph arc counters,
 *	and the index into the list of call graph arc counters.
 *
 *	The interval between profile timer interrupts is defined in the
 *	timer module.
 *
 * Results:
 *	Return status.
 *
 * Side effects:
 *	Profiling is enabled and the data structures are zeroed.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Prof_Start()
{
    if (!init) {
	Prof_Init();
    }

    printf("Starting Profiling...");

    /*
     * Reset the PC sample counters.
     */

    bzero((Address) pcSamples, pcSampleSize * sizeof(short));

    /*
     * Reset the arc pointer list indexed by caller PC.
     */

    bzero((Address) profArcIndex, profArcIndexSize * sizeof(ProfRawArc *));

    /*
     * Set the free pointers into the arc storage.  Don't have to
     * initialize the arc storage itself because that is done
     * as arc storage is allocated by mcount.
     */

    profArcListFreePtr = &profArcList[0];
    profArcListEndPtr = &profArcList[profArcListSize-1];

    Timer_TimerInit(TIMER_PROFILE_TIMER);
    Timer_TimerStart(TIMER_PROFILE_TIMER);

    profEnabled = TRUE;
    printf(" done\n");
    return(SUCCESS);
}


/*
 *----------------------------------------------------------------------
 *
 * Prof_CollectInfo --
 *
 *	Collect profiling information from the stack.
 *	Look at the Status register to make sure we are
 *	running in the kernel, then sample the PC.
 *
 *	The interval between calls to this routine is defined
 *	by the profile timer's interrupt interval, which is
 *	defined in devTimer.c.
 *
 *	Note: This is an interrupt-level routine.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Increment the counter associated with the PC value.
 *
 *----------------------------------------------------------------------
 */

void
Prof_CollectInfo(stackPtr)
    Mach_IntrStack	*stackPtr;
{
    if (!profEnabled) {
	return;
    }
    if (stackPtr->excStack.statusReg & MACH_SR_SUPSTATE) {
	register int pc;	/* The program counter. */
	register int index;	/* Index into the array of counters */

	pc = stackPtr->excStack.pc;
	if (pc >= (int) &spriteStart && pc <= (int) &etext) {
	    index = (pc - (int) &spriteStart) >> PROF_PC_SHIFT;
	    if (index < pcSampleSize) {
		pcSamples[index]++;
	    }
	}
    }
}


/*
 *----------------------------------------------------------------------
 *
 * Prof_End --
 *
 *	Stop the profiling.
 *
 * Results:
 *	Return status.
 *
 * Side effects:
 *	Profiling is disabled.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Prof_End()
{
    Timer_TimerInactivate(TIMER_PROFILE_TIMER);
    profEnabled = FALSE;
    return(SUCCESS);
}	

/*
 *----------------------------------------------------------------------
 *
 * Prof_Dump --
 *
 *	Dump out the profiling data to the specified file.
 *
 * Results:
 *	SUCCESS		- the information was dumped to the file.
 *	?		- return codes from Fs module.
 *
 * Side effects:
 *	Write the profiling data to a file.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Prof_Dump(dumpName)
    char *dumpName;		/* Name of the file to dump to. */
{
    ReturnStatus	status;
    Fs_Stream		*streamPtr;
    int			fileOffset;
    int			writeLen;
    int			index;
    ProfArc		arc;
    ProfRawArc		*rawArcPtr;
    SampleHdr		sampleHdr;

    status = Fs_Open(dumpName, FS_WRITE|FS_CREATE, FS_FILE, 0666, &streamPtr);
    if (streamPtr == (Fs_Stream *) NIL || status != SUCCESS) {
	return(status);
    }

    /*
     * Write out the PC sampling counters.  Note they are preceeded
     * by a header that indicates the PC range and the size of the
     * sampling buffer.  (The size includes the header size...)
     */

    sampleHdr.lowpc	= (Address) &spriteStart;
    sampleHdr.highpc	= (Address) &etext;
    sampleHdr.size	= (pcSampleSize * sizeof(short)) + sizeof(sampleHdr);

    fileOffset = 0;
    writeLen = sizeof(sampleHdr);
    status = Fs_Write(streamPtr, (Address) &sampleHdr, fileOffset, &writeLen);
    if (status != SUCCESS) {
	printf(
		    "Prof_Dump: Fs_Write(1) failed, status = %x\n",status);
	goto dumpError;
    }
    printf("Prof_Dump: pc sample size = %d\n", pcSampleSize);

    fileOffset += writeLen;
    writeLen = pcSampleSize * sizeof(short);
    status = Fs_Write(streamPtr, (Address) pcSamples, fileOffset, &writeLen);
    if (status != SUCCESS) {
	printf(
		    "Prof_Dump: Fs_Write(2) failed, status = %x\n",status);
	goto dumpError;
    }

    fileOffset += writeLen;

    /*
     * Write out instantiated arcs.  Loop through the arcIndex index
     * and for each one that has arc storage figure out the PC that
     * corresponds to the arcIndex.  Then dump out an entry for
     * each routine called from that PC.
     */

    for (index = 0 ; index < profArcIndexSize ; index++) {
	rawArcPtr = profArcIndex[index];

	/* 
	 * Check if rawArcPtr equals an unused value (which is 0 because 
	 * profArcIndex is initialized with bzero in Prof_Start).
	 */
	if (rawArcPtr == (ProfRawArc *) 0) {
	    continue;
	}

	/*
	 * Reverse the PC to index calculation done in mcount.
	 */
	arc.callerPC = (int)&spriteStart + (index << PROF_ARC_SHIFT);

	do {
	    arc.calleePC = rawArcPtr->calleePC;
	    arc.count = rawArcPtr->count;

	    writeLen = sizeof(ProfArc);
	    status = Fs_Write(streamPtr, (Address)&arc, fileOffset, &writeLen);
	    if (status != SUCCESS) {
		printf(
		    "Prof_Dump: Fs_Write(3) failed, status = %x, index = %d\n",
		    status, index);
		goto dumpError;
	    }
	    fileOffset += writeLen;

	    rawArcPtr = rawArcPtr->link;
	    /*
	     * Check against NIL pointer here because of initialization
	     * in mcount.
	     */
	} while (rawArcPtr != (ProfRawArc *)NIL);
    }

    status = Fs_Close(streamPtr);
    if (status != SUCCESS) {
	printf(
		"Prof_Dump: Fs_Close failed, status = %x\n", status);
    }
    return(status);

dumpError:
    (void) Fs_Close(streamPtr);
    return(status);
}


/*
 *----------------------------------------------------------------------
 *
 * Prof_DumpStub --
 *
 *	This system call dumps profiling information into the specified file.
 *	This is done by making the name of the file accessible, then calling 
 *	Prof_Dump.
 *
 * Results:
 *	SUCCESS		- the file was dumped.
 *	?		- error returned by Fs module.
 *
 * Side effects:
 *	A file is written.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Prof_DumpStub(pathName)
    char *pathName;		/* The name of the file to write. */
{
    char	newName[FS_MAX_PATH_NAME_LENGTH];
    int		pathNameLength;

    /*
     * Copy the name in from user space to the kernel stack.
     */
    if (Proc_StringNCopy(FS_MAX_PATH_NAME_LENGTH, pathName, newName,
			 &pathNameLength) != SUCCESS) {
	return(SYS_ARG_NOACCESS);
    }
    if (pathNameLength == FS_MAX_PATH_NAME_LENGTH) {
	return(FS_INVALID_ARG);
    }
    return(Prof_Dump(newName));
}
@


9.2
log
@Added #include files to get rid of implicit declarations.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 9.1 90/09/11 12:09:03 rab Exp Locker: rab $ SPRITE (Berkeley)";
d417 2
a418 5
    if ((Proc_IsMigratedProcess() ?
	    Proc_StringNCopy(FS_MAX_PATH_NAME_LENGTH, pathName, newName,
		       &pathNameLength) :
	    Vm_StringNCopy(FS_MAX_PATH_NAME_LENGTH, pathName, newName,
		       &pathNameLength)) != SUCCESS) {
@


9.1
log
@Added #include "bstring.h" for forward declaration of bcopy().
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 9.0 89/09/12 15:16:52 douglis Stable Locker: rab $ SPRITE (Berkeley)";
d15 11
a25 10
#include "sprite.h"
#include "prof.h"
#include "profInt.h"
#include "dbg.h"
#include "sys.h"
#include "timer.h"
#include "mach.h"
#include "fs.h"
#include "vm.h"
#include "bstring.h"
@


9.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 8.3 89/03/15 16:03:43 brent Exp Locker: douglis $ SPRITE (Berkeley)";
d24 1
@


8.3
log
@Diddled with print statments to help debugging.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 8.2 88/12/04 15:22:33 ouster Exp $ SPRITE (Berkeley)";
@


8.2
log
@Stop using obsolete header files.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 8.1 88/11/30 12:11:28 brent Exp Locker: ouster $ SPRITE (Berkeley)";
d33 1
d160 1
a160 1
    printf("Starting Profiling.\n");
a182 1
    profEnabled = TRUE;
d186 2
@


8.1
log
@Sys_Panic => panic    Sys_Printf => printf
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 8.0 88/11/11 18:33:34 douglis Stable Locker: brent $ SPRITE (Berkeley)";
a22 1
#include "byte.h"
@


8.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 6.4 88/11/08 11:47:07 brent Exp Locker: douglis $ SPRITE (Berkeley)";
d101 1
a101 1
    Sys_Printf("Prof_Init: # instructions in kernel = %d\n", numInstructions);
d160 1
a160 1
    Sys_Printf("Starting Profiling.\n");
d310 1
a310 1
	Sys_Panic(SYS_WARNING,
d314 1
a314 1
    Sys_Printf("Prof_Dump: pc sample size = %d\n", pcSampleSize);
d320 1
a320 1
	Sys_Panic(SYS_WARNING,
d357 1
a357 1
		Sys_Panic(SYS_WARNING,
d374 1
a374 1
	Sys_Panic(SYS_WARNING,
@


6.4
log
@Fixed references to Byte_Zero
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/prof/sun3.md/RCS/profSubr.c,v 6.3 88/10/07 11:09:00 mendel Exp Locker: brent $ SPRITE (Berkeley)";
@


6.3
log
@Moved DevTimer routines to timer module.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 6.2 88/09/26 10:22:16 nelson Exp $ SPRITE (Berkeley)";
d166 1
a166 1
    Byte_Zero(pcSampleSize * sizeof(short), (Address) pcSamples);
d172 1
a172 1
    Byte_Zero(profArcIndexSize * sizeof(ProfRawArc *), (Address) profArcIndex);
d339 1
a339 1
	 * profArcIndex is initialized with Byte_Zero in Prof_Start).
@


6.2
log
@Reduced the size of arrays that have to be kept for profiling.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 6.1 88/08/24 20:25:01 nelson Exp $ SPRITE (Berkeley)";
d20 1
a20 1
#include "devTimer.h"
d141 2
a142 1
 *	The interval between profile timer interrupts is defined in devTimer.c.
d184 2
a185 2
    Dev_TimerInit(DEV_PROFILE_TIMER);
    Dev_TimerStart(DEV_PROFILE_TIMER);
d256 1
a256 1
    Dev_TimerInactivate(DEV_PROFILE_TIMER);
d259 1
a259 1
}
@


6.1
log
@Changed endText to etext.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 6.0 88/08/11 12:23:46 brent Stable $ SPRITE (Berkeley)";
d99 2
a100 1
    numInstructions = ((int)&etext - (int)&spriteStart) / sizeof(short);
d114 1
a114 2
     * large enough to have a header pointer for every instruction
     * so that the calling PC can be infered from the array index.
d116 1
a116 2

    profArcIndexSize = numInstructions;
d347 1
a347 1
	arc.callerPC = (int)&spriteStart + (index << PROF_INSTR_SIZE_SHIFT);
@


6.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 5.4 88/05/05 17:59:09 nelson Exp $ SPRITE (Berkeley)";
d26 1
d99 1
a99 1
    numInstructions = ((int)&endText - (int)&spriteStart) / sizeof(short);
d227 1
a227 1
	if (pc >= (int) &spriteStart && pc <= (int) &endText) {
d303 1
a303 1
    sampleHdr.highpc	= (Address) &endText;
@


5.4
log
@Handles move of functionality from sys to mach.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 5.3 88/05/04 18:21:45 nelson Exp $ SPRITE (Berkeley)";
@


5.3
log
@Handles new mach module structure.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 5.2 88/03/31 09:59:30 brent Exp $ SPRITE (Berkeley)";
d413 1
a413 1
    if ((Proc_IsMigratedProcess(Sys_GetProcessorNumber()) ?
@


5.2
log
@Fixed pathName handling in Prof_DumpStub
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 5.1 88/02/08 11:21:51 brent Exp $ SPRITE (Berkeley)";
a19 1
#include "exc.h"
d21 1
a21 1
#include "machine.h"
d216 1
a216 1
    Exc_IntrStack	*stackPtr;
d221 1
a221 1
    if (stackPtr->excStack.statusReg & SUN_SR_SUPSTATE) {
@


5.1
log
@Fixed handling of user-space pathname.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 5.0 87/08/11 10:48:10 sprite Exp $ SPRITE (Berkeley)";
d414 5
a418 2
    if (Fs_StringNCopy(FS_MAX_PATH_NAME_LENGTH, pathName, newName,
		       &pathNameLength) != SUCCESS) {
d424 1
a424 1
    return(Prof_Dump(pathName));
@


5.0
log
@First Sprite native copy
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: profSubr.c,v 3.6 86/12/02 13:24:01 andrew Exp $ SPRITE (Berkeley)";
d408 2
a409 2
    ReturnStatus status;	/* General status return code. */
    int		 numBytes;	/* Number of accessible bytes. */
d412 1
a412 1
     * Make the file name accessible. 
d414 3
a416 4
    status = Fs_MakeNameAccessible(&pathName, &numBytes);
    if (status == SUCCESS) {
	status = Prof_Dump(pathName);
	Vm_MakeUnaccessible(pathName, numBytes);
d418 4
a421 1
    return(status);
@
