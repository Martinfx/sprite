head     9.0;
branch   ;
access   ;
symbols  sun4nw:9.0 symm:9.0 spur:9.0 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.0
date     89.09.12.14.55.53;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.06.12.11.13.02;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.30.11.39.47;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.08.12;  author douglis;  state Stable;
branches ;
next     6.3;

6.3
date     88.08.24.18.20.20;  author nelson;  state Exp;
branches ;
next     6.2;

6.2
date     88.08.24.18.14.35;  author nelson;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.24.18.04.30;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.10.48;  author brent;  state Stable;
branches ;
next     5.2;

5.2
date     88.05.05.17.48.26;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     88.05.04.16.54.22;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.38.50;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.0
log
@Changing version numbers.
@
text
@/* dbgRs232.c -
 *
 *     This file contains routines that read, write, and initialize the
 *     Zilog RS232 chip.
 *
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/dbg/sun3.md/RCS/dbgRs232.c,v 8.2 89/06/12 11:13:02 rab Exp Locker: douglis $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "dev.h"
#include "devAddrs.h"
#include "dbg.h"
#include "dbgRs232.h"
#include "dbgInt.h"
#include "sys.h"
#include "mach.h"

/*
 * Channel A is setup to be the debuggers channel.  It gets configured
 * to be a polling device, so we avoid configuring the other channel
 * in the same way.  That would screw up any attached terminals.
 */
#define USE_CHAN_A

/*
 * Struct to access channel A control register
 */
static volatile Dev_ZilogDevice *zilogAddrA;

/*
 * Struct to access channel B control register
 */
static Dev_ZilogDevice *zilogAddrB;


/*
 * ----------------------------------------------------------------------------
 *
 * DbgRs232Init --
 *
 *	Initialize the Zilog chip.
 *
 *	Currently, only channel A is used. Channel B is not initialized
 *	because it is used a serial port.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The two global zilog addresses for the two channels are initialized.
 *
 * ----------------------------------------------------------------------------
 */

void
DbgRs232Init()
{
#ifdef USE_CHAN_A
    zilogAddrA = (Dev_ZilogDevice *) (DEV_ZILOG_SERIAL_ADDR | 4);
#endif USE_CHAN_A

#ifdef USE_CHAN_B
    zilogAddrB = (volatile Dev_ZilogDevice *) DEV_ZILOG_SERIAL_ADDR;
#endif USE_CHAN_B

    /*
     * Reset the channel.
     */

#ifdef USE_CHAN_A
    Dev_ZilogWriteReg(zilogAddrA, 9, WRITE9_RESET_CHAN_A); 
    MACH_DELAY(10);
#endif USE_CHAN_A

#ifdef USE_CHAN_B
    Dev_ZilogWriteReg(zilogAddrB, 9, WRITE9_RESET_WORLD); 
    MACH_DELAY(10);
#endif USE_CHAN_B

    /*
     * Initialize channel A.
     */

#ifdef USE_CHAN_A
    Dev_ZilogInit(zilogAddrA, DEV_ZILOG_SERIAL_SPEED);
#endif USE_CHAN_A

    /*
     * Initialize channel B.
     */

#ifdef USE_CHAN_B
    Dev_ZilogInit(zilogAddrB, DEV_ZILOG_SERIAL_SPEED);
#endif USE_CHAN_B
}


/*
 * ----------------------------------------------------------------------------
 *
 * DbgRs232ReadChar --
 *
 *     Return the next character that is available on the given channel.  If
 *     no character available then busy wait.
 *
 * Results:
 *     The next available character.
 *
 * Side effects:
 *     None.
 *
 * ----------------------------------------------------------------------------
 */
char
DbgRs232ReadChar(channel)
    Dbg_Rs232Channel	channel;	/* Channel to read from */
{
    int reg;

    /*
     * Busy wait until a character is ready.
     */

    while(1) {
	if (channel == DBG_RS232_CHANNELA) {
#ifdef USE_CHAN_A
	    reg = Dev_ZilogReadReg(zilogAddrA, 0); 
#else
	    printf("DbgRs232ReadChar called on channel A.\n");
	    return(0);
#endif USE_CHAN_A
	} else {
#ifdef USE_CHAN_B
	    reg = Dev_ZilogReadReg(zilogAddrB, 0); 
#else
	    printf("DbgRs232ReadChar called on channel B.\n");
	    return(0);
#endif USE_CHAN_B
	}
	if (reg & READ0_RX_READY) {
	    break;
	}
	DbgCheckNmis();
    }

    /*
     * Read the character.
     */

    if (channel == DBG_RS232_CHANNELA) {
	return(Dev_ZilogReadReg(zilogAddrA, 8));
    } else {
	return(Dev_ZilogReadReg(zilogAddrB, 8));
    }
}


/*
 * ----------------------------------------------------------------------------
 *
 * DbgRs232WriteChar --
 *
 *     Write a character to the given channel.  Will busy wait until the 
 *     transmit buffer is empty.
 *
 * Results:
 *     None.
 *
 * Side effects:
 *     None.
 *
 * ----------------------------------------------------------------------------
 */

void
DbgRs232WriteChar(channel, value)
    Dbg_Rs232Channel channel;	/* Channel to write to */
    char 	     value;	/* Value to write */
{
    int	reg;

    /*
     * Busy wait until the transmit buffer is empty.
     */

    while (1) {
	if (channel == DBG_RS232_CHANNELA) {
#ifdef USE_CHAN_A
	    reg = Dev_ZilogReadReg(zilogAddrA, 0);
#else
	    printf("DbgRs232WriteChar called on channel A.\n");
	    return;
#endif USE_CHAN_A
	} else {
#ifdef USE_CHAN_B
	    reg = Dev_ZilogReadReg(zilogAddrB, 0);
#else
	    printf("DbgRs232WriteChar called on channel B.\n");
	    return;
#endif USE_CHAN_B
	}
	if (reg & READ0_TX_READY) {
	    break;
	}
    }

    /*
     * Write the character
     */

    if (channel == DBG_RS232_CHANNELA) {
#ifdef USE_CHAN_A
	Dev_ZilogWriteReg(zilogAddrA, 8, (int) value);
#endif USE_CHAN_A
    } else {
#ifdef USE_CHAN_B
	Dev_ZilogWriteReg(zilogAddrB, 8, (int) value);
#endif USE_CHAN_B
    }
}
@


8.2
log
@Added volatile declarations.  But it's a moot point as
this module breaks when compiled with optimization
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/dbg/sun3.md/RCS/dbgRs232.c,v 8.1 88/11/30 11:39:47 brent Exp Locker: rab $ SPRITE (Berkeley)";
@


8.1
log
@Sys_Panic => panic
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/dbg/sun2.md/RCS/dbgRs232.c,v 8.0 88/11/11 18:08:12 douglis Stable Locker: brent $ SPRITE (Berkeley)";
d30 4
d35 4
a38 5
static Dev_ZilogDevice *zilogAddrA;	/* Struct to access channel A control
					   register */

static Dev_ZilogDevice *zilogAddrB;	/* Struct to access channel B control
					   register */
d68 1
a68 1
    zilogAddrB = (Dev_ZilogDevice *) DEV_ZILOG_SERIAL_ADDR;
@


8.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/dbg/sun2.md/RCS/dbgRs232.c,v 6.3 88/08/24 18:20:20 nelson Exp Locker: douglis $ SPRITE (Berkeley)";
d131 1
a131 1
	    Sys_Panic(SYS_WARNING, "DbgRs232ReadChar called on channel A.\n");
d138 1
a138 1
	    Sys_Panic(SYS_WARNING, "DbgRs232ReadChar called on channel B.\n");
d193 1
a193 1
	    Sys_Panic(SYS_WARNING, "DbgRs232WriteChar called on channel A.\n");
d200 1
a200 1
	    Sys_Panic(SYS_WARNING, "DbgRs232WriteChar called on channel B.\n");
@


6.3
log
@Fixed one more lint error.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 6.2 88/08/24 18:14:35 nelson Exp $ SPRITE (Berkeley)";
@


6.2
log
@Fixed lint errors.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 6.1 88/08/24 18:04:30 nelson Exp $ SPRITE (Berkeley)";
d132 1
a132 1
	    return;
d139 1
a139 1
	    return;
@


6.1
log
@Got rid of a lint error.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 6.0 88/08/11 12:10:48 brent Stable $ SPRITE (Berkeley)";
a30 1
#ifdef USE_CHAN_A
a32 1
#endif USE_CHAN_A
a33 1
#ifdef USE_CHAN_B
a35 1
#endif USE_CHAN_B
@


6.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 5.2 88/05/05 17:48:26 nelson Exp $ SPRITE (Berkeley)";
a124 1
    int oldContext;
a156 1
#ifdef USE_CHAN_A
a157 1
#endif USE_CHAN_A
a158 1
#ifdef USE_CHAN_B
a159 1
#endif USE_CHAN_B
@


5.2
log
@Changed to handle fields moved from sys to mach.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 5.1 88/05/04 16:54:22 nelson Exp $ SPRITE (Berkeley)";
@


5.1
log
@Handles new trap handling stuff.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 5.0 87/08/11 10:38:50 sprite Exp $ SPRITE (Berkeley)";
a20 1
#include "sunMon.h"
@


5.0
log
@First Sprite native copy
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: dbgRs232.c,v 4.4 87/06/08 17:09:56 nelson Exp $ SPRITE (Berkeley)";
a14 1
#include "machine.h"
d22 1
d79 1
a79 1
    DELAY(10);
d84 1
a84 1
    DELAY(10);
@
