head     8.2;
branch   ;
access   ;
symbols  sun4nw:8.2 symm:8.2 spur:8.2 newlib:8.0;
locks    ; strict;
comment  @# @;


8.2
date     89.08.01.20.37.45;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     89.06.19.13.58.29;  author jhh;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.08.17;  author douglis;  state Stable;
branches ;
next     1.3;

1.3
date     88.11.11.15.30.44;  author mendel;  state Exp;
branches ;
next     1.2;

1.2
date     88.08.16.20.29.46;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     88.08.10.13.27.57;  author nelson;  state Exp;
branches ;
next     ;


desc
@@


8.2
log
@fixed typo
@
text
@/*
**  Copyright (C) 1988 by Douglas Johnson
**
**  This code implements some C callable routines to talk to the SPUR 
**  on board RS-232 port.  It is based on Garth Gibson's primitive 
**  debugger interface.  The routines implement initializing the port,
**  reading a character, and writing a character.
*/



#include "uart.h"
#include "machConst.h"
#include "reg.h"


/* initialize the uart.  This must be called at power up.
** (void) init_uart();
*/
UART_BASE_C:	.long 		UART_BASE
	.globl _uart_init
_uart_init:
0:
	rd_special		r24,pc
	
	ld_32  VOL_TEMP1, r24,$(UART_BASE_C-0b)          /* Start of the UART registers*/
	rd_kpsw VOL_TEMP3                     /* Go to physical mode to talk */
	add_nt  KPSW_REG,VOL_TEMP3,r0
	and	VOL_TEMP3,VOL_TEMP3,$~(MACH_KPSW_VIRT_DFETCH_ENA | MACH_KPSW_INTR_TRAP_ENA)
	wr_kpsw VOL_TEMP3,r0

	st_uart	($(TX_OFF|RX_OFF|RESET_RX), COMMAND)/* reset receive */
	st_uart	($(TX_OFF|RX_OFF|RESET_TX), COMMAND) /* reset transmit */
	st_uart	($(TX_OFF|RX_OFF|RESET_MR1), COMMAND)/* reset mode pointer */
	st_uart	($(TX_OFF|RX_OFF|EXIT_TX_BREAK),COMMAND)/*stop sending break */
	st_uart	($AUX_CMD_VAL, AUX_CMD )	/* mainly for show */
	st_uart	($MR1_VAL, MODE )		/* see uart.h */
	st_uart	($MR2_VAL, MODE )		/* see uart.h */
	st_uart	(r11, BAUD )		/* set baud */
	st_uart	($INTR_MASK_DUMB, INTR_MSK )	/* take no uart intrs */
	st_uart	($(TX_OFF|RX_OFF|CLR_ERR_STATUS), COMMAND ) /* clear errors */
	st_uart	($(TX_OFF|RX_OFF|CLR_BRK_STATUS), COMMAND )/* clear break info */
	st_uart	($(RX_ON|TX_ON),COMMAND)  /* turn on receive & transmit */


	wr_kpsw  KPSW_REG,r0
	invalidate_ib
	return		r10, $8
	Nop



/* Subroutine to read a byte across the uart 
** (char) readUart();
*/

	.globl 	_readUart
_readUart:
0:
	rd_special		r24,pc
	
	ld_32  VOL_TEMP1, r24,$(UART_BASE_C-0b)          /* Start of the UART registers*/

@@wait:                   /* wait for a character  */
	cmp_trap     always,r0,r0,$3
	nop
	add_nt  OUTPUT_REG1,VOL_TEMP1,$XFER_STATUS
	invalidate_ib
	call   _read_physical_word
	nop
	and     VOL_TEMP2,OUTPUT_REG1,$RX_NOT_EMPTY
	cmp_br_delayed	eq,VOL_TEMP2,r0,@@waitb	
	nop
#ifdef no_cc_refresh
	cmp_trap always,r0,r0,$MACH_REFRESH_TRAP  /* Keep traps working */
#endif

				              /* Check for errors */
	and     VOL_TEMP2,VOL_TEMP2,$RXD_ERROR_MASK
	cmp_br_delayed	ne,VOL_TEMP2,r0,@@errorf
	Nop

	add_nt  OUTPUT_REG1,VOL_TEMP1,$DATA
	invalidate_ib
	call   _read_physical_word
	nop

	and     INPUT_REG1,OUTPUT_REG1,$0xff         /* only eight bits */
	invalidate_ib
	return		r10, $8
	Nop
				/*  Need to do something better here.  */
@@error:
	invalidate_ib
	call		_uart_init
	Nop					
	jump		@@waitb
	Nop



/*
** Subroutine to write a byte across the uart "void writeUart(char)"
*/

	.globl  _writeUart
_writeUart:	
			    /* Start of the UART registers*/
0:
	rd_special		r24,pc
	
	ld_32  VOL_TEMP1, r24,$(UART_BASE_C-0b)          /* Start of the UART registers*/

 
@@wait:			    /* Wait until there is space in the FIFO */
	cmp_trap     always,r0,r0,$3
	nop
	add_nt  OUTPUT_REG1,VOL_TEMP1,$XFER_STATUS
	invalidate_ib
	call   _read_physical_word
	nop
	and	OUTPUT_REG1,OUTPUT_REG1, $TX_NOT_FULL
	cmp_br_delayed	eq, OUTPUT_REG1, r0, @@waitb
	nop
#ifdef no_cc_refresh
	cmp_trap always,r0,r0,$MACH_REFRESH_TRAP  /* Keep traps working */
#endif

			    /* Write the character  */
	add_nt  OUTPUT_REG1,VOL_TEMP1,$DATA
	and	OUTPUT_REG2,INPUT_REG1,$0xff         /* only eight bits */
	invalidate_ib
	call   _write_physical_word
	nop

	invalidate_ib
	return		r10, $8
	Nop				

/*
** Subroutine to write a word into physical adddress space
** "void write_physical_word(address,data)"
*/

	.globl  _write_physical_word
_write_physical_word:	

	rd_kpsw VOL_TEMP1                    /* Go to physical mode to talk */
	add_nt  KPSW_REG,VOL_TEMP1,r0
	and	VOL_TEMP1,VOL_TEMP1,$~(MACH_KPSW_VIRT_DFETCH_ENA | MACH_KPSW_INTR_TRAP_ENA)
	wr_kpsw VOL_TEMP1,r0

	st_32   r12,r11,$0                /* Write the data */

	wr_kpsw  KPSW_REG,r0              /* Restore previous mode */
	invalidate_ib
	return	r10, $8
	Nop				


/*
** Subroutine to write a word into physical memory 
** (int) read_physical_word(address)
*/

	.globl  _read_physical_word
_read_physical_word:	

	rd_kpsw VOL_TEMP1                     /* Go to physical mode to talk */
	add_nt  KPSW_REG,VOL_TEMP1,r0
	and	VOL_TEMP1,VOL_TEMP1,$~(MACH_KPSW_VIRT_DFETCH_ENA | MACH_KPSW_INTR_TRAP_ENA)
	wr_kpsw VOL_TEMP1,r0

	ld_32   r11,r11,$0                /* Read the data */

	wr_kpsw KPSW_REG,r0               /* Restore previous mode. */
	invalidate_ib
	return  r10, $8
	Nop				
@


8.1
log
@Changed debugging interface
@
text
@d39 1
a39 1
	st_uart	($r11, BAUD )		/* set baud */
@


8.0
log
@Changing version numbers.
@
text
@d39 1
a39 1
	st_uart	($BAUD_9600, BAUD )		/* set to 9600 baud */
d47 1
d54 1
a54 1
** (char) readchar();
d57 2
a58 2
	.globl 	_readchar
_readchar:
d68 1
d84 1
d88 2
a89 1
	and     INPUT_REG1,OUTPUT_REG1,$0x7f         /* only seven bits */
d94 1
d103 1
a103 1
** Subroutine to write a byte across the uart "void writechar(char)"
d106 2
a107 2
	.globl  _writechar
_writechar:	
d119 1
d131 2
a132 1
	and	OUTPUT_REG2,INPUT_REG1,$0x7f         /* only seven bits */
d136 1
d156 1
d177 1
@


1.3
log
@Patch bug causing UART to hang on error.
@
text
@@


1.2
log
@Put disable interrupts around the led display.
@
text
@a15 1
	.asmreg    VOL_TEMP3
a16 1

d20 1
d23 8
a31 6
	rd_kpsw VOL_TEMP1                     /* Go to physical mode to talk */
	add_nt  KPSW_REG,VOL_TEMP1,r0
	and	VOL_TEMP1,VOL_TEMP1,$~(MACH_KPSW_VIRT_DFETCH_ENA | MACH_KPSW_INTR_TRAP_ENA)
	wr_kpsw VOL_TEMP1,r0

	add_nt  VOL_TEMP1,r0,$UART_BASE          /* Start of the UART registers*/
d58 4
a61 1
	add_nt  VOL_TEMP1,r0,$UART_BASE        /* Start of the UART registers*/
d64 1
a64 1
	call	_MachRefreshCCWells	
d90 1
a90 1
	jump		.
d92 2
d104 5
a108 1
	add_nt  VOL_TEMP1,r0,$UART_BASE   
d111 1
a111 1
	call	_MachRefreshCCWells	
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
	and	VOL_TEMP1,VOL_TEMP1,$~MACH_KPSW_VIRT_DFETCH_ENA
d132 1
a132 1
	and	VOL_TEMP1,VOL_TEMP1,$~MACH_KPSW_VIRT_DFETCH_ENA
d152 1
a152 1
	and	VOL_TEMP1,VOL_TEMP1,$~MACH_KPSW_VIRT_DFETCH_ENA
@
