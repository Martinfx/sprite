head     9.13;
branch   ;
access   ;
symbols  ds3100:9.13 sun3:9.13 sprited:9.8.1 sun4nw:9.11 symm:9.11 spur:9.11 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.13
date     92.10.26.14.09.47;  author mgbaker;  state Exp;
branches ;
next     9.12;

9.12
date     92.08.10.17.36.40;  author mgbaker;  state Exp;
branches ;
next     9.11;

9.11
date     91.09.24.12.50.34;  author mgbaker;  state Exp;
branches ;
next     9.10;

9.10
date     91.09.20.14.06.54;  author mgbaker;  state Exp;
branches ;
next     9.9;

9.9
date     91.09.10.18.23.51;  author rab;  state Exp;
branches ;
next     9.8;

9.8
date     90.12.06.21.56.08;  author jhh;  state Exp;
branches 9.8.1.1;
next     9.7;

9.7
date     90.10.08.15.04.51;  author mendel;  state Exp;
branches ;
next     9.6;

9.6
date     90.06.07.11.15.09;  author douglis;  state Exp;
branches ;
next     9.5;

9.5
date     90.05.21.13.35.07;  author douglis;  state Exp;
branches ;
next     9.4;

9.4
date     90.05.14.14.40.23;  author mgbaker;  state Exp;
branches ;
next     9.3;

9.3
date     89.11.29.14.50.45;  author brent;  state Exp;
branches ;
next     9.2;

9.2
date     89.11.27.15.02.41;  author brent;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.26.18.36.55;  author brent;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.10.19;  author douglis;  state Stable;
branches ;
next     8.25;

8.25
date     89.08.21.15.29.18;  author mendel;  state Exp;
branches ;
next     8.24;

8.24
date     89.08.12.10.44.40;  author jhh;  state Exp;
branches ;
next     8.23;

8.23
date     89.07.18.13.08.08;  author jhh;  state Exp;
branches ;
next     8.22;

8.22
date     89.07.11.08.48.45;  author mendel;  state Exp;
branches ;
next     8.21;

8.21
date     89.06.30.16.56.55;  author brent;  state Exp;
branches ;
next     8.20;

8.20
date     89.06.28.16.38.10;  author brent;  state Exp;
branches ;
next     8.19;

8.19
date     89.06.22.16.29.47;  author brent;  state Exp;
branches ;
next     8.18;

8.18
date     89.06.22.12.24.05;  author brent;  state Exp;
branches ;
next     8.17;

8.17
date     89.06.21.12.30.10;  author brent;  state Exp;
branches ;
next     8.16;

8.16
date     89.06.16.12.06.47;  author brent;  state Exp;
branches ;
next     8.15;

8.15
date     89.06.15.09.13.55;  author brent;  state Exp;
branches ;
next     8.14;

8.14
date     89.05.23.09.48.10;  author mendel;  state Exp;
branches ;
next     8.13;

8.13
date     89.05.10.11.29.46;  author mendel;  state Exp;
branches ;
next     8.12;

8.12
date     89.03.15.14.17.24;  author brent;  state Exp;
branches ;
next     8.11;

8.11
date     89.03.03.08.13.01;  author brent;  state Exp;
branches ;
next     8.10;

8.10
date     89.02.28.08.47.33;  author brent;  state Exp;
branches ;
next     8.9;

8.9
date     89.02.09.09.19.24;  author brent;  state Exp;
branches ;
next     8.8;

8.8
date     89.02.06.18.26.16;  author brent;  state Exp;
branches ;
next     8.7;

8.7
date     89.01.30.14.04.00;  author brent;  state Exp;
branches ;
next     8.6;

8.6
date     89.01.30.09.21.59;  author brent;  state Exp;
branches ;
next     8.5;

8.5
date     89.01.04.08.51.20;  author brent;  state Exp;
branches ;
next     8.4;

8.4
date     88.12.21.11.47.55;  author brent;  state Exp;
branches ;
next     8.3;

8.3
date     88.12.21.10.17.14;  author brent;  state Exp;
branches ;
next     8.2;

8.2
date     88.12.15.09.37.24;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.28.12.47.43;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.18.56;  author douglis;  state Stable;
branches ;
next     7.0;

7.0
date     88.11.11.15.30.41;  author brent;  state Exp;
branches ;
next     6.21;

6.21
date     88.11.02.10.57.10;  author brent;  state Exp;
branches ;
next     6.20;

6.20
date     88.10.22.15.13.47;  author brent;  state Exp;
branches ;
next     6.19;

6.19
date     88.10.20.15.48.02;  author brent;  state Exp;
branches ;
next     6.18;

6.18
date     88.10.19.09.43.06;  author brent;  state Exp;
branches ;
next     6.17;

6.17
date     88.10.16.11.10.50;  author brent;  state Exp;
branches ;
next     6.16;

6.16
date     88.10.15.17.33.30;  author mlgray;  state Exp;
branches ;
next     6.15;

6.15
date     88.10.14.12.14.54;  author brent;  state Exp;
branches ;
next     6.14;

6.14
date     88.10.11.15.58.39;  author brent;  state Exp;
branches ;
next     6.13;

6.13
date     88.10.10.11.24.55;  author douglis;  state Exp;
branches ;
next     6.12;

6.12
date     88.10.05.14.43.15;  author brent;  state Exp;
branches ;
next     6.11;

6.11
date     88.10.05.12.10.24;  author brent;  state Exp;
branches ;
next     6.10;

6.10
date     88.09.28.08.38.14;  author brent;  state Exp;
branches ;
next     6.9;

6.9
date     88.09.22.09.03.48;  author brent;  state Exp;
branches ;
next     6.8;

6.8
date     88.09.19.11.22.50;  author brent;  state Exp;
branches ;
next     6.7;

6.7
date     88.09.16.16.51.07;  author brent;  state Exp;
branches ;
next     6.6;

6.6
date     88.09.13.11.27.04;  author brent;  state Exp;
branches ;
next     6.5;

6.5
date     88.09.07.16.52.26;  author brent;  state Exp;
branches ;
next     6.4;

6.4
date     88.09.02.14.33.59;  author brent;  state Exp;
branches ;
next     6.3;

6.3
date     88.08.31.12.04.59;  author brent;  state Exp;
branches ;
next     6.2;

6.2
date     88.08.24.18.07.59;  author brent;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.12.12.31.34;  author brent;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.15.24;  author brent;  state Stable;
branches ;
next     1.11;

1.11
date     88.08.11.10.54.26;  author brent;  state Exp;
branches ;
next     1.10;

1.10
date     88.08.05.13.19.44;  author brent;  state Exp;
branches ;
next     1.9;

1.9
date     88.08.04.15.03.51;  author mlgray;  state Exp;
branches ;
next     1.8;

1.8
date     88.08.03.17.18.20;  author mlgray;  state Exp;
branches ;
next     1.7;

1.7
date     88.06.08.14.57.59;  author brent;  state Exp;
branches ;
next     1.6;

1.6
date     88.06.06.09.36.34;  author brent;  state Exp;
branches ;
next     1.5;

1.5
date     88.06.04.12.11.12;  author brent;  state Exp;
branches ;
next     1.4;

1.4
date     88.04.19.10.34.08;  author brent;  state Exp;
branches ;
next     1.3;

1.3
date     88.04.11.17.47.17;  author brent;  state Exp;
branches ;
next     1.2;

1.2
date     88.04.11.10.11.45;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.05.13.59.57;  author brent;  state Exp;
branches ;
next     ;

9.8.1.1
date     91.11.15.16.47.23;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Device access module
@


9.13
log
@Support for bulk reopen rpcs.
@
text
@/* 
 * fsRmtDevice.c --
 *
 *	Routines to manage Remote device.
 *
 *
 * Copyright 1987 Regents of the University of California
 * All rights reserved.
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/fsrmt/fsrmtDevice.c,v 9.12 92/08/10 17:36:40 mgbaker Exp $ SPRITE (Berkeley)";
#endif not lint


#include <sprite.h>

#include <fs.h>
#include <fsconsist.h>
#include <fsio.h>
#include <fsutil.h>
#include <fsNameOps.h>
#include <fsrmtNameOpsInt.h>
#include <fsdm.h>
#include <fsioLock.h>
#include <fsprefix.h>
#include <fsrmt.h>
#include <rpc.h>
#include <recov.h>
#include <fsStat.h>
#include <fsioDevice.h>

#include <stdio.h>

/*
 * Parameters for RPC_FS_DEV_OPEN remote procedure call.
 * The return value from this call is a new I/O fileID.
 */
typedef struct FsDeviceRemoteOpenParam {
    Fs_FileID	fileID;		/* I/O fileID from name server. */
    int		useFlags;	/* FS_READ | FS_WRITE ... */
    int		dataSize;	/* size of openData */
    FsrmtUnionData	openData;	/* Fsio_DeviceState or Fspdev_State.
				 * NOTE. be careful when assigning this.
				 * bcopy() of the whole union can cause
				 * bus errors if really only a small object
				 * exists and it's at the end of a page. */
} FsDeviceRemoteOpenParam;




/*
 *----------------------------------------------------------------------
 *
 * FsrmtDeviceIoOpen --
 *
 *      Set up the stream IO handle for a remote device.  This makes
 *	an RPC to the I/O server, which will invoke Fsio_DeviceIoOpen there,
 *	and then sets up the remote device handle.
 *
 * Results:
 *	SUCCESS or a device dependent open error code.
 *
 * Side effects:
 *	Sets up and installs the remote device's ioHandle.
 *	The use counts on the handle are updated.
 *	The handle is returned unlocked, but with a new
 *	reference than gets released when the device is closed.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsrmtDeviceIoOpen(ioFileIDPtr, flagsPtr, clientID, streamData, name, ioHandlePtrPtr)
    Fs_FileID		*ioFileIDPtr;	/* I/O fileID */
    int			*flagsPtr;	/* FS_READ | FS_WRITE ... */
    int			clientID;	/* Host doing the open */
    ClientData		streamData;	/* Fsio_DeviceState */
    char		*name;		/* Device file name */
    Fs_HandleHeader	**ioHandlePtrPtr;/* Return - a handle set up for
					 * I/O to a device, NIL if failure. */
{
    register ReturnStatus 	status;

    /*
     * Do a device open at the I/O server.  We set the ioFileID type so
     * that the local device client open procedure gets called at the I/O
     * server, as opposed to the local pipe (or whatever) open routine.
     * NAME note: are not passing the file name to the I/O server.
     */
    ioFileIDPtr->type = FSIO_LCL_DEVICE_STREAM;
    status = Fsrmt_DeviceOpen(ioFileIDPtr, *flagsPtr,	sizeof(Fsio_DeviceState),
				streamData);
    if (status == SUCCESS) {
	ioFileIDPtr->type = FSIO_RMT_DEVICE_STREAM;
	Fsrmt_IOHandleInit(ioFileIDPtr, *flagsPtr, name, ioHandlePtrPtr);
    } else {
	*ioHandlePtrPtr = (Fs_HandleHeader *)NIL;
    }
    free((Address)streamData);
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * Fsrmt_IOHandleInit --
 *
 *	Initialize a handle for a remote device/pseudo-device/whatever.
 *
 * Results:
 *	Sets its *ioHandlePtrPtr to reference the installed handle.
 *
 * Side effects:
 *	Create and install a handle for remote thing.  The handle is
 *	returned unlocked.  The recovery use counts are incremented
 *	to reflect the use of the handle.
 *
 *----------------------------------------------------------------------
 */
void
Fsrmt_IOHandleInit(ioFileIDPtr, useFlags, name, newHandlePtrPtr)
    Fs_FileID		*ioFileIDPtr;		/* Remote IO File ID */
    int			useFlags;		/* Stream usage flags */
    char		*name;			/* File name */
    Fs_HandleHeader	**newHandlePtrPtr;	/* Return - installed handle */
{
    register Boolean found;
    register Fsutil_RecoveryInfo *recovPtr;

    found = Fsutil_HandleInstall(ioFileIDPtr, sizeof(Fsrmt_IOHandle), name,
		    FALSE, newHandlePtrPtr);
    recovPtr = &((Fsrmt_IOHandle *)*newHandlePtrPtr)->recovery;
    if (!found) {
	Fsutil_RecoveryInit(recovPtr);
	fs_Stats.object.remote++;
	/*
	 * Register a callback with the recovery module.  This ensures that
	 * someone is paying attention to the I/O server and the filesystem
	 * will get called back when the I/O server reboots.
	 */
	Recov_RebootRegister(ioFileIDPtr->serverID, Fsutil_Reopen,
			    (ClientData)NIL);
    }
    recovPtr->use.ref++;
    if (useFlags & FS_WRITE) {
	recovPtr->use.write++;
    }
    Fsutil_HandleUnlock(*newHandlePtrPtr);
}

/*----------------------------------------------------------------------
 *
 * Fsrmt_DeviceOpen --
 *
 *	Client side stub to open a remote device, remote named pipe,
 *	or remote pseudo stream.  Uses the RPC_FS_DEV_OPEN remote
 *	procedure call to invoke the pipe, device, or pseudo device
 *	open routine on the I/O server.  We are given an ioFileID from
 *	the name server, although we just use the serverID part here.
 *	The I/O server returns a new fileID that connects to the device.
 *
 * Results:
 *	(May) modify *ioFileIDPtr.  Returns a status from the RPC or the
 *	I/O device driver.
 *
 * Side effects:
 *	Sets up a recovery reboot call-back for the I/O server if the remote
 *	device open succeeds.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
Fsrmt_DeviceOpen(ioFileIDPtr, useFlags, inSize, inBuffer)
    Fs_FileID	*ioFileIDPtr;	/* Indicates I/O server.  This is modified
				 * by the I/O server and returned to our
				 * caller for use in the dev/pipe/etc handle */
    int		useFlags;	/* FS_READ | FS_WRITE ... */
    int		inSize;		/* Size of input parameters */
    ClientData	inBuffer;	/* Input data for remote server */
{
    ReturnStatus	status;		/* Return code from RPC */
    Rpc_Storage		storage;	/* Specifies inputs/outputs to RPC */
    FsDeviceRemoteOpenParam param;

    param.fileID = *ioFileIDPtr;
    param.useFlags = useFlags;
    param.dataSize = inSize;
    if (inSize > 0) {
	bcopy((Address)inBuffer, (Address)&param.openData, inSize);
    }
    storage.requestParamPtr = (Address) &param;
    storage.requestParamSize = sizeof(FsDeviceRemoteOpenParam);
    storage.requestDataPtr = (Address) NIL;
    storage.requestDataSize = 0;
    storage.replyParamPtr = (Address) ioFileIDPtr;
    storage.replyParamSize = sizeof(Fs_FileID);
    storage.replyDataPtr = (Address) NIL;
    storage.replyDataSize = 0;

    status = Rpc_Call(ioFileIDPtr->serverID, RPC_FS_DEV_OPEN, &storage);

    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * Fsrmt_RpcDevOpen --
 *
 *	Server stub for the RPC_FS_DEV_OPEN call.
 *	This host is the IO server for a handle.  This message from the
 *	remote host indicates that a client process there will be
 *	using us as the IO server.  This adds that client to the handle's
 *	client list for recovery and consistency checks.  This then branches
 *	to the file type client-open procedure to set up an I/O
 *	handle for the (device, pipe, pseudo-device).
 *
 * Results:
 *	If this procedure returns SUCCESS then a reply has been sent to
 *	the client.  If the arguments are bad then an error is 
 *	returned and the main RPC server level sends back an error reply.
 *
 * Side effects:
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
Fsrmt_RpcDevOpen(srvToken, clientID, command, storagePtr)
    ClientData 		 srvToken;	/* Handle on server process passed to
					 * Rpc_Reply */
    int 		 clientID;	/* Sprite ID of client host */
    int 		 command;	/* Command identifier */
    register Rpc_Storage *storagePtr;	/* The request fields refer to the 
					 * request buffers and also indicate 
					 * the exact amount of data in the 
					 * request buffers.  The reply fields 
					 * are initialized to NIL for the
				 	 * pointers and 0 for the lengths.  
					 * This can be passed to Rpc_Reply */
{
    Fs_HandleHeader	*hdrPtr;	/* I/O handle created by type-specific
					 * open routine. */
    ReturnStatus	status;
    FsDeviceRemoteOpenParam *paramPtr;
    register int	dataSize;
    ClientData		streamData;

    /*
     * Call the client-open routine to set up an I/O handle here on the
     * I/O server for the device.  This is either the device, pipe, or
     * named pipe open routine.  We allocate storage and copy the stream
     * data so the CltOpen routine can free it, as it expects to do.
     * NAME note: we don't have a name for the device here.
     */
    paramPtr = (FsDeviceRemoteOpenParam *) storagePtr->requestParamPtr;
    dataSize = paramPtr->dataSize;
    if (dataSize > 0) {
	streamData = (ClientData)malloc(dataSize);
	bcopy((Address)&paramPtr->openData, (Address)streamData, dataSize);
    } else {
	streamData = (ClientData)NIL;
    }
    paramPtr->fileID.type = Fsio_MapRmtToLclType(paramPtr->fileID.type);
    if (paramPtr->fileID.type < 0) {
	return(GEN_INVALID_ARG);
    }
    status = (fsio_StreamOpTable[paramPtr->fileID.type].ioOpen)
		    (&paramPtr->fileID, &paramPtr->useFlags,
		     clientID, streamData, (char *)NIL, &hdrPtr);
    if (status == SUCCESS) {
	/*
	 * Return the fileID to the other host so it can
	 * set up its own I/O handle.
	 */
	storagePtr->replyParamPtr = (Address)&hdrPtr->fileID;
	storagePtr->replyParamSize = sizeof(Fs_FileID);
    }
    Rpc_Reply(srvToken, status, storagePtr, (int (*)())NIL, (ClientData)NIL);
    return(SUCCESS);	/* So that Rpc_Server doesn't send error reply */
}

/*
 *----------------------------------------------------------------------
 *
 * Fsrmt_IOClose --
 *
 *	Close a stream to a remote device/pipe.  We just need to clean up our
 *	connection to the I/O server.  (The file server that named the
 *	device file keeps no state about us, so we don't have to contact it.)
 *	We make an RPC to the I/O server which invokes close routine there.
 *	We also update our own use counts.
 *
 * Results:
 *	SUCCESS.
 *
 * Side effects:
 *	RPC to the I/O server to invoke Fsio_DeviceClose/Fsio_PipeClose.
 *	Release the remote I/O handle.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
Fsrmt_IOClose(streamPtr, clientID, procID, flags, dataSize, closeData)
    Fs_Stream		*streamPtr;	/* Stream to remote object */
    int			clientID;	/* ID of closing host */
    Proc_PID		procID;		/* ID of closing process */
    int			flags;		/* Flags from the stream being closed */
    int			dataSize;	/* Size of *closeData, or Zero */
    ClientData		closeData;	/* Copy of cached I/O attributes. */
{
    ReturnStatus		status;
    register Fsrmt_IOHandle *rmtHandlePtr =
	    (Fsrmt_IOHandle *)streamPtr->ioHandlePtr;

    /*
     * Decrement local references.
     */
    rmtHandlePtr->recovery.use.ref--;
    if (flags & FS_WRITE) {
	rmtHandlePtr->recovery.use.write--;
    }

    if (rmtHandlePtr->recovery.use.ref < 0 ||
	rmtHandlePtr->recovery.use.write < 0) {
	panic( "Fsrmt_IOClose: <%d,%d> ref %d write %d\n",
	    rmtHandlePtr->hdr.fileID.major, rmtHandlePtr->hdr.fileID.minor,
	    rmtHandlePtr->recovery.use.ref,
	    rmtHandlePtr->recovery.use.write);
    }

    if (!Fsutil_HandleValid(streamPtr->ioHandlePtr)) {
	status = FS_STALE_HANDLE;
    } else {
	status = Fsrmt_Close(streamPtr, clientID, procID, flags,
			       dataSize, closeData);
    }
    /*
     * Check the number of users with the handle still locked, then
     * remove the handle if we aren't using it anymore.  Note that if
     * we get an RPC timeout we hold onto the handle and will do a
     * reopen later to reconcile the server with our state.  A transient
     * communication failure, for example, would otherwise cause a close
     * to be dropped and leave lingering references to the device
     * on the I/O server.
     */
    if (status == SUCCESS && rmtHandlePtr->recovery.use.ref == 0) {
	/*
	 * Undo the callback we registered when we created the remote handle.
	 * Then nuke the handle itself.
	 */
	Recov_RebootUnRegister(rmtHandlePtr->hdr.fileID.serverID, Fsutil_Reopen,
			    (ClientData)NIL);
	Fsutil_RecoverySyncLockCleanup(&rmtHandlePtr->recovery);
	Fsutil_HandleRelease(rmtHandlePtr, TRUE);
	Fsutil_HandleRemove(rmtHandlePtr);
	fs_Stats.object.remote--;
    } else {
	Fsutil_HandleRelease(rmtHandlePtr, TRUE);
    }
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * FsrmtDeviceReopen --
 *
 *	Reopen a remote device at the I/O server.  This sets up and conducts an 
 *	RPC_FS_DEV_REOPEN remote procedure call to re-open the remote device.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *	
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsrmtDeviceReopen(hdrPtr, clientID, inData, outSizePtr, outDataPtr)
    Fs_HandleHeader	*hdrPtr;	/* Device I/O handle to reopen */
    int			clientID;	/* Client doing the reopen */
    ClientData		inData;		/* IGNORED */
    int			*outSizePtr;	/* Size of returned data, 0 here */
    ClientData		*outDataPtr;	/* Returned data, NIL here */
{
    register Fsrmt_IOHandle	*handlePtr = (Fsrmt_IOHandle *)hdrPtr;
    ReturnStatus		status;
    int				outSize;
    Fsio_DeviceReopenParams	reopenParams;

    /*
     * Set up reopen parameters.  fileID must be first in order
     * to use the generic FsrmtReopen/Fsrmt_RpcReopen stubs.
     */
    if (handlePtr->recovery.use.ref == 0) {
	return SUCCESS;
    }
    reopenParams.fileID = handlePtr->hdr.fileID;
    reopenParams.use = handlePtr->recovery.use;


    outSize = 0;
    status = FsrmtReopen(hdrPtr, sizeof(reopenParams),
			    (Address)&reopenParams, &outSize, (Address)NIL);
    return(status);
}


/*
 * ----------------------------------------------------------------------------
 *
 * Fsrmt_IOMigClose --
 *
 *	Release a reference on a remote I/O handle.  This decrements
 *	recovery use counts as well as releasing the handle.
 *	
 * Results:
 *	SUCCESS.
 *
 * Side effects:
 *	Decrement recovery use counts and release the I/O handle.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
ReturnStatus
Fsrmt_IOMigClose(hdrPtr, flags)
    Fs_HandleHeader *hdrPtr;	/* File being encapsulated */
    int flags;			/* Use flags from the stream */
{
    register Fsrmt_IOHandle *rmtHandlePtr = (Fsrmt_IOHandle *)hdrPtr;

    Fsutil_HandleLock(rmtHandlePtr);
    rmtHandlePtr->recovery.use.ref--;
    if (flags & FS_WRITE) {
	rmtHandlePtr->recovery.use.write--;
    }
    if (flags & FS_EXECUTE) {
	rmtHandlePtr->recovery.use.exec--;
    }
    Fsutil_HandleRelease(rmtHandlePtr, TRUE);
    return(SUCCESS);
}

/*
 * ----------------------------------------------------------------------------
 *
 * FsrmtDeviceMigrate --
 *
 *	This takes care of transfering references from one client to the other.
 *	A useful side-effect of this routine is	to properly set the type in
 *	the ioFileID, either FSIO_LCL_DEVICE_STREAM or FSIO_RMT_DEVICE_STREAM.
 *	In the latter case FsDevoceMigrate is called to do all the work.
 *
 * Results:
 *	An error status if the I/O handle can't be set-up.
 *	Otherwise SUCCESS is returned, *flagsPtr may have the FS_RMT_SHARED
 *	bit set, and *sizePtr and *dataPtr are set to reference Fsio_DeviceState.
 *
 * Side effects:
 *	Sets the correct stream type on the ioFileID.
 *	Shifts client references from the srcClient to the destClient.
 *	Set up and return Fsio_DeviceState for use by the MigEnd routine.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
ReturnStatus
FsrmtDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, offsetPtr, sizePtr, dataPtr)
    Fsio_MigInfo	*migInfoPtr;	/* Migration state */
    int		dstClientID;	/* ID of target client */
    int		*flagsPtr;	/* In/Out Stream usage flags */
    int		*offsetPtr;	/* Return - the new stream offset */
    int		*sizePtr;	/* Return - sizeof(Fsio_DeviceState) */
    Address	*dataPtr;	/* Return - pointer to Fsio_DeviceState */
{
    register ReturnStatus		status;

    if (migInfoPtr->ioFileID.serverID == rpc_SpriteID) {
	/*
	 * The device was remote, which is why we were called, but is now local.
	 */
	migInfoPtr->ioFileID.type = FSIO_LCL_DEVICE_STREAM;
	return(Fsio_DeviceMigrate(migInfoPtr, dstClientID, flagsPtr, offsetPtr,
		sizePtr, dataPtr));
    }
    migInfoPtr->ioFileID.type = FSIO_RMT_DEVICE_STREAM;
    status = Fsrmt_NotifyOfMigration(migInfoPtr, flagsPtr, offsetPtr,
				0, (Address)NIL);
    if (status != SUCCESS) {
	printf( "FsrmtDeviceMigrate, server error <%x>\n",
	    status);
    } else {
	*dataPtr = (Address)NIL;
	*sizePtr = 0;
    }
    return(status);
}

/*
 * ----------------------------------------------------------------------------
 *
 * Fsrmt_IOMigOpen --
 *
 *	Create a FSIO_RMT_DEVICE_STREAM or FSIO_RMT_PIPE_STREAM after migration.
 *	The srvMigrate routine has done most all the work.
 *	We just grab a reference on the I/O handle for the stream.
 *
 * Results:
 *	Sets the I/O handle.
 *
 * Side effects:
 *	May install the handle.  Ups use and reference counts.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
ReturnStatus
Fsrmt_IOMigOpen(migInfoPtr, size, data, hdrPtrPtr)
    Fsio_MigInfo	*migInfoPtr;	/* Migration state */
    int		size;		/* Zero */
    ClientData	data;		/* NIL */
    Fs_HandleHeader **hdrPtrPtr;	/* Return - handle for the file */
{
    register Fsrmt_IOHandle *rmtHandlePtr;
    register Fsutil_RecoveryInfo *recovPtr;
    Boolean found;

    found = Fsutil_HandleInstall(&migInfoPtr->ioFileID, sizeof(Fsrmt_IOHandle),
		(char *)NIL, FALSE, hdrPtrPtr);
    rmtHandlePtr = (Fsrmt_IOHandle *)*hdrPtrPtr;
    recovPtr = &rmtHandlePtr->recovery;
    if (!found) {
	Fsutil_RecoveryInit(recovPtr);
	fs_Stats.object.remote++;
	/*
	 * Register a callback with the recovery module.  This ensures that
	 * someone is paying attention to the I/O server and the filesystem
	 * will get called back when the I/O server reboots.
	 */
	Recov_RebootRegister(migInfoPtr->ioFileID.serverID, Fsutil_Reopen,
			    (ClientData)NIL);
    }
    recovPtr->use.ref++;
    if (migInfoPtr->flags & FS_WRITE) {
	recovPtr->use.write++;
    }
    Fsutil_HandleUnlock(rmtHandlePtr);
    return(SUCCESS);
}

/*
 *----------------------------------------------------------------------
 *
 * FsrmtDeviceVerify --
 *
 *	Verify that the remote client is known for the device, and return
 *	a locked pointer to the device's I/O handle.
 *
 * Results:
 *	A pointer to the I/O handle for the device, or NIL if
 *	the client is bad.
 *
 * Side effects:
 *	The handle is returned locked and with its refCount incremented.
 *	It should be released with Fsutil_HandleRelease.
 *
 *----------------------------------------------------------------------
 */

Fs_HandleHeader *
FsrmtDeviceVerify(fileIDPtr, clientID, domainTypePtr)
    Fs_FileID	*fileIDPtr;	/* Client's I/O file ID */
    int		clientID;	/* Host ID of the client */
    int		*domainTypePtr;	/* Return - FS_LOCAL_DOMAIN */
{
    register Fsio_DeviceIOHandle	*devHandlePtr;
    register Fsconsist_ClientInfo	*clientPtr;
    Boolean			found = FALSE;

    fileIDPtr->type = Fsio_MapRmtToLclType(fileIDPtr->type);
    if (fileIDPtr->type != FSIO_LCL_DEVICE_STREAM) {
	printf("FsrmtDeviceVerify, bad file ID type\n");
	return((Fs_HandleHeader *)NIL);
    }
    devHandlePtr = Fsutil_HandleFetchType(Fsio_DeviceIOHandle, fileIDPtr);
    if (devHandlePtr != (Fsio_DeviceIOHandle *)NIL) {
	LIST_FORALL(&devHandlePtr->clientList, (List_Links *) clientPtr) {
	    if (clientPtr->clientID == clientID) {
		found = TRUE;
		break;
	    }
	}
	if (!found) {
	    Fsutil_HandleRelease(devHandlePtr, TRUE);
	    devHandlePtr = (Fsio_DeviceIOHandle *)NIL;
	}
    }
    if (!found) {
	printf("FsrmtDeviceVerify, client %d not known for device <%d,%d>\n",
	    clientID, fileIDPtr->major, fileIDPtr->minor);
    }
    if (domainTypePtr != (int *)NIL) {
	*domainTypePtr = FS_LOCAL_DOMAIN;
    }
    return((Fs_HandleHeader *)devHandlePtr);
}


/*
 *----------------------------------------------------------------------
 *
 * FsrmtSetupDeviceReopen --
 *
 *	Set up the data for an RPC to reopen a device handle.
 *
 * Results:
 *	Return status.
 *
 * Side effects:
 *	Data structure set up.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
FsrmtSetupDeviceReopen(hdrPtr, paramsPtr)
    Fs_HandleHeader		*hdrPtr;
    Address			paramsPtr;
{
    register Fsrmt_IOHandle	*handlePtr = (Fsrmt_IOHandle *)hdrPtr;
    Fsio_DeviceReopenParams	*reopenParamsPtr;

    /*
     * Set up reopen parameters.  fileID must be first in order
     * to use the generic FsrmtReopen/Fsrmt_RpcReopen stubs.
     */
    if (handlePtr->recovery.use.ref == 0) {
	return FS_NO_REFERENCE;
    }
    reopenParamsPtr = (Fsio_DeviceReopenParams *) paramsPtr;
    reopenParamsPtr->fileID = handlePtr->hdr.fileID;
    reopenParamsPtr->use = handlePtr->recovery.use;

    return SUCCESS;
}


/*
 *----------------------------------------------------------------------
 *
 * FsrmtFinishDeviceReopen --
 *
 *	Do post-processing for a device handle after bulk reopen.  There is
 *	none for devices.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
FsrmtFinishDeviceReopen(hdrPtr, statePtr, status)
    Fs_HandleHeader		*hdrPtr;
    Address			statePtr;
    ReturnStatus		status;
{
    return;
}
@


9.12
log
@Changes for transparent server recovery.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/fsrmt/fsrmtDevice.c,v 9.11 91/09/24 12:50:34 mgbaker Exp $ SPRITE (Berkeley)";
d623 64
@


9.11
log
@Moved the code for Fsrmt_DeviceReopen to be called Fsio_DeviceReopen
as it should have been.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsrmtDevice.c,v 9.10 91/09/20 14:06:54 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
d372 1
a372 1

d408 3
d413 1
@


9.10
log
@Comment.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsrmtDevice.c,v 9.9 91/09/10 18:23:51 rab Exp $ SPRITE (Berkeley)";
a34 1
#include <dev.h>
a38 1
#include <devFsOpTable.h>
a371 9

/*
 * Parameters for a device reopen RPC used to reestablish state on
 * the I/O server for a device.
 */
typedef struct FsRmtDeviceReopenParams {
    Fs_FileID	fileID;		/* File ID of file to reopen. MUST BE FIRST! */
    Fsio_UseCounts use;		/* Device usage information */
} FsRmtDeviceReopenParams;
d402 1
a402 1
    FsRmtDeviceReopenParams	reopenParams;
a619 90


/*
 *----------------------------------------------------------------------
 *
 * Fsrmt_DeviceReopen --
 *
 *	Reopen a device here on the I/O server.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *	
REMOVE this code whenever the fsio and fsrmt modules are both reinstalled.
This routine has been renamed Fsio_DeviceReopen and is now found in the
fsio module.  It has been left here for temporary backwards-compatibility.
			Mary Baker 9/20/91
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
Fsrmt_DeviceReopen(hdrPtr, clientID, inData, outSizePtr, outDataPtr)
    Fs_HandleHeader	*hdrPtr;	/* NIL on the I/O server */
    int			clientID;	/* Client doing the reopen */
    ClientData		inData;		/* Ref. to FsRmtDeviceReopenParams */
    int			*outSizePtr;	/* Size of returned data, 0 here */
    ClientData		*outDataPtr;	/* Returned data, NIL here */
{
    Fsio_DeviceIOHandle	*devHandlePtr;
    ReturnStatus	status;
    register		devIndex;
    register FsRmtDeviceReopenParams *paramPtr =
	    (FsRmtDeviceReopenParams *)inData;

    *outDataPtr = (ClientData) NIL;
    *outSizePtr = 0;

    (void) FsioDeviceHandleInit(&paramPtr->fileID, (char *)NIL, &devHandlePtr); 

    devIndex = DEV_TYPE_INDEX(devHandlePtr->device.type);
    if (devIndex >= devNumDevices) {
	status = FS_DEVICE_OP_INVALID;
    } else {
	/*
	 * Compute the difference between the client's and our version
	 * of the client's use state, and then call the device driver
	 * with that information.  We may have missed opens (across a
	 * reboot) or closes (during transient communication failures)
	 * so the net difference may be positive or negative.
	 */
	Fsconsist_IOClientStatus(&devHandlePtr->clientList, clientID, &paramPtr->use);
	if (paramPtr->use.ref == 0) {
	    status = SUCCESS;	/* No change visible to driver */
	} else if (paramPtr->use.ref > 0) {
	    /*
	     * Reestablish open connections.
	     */
	    status = (*devFsOpTable[devIndex].reopen)(&devHandlePtr->device,
				    paramPtr->use.ref, paramPtr->use.write,
				    (Fs_NotifyToken)devHandlePtr,
				    &devHandlePtr->flags);
	    if (status == SUCCESS) {
		(void)Fsconsist_IOClientReopen(&devHandlePtr->clientList, clientID,
					 &paramPtr->use);
		devHandlePtr->use.ref += paramPtr->use.ref;
		devHandlePtr->use.write += paramPtr->use.write;
	    }
	} else {
	    /*
	     * Clean up closed connections.  Note, we assume that
	     * the client was reading, even though it may have had
	     * a write-only stream.  This could break syslog, which
	     * is a single-reader/multiple-writer stream.  "ref" should
	     * be changed to "read".
	     */
	    int useFlags = FS_READ;
	    if (paramPtr->use.write > 0) {
		useFlags |= FS_WRITE;
	    }
	    status = FsioDeviceCloseInt(devHandlePtr, useFlags, paramPtr->use.ref,
						    paramPtr->use.write);
	 }
    }
    Fsutil_HandleRelease(devHandlePtr, TRUE);
    return(status);
}

@


9.9
log
@ Fixed lint errors and removed tracing.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsrmtDevice.c,v 9.8 90/12/06 21:56:08 jhh Exp Locker: rab $ SPRITE (Berkeley)";
d631 1
d646 4
@


9.8
log
@Added sosp tracing code
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsrmtDevice.c,v 9.7 90/10/08 15:04:51 mendel Exp $ SPRITE (Berkeley)";
a313 1
#ifdef SOSP91
a314 4
Fsrmt_IOClose(streamPtr, clientID, procID, flags, dataSize, closeData,
    offsetPtr, rwFlagsPtr)
#else
ReturnStatus
a315 1
#endif
a321 4
#ifdef SOSP91
    int			*offsetPtr;	/* Not used. */
    int			*rwFlagsPtr;	/* Not used. */
#endif
@


9.8.1.1
log
@Initial branch for Sprite server.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/fsrmt/fsrmtDevice.c,v 9.8 90/12/06 21:56:08 jhh Exp $ SPRITE (Berkeley)";
@


9.7
log
@Changed file name to fsrmtDevice.c
Fixed includes to use <> rather than "", added functions prototypes, and
removed lint.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs.mendel/RCS/fsRmtDevice.c,v 1.1 90/01/16 17:11:28 mendel Exp Locker: mendel $ SPRITE (Berkeley)";
d314 1
d316 4
d321 1
d328 4
@


9.6
log
@fixed bug due to yanking code w/ reference to "name" where no name
exists.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 9.5 90/05/21 13:35:07 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d23 1
a23 1
#include "sprite.h"
d25 16
a40 16
#include "fs.h"
#include "fsio.h"
#include "fsutil.h"
#include "fsNameOps.h"
#include "fsNameOpsInt.h"
#include "fsdm.h"
#include "fsconsist.h"
#include "fsioLock.h"
#include "fsprefix.h"
#include "fsrmt.h"
#include "dev.h"
#include "rpc.h"
#include "fsStat.h"
#include "fsioDevice.h"
#include "devFsOpTable.h"
#include "recov.h"
d42 2
d142 1
a142 1
	    newHandlePtrPtr);
a151 9
	if (recov_PrintLevel >= RECOV_PRINT_CRASH) {
	    /*
	     * Printf for debugging ref count problem that affects recovery.
	     */
	    printf(
	"Fsrmt_IOHandleInit: register Fsutil_Reopen serverID %d, device %s\n",
		ioFileIDPtr->serverID, name == (char *) NIL ? "NIL" : name);
	}

a362 10
	if (recov_PrintLevel >= RECOV_PRINT_CRASH) {
	    /*
	     * Printf for debugging ref count problem that affects recovery.
	     */
	    printf(
	"Fsrmt_IOClose: unregister Fsutil_Reopen for serverID %d, device %s\n",
	    rmtHandlePtr->hdr.fileID.serverID, rmtHandlePtr->hdr.name ==
			(char *)NIL ? "NIL": rmtHandlePtr->hdr.name);
	}
	    
d381 1
a381 1
    Fsutil_UseCounts use;		/* Device usage information */
d492 1
a492 1
    FsMigInfo	*migInfoPtr;	/* Migration state */
d543 1
a543 1
    FsMigInfo	*migInfoPtr;	/* Migration state */
d553 1
a553 1
		(char *)NIL, hdrPtrPtr);
a563 9
	if (recov_PrintLevel >= RECOV_PRINT_CRASH) {
	    /*
	     * Printf for debugging ref count problem that affects recovery.
	     */
	    printf(
	   "Fsrmt_IOMigOpen: register Fsutil_Reopen serverID %d\n",
		   migInfoPtr->ioFileID.serverID);
	}

@


9.5
log
@register recovery information when migrating devices
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 9.4 90/05/14 14:40:23 mgbaker Exp Locker: douglis $ SPRITE (Berkeley)";
d586 2
a587 3
	   "Fsrmt_IOMigOpen: register Fsutil_Reopen serverID %d, device %s\n",
		   migInfoPtr->ioFileID.serverID,
		   name == (char *) NIL ? "NIL" : name);
@


9.4
log
@Added tracing and mousetrap to catch extra recovery unregisters.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 9.3 89/11/29 14:50:45 brent Exp Locker: mgbaker $ SPRITE (Berkeley)";
d576 17
@


9.3
log
@cltOpen => ioOpen
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 9.2 89/11/27 15:02:41 brent Exp Locker: brent $ SPRITE (Berkeley)";
d40 1
d150 9
d370 10
@


9.2
log
@Added call to unregister interest in remote I/O servers
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 9.1 89/10/26 18:36:55 brent Exp $ SPRITE (Berkeley)";
d26 1
a27 1
#include "fsio.h"
d276 1
a276 1
    status = (fsio_StreamOpTable[paramPtr->fileID.type].cltOpen)
@


9.1
log
@Removed lint
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 9.0 89/09/12 15:10:19 douglis Stable Locker: brent $ SPRITE (Berkeley)";
d45 1
a45 1
typedef struct FsDeviceRemoteOpenPrm {
d49 1
a49 1
    FsrmtUnionData	openData;	/* Fsio_FileState, Fsio_DeviceState or PdevState.
d54 1
a54 1
} FsDeviceRemoteOpenPrm;
d144 7
d167 1
a167 1
 *	the name server, although we just use the sererID part here.
d191 1
a191 1
    FsDeviceRemoteOpenPrm param;
d200 1
a200 1
    storage.requestParamSize = sizeof(FsDeviceRemoteOpenPrm);
a209 8
    if (status == SUCCESS) {
	/*
	 * Register a callback with the recovery module.  This ensures that
	 * someone is paying attention to the I/O server and the filesystem
	 * will get called back when the I/O server reboots.
	 */
	Recov_RebootRegister(ioFileIDPtr->serverID, Fsutil_Reopen, (ClientData)NIL);
    }
d253 1
a253 1
    FsDeviceRemoteOpenPrm *paramPtr;
d264 1
a264 1
    paramPtr = (FsDeviceRemoteOpenPrm *) storagePtr->requestParamPtr;
d356 6
@


9.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fsrmt/RCS/fsRmtDevice.c,v 8.25 89/08/21 15:29:18 mendel Exp Locker: douglis $ SPRITE (Berkeley)";
a642 2
    Fsutil_UseCounts		oldUse;
    Boolean		found;
d651 1
a651 1
    found = FsioDeviceHandleInit(&paramPtr->fileID, (char *)NIL, &devHandlePtr); 
@


8.25
log
@Break up fs into many modules.    
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.24 89/08/12 10:44:40 jhh Exp $ SPRITE (Berkeley)";
@


8.24
log
@Added IOC_PREFIX handler
@
text
@d2 1
a2 1
 * fsDevice.c --
d4 1
a4 12
 *	Routines to manage devices.  Remote devices are	supported.
 *	The handle for a device is uniquified using the device type and
 *	unit number.  This ensures that different filesystem names for
 *	the same device map to the same device I/O handle.
 *
 *	There are two sets of routines here.  There are routines internal
 *	to the filesystem that are used to open, close, read, write, etc.
 *	a device stream.  Then there are some external routines exported
 *	for use by device drivers.  Fs_NotifyReader and Fs_NotifyWriter
 *	are used by interrupt handlers to indicate a device is ready.
 *	Then there are a handful of conversion routines for mapping
 *	from file system block numbers to disk addresses.
d6 1
d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.23 89/07/18 13:08:08 jhh Exp $ SPRITE (Berkeley)";
d26 3
a28 10
#include "fsInt.h"
#include "fsDevice.h"
#include "fsOpTable.h"
#include "fsDebug.h"
#include "fsFile.h"
#include "fsDisk.h"
#include "fsClient.h"
#include "fsStream.h"
#include "fsLock.h"
#include "fsMigrate.h"
d30 5
a34 2
#include "fsPrefix.h"

d38 2
d49 1
a49 1
    FsUnionData	openData;	/* FsFileState, FsDeviceState or PdevState.
a55 250
/*
 * INET is defined so a file server can be used to open the
 * special device file corresponding to a kernel-based ipServer
 */
#define INET
#ifdef INET
#include "netInet.h"
/*
 * DEV_PLACEHOLDER_2	is defined in devTypesInt.h, which is not exported.
 *	This is an ugly hack, anyway, so we just define it here.  3/89
 *	The best solution is to define a new disk file type and not
 *	use FsDeviceSrvOpen at all.
 */
#define DEV_PLACEHOLDER_2	3
static int sockCounter = 0;
#endif


static void ReadNotify();
static void WriteNotify();
static void ExceptionNotify();


/*
 *----------------------------------------------------------------------
 *
 * FsDeviceHandleInit --
 *
 *	Initialize a handle for a local device.
 *
 * Results:
 *	TRUE if the handle was already found, FALSE if not.
 *
 * Side effects:
 *	Create and install a handle for the device.  It is returned locked
 *	and with its reference count incremented if SUCCESS is returned.
 *
 *----------------------------------------------------------------------
 */
Boolean
FsDeviceHandleInit(fileIDPtr, name, newHandlePtrPtr)
    Fs_FileID		*fileIDPtr;
    char		*name;
    FsDeviceIOHandle	**newHandlePtrPtr;
{
    register Boolean found;
    register FsDeviceIOHandle *devHandlePtr;

    found = FsHandleInstall(fileIDPtr, sizeof(FsDeviceIOHandle), name,
		    (FsHandleHeader **)newHandlePtrPtr);
    if (!found) {
	devHandlePtr = *newHandlePtrPtr;
	List_Init(&devHandlePtr->clientList);
	devHandlePtr->use.ref = 0;
	devHandlePtr->use.write = 0;
	devHandlePtr->use.exec = 0;
	devHandlePtr->device.serverID = fileIDPtr->serverID;
	devHandlePtr->device.type = fileIDPtr->major;
	devHandlePtr->device.unit = fileIDPtr->minor;
	devHandlePtr->device.data = (ClientData)NIL;
	devHandlePtr->flags = 0;
	FsLockInit(&devHandlePtr->lock);
	devHandlePtr->modifyTime = 0;
	devHandlePtr->accessTime = 0;
	List_Init(&devHandlePtr->readWaitList);
	List_Init(&devHandlePtr->writeWaitList);
	List_Init(&devHandlePtr->exceptWaitList);
	devHandlePtr->notifyFlags = 0;
	fsStats.object.devices++;
    }
    return(found);
}


/*
 *----------------------------------------------------------------------
 *
 * FsDeviceSrvOpen --
 *
 *	This routine sets up an ioFileID for the device based on the
 *	device file found on the name server.  This is called on the name
 *	server in two cases, when a client is doing an open, and when
 *	it is doing a Get/Set attributes on a device file name.   At
 *	open time some additional attributes are returned to the client
 *	for caching at the I/O server, and a streamID is chosen.
 *	Note that no state is kept about the device client here on the
 *	name server.  The device client open routine sets up that state.
 *
 * Results:
 *	SUCCESS, *ioFileIDPtr has the I/O file ID, and *clientDataPtr
 *	references the device state.
 *
 * Side effects:
 *	Choose the fileID for the clients stream.
 *	Allocates memory to hold the stream data.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceSrvOpen(handlePtr, openArgsPtr, openResultsPtr)
    FsLocalFileIOHandle	*handlePtr;	/* A handle obtained by FsLocalLookup.
					 * Should be locked upon entry,
					 * is unlocked upon exit. */
     FsOpenArgs		*openArgsPtr;	/* Standard open arguments */
     FsOpenResults	*openResultsPtr;/* For returning ioFileID, streamID,
					 * and FsDeviceState */
{
    register FsFileDescriptor *descPtr = handlePtr->descPtr;
    register FsDeviceState *deviceDataPtr;
    register Fs_FileID *ioFileIDPtr = &openResultsPtr->ioFileID;

    ioFileIDPtr->serverID = descPtr->devServerID;
    if (ioFileIDPtr->serverID == FS_LOCALHOST_ID) {
	/*
	 * Map this "common" or "generic" device to the instance of
	 * the device on the process's logical home node.
	 */
	ioFileIDPtr->serverID = openArgsPtr->migClientID;
    }
    ioFileIDPtr->major = descPtr->devType;
    ioFileIDPtr->minor = descPtr->devUnit;
#ifdef INET
    /*
     * Hack in support for sockets by mapping a special device type
     * to sockets.  This needs to be replaced with a new type of disk file.
     */
    if (descPtr->devType == DEV_PLACEHOLDER_2) {
	ioFileIDPtr->major = rpc_SpriteID;
	ioFileIDPtr->minor = sockCounter++;
	switch(descPtr->devUnit) {
	    case NET_IP_PROTOCOL_IP:
		ioFileIDPtr->type = FS_RAW_IP_STREAM;
		break;
	    case NET_IP_PROTOCOL_UDP:
		ioFileIDPtr->type = FS_UDP_STREAM;
		break;
	    case NET_IP_PROTOCOL_TCP:
		ioFileIDPtr->type = FS_TCP_STREAM;
		break;
	    default:
		ioFileIDPtr->major = descPtr->devType;
		ioFileIDPtr->minor = descPtr->devUnit;
		if (ioFileIDPtr->serverID == openArgsPtr->clientID) {
		    ioFileIDPtr->type = FS_LCL_DEVICE_STREAM;
		} else {
		    ioFileIDPtr->type = FS_RMT_DEVICE_STREAM;
		}
		break;
	}
    } else
#endif
    if (ioFileIDPtr->serverID == openArgsPtr->clientID) {
	ioFileIDPtr->type = FS_LCL_DEVICE_STREAM;
    } else {
	ioFileIDPtr->type = FS_RMT_DEVICE_STREAM;
    }
    if (openArgsPtr->useFlags != 0) {
	/*
	 * Truely preparing for an open.
	 * Return the current modify/access times for the I/O server's cache.
	 */
	deviceDataPtr = mnew(FsDeviceState);
	deviceDataPtr->modifyTime = descPtr->dataModifyTime;
	deviceDataPtr->accessTime = descPtr->accessTime;
	/*
	 * Choose a streamID for the client that points to the device server.
	 */
	FsStreamNewID(ioFileIDPtr->serverID, &openResultsPtr->streamID);
	deviceDataPtr->streamID = openResultsPtr->streamID;

	openResultsPtr->streamData = (ClientData)deviceDataPtr;
	openResultsPtr->dataSize = sizeof(FsDeviceState);
    }
    FsHandleUnlock(handlePtr);
    return(SUCCESS);
}

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceCltOpen --
 *
 *	Complete opening of a local device.  This is called on the I/O
 *	server and sets up state concerning this client.  The device
 *	driver open routine is called to set up the device.  If that
 *	succeeds then the device's Handle is installed and set up.
 *	This includes incrementing client's use counts and the
 *	global use counts in the handle.
 *
 * Results:
 *	SUCCESS or a device dependent open error code.
 *
 * Side effects:
 *	Sets up and installs the device's ioHandle.  The device-type open
 *	routine is called on the I/O server.  The handle is unlocked
 *	upon exit, but its reference count has been incremented.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
FsDeviceCltOpen(ioFileIDPtr, flagsPtr, clientID, streamData, name, ioHandlePtrPtr)
    register Fs_FileID	*ioFileIDPtr;	/* I/O fileID */
    int			*flagsPtr;	/* FS_READ | FS_WRITE ... */
    int			clientID;	/* Host doing the open */
    ClientData		streamData;	/* Reference to FsDeviceState struct */
    char		*name;		/* File name for error msgs */
    FsHandleHeader	**ioHandlePtrPtr;/* Return - a locked handle set up for
					 * I/O to a device, NIL if failure. */
{
    ReturnStatus 		status;
    Boolean			found;
    register FsDeviceState	*deviceDataPtr;
    register FsDeviceIOHandle	*devHandlePtr;
    FsDeviceIOHandle		*tDevHandlePtr;	/* tempory devHandlePtr */
    register Fs_Stream		*streamPtr;
    register int		flags = *flagsPtr;

    deviceDataPtr = (FsDeviceState *)streamData;
    *ioHandlePtrPtr = (FsHandleHeader *)NIL;

    found = FsDeviceHandleInit(ioFileIDPtr, name, &tDevHandlePtr);
    devHandlePtr = tDevHandlePtr;
    /*
     * The device driver open routine gets the device specification,
     * the useFlags, and a token passed to Fs_NotifyReader
     * or Fs_NotifyWriter when the device becomes ready for I/O.
     */
    if (DEV_TYPE_INDEX(devHandlePtr->device.type) >= devNumDevices) {
	status = FS_DEVICE_OP_INVALID;
    } else {
	status = (*devFsOpTable[DEV_TYPE_INDEX(devHandlePtr->device.type)].open)
		    (&devHandlePtr->device, flags, 
			 (Fs_NotifyToken)devHandlePtr, &devHandlePtr->flags);
    }
    if (status == SUCCESS) {
	if (!found) {
	    /*
	     * Absorb the I/O attributes returned from the SrvOpen routine
	     * on the file server.
	     */
	    devHandlePtr->modifyTime = deviceDataPtr->modifyTime;
	    devHandlePtr->accessTime = deviceDataPtr->accessTime;
	}
	/*
	 * Trace the client, and then update our overall use counts.
	 * The client is recorded at the stream level to support migration,
	 * and at the I/O handle level for regular I/O.
	 */
	(void)FsIOClientOpen(&devHandlePtr->clientList, clientID, flags, FALSE);
a56 4
	streamPtr = FsStreamAddClient(&deviceDataPtr->streamID, clientID,
			(FsHandleHeader *)devHandlePtr, flags,
			name, (Boolean *)NIL, (Boolean *)NIL);
	FsHandleRelease(streamPtr, TRUE);
a57 12
	devHandlePtr->use.ref++;
	if (flags & FS_WRITE) {
	    devHandlePtr->use.write++;
	}
	*ioHandlePtrPtr = (FsHandleHeader *)devHandlePtr;
	FsHandleUnlock(devHandlePtr);
    } else {
	FsHandleRelease(devHandlePtr, TRUE);
    }
    free((Address) deviceDataPtr);
    return(status);
}
d62 1
a62 1
 * FsRmtDeviceCltOpen --
d65 1
a65 1
 *	an RPC to the I/O server, which will invoke FsDeviceCltOpen there,
d81 1
a81 1
FsRmtDeviceCltOpen(ioFileIDPtr, flagsPtr, clientID, streamData, name, ioHandlePtrPtr)
d85 1
a85 1
    ClientData		streamData;	/* FsDeviceState */
d87 1
a87 1
    FsHandleHeader	**ioHandlePtrPtr;/* Return - a handle set up for
d98 2
a99 2
    ioFileIDPtr->type = FS_LCL_DEVICE_STREAM;
    status = FsDeviceRemoteOpen(ioFileIDPtr, *flagsPtr,	sizeof(FsDeviceState),
d102 2
a103 2
	ioFileIDPtr->type = FS_RMT_DEVICE_STREAM;
	FsRemoteIOHandleInit(ioFileIDPtr, *flagsPtr, name, ioHandlePtrPtr);
d105 1
a105 1
	*ioHandlePtrPtr = (FsHandleHeader *)NIL;
d114 1
a114 1
 * FsRemoteIOHandleInit --
d129 1
a129 1
FsRemoteIOHandleInit(ioFileIDPtr, useFlags, name, newHandlePtrPtr)
d133 1
a133 1
    FsHandleHeader	**newHandlePtrPtr;	/* Return - installed handle */
d136 1
a136 1
    register FsRecoveryInfo *recovPtr;
d138 1
a138 1
    found = FsHandleInstall(ioFileIDPtr, sizeof(FsRemoteIOHandle), name,
d140 1
a140 1
    recovPtr = &((FsRemoteIOHandle *)*newHandlePtrPtr)->recovery;
d142 2
a143 2
	FsRecoveryInit(recovPtr);
	fsStats.object.remote++;
d149 1
a149 1
    FsHandleUnlock(*newHandlePtrPtr);
d154 1
a154 1
 * FsDeviceRemoteOpen --
d174 1
a174 1
FsDeviceRemoteOpen(ioFileIDPtr, useFlags, inSize, inBuffer)
d209 1
a209 1
	Recov_RebootRegister(ioFileIDPtr->serverID, FsReopen, (ClientData)NIL);
d217 1
a217 1
 * Fs_RpcDevOpen --
d238 1
a238 1
Fs_RpcDevOpen(srvToken, clientID, command, storagePtr)
d251 1
a251 1
    FsHandleHeader	*hdrPtr;	/* I/O handle created by type-specific
d273 1
a273 1
    paramPtr->fileID.type = FsMapRmtToLclType(paramPtr->fileID.type);
d277 1
a277 1
    status = (fsStreamOpTable[paramPtr->fileID.type].cltOpen)
d295 1
a295 151
 * FsDeviceClose --
 *
 *	Close a stream to a device.  We just need to clean up our state with
 *	the device driver.  The file server that named the device file keeps
 *	no state about us, so we don't have to contact it.
 *
 * FIX ME: need to write back access/modify times to name server
 *	Can use fsAttrOpTable and the nameInfoPtr->fileID as long
 *	if the shadow stream on the I/O server is set up enough.
 *
 * Results:
 *	SUCCESS.
 *
 * Side effects:
 *	Calls the device type close routine.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceClose(streamPtr, clientID, procID, flags, size, data)
    Fs_Stream		*streamPtr;	/* Stream to device */
    int			clientID;	/* HostID of client closing */
    Proc_PID		procID;		/* ID of closing process */
    int			flags;		/* Flags from the stream being closed */
    int			size;		/* Should be zero */
    ClientData		data;		/* IGNORED */
{
    ReturnStatus		status;
    register FsDeviceIOHandle	*devHandlePtr =
	    (FsDeviceIOHandle *)streamPtr->ioHandlePtr;
    Boolean			cache = FALSE;

    if (!FsIOClientClose(&devHandlePtr->clientList, clientID, flags, &cache)) {
	printf("FsDeviceClose, client %d unknown for device <%d,%d>\n",
		  clientID, devHandlePtr->hdr.fileID.major,
		  devHandlePtr->hdr.fileID.minor);
	FsHandleRelease(devHandlePtr, TRUE);
	return(FS_STALE_HANDLE);
    }
    /*
     * Clean up locks, then
     * clean up summary use counts and call driver's close routine.
     */
    FsLockClose(&devHandlePtr->lock, &streamPtr->hdr.fileID);

    status = FsDeviceCloseInt(devHandlePtr, flags, 1, (flags & FS_WRITE) != 0);
    /*
     * We don't bother to remove the handle here if the device isn't
     * being used.  Instead we let the handle get scavenged.
     */
    FsHandleRelease(devHandlePtr, TRUE);

    return(status);
}

/*
 * ----------------------------------------------------------------------------
 *
 * FsDeviceClientKill --
 *
 *	Called when a client is assumed down.  This cleans up the
 *	references due to the client.
 *	
 *
 * Results:
 *	SUCCESS.
 *
 * Side effects:
 *	Removes the client list entry for the client and adjusts the
 *	use counts on the file.  This unlocks the handle.
 *
 * ----------------------------------------------------------------------------
 *
 */
ReturnStatus
FsDeviceCloseInt(devHandlePtr, useFlags, refs, writes)
    FsDeviceIOHandle *devHandlePtr;	/* Device handle */
    int useFlags;			/* Flags from the stream */
    int refs;				/* Number of refs to close */
    int writes;				/* Number of these that were writing */
{
    if (refs > 0) {
	devHandlePtr->use.ref -= refs;
    }
    if (writes > 0) {
	devHandlePtr->use.write -= writes;
    }

    if (devHandlePtr->use.ref < 0 || devHandlePtr->use.write < 0) {
	panic("FsDeviceCloseInt <%d,%d> ref %d, write %d\n",
	    devHandlePtr->hdr.fileID.major, devHandlePtr->hdr.fileID.minor,
	    devHandlePtr->use.ref, devHandlePtr->use.write);
    }

    return (*devFsOpTable[DEV_TYPE_INDEX(devHandlePtr->device.type)].close)
	    (&devHandlePtr->device, useFlags, devHandlePtr->use.ref,
		devHandlePtr->use.write);
}

/*
 * ----------------------------------------------------------------------------
 *
 * FsDeviceClientKill --
 *
 *	Called when a client is assumed down.  This cleans up the
 *	references due to the client.
 *	
 *
 * Results:
 *	SUCCESS.
 *
 * Side effects:
 *	Removes the client list entry for the client and adjusts the
 *	use counts on the file.  This unlocks the handle.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
void
FsDeviceClientKill(hdrPtr, clientID)
    FsHandleHeader	*hdrPtr;	/* File to clean up */
    int			clientID;	/* Host assumed down */
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)hdrPtr;
    register int flags;
    int refs, writes, execs;

    /*
     * Remove the client from the list of users, and see what it was doing.
     */
    FsIOClientKill(&devHandlePtr->clientList, clientID, &refs, &writes, &execs);

    FsLockClientKill(&devHandlePtr->lock, clientID);

    if (refs > 0) {
	int useFlags = FS_READ;		/* Have to assume this,
					 * which might be wrong for syslog */
	if (writes > 0) {
	    useFlags |= FS_WRITE;
	}
	(void)FsDeviceCloseInt(devHandlePtr, useFlags, refs, writes);
    }
    FsHandleUnlock(devHandlePtr);
}

/*
 *----------------------------------------------------------------------
 *
 * FsRemoteIOClose --
d307 1
a307 1
 *	RPC to the I/O server to invoke FsDeviceClose/FsPipeClose.
d313 1
a313 1
FsRemoteIOClose(streamPtr, clientID, procID, flags, dataSize, closeData)
d322 2
a323 2
    register FsRemoteIOHandle *rmtHandlePtr =
	    (FsRemoteIOHandle *)streamPtr->ioHandlePtr;
d335 1
a335 1
	panic( "FsRemoteIOClose: <%d,%d> ref %d write %d\n",
d341 1
a341 1
    if (!FsHandleValid(streamPtr->ioHandlePtr)) {
d344 1
a344 1
	status = FsRemoteClose(streamPtr, clientID, procID, flags,
d357 4
a360 4
	FsRecoverySyncLockCleanup(&rmtHandlePtr->recovery);
	FsHandleRelease(rmtHandlePtr, TRUE);
	FsHandleRemove(rmtHandlePtr);
	fsStats.object.remote--;
d362 1
a362 1
	FsHandleRelease(rmtHandlePtr, TRUE);
a367 40
 * ----------------------------------------------------------------------------
 *
 * FsDeviceScavenge --
 *
 *	Called periodically to see if this handle is still needed.
 *	
 *
 * Results:
 *	TRUE if the handle was removed.
 *
 * Side effects:
 *	Removes the handle if it isn't referenced anymore and there
 *	are no remote clients.
 *
 * ----------------------------------------------------------------------------
 *
 */
Boolean
FsDeviceScavenge(hdrPtr)
    FsHandleHeader	*hdrPtr;	/* File to clean up */
{
    register FsDeviceIOHandle *handlePtr = (FsDeviceIOHandle *)hdrPtr;

    if (handlePtr->use.ref == 0) {
	/*
	 * Remove handles for devices with no users.
	 */
	FsWaitListDelete(&handlePtr->readWaitList);
	FsWaitListDelete(&handlePtr->writeWaitList);
	FsWaitListDelete(&handlePtr->exceptWaitList);
	FsHandleRemove(handlePtr);
	fsStats.object.devices--;
	return(TRUE);
    } else {
        FsHandleUnlock(handlePtr);
	return(FALSE);
    }
}

/*
d373 1
a373 1
    FsUseCounts use;		/* Device usage information */
d379 1
a379 1
 * FsRmtDeviceReopen --
d395 2
a396 2
FsRmtDeviceReopen(hdrPtr, clientID, inData, outSizePtr, outDataPtr)
    FsHandleHeader	*hdrPtr;	/* Device I/O handle to reopen */
d402 1
a402 1
    register FsRemoteIOHandle	*handlePtr = (FsRemoteIOHandle *)hdrPtr;
d409 1
a409 1
     * to use the generic FsSpriteReopen/Fs_RpcReopen stubs.
d415 1
a415 1
    status = FsSpriteReopen(hdrPtr, sizeof(reopenParams),
a418 154

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceReopen --
 *
 *	Reopen a device here on the I/O server.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *	
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceReopen(hdrPtr, clientID, inData, outSizePtr, outDataPtr)
    FsHandleHeader	*hdrPtr;	/* NIL on the I/O server */
    int			clientID;	/* Client doing the reopen */
    ClientData		inData;		/* Ref. to FsRmtDeviceReopenParams */
    int			*outSizePtr;	/* Size of returned data, 0 here */
    ClientData		*outDataPtr;	/* Returned data, NIL here */
{
    FsDeviceIOHandle	*devHandlePtr;
    FsUseCounts		oldUse;
    Boolean		found;
    ReturnStatus	status;
    register		devIndex;
    register FsRmtDeviceReopenParams *paramPtr =
	    (FsRmtDeviceReopenParams *)inData;

    *outDataPtr = (ClientData) NIL;
    *outSizePtr = 0;

    found = FsDeviceHandleInit(&paramPtr->fileID, (char *)NIL, &devHandlePtr); 

    devIndex = DEV_TYPE_INDEX(devHandlePtr->device.type);
    if (devIndex >= devNumDevices) {
	status = FS_DEVICE_OP_INVALID;
    } else {
	/*
	 * Compute the difference between the client's and our version
	 * of the client's use state, and then call the device driver
	 * with that information.  We may have missed opens (across a
	 * reboot) or closes (during transient communication failures)
	 * so the net difference may be positive or negative.
	 */
	FsIOClientStatus(&devHandlePtr->clientList, clientID, &paramPtr->use);
	if (paramPtr->use.ref == 0) {
	    status = SUCCESS;	/* No change visible to driver */
	} else if (paramPtr->use.ref > 0) {
	    /*
	     * Reestablish open connections.
	     */
	    status = (*devFsOpTable[devIndex].reopen)(&devHandlePtr->device,
				    paramPtr->use.ref, paramPtr->use.write,
				    (Fs_NotifyToken)devHandlePtr,
				    &devHandlePtr->flags);
	    if (status == SUCCESS) {
		(void)FsIOClientReopen(&devHandlePtr->clientList, clientID,
					 &paramPtr->use);
		devHandlePtr->use.ref += paramPtr->use.ref;
		devHandlePtr->use.write += paramPtr->use.write;
	    }
	} else {
	    /*
	     * Clean up closed connections.  Note, we assume that
	     * the client was reading, even though it may have had
	     * a write-only stream.  This could break syslog, which
	     * is a single-reader/multiple-writer stream.  "ref" should
	     * be changed to "read".
	     */
	    int useFlags = FS_READ;
	    if (paramPtr->use.write > 0) {
		useFlags |= FS_WRITE;
	    }
	    status = FsDeviceCloseInt(devHandlePtr, useFlags, paramPtr->use.ref,
						    paramPtr->use.write);
	 }
    }
    FsHandleRelease(devHandlePtr, TRUE);
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * FsVanillaDevReopen --
 *
 *	This is a simplified device driver re-open procedure.  It is called
 *	from FsDeviceReopen via the device operation switch.  It, in turn,
 *	calls back through the device switch to the regular device open
 *	procedure.  Form many simple devices this is sufficient for a reopen.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *	
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsVanillaDevReopen(devicePtr, refs, writes, notifyToken)
    Fs_Device *devicePtr;	/* Identifies the device */
    int refs;			/* Number of streams to the device */
    int writes;			/* Number of those that are for writing */
    Fs_NotifyToken notifyToken;	/* Used with Fs_DevNotifyReader */
{
    int devIndex = DEV_TYPE_INDEX(devicePtr->type);
    int useFlags = 0;
    int flags;

    if (refs > 0) {
	useFlags |= FS_READ;
    }
    if (writes > 0) {
	useFlags |= FS_WRITE;
    }
    return((*devFsOpTable[devIndex].open)
				(devicePtr, useFlags, notifyToken, &flags));
}

/*
 * ----------------------------------------------------------------------------
 *
 * FsDeviceRelease --
 *
 *	Release a reference from a Device I/O handle.
 *	
 * Results:
 *	SUCCESS.
 *
 * Side effects:
 *	Release the I/O handle.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceRelease(hdrPtr, flags)
    FsHandleHeader *hdrPtr;	/* File being encapsulated */
    int flags;			/* Use flags from the stream */
{
    panic( "FsDeviceRelease called\n");
    FsHandleRelease(hdrPtr, FALSE);
    return(SUCCESS);
}
d424 1
a424 1
 * FsRemoteIORelease --
d440 2
a441 2
FsRemoteIORelease(hdrPtr, flags)
    FsHandleHeader *hdrPtr;	/* File being encapsulated */
d444 1
a444 1
    register FsRemoteIOHandle *rmtHandlePtr = (FsRemoteIOHandle *)hdrPtr;
d446 1
a446 1
    FsHandleLock(rmtHandlePtr);
d454 1
a454 80
    FsHandleRelease(rmtHandlePtr, TRUE);
    return(SUCCESS);
}

/*
 * ----------------------------------------------------------------------------
 *
 * FsDeviceMigrate --
 *
 *	This takes care of transfering references from one client to the other.
 *	A useful side-effect of this routine is	to properly set the type in
 *	the ioFileID, either FS_LCL_DEVICE_STREAM or FS_RMT_DEVICE_STREAM.
 *	In the latter case FsRmtDevoceMigrate is called to do all the work.
 *
 * Results:
 *	An error status if the I/O handle can't be set-up.
 *	Otherwise SUCCESS is returned, *flagsPtr may have the FS_RMT_SHARED
 *	bit set, and *sizePtr and *dataPtr are set to reference FsDeviceState.
 *
 * Side effects:
 *	Sets the correct stream type on the ioFileID.
 *	Shifts client references from the srcClient to the destClient.
 *	Set up and return FsDeviceState for use by the MigEnd routine.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, offsetPtr, sizePtr, dataPtr)
    FsMigInfo	*migInfoPtr;	/* Migration state */
    int		dstClientID;	/* ID of target client */
    int		*flagsPtr;	/* In/Out Stream usage flags */
    int		*offsetPtr;	/* Return - new stream offset */
    int		*sizePtr;	/* Return - sizeof(FsDeviceState) */
    Address	*dataPtr;	/* Return - pointer to FsDeviceState */
{
    FsDeviceIOHandle			*devHandlePtr;
    Boolean				closeSrcClient;

    if (migInfoPtr->ioFileID.serverID != rpc_SpriteID) {
	/*
	 * The device was local, which is why we were called, but is now remote.
	 */
	migInfoPtr->ioFileID.type = FS_RMT_DEVICE_STREAM;
	return(FsRmtDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, offsetPtr,
		sizePtr, dataPtr));
    }
    migInfoPtr->ioFileID.type = FS_LCL_DEVICE_STREAM;
    if (!FsDeviceHandleInit(&migInfoPtr->ioFileID, (char *)NIL, &devHandlePtr)){
	printf(
		"FsDeviceMigrate, I/O handle <%d,%d> not found\n",
		 migInfoPtr->ioFileID.major, migInfoPtr->ioFileID.minor);
	return(FS_FILE_NOT_FOUND);
    }
    /*
     * At the stream level, add the new client to the set of clients
     * for the stream, and check for any cross-network stream sharing.
     */
    FsStreamMigClient(migInfoPtr, dstClientID, (FsHandleHeader *)devHandlePtr,
		    &closeSrcClient);
    /*
     * Adjust use counts on the I/O handle to reflect any new sharing.
     */
    FsMigrateUseCounts(migInfoPtr->flags, closeSrcClient, &devHandlePtr->use);

    /*
     * Move the client at the I/O handle level.
     */
    FsIOClientMigrate(&devHandlePtr->clientList, migInfoPtr->srcClientID,
			dstClientID, migInfoPtr->flags, closeSrcClient);

    *sizePtr = 0;
    *dataPtr = (Address)NIL;
    *flagsPtr = migInfoPtr->flags;
    *offsetPtr = migInfoPtr->offset;
    /*
     * We don't need this reference on the I/O handle; there is no change.
     */
    FsHandleRelease(devHandlePtr, TRUE);
d461 1
a461 1
 * FsRmtDeviceMigrate --
d465 1
a465 1
 *	the ioFileID, either FS_LCL_DEVICE_STREAM or FS_RMT_DEVICE_STREAM.
d471 1
a471 1
 *	bit set, and *sizePtr and *dataPtr are set to reference FsDeviceState.
d476 1
a476 1
 *	Set up and return FsDeviceState for use by the MigEnd routine.
d483 1
a483 1
FsRmtDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, offsetPtr, sizePtr, dataPtr)
d488 2
a489 2
    int		*sizePtr;	/* Return - sizeof(FsDeviceState) */
    Address	*dataPtr;	/* Return - pointer to FsDeviceState */
d497 2
a498 2
	migInfoPtr->ioFileID.type = FS_LCL_DEVICE_STREAM;
	return(FsDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, offsetPtr,
d501 2
a502 2
    migInfoPtr->ioFileID.type = FS_RMT_DEVICE_STREAM;
    status = FsNotifyOfMigration(migInfoPtr, flagsPtr, offsetPtr,
d505 1
a505 1
	printf( "FsRmtDeviceMigrate, server error <%x>\n",
d517 1
a517 42
 * FsDeviceMigEnd --
 *
 *	Complete setup of a FS_DEVICE_STREAM after migration to the I/O server.
 *	The migrate routine has done the work of shifting use counts
 *	at the stream and I/O handle level.  This routine's job is
 *	to increment the low level I/O handle reference count to reflect
 *	the existence of a new stream to the I/O handle.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 *
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceMigEnd(migInfoPtr, size, data, hdrPtrPtr)
    FsMigInfo	*migInfoPtr;	/* Migration state */
    int		size;		/* Zero */
    ClientData	data;		/* NIL */
    FsHandleHeader **hdrPtrPtr;	/* Return - handle for the file */
{
    register FsDeviceIOHandle *devHandlePtr;

    devHandlePtr = FsHandleFetchType(FsDeviceIOHandle, &migInfoPtr->ioFileID);
    if (devHandlePtr == (FsDeviceIOHandle *)NIL) {
	panic( "FsDeviceMigEnd, no handlel\n");
	return(FAILURE);
    } else {
	FsHandleUnlock(devHandlePtr);
	*hdrPtrPtr = (FsHandleHeader *)devHandlePtr;
	return(SUCCESS);
    }
}

/*
 * ----------------------------------------------------------------------------
 *
 * FsRemoteIOMigEnd --
d519 1
a519 1
 *	Create a FS_RMT_DEVICE_STREAM or FS_RMT_PIPE_STREAM after migration.
d534 1
a534 1
FsRemoteIOMigEnd(migInfoPtr, size, data, hdrPtrPtr)
d538 1
a538 1
    FsHandleHeader **hdrPtrPtr;	/* Return - handle for the file */
d540 2
a541 2
    register FsRemoteIOHandle *rmtHandlePtr;
    register FsRecoveryInfo *recovPtr;
d544 1
a544 1
    found = FsHandleInstall(&migInfoPtr->ioFileID, sizeof(FsRemoteIOHandle),
d546 1
a546 1
    rmtHandlePtr = (FsRemoteIOHandle *)*hdrPtrPtr;
d549 2
a550 2
	FsRecoveryInit(recovPtr);
	fsStats.object.remote++;
d556 1
a556 1
    FsHandleUnlock(rmtHandlePtr);
d563 1
a563 1
 * FsRmtDeviceVerify --
d574 1
a574 1
 *	It should be released with FsHandleRelease.
d579 2
a580 2
FsHandleHeader *
FsRmtDeviceVerify(fileIDPtr, clientID, domainTypePtr)
d585 2
a586 2
    register FsDeviceIOHandle	*devHandlePtr;
    register FsClientInfo	*clientPtr;
d589 4
a592 4
    fileIDPtr->type = FsMapRmtToLclType(fileIDPtr->type);
    if (fileIDPtr->type != FS_LCL_DEVICE_STREAM) {
	printf("FsRmtDeviceVerify, bad file ID type\n");
	return((FsHandleHeader *)NIL);
d594 2
a595 2
    devHandlePtr = FsHandleFetchType(FsDeviceIOHandle, fileIDPtr);
    if (devHandlePtr != (FsDeviceIOHandle *)NIL) {
d603 2
a604 2
	    FsHandleRelease(devHandlePtr, TRUE);
	    devHandlePtr = (FsDeviceIOHandle *)NIL;
d608 1
a608 1
	printf("FsRmtDeviceVerify, client %d not known for device <%d,%d>\n",
d614 1
a614 1
    return((FsHandleHeader *)devHandlePtr);
d620 1
a620 86
 * FsDeviceRead --
 *
 *      Read on a stream connected to a local peripheral device.
 *	This branches to the driver routine after setting up buffers.
 *	This is called from Fs_Read and from Fs_RpcRead.
 *
 * Results:
 *	SUCCESS unless there was an address error or I/O error.
 *
 * Side effects:
 *	Read the device.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
FsDeviceRead(streamPtr, readPtr, remoteWaitPtr, replyPtr)
    Fs_Stream		*streamPtr;	/* Open stream to the device. */
    Fs_IOParam		*readPtr;	/* Read parameter block. */
    Sync_RemoteWaiter	*remoteWaitPtr;	/* Process info for remote waiting */
    Fs_IOReply		*replyPtr;	/* Signal to return, if any,
					 * plus the amount read. */
{
    register FsDeviceIOHandle	*devHandlePtr =
	    (FsDeviceIOHandle *)streamPtr->ioHandlePtr;
    register ReturnStatus status;
    register Address	readBuffer;
    register Fs_Device	*devicePtr;
    int	     flags;
    Address userBuffer;
    Boolean copy;


    flags = devHandlePtr->flags;
    /*
     * Don't lock if the device driver informed us upon open that 
     * it doesn't want it.
     */
    if (!(flags & FS_DEV_DONT_LOCK)) { 
	FsHandleLock(devHandlePtr);
    }
    /*
     * Because the read could take a while and we aren't mapping in
     * buffers, we have to allocate an extra buffer here so the
     * buffer address is valid when the device's interrupt handler
     * does its DMA. Don't do this malloc and copy if the device
     * driver said it would handle it.
     */
    copy = (readPtr->flags & FS_USER) && !(flags & FS_DEV_DONT_COPY);
    if (copy) {
	userBuffer = readPtr->buffer;
	readPtr->buffer = (Address)malloc(readPtr->length);
    }

    /*
     * Put the process onto the read-wait list before attempting the read.
     * This is to prevent races with the device's notification which
     * happens from an interrupt handler.
     */
    FsWaitListInsert(&devHandlePtr->readWaitList, remoteWaitPtr);
    devicePtr = &devHandlePtr->device;
    status = (*devFsOpTable[DEV_TYPE_INDEX(devicePtr->type)].read)(devicePtr,
		readPtr, replyPtr);
    if (copy) {
        if (Vm_CopyOut(replyPtr->length, readPtr->buffer, userBuffer) != SUCCESS) {
	    if (status == SUCCESS) {
		status = SYS_ARG_NOACCESS;
	    }
	}
	free(readPtr->buffer);
	readPtr->buffer = userBuffer;
    }
    if (status != FS_WOULD_BLOCK) {
	FsWaitListRemove(&devHandlePtr->readWaitList, remoteWaitPtr);
    }
    devHandlePtr->accessTime = fsTimeInSeconds;
    fsStats.gen.deviceBytesRead += replyPtr->length;
    if (!(flags & FS_DEV_DONT_LOCK)) { 
	FsHandleUnlock(devHandlePtr);
    }
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceWrite --
d622 1
a622 193
 *      Write on a stream connected to a local peripheral device.
 *	This is called from Fs_Write and Fs_RpcWrite.
 *
 * Results:
 *	SUCCESS unless there was an address error or I/O error.
 *
 * Side effects:
 *	Write to the device.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
FsDeviceWrite(streamPtr, writePtr, remoteWaitPtr, replyPtr)
    Fs_Stream		*streamPtr;	/* Open stream to the device. */
    Fs_IOParam		*writePtr;	/* Read parameter block */
    Sync_RemoteWaiter	*remoteWaitPtr;	/* Process info for remote waiting */
    Fs_IOReply		*replyPtr;	/* Signal to return, if any */
{
    register FsDeviceIOHandle	*devHandlePtr =
	    (FsDeviceIOHandle *)streamPtr->ioHandlePtr;
    ReturnStatus	status = SUCCESS;
    register Address	writeBuffer;
    register Fs_Device	*devicePtr = &devHandlePtr->device;
    Address		userBuffer;
    int			flags;
    Boolean		copy;

    flags = devHandlePtr->flags;
    /*
     * Don't lock if the device driver informed us upon open that 
     * it doesn't want it.
     */
    if (!(flags & FS_DEV_DONT_LOCK)) { 
	FsHandleLock(devHandlePtr);
    }
    /*
     * Because the write could take a while and we aren't mapping in
     * buffers, we have to allocate an extra buffer here so the
     * buffer address is valid when the device's interrupt handler
     * does its DMA. Don't do this malloc and copy if the device
     * driver said it would handle it.
     */
    copy = ((writePtr->flags & FS_USER) && !(flags & FS_DEV_DONT_COPY));
    if (copy) {
	userBuffer = writePtr->buffer;
        writePtr->buffer = (Address)malloc(writePtr->length);
	if (Vm_CopyIn(writePtr->length, userBuffer, writePtr->buffer) != SUCCESS) {
	    status = SYS_ARG_NOACCESS;
	}
    }
    if (status == SUCCESS) {
	/*
	 * Put the process onto the write-wait list before attempting the write.
	 * This is to prevent races with the device's notification which
	 * happens from an interrupt handler.
	 */
	FsWaitListInsert(&devHandlePtr->writeWaitList, remoteWaitPtr);
	status = (*devFsOpTable[DEV_TYPE_INDEX(devicePtr->type)].write)(devicePtr,
		writePtr, replyPtr);
	if (status != FS_WOULD_BLOCK) {
	    FsWaitListRemove(&devHandlePtr->writeWaitList, remoteWaitPtr);
	}
	devHandlePtr->modifyTime = fsTimeInSeconds;
	fsStats.gen.deviceBytesWritten += replyPtr->length;
    }

    if (copy) {
	free(writePtr->buffer);
	writePtr->buffer = userBuffer;
    }
    if (!(flags & FS_DEV_DONT_LOCK)) { 
	FsHandleUnlock(devHandlePtr);
    }
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceSelect --
 *
 *      Select on a stream connected to a local peripheral device.  This
 *	ensures that the calling process is on a waiting list, then calls
 *	the device driver's select routine.  If the select succeeds, then
 *	the wait list items are removed.  The ordering of this is done to
 *	prevent races between the select routine and the notification that
 *	occurs at interrupt time.
 *
 * Results:
 *	A return from the driver, should be SUCCESS unless the
 *	device is offline or something.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
FsDeviceSelect(hdrPtr, waitPtr, readPtr, writePtr, exceptPtr)
    FsHandleHeader	*hdrPtr;	/* Handle on device to select */
    Sync_RemoteWaiter	*waitPtr;	/* Process info for remote waiting */
    int 		*readPtr;	/* Bit to clear if non-readable */
    int 		*writePtr;	/* Bit to clear if non-writeable */
    int 		*exceptPtr;	/* Bit to clear if non-exceptable */
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)hdrPtr;
    register Fs_Device	*devicePtr = &devHandlePtr->device;
    register ReturnStatus status;

    FsHandleLock(devHandlePtr);
    if (waitPtr != (Sync_RemoteWaiter *)NIL) {
	if (*readPtr) {
	    FsWaitListInsert(&devHandlePtr->readWaitList, waitPtr);
	}
	if (*writePtr) {
	    FsWaitListInsert(&devHandlePtr->writeWaitList, waitPtr);
	}
	if (*exceptPtr) {
	    FsWaitListInsert(&devHandlePtr->exceptWaitList, waitPtr);
	}
    }
    status = (*devFsOpTable[DEV_TYPE_INDEX(devicePtr->type)].select)(devicePtr,
		    readPtr, writePtr, exceptPtr);

    if (waitPtr != (Sync_RemoteWaiter *)NIL) {
	if (*readPtr != 0) {
	    FsWaitListRemove(&devHandlePtr->readWaitList, waitPtr);
	}
	if (*writePtr != 0) {
	    FsWaitListRemove(&devHandlePtr->writeWaitList, waitPtr);
	}
	if (*exceptPtr != 0) {
	    FsWaitListRemove(&devHandlePtr->exceptWaitList, waitPtr);
	}
    }
    FsHandleUnlock(devHandlePtr);
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceIOControl --
 *
 *      Write on a stream connected to a peripheral device.  Called from
 *	FsDomainWrite.
 *
 * Results:
 *	SUCCESS unless there was an address error or I/O error.
 *
 * Side effects:
 *	Write to the device.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
FsDeviceIOControl(streamPtr, ioctlPtr, replyPtr)
    Fs_Stream *streamPtr;		/* Stream to a device. */
    Fs_IOCParam *ioctlPtr;		/* I/O Control parameter block */
    Fs_IOReply *replyPtr;		/* Return length and signal */
{
    register FsDeviceIOHandle *devHandlePtr =
	    (FsDeviceIOHandle *)streamPtr->ioHandlePtr;
    register Fs_Device	*devicePtr = &devHandlePtr->device;
    register ReturnStatus status = SUCCESS;
    static Boolean warned = FALSE;

    switch (ioctlPtr->command) {
	case IOC_LOCK:
	case IOC_UNLOCK:
	    FsHandleLock(devHandlePtr);
	    status = FsIocLock(&devHandlePtr->lock, ioctlPtr,
			&streamPtr->hdr.fileID);
	    FsHandleUnlock(devHandlePtr);
	    break;
	case IOC_PREFIX:
	    break;
	default:
	    if (!(devHandlePtr->flags & FS_DEV_DONT_LOCK)) { 
		FsHandleLock(devHandlePtr);
	    }
	    status = (*devFsOpTable[DEV_TYPE_INDEX(devicePtr->type)].ioctl)
		    (devicePtr, ioctlPtr, replyPtr);
	    if (!(devHandlePtr->flags & FS_DEV_DONT_LOCK)) { 
		FsHandleUnlock(devHandlePtr);
	    }
	    break;
    }
    return(status);
}

/*
 *----------------------------------------------------------------------
a623 7
 * FsDeviceGetIOAttr --
 *
 *      Get the I/O attributes for a device.  A copy of the access and
 *	modify times are kept at the I/O server.  This routine is called
 *	either from Fs_GetAttrStream or Fs_RpcGetIOAttr to update
 *	the initial copy of the attributes obtained from the name server.
 *
a624 3
 *	SUCCESS.
 *
 * Side effects:
a626 37
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
FsDeviceGetIOAttr(fileIDPtr, clientID, attrPtr)
    Fs_FileID			*fileIDPtr;	/* FileID of device */
    int 			clientID;	/* IGNORED */
    register Fs_Attributes	*attrPtr;	/* Attributes to update */
{
    register FsDeviceIOHandle *devHandlePtr;

    devHandlePtr = FsHandleFetchType(FsDeviceIOHandle, fileIDPtr);
    if (devHandlePtr != (FsDeviceIOHandle *)NIL) {
	if (devHandlePtr->accessTime > attrPtr->accessTime.seconds) {
	    attrPtr->accessTime.seconds = devHandlePtr->accessTime;
	}
	if (devHandlePtr->modifyTime > attrPtr->dataModifyTime.seconds) {
	    attrPtr->dataModifyTime.seconds = devHandlePtr->modifyTime;
	}
	FsHandleRelease(devHandlePtr, TRUE);
    }
    return(SUCCESS);
}

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceSetIOAttr --
 *
 *      Set the I/O attributes for a device.  A copy of the access and
 *	modify times are kept at the I/O server.  This routine is called
 *	either from Fs_SetAttrStream or Fs_RpcSetIOAttr to update
 *	the cached copy of the attributes.
 *
 * Results:
 *	SUCCESS.
 *
d629 1
d635 6
a640 4
FsDeviceSetIOAttr(fileIDPtr, attrPtr, flags)
    Fs_FileID			*fileIDPtr;	/* FileID of device */
    register Fs_Attributes	*attrPtr;	/* Attributes to copy */
    int				flags;		/* What attrs to set */
d642 7
a648 38
    register FsDeviceIOHandle *devHandlePtr;

    if (flags & FS_SET_TIMES) {
	devHandlePtr = FsHandleFetchType(FsDeviceIOHandle, fileIDPtr);
	if (devHandlePtr != (FsDeviceIOHandle *)NIL) {
	    devHandlePtr->accessTime = attrPtr->accessTime.seconds;
	    devHandlePtr->modifyTime = attrPtr->dataModifyTime.seconds;
	    FsHandleRelease(devHandlePtr, TRUE);
	}
    }
    return(SUCCESS);
}

/*
 *----------------------------------------------------------------------
 *
 * Fs_DevNotifyReader --
 *
 *	Fs_DevNotifyReader is available to device driver interrupt handlers
 *	that need to notify waiting processes that the device is readable.
 *	It schedules a process level call to ReadNotify, which
 *	in turn iterates down the list of handles for the device waking up
 *	all read waiters.
 *
 * Results:
 *	None
 *
 * Side effects:
 *	Schedules a call to DevListNotify, which in turn calls
 *	FsWaitListNotify to schedule any waiting readers.
 *
 *----------------------------------------------------------------------
 */
void
Fs_DevNotifyReader(notifyToken)
    Fs_NotifyToken notifyToken;
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)notifyToken;
d650 2
a651 50
    if ((devHandlePtr == (FsDeviceIOHandle *)NIL) ||
	(devHandlePtr->notifyFlags & FS_READABLE)) {
	return;
    }
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	printf("Fs_DevNotifyReader, bad handle\n");
    }
    devHandlePtr->notifyFlags |= FS_READABLE;
    Proc_CallFunc(ReadNotify, (ClientData) devHandlePtr, 0);
}

static void
ReadNotify(data, callInfoPtr)
    ClientData		data;
    Proc_CallInfo	*callInfoPtr;
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)data;
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	printf("ReadNotify, lost device handle\n");
    } else {
	devHandlePtr->notifyFlags &= ~FS_READABLE;
	FsWaitListNotify(&devHandlePtr->readWaitList);
    }
    callInfoPtr->interval = 0;
}


/*
 *----------------------------------------------------------------------
 *
 * Fs_DevNotifyWriter --
 *
 *	Fs_DevNotifyWriter is available to device driver interrupt handlers
 *	that need to notify waiting processes that the device is writeable.
 *	It schedules a process level call to Fs_WaitListNotifyStub on the
 *	devices's write wait list.
 *
 * Results:
 *	None
 *
 * Side effects:
 *	Schedules a call to Fs_WaitListNotifyStub.
 *
 *----------------------------------------------------------------------
 */
void
Fs_DevNotifyWriter(notifyToken)
    Fs_NotifyToken notifyToken;
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)notifyToken;
d653 1
a653 54
    if ((devHandlePtr == (FsDeviceIOHandle *)NIL) ||
	(devHandlePtr->notifyFlags & FS_WRITABLE)) {
	return;
    }
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	printf("Fs_DevNotifyWriter, bad handle\n");
	return;
    }
    devHandlePtr->notifyFlags |= FS_WRITABLE;
    Proc_CallFunc(WriteNotify, (ClientData) devHandlePtr, 0);
}

static void
WriteNotify(data, callInfoPtr)
    ClientData		data;
    Proc_CallInfo	*callInfoPtr;
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)data;
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	printf( "WriteNotify, lost device handle\n");
    } else {
	devHandlePtr->notifyFlags &= ~FS_WRITABLE;
	FsWaitListNotify(&devHandlePtr->writeWaitList);
    }
    callInfoPtr->interval = 0;
}



/*
 *----------------------------------------------------------------------
 *
 * Fs_DevNotifyException --
 *
 *	This is available to device driver interrupt handlers
 *	that need to notify waiting processes that there is an exception
 *	on the device.  This is only useful for processes waiting on
 *	exceptions in select.  This is not currently used.
 *	It schedules a process level call to Fs_WaitListNotifyStub on the
 *	devices's exception wait list.
 *
 * Results:
 *	None
 *
 * Side effects:
 *	Schedules a call to Fs_WaitListNotifyStub.
 *
 *----------------------------------------------------------------------
 */
void
Fs_DevNotifyException(notifyToken)
    Fs_NotifyToken notifyToken;
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)notifyToken;
d655 4
a658 53
    if (devHandlePtr == (FsDeviceIOHandle *)NIL) {
	return;
    }
    Proc_CallFunc(ExceptionNotify, (ClientData) devHandlePtr, 0);
}

static void
ExceptionNotify(data, callInfoPtr)
    ClientData		data;
    Proc_CallInfo	*callInfoPtr;
{
    register FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)data;
    FsWaitListNotify(&devHandlePtr->exceptWaitList);
    callInfoPtr->interval = 0;
}

/*
 *----------------------------------------------------------------------
 *
 * FsDeviceBlockIO --
 *
 *	Map a file system block address to a block device block address 
 *	perform the requested operation.
 *
 * NOTE: This routine is temporary and should be replaced when the file system
 *	 is converted to use the async block io interface.
 *
 * Results:
 *	The return status of the operation.
 *
 * Side effects:
 *	Blocks may be written or read.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
FsDeviceBlockIO(readWriteFlag, devicePtr, fragNumber, numFrags, buffer)
    int readWriteFlag;		/* FS_READ or FS_WRITE */
    Fs_Device *devicePtr;	/* Specifies device type to do I/O with */
    int fragNumber;		/* CAREFUL, fragment index, not block index.
				 * This is relative to start of device. */
    int numFrags;		/* CAREFUL, number of fragments, not blocks */
    Address buffer;		/* I/O buffer */
{
    ReturnStatus status;	/* General return code */
    int firstSector;		/* Starting sector of transfer */
    DevBlockDeviceRequest	request;
    DevBlockDeviceHandle	*handlePtr;
    int				transferCount;

    handlePtr = (DevBlockDeviceHandle *) (devicePtr->data);
    if ((fragNumber % FS_FRAGMENTS_PER_BLOCK) != 0) {
d660 5
a664 2
	 * The I/O doesn't start on a block boundary.  Transfer the
	 * first few extra fragments to get things going on a block boundary.
d666 32
a697 51
	register int extraFrags;

	extraFrags = FS_FRAGMENTS_PER_BLOCK -
		    (fragNumber % FS_FRAGMENTS_PER_BLOCK);
	if (extraFrags > numFrags) {
	    extraFrags = numFrags;
	}
	firstSector = Fs_BlocksToSectors(fragNumber, handlePtr->clientData);
	request.operation = readWriteFlag;
	request.startAddress = firstSector * DEV_BYTES_PER_SECTOR;
	request.startAddrHigh = 0;
	request.bufferLen = extraFrags * FS_FRAGMENT_SIZE;
	request.buffer = buffer;
	status = Dev_BlockDeviceIOSync(handlePtr, &request, &transferCount);
	extraFrags = transferCount / FS_FRAGMENT_SIZE;
	fragNumber += extraFrags;
	buffer += transferCount;
	numFrags -= extraFrags;
	if (status != SUCCESS) {
	    return(status);
	}
    }
    while (numFrags >= FS_FRAGMENTS_PER_BLOCK) {
	/*
	 * Transfer whole blocks.
	 */
	firstSector = Fs_BlocksToSectors(fragNumber, handlePtr->clientData);
	request.operation = readWriteFlag;
	request.startAddress = firstSector * DEV_BYTES_PER_SECTOR;
	request.startAddrHigh = 0;
	request.bufferLen = FS_BLOCK_SIZE;
	request.buffer = buffer;
	status = Dev_BlockDeviceIOSync(handlePtr, &request, &transferCount);
	fragNumber += FS_FRAGMENTS_PER_BLOCK;
	buffer += FS_BLOCK_SIZE;
	numFrags -= FS_FRAGMENTS_PER_BLOCK;
	if (status != SUCCESS) {
	    return(status);
	}
    }
    if (numFrags > 0) {
	/*
	 * Transfer the left over fragments.
	 */
	firstSector = Fs_BlocksToSectors(fragNumber, handlePtr->clientData);
	request.operation = readWriteFlag;
	request.startAddress = firstSector * DEV_BYTES_PER_SECTOR;
	request.startAddrHigh = 0;
	request.bufferLen = numFrags * FS_FRAGMENT_SIZE;
	request.buffer = buffer;
	status = Dev_BlockDeviceIOSync(handlePtr, &request, &transferCount);
d699 1
@


8.23
log
@Added IOC_PREFIX ioctl
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.22 89/07/11 08:48:45 mendel Exp Locker: mendel $ SPRITE (Berkeley)";
d1613 1
a1613 1
    register ReturnStatus status;
d1624 1
a1624 10
	case IOC_PREFIX:{
	    FsPrefix	*prefixPtr;
	    prefixPtr = streamPtr->nameInfoPtr->prefixPtr;
	    if (ioctlPtr->outBufSize < prefixPtr->prefixLength) {
		status = GEN_INVALID_ARG;
		break;
	    }
	    strcpy(ioctlPtr->outBuffer, prefixPtr->prefix);
	    replyPtr->length = prefixPtr->prefixLength;
	    status = SUCCESS;
a1625 2
	}

@


8.22
log
@Added device driver open flags so that devices can stop the file 
system from locking and/or copying.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.21 89/06/30 16:56:55 brent Exp Locker: mendel $ SPRITE (Berkeley)";
d47 1
d1624 13
@


8.21
log
@Nuked temporary #include
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.20 89/06/28 16:38:10 brent Exp $ SPRITE (Berkeley)";
d127 1
d299 2
a300 1
		    (&devHandlePtr->device, flags, (Fs_NotifyToken)devHandlePtr);
d945 2
a946 1
				    (Fs_NotifyToken)devHandlePtr);
d1002 1
d1010 2
a1011 1
    return((*devFsOpTable[devIndex].open)(devicePtr, useFlags, notifyToken));
d1388 1
d1390 1
d1392 9
a1400 1
    FsHandleLock(devHandlePtr);
d1405 2
a1406 1
     * does its DMA.
d1408 2
a1409 1
    if (readPtr->flags & FS_USER) {
d1423 1
a1423 1
    if (readPtr->flags & FS_USER) {
d1437 3
a1439 1
    FsHandleUnlock(devHandlePtr);
d1472 2
d1475 8
a1482 1
    FsHandleLock(devHandlePtr);
d1487 2
a1488 1
     * does its DMA.
d1490 2
a1491 1
    if (writePtr->flags & FS_USER) {
d1514 1
a1514 1
    if (writePtr->flags & FS_USER) {
d1518 3
a1520 1
    FsHandleUnlock(devHandlePtr);
a1614 1
    FsHandleLock(devHandlePtr);
d1618 1
d1621 1
d1624 3
d1629 3
a1633 1
    FsHandleUnlock(devHandlePtr);
@


8.20
log
@Added FsVanillaDevReopen for use by simple device drivers
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.19 89/06/22 16:29:47 brent Exp Locker: brent $ SPRITE (Berkeley)";
a36 1
#include "../dev.bw/devFsOpTable.h"
@


8.19
log
@Fixed FsDeviceCloseInt so closing a write-only stream to
/dev/syslog wouldn't be interpreted as a read/write close.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.18 89/06/22 12:24:05 brent Exp $ SPRITE (Berkeley)";
d969 39
@


8.18
log
@Added FsDeviceCloseInt and fixed device reopening to
either do closes or reopens depending on the client's state.
	brent
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.17 89/06/21 12:30:10 brent Exp $ SPRITE (Berkeley)";
d617 1
a617 1
    status = FsDeviceCloseInt(devHandlePtr, 1, (flags & FS_WRITE) != 0);
d647 1
a647 1
FsDeviceCloseInt(devHandlePtr, refs, writes)
d649 1
a652 2
    int useFlags = 0;

a653 1
	useFlags |= FS_READ;
a656 1
	useFlags |= FS_WRITE;
d708 6
a713 1
	(void)FsDeviceCloseInt(devHandlePtr, refs, writes);
d953 5
a957 1
	     * Clean up closed connections.
d959 5
a963 1
	    status = FsDeviceCloseInt(devHandlePtr, paramPtr->use.ref,
@


8.17
log
@Fixed Reopen procedure.  It must remember to
unlock its handle.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.16 89/06/16 12:06:47 brent Exp $ SPRITE (Berkeley)";
d612 2
a613 1
     * Decrement use counts.
d617 1
a617 4
    devHandlePtr->use.ref--;
    if (flags & FS_WRITE) {
	devHandlePtr->use.write--;
    }
d619 2
a620 1
     * Call the driver's close routine to clean up.
d622 40
a661 3
    status = (*devFsOpTable[DEV_TYPE_INDEX(devHandlePtr->device.type)].close)
		(&devHandlePtr->device, flags, devHandlePtr->use.ref,
			devHandlePtr->use.write);
d664 1
a664 1
	panic("FsDeviceClose <%d,%d> ref %d, write %d\n",
a667 5
    /*
     * We don't bother to remove the handle here if the device isn't
     * being used.  Instead we let the handle get scavenged.
     */
    FsHandleRelease(devHandlePtr, TRUE);
d669 3
a671 1
    return(status);
d711 1
a711 23
	/*
	 * Set up flags to emulate a close by the client.
	 */
	flags = FS_READ;
	if (writes) {
	    flags |= FS_WRITE;
	}
	/*
	 * Decrement use counts and call the driver close routine.
	 */
	devHandlePtr->use.ref -= refs;
	if (flags & FS_WRITE) {
	    devHandlePtr->use.write -= writes;
	}
	(void)(*devFsOpTable[DEV_TYPE_INDEX(devHandlePtr->device.type)].close)
		(&devHandlePtr->device, flags, devHandlePtr->use.ref,
		    devHandlePtr->use.write);
    
	if (devHandlePtr->use.ref < 0 || devHandlePtr->use.write < 0) {
	    panic( "FsDeviceClose <%d,%d> ref %d, write %d\n",
		hdrPtr->fileID.major, hdrPtr->fileID.minor,
		devHandlePtr->use.ref, devHandlePtr->use.write);
	}
d773 6
a778 1
     * remove the handle if we aren't using it anymore.
d927 5
a931 3
	 * First check to see if we already know about the client.  If
	 * so, avoid the device driver re-open to avoid having transient
	 * communication failures wipe out connections to devices.
d933 7
a939 6
	FsIOClientStatus(&devHandlePtr->clientList, clientID, &oldUse);
	if (found &&
	    oldUse.ref == paramPtr->use.ref &&
	    oldUse.write == paramPtr->use.write) {
	    status == SUCCESS;
	} else {
d941 2
a942 2
		    paramPtr->use.ref, paramPtr->use.write,
		    (Fs_NotifyToken)devHandlePtr);
a943 3
		/*
		 * Update client use state to reflect the reopen.
		 */
d946 2
d949 7
a955 1
	}
@


8.16
log
@Updated I/O Control interface
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.15 89/06/15 09:13:55 brent Exp Locker: brent $ SPRITE (Berkeley)";
d933 1
@


8.15
log
@Updated Dev / Fs interface.  Read and Write use Fs_IOParam
and Fs_IOReply.  Select uses *readPtr, *writePtr, *exceptPtr.
Notify routines take a Fs_NotifyToken.  Added a reopen procedure.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.14 89/05/23 09:48:10 mendel Exp Locker: brent $ SPRITE (Berkeley)";
d1499 1
a1499 1
FsDeviceIOControl(streamPtr, command, byteOrder, inBufPtr, outBufPtr)
d1501 2
a1502 4
    int command;
    int byteOrder;
    Fs_Buffer *inBufPtr;
    Fs_Buffer *outBufPtr;
d1511 1
a1511 1
    switch (command) {
d1514 2
a1515 2
	    status = FsIocLock(&devHandlePtr->lock, command, byteOrder,
				inBufPtr, &streamPtr->hdr.fileID);
a1517 6
	    if ((byteOrder != mach_ByteOrder) && !warned) {
		warned = TRUE;
		FsFileError(streamPtr->ioHandlePtr,
		    "Device I/O control byte swapping not done",
		    SUCCESS);
	    }
d1519 1
a1519 2
		    (devicePtr, command, byteOrder, inBufPtr->size, inBufPtr->addr,
		    outBufPtr->size, outBufPtr->addr);
@


8.14
log
@ 1) Changed to use only bottom 8 bits of device type number for index
   into dev switch.
2) Patched to use new async block IO interface.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.13 89/05/10 11:29:46 mendel Exp Locker: mendel $ SPRITE (Berkeley)";
d37 1
d63 1
a63 1
				 * bcopy() of the whole thing can cause
d167 1
a167 2
FsDeviceSrvOpen(handlePtr, clientID, useFlags, ioFileIDPtr, streamIDPtr,
	    dataSizePtr, clientDataPtr)
d171 3
a173 10
    int		clientID;		/* ID of client doing the open.
					 * SHOULD REFLECT MIGRATION SOMEHOW */
    int		useFlags;		/* Use flags from the stream */
    register Fs_FileID	*ioFileIDPtr;	/* Return - FileID used for I/O or
					 * to get/set I/O attributes */
    Fs_FileID	*streamIDPtr;		/* ID of stream being opened.  NIL
					 * during set/get attributes */
    int		*dataSizePtr;		/* Return - sizeof(FsDeviceState) */
    ClientData	*clientDataPtr;		/* Return - FsDeviceState.  Nothing
					 * returned during set/get attrs */
d177 1
d181 5
a185 6
	ioFileIDPtr->serverID = clientID;
    }
    if (ioFileIDPtr->serverID == clientID) {
	ioFileIDPtr->type = FS_LCL_DEVICE_STREAM;
    } else {
	ioFileIDPtr->type = FS_RMT_DEVICE_STREAM;
d210 1
a210 1
		if (ioFileIDPtr->serverID == clientID) {
d219 1
a219 1
    if (ioFileIDPtr->serverID == clientID) {
d224 1
a224 1
    if (streamIDPtr != (Fs_FileID *)NIL) {
d226 2
a227 3
	 * Truely preparing for an open.  Return the current modify
	 * and access times for the I/O server's cache.  Return the
	 * fileID from the device file for client get/set attribute calls.
d235 2
a236 2
	FsStreamNewID(ioFileIDPtr->serverID, streamIDPtr);
	deviceDataPtr->streamID = *streamIDPtr;
d238 2
a239 2
	*clientDataPtr = (ClientData)deviceDataPtr;
	*dataSizePtr = sizeof(FsDeviceState);
d252 1
a252 1
 *	driver open routine is called to set up the device.  If this
d281 1
a281 1
    FsDeviceIOHandle		*tDevHandlePtr;
d291 2
a292 2
     * The device driver gets the device specification, ie. type
     * and unit number, the useFlags, and a token passed to Fs_NotifyReader
d299 1
a299 1
		    (&devHandlePtr->device, flags, (ClientData)devHandlePtr);
d303 4
d348 3
a350 3
 *	Sets up and installs the remote device's ioHandle.  The device-type open
 *	routine is called on the I/O server.  The use counts on the handle
 *	are updated.  The handle is returned unlocked, but with a new
d549 4
d565 1
a565 1
    return(SUCCESS);	/* So that higher level doesn't send error reply */
d578 2
a579 1
 *	BUT, have no handle for the name server.
d605 1
a605 2
	printf(
		  "FsDeviceClose, client %d unknown for device <%d,%d>\n",
d628 1
a628 1
	panic( "FsDeviceClose <%d,%d> ref %d, write %d\n",
a715 2
 * FIX ME: need to write back access/modify times to name server
 *
a760 2
     * HAVE TO HANDLE RECOVERY CORRECTLY.  SpriteClose has marked the handle.
     *
d820 2
a821 3
    Fs_FileID	fileID;		/* File ID of file to reopen. */
    int		openCount;	/* Number of times we have the device open. */
    int		writerCount;	/* Number of writers we have. */
d843 3
a845 2
FsRmtDeviceReopen(hdrPtr, inData, outSizePtr, outDataPtr)
    FsHandleHeader	*hdrPtr;	/* Remove device I/O handle to reopen */
d852 1
a853 5
    Rpc_Storage			storage;

    reopenParams.fileID = handlePtr->hdr.fileID;
    reopenParams.openCount = handlePtr->recovery.use.ref;
    reopenParams.writerCount = handlePtr->recovery.use.write;
d856 2
a857 1
     * Set up for the RPC.
d859 2
a860 8
    storage.requestParamPtr = (Address) &reopenParams;
    storage.requestParamSize = sizeof(FsRmtDeviceReopenParams);
    storage.requestDataPtr = (Address) NIL;
    storage.requestDataSize = 0;
    storage.replyParamPtr = (Address) NIL;
    storage.replyParamSize = 0;
    storage.replyDataPtr = (Address) NIL;
    storage.replyDataSize = 0;
d862 3
a864 1
    status = Rpc_Call(hdrPtr->fileID.serverID, RPC_FS_DEV_REOPEN, &storage);
d871 1
a871 1
 * Fs_RpcDevReopen --
d873 1
a873 4
 *	This host is the IO server for a handle.  This message from the
 *	remote host indicates that a client process is reopening the handle.
 *	This adds that client to the handle's client list.  File type open
 *	routines will be called as necessary to reopen the file.
d876 1
a876 3
 *	If this procedure returns SUCCESS then a reply has been sent to
 *	the client.  If the arguments are bad then an error is 
 *	returned and the main level sends back an error reply.
d879 2
a880 4
 *	Set up the handle and call the file type remote open routine.
 *	The reference count on the handle is handled the same as for
 *	other open's; there is one reference and writer count
 *	for each remote open of the file.
d886 6
a891 12
Fs_RpcDevReopen(srvToken, clientID, command, storagePtr)
    ClientData 		 srvToken;	/* Handle on server process passed to
				 	 * Rpc_Reply */
    int 		 clientID;	/* Sprite ID of client host */
    int 		 command;	/* Command identifier */
    Rpc_Storage		 *storagePtr;	/* The request fields refer to the 
					 * request buffers and also indicate 
					 * the exact amount of data in the 
					 * request buffers.  The reply fields 
					 * are initialized to NIL for the
					 * pointers and 0 for the lengths.  
					 * This can be passed to Rpc_Reply */
d893 41
a933 1
    return(FAILURE);
d1252 5
a1256 1
    fileIDPtr->type = FS_LCL_DEVICE_STREAM;
d1271 1
a1271 2
	printf(
	    "FsRmtDeviceVerify, client %d not known for device <%d,%d>\n",
d1298 1
a1298 1
FsDeviceRead(streamPtr, flags, buffer, offsetPtr, lenPtr, remoteWaitPtr)
d1300 1
a1300 4
    int			flags;		/* Flags from the stream struct. */
    register Address	buffer;		/* Buffer to fill with file data */
    int 		*offsetPtr;	/* In/Out byte offset */
    int 		*lenPtr;	/* In/Out byte count */
d1302 2
d1310 1
a1310 1
    register int	length = *lenPtr;
d1319 3
a1321 4
    if (flags & FS_USER) {
        readBuffer = (Address)malloc(length);
    } else {
        readBuffer = buffer;
d1332 3
a1334 4
		*offsetPtr, length, readBuffer, lenPtr);
    length = *lenPtr;
    if (flags & FS_USER) {
        if (Vm_CopyOut(length, readBuffer, buffer) != SUCCESS) {
d1339 2
a1340 1
	free(readBuffer);
d1346 1
a1346 2
    *offsetPtr += length;
    fsStats.gen.deviceBytesRead += length;
d1368 1
a1368 1
FsDeviceWrite(streamPtr, flags, buffer, offsetPtr, lenPtr, remoteWaitPtr)
d1370 1
a1370 4
    int			flags;		/* Flags from the stream struct. */
    register Address	buffer;		/* Buffer to fill with file data */
    int 		*offsetPtr;	/* In/Out byte offset */
    int 		*lenPtr;	/* In/Out byte count */
d1372 1
d1379 1
a1379 1
    register int	length = *lenPtr;
d1388 4
a1391 3
    if (flags & FS_USER) {
        writeBuffer = (Address)malloc(length);
	if (Vm_CopyIn(length, buffer, writeBuffer) != SUCCESS) {
a1393 3
    } else {
        writeBuffer = buffer;
	status = SUCCESS;
d1403 1
a1403 2
		*offsetPtr, length, writeBuffer, lenPtr);
	length = *lenPtr;
d1408 1
a1408 2
	*offsetPtr += length;
	fsStats.gen.deviceBytesWritten += length;
d1411 3
a1413 2
    if (flags & FS_USER) {
	free(writeBuffer);
a1450 2
    register int inFlags;		/* Until we fix the device drivers */
    int outFlags = 0;
d1453 2
a1454 4
    inFlags = 0;
    if (*readPtr) {
	inFlags |= FS_READABLE;
	if (waitPtr != (Sync_RemoteWaiter *)NIL) {
d1457 1
a1457 4
    }
    if (*writePtr) {
	inFlags |= FS_WRITABLE;
	if (waitPtr != (Sync_RemoteWaiter *)NIL) {
d1460 1
a1460 4
    }
    if (*exceptPtr) {
	inFlags |= FS_EXCEPTION;
	if (waitPtr != (Sync_RemoteWaiter *)NIL) {
d1465 12
a1476 15
		    inFlags, &outFlags);
    if ((outFlags & FS_READABLE) == 0) {
	*readPtr = 0;
    } else if (*readPtr != 0 &&	waitPtr != (Sync_RemoteWaiter *)NIL) {
	FsWaitListRemove(&devHandlePtr->readWaitList, waitPtr);
    }
    if ((outFlags & FS_WRITABLE) == 0) {
	*writePtr = 0;
    } else if (*writePtr != 0 && waitPtr != (Sync_RemoteWaiter *)NIL) {
	FsWaitListRemove(&devHandlePtr->writeWaitList, waitPtr);
    }
    if ((outFlags & FS_EXCEPTION) == 0) {
	*exceptPtr = 0;
    } else if (*exceptPtr != 0 && waitPtr != (Sync_RemoteWaiter *)NIL) {
	FsWaitListRemove(&devHandlePtr->exceptWaitList, waitPtr);
d1501 4
a1504 4
    int command;			/* Device specific I/O control */
    int byteOrder;			/* Client's byte order */
    Fs_Buffer *inBufPtr;		/* Buffer of input arguments */
    Fs_Buffer *outBufPtr;		/* Buffer for return parameters */
d1526 2
a1527 2
	    status = (*devFsOpTable[DEV_TYPE_INDEX(devicePtr->type)].ioControl) (devicePtr,
		    command, inBufPtr->size, inBufPtr->addr,
d1616 1
a1616 2
 * Fs_NotifyReader --
 * Fs_DevNotifyReader --	this is a better name
d1618 1
a1618 1
 *	Fs_NotifyReader is available to device driver interrupt handlers
d1620 1
a1620 1
 *	It schedules a process level call to DevListNotifyReader, which
d1634 2
a1635 2
Fs_NotifyReader(data)
    ClientData data;
d1637 1
a1637 1
    register	FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)data;
d1644 1
a1644 1
	printf("Fs_NotifyReader, bad handle\n");
d1669 1
a1669 2
 * Fs_NotifyWriter --
 * Fs_DevNotifyWriter --	this is a better name
d1671 1
a1671 1
 *	Fs_NotifyWriter is available to device driver interrupt handlers
d1685 2
a1686 2
Fs_NotifyWriter(data)
    ClientData data;
d1688 1
a1688 1
    register	FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)data;
d1695 1
a1695 1
	printf("Fs_NotifyWriter, bad handle\n");
d1740 2
a1741 2
Fs_DevNotifyException(data)
    ClientData data;
d1743 1
a1743 1
    register	FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)data;
@


8.13
log
@*** empty log message ***
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.12 89/03/15 14:17:24 brent Exp Locker: mendel $ SPRITE (Berkeley)";
@


8.12
log
@This is partly a back-out to version 8.9 because there are syncronization
problems still with trying to do wait-list notifications at interrupt time.
However, this incorporates the INET hooks so a special device type can
be used to get to the kernel-resident ipServer (inet.o)
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.9 89/02/09 09:19:24 brent Exp $ SPRITE (Berkeley)";
d303 1
a303 1
    if (devHandlePtr->device.type >= devNumDevices) {
d306 1
a306 1
	status = (*devFsOpTable[devHandlePtr->device.type].open)
d623 1
a623 1
    status = (*devFsOpTable[devHandlePtr->device.type].close)
d692 1
a692 1
	(void)(*devFsOpTable[devHandlePtr->device.type].close)
d1314 1
a1314 1
    status = (*devFsOpTable[devicePtr->type].read)(devicePtr,
d1390 1
a1390 1
	status = (*devFsOpTable[devicePtr->type].write)(devicePtr,
d1463 1
a1463 1
    status = (*devFsOpTable[devicePtr->type].select)(devicePtr,
d1528 1
a1528 1
	    status = (*devFsOpTable[devicePtr->type].ioControl) (devicePtr,
d1763 96
@


8.11
log
@Added in hook to allow opening a special device type
and getting a socket stream instead of a device stream
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.10 89/02/28 08:47:33 brent Exp $ SPRITE (Berkeley)";
d53 15
a83 14
/*
 * Parameters for RPC_FS_DEV_OPEN remote procedure call.
 * The return value from this call is a new I/O fileID.
 */
typedef struct FsDeviceRemoteOpenPrm {
    Fs_FileID	fileID;		/* I/O fileID from name server. */
    int		useFlags;	/* FS_READ | FS_WRITE ... */
    int		dataSize;	/* size of openData */
    FsUnionData	openData;	/* FsFileState, FsDeviceState or PdevState.
				 * NOTE. be careful when assigning this.
				 * bcopy() of the whole thing can cause
				 * bus errors if really only a small object
				 * exists and it's at the end of a page. */
} FsDeviceRemoteOpenPrm;
d85 3
a87 3
void ReadNotify();
void WriteNotify();
void ExceptionNotify();
d189 5
a631 4
    if (devHandlePtr->use.ref == 0) {
	FsWaitListDelete(&devHandlePtr->readWaitList);
	FsWaitListDelete(&devHandlePtr->writeWaitList);
    }
a1647 1
	return;
a1648 2
    FsWaitListNotify(&devHandlePtr->readWaitList);
#ifdef notdef
a1650 2
#endif notdef

a1652 1
#ifdef notdef
d1667 1
a1667 1
#endif notdef
a1701 2
    FsWaitListNotify(&devHandlePtr->writeWaitList);
#ifdef notdef
a1703 1
#endif notdef
a1705 1
#ifdef notdef
a1719 1
#endif notdef
a1751 2
    FsWaitListNotify(&devHandlePtr->exceptWaitList);
#ifdef notdef
a1752 1
#endif notdef
d1754 1
a1754 1
#ifdef notdef
a1763 1
#endif notdef
@


8.10
log
@Changed object-specific select routines to handle NIL waitPtr information
so they can avoid setting up wait lists.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.9 89/02/09 09:19:24 brent Exp Locker: brent $ SPRITE (Berkeley)";
d53 17
d188 32
a224 3
    ioFileIDPtr->major = descPtr->devType;
    ioFileIDPtr->minor = descPtr->devUnit;

@


8.9
log
@Added call to SyncLockCleanup routine
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.8 89/02/06 18:26:16 brent Exp $ SPRITE (Berkeley)";
d580 4
d1399 3
a1401 1
	FsWaitListInsert(&devHandlePtr->readWaitList, waitPtr);
d1405 3
a1407 1
	FsWaitListInsert(&devHandlePtr->writeWaitList, waitPtr);
d1411 3
a1413 1
	FsWaitListInsert(&devHandlePtr->exceptWaitList, waitPtr);
d1419 1
a1419 1
    } else if (*readPtr != 0) {
d1424 1
a1424 1
    } else if (*writePtr != 0) {
d1429 1
a1429 1
    } else if (*exceptPtr != 0) {
d1600 1
d1602 2
d1606 2
d1610 1
d1625 1
a1625 1

d1660 2
d1664 1
d1667 1
d1682 1
d1715 2
d1718 1
d1720 1
a1720 1

d1730 1
a1730 1

@


8.8
log
@Tidied up device I/O handle
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.7 89/01/30 14:04:00 brent Exp $ SPRITE (Berkeley)";
d717 1
@


8.7
log
@Added object stats
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.6 89/01/30 09:21:59 brent Exp Locker: brent $ SPRITE (Berkeley)";
d101 1
a108 1
	List_Init(&devHandlePtr->clientList);
d115 1
a115 2
	devHandlePtr->readNotifyScheduled = FALSE;
	devHandlePtr->writeNotifyScheduled = FALSE;
d1584 1
a1584 1
	(devHandlePtr->readNotifyScheduled)) {
d1588 1
a1588 1
	panic( "Fs_NotifyReader, bad data\n");
d1590 1
a1590 1
    devHandlePtr->readNotifyScheduled = TRUE;
d1601 1
a1601 1
	printf( "ReadNotify, lost device handle\n");
d1603 1
a1603 1
	devHandlePtr->readNotifyScheduled = FALSE;
d1636 1
a1636 1
	(devHandlePtr->writeNotifyScheduled)) {
d1640 2
a1641 1
	panic( "Fs_NotifyWriter, bad data\n");
d1643 1
a1643 1
    devHandlePtr->writeNotifyScheduled = TRUE;
d1656 1
a1656 1
	devHandlePtr->writeNotifyScheduled = FALSE;
@


8.6
log
@Changed scavenge routine to a Boolean
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.5 89/01/04 08:51:20 brent Exp $ SPRITE (Berkeley)";
d117 1
d372 1
d720 1
d759 1
d1145 1
@


8.5
log
@Fixed Fs_Notify{Reader,Writer} (again!) so they check against
a NIL handle first.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.4 88/12/21 11:47:55 brent Exp Locker: brent $ SPRITE (Berkeley)";
d733 1
a733 1
 *	SUCCESS.
d742 1
a742 1
void
d756 1
d759 1
@


8.4
log
@Fixed assignment involving FsUnionData.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.3 88/12/21 10:17:14 brent Exp $ SPRITE (Berkeley)";
a1576 3
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	panic( "Fs_NotifyReader, bad data\n");
    }
d1581 3
a1628 3
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	panic( "Fs_NotifyWriter, bad data\n");
    }
d1632 3
@


8.3
log
@Double migration bug fix
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 8.1 88/11/28 12:47:43 brent Exp $ SPRITE (Berkeley)";
d60 5
a64 1
    FsUnionData	openData;	/* FsFileState, FsDeviceState or PdevState */
d417 1
a417 1
	param.openData = *((FsUnionData *) inBuffer);	/* copy data */
@


8.2
log
@Fixed Fs_NotifyReader and Fs_NotifyWriter so they are not
killed by notifications on the serial line before the
handle for the serial line has been set up.
@
text
@d957 1
d978 2
a979 1
    FsStreamMigClient(migInfoPtr, dstClientID, (FsHandleHeader *)devHandlePtr);
d983 1
a983 1
    FsMigrateUseCounts(migInfoPtr->flags, &devHandlePtr->use);
d989 1
a989 1
			dstClientID, migInfoPtr->flags);
d1573 3
a1579 3
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	panic( "Fs_NotifyReader, bad data\n");
    }
d1625 3
a1630 3
    }
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	panic( "Fs_NotifyWriter, bad data\n");
@


8.1
log
@Changed interface to FsLockClose
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 7.0 88/11/11 15:30:41 brent Exp $ SPRITE (Berkeley)";
a1570 3
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	panic( "Fs_NotifyReader, bad data\n");
    }
d1575 3
a1622 3
    if (devHandlePtr->hdr.fileID.type != FS_LCL_DEVICE_STREAM) {
	panic( "Fs_NotifyWriter, bad data\n");
    }
d1626 3
@


8.0
log
@Changing version numbers.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 7.0 88/11/11 15:30:41 brent Exp Locker: douglis $ SPRITE (Berkeley)";
d557 1
a557 1
    FsLockClose(&devHandlePtr->lock, procID, &streamPtr->hdr.fileID);
@


7.0
log
@New version for conversion to new C library
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 6.21 88/11/02 10:57:10 brent Exp Locker: brent $ SPRITE (Berkeley)";
@


6.21
log
@Added protection against a case that arises after recovery.  Apparently
deviceIOHandles are being recyled out from underneath a call-back.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 6.20 88/10/22 15:13:47 brent Exp $ SPRITE (Berkeley)";
d181 1
a181 1
	deviceDataPtr = Mem_New(FsDeviceState);
d279 1
a279 1
    Mem_Free((Address) deviceDataPtr);
d331 1
a331 1
    Mem_Free((Address)streamData);
d491 2
a492 2
	streamData = (ClientData)Mem_Alloc(dataSize);
	Byte_Copy(dataSize, (Address)&paramPtr->openData, (Address)streamData);
d547 1
a547 1
	Sys_Panic(SYS_WARNING,
d571 1
a571 1
	Sys_Panic(SYS_FATAL, "FsDeviceClose <%d,%d> ref %d, write %d\n",
d640 1
a640 1
	    Sys_Panic(SYS_FATAL, "FsDeviceClose <%d,%d> ref %d, write %d\n",
d693 1
a693 1
	Sys_Panic(SYS_FATAL, "FsRemoteIOClose: <%d,%d> ref %d write %d\n",
d702 1
a702 1
	status = FsSpriteClose(streamPtr, clientID, procID, flags,
d880 1
a880 1
    Sys_Panic(SYS_FATAL, "FsDeviceRelease called\n");
d968 1
a968 1
	Sys_Panic(SYS_WARNING,
d1047 1
a1047 1
	Sys_Panic(SYS_WARNING, "FsRmtDeviceMigrate, server error <%x>\n",
d1088 1
a1088 1
	Sys_Panic(SYS_FATAL, "FsDeviceMigEnd, no handlel\n");
d1186 1
a1186 1
	Sys_Panic(SYS_WARNING,
d1237 1
a1237 1
        readBuffer = Mem_Alloc(length);
d1258 1
a1258 1
	Mem_Free(readBuffer);
d1310 1
a1310 1
        writeBuffer = Mem_Alloc(length);
d1337 1
a1337 1
	Mem_Free(writeBuffer);
d1572 1
a1572 1
	Sys_Panic(SYS_FATAL, "Fs_NotifyReader, bad data\n");
d1589 1
a1589 1
	Sys_Panic(SYS_WARNING, "ReadNotify, lost device handle\n");
d1624 1
a1624 1
	Sys_Panic(SYS_FATAL, "Fs_NotifyWriter, bad data\n");
d1641 1
a1641 1
	Sys_Panic(SYS_WARNING, "WriteNotify, lost device handle\n");
@


6.20
log
@Added FsRemoteIOHandleInit
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 6.19 88/10/20 15:48:02 brent Exp $ SPRITE (Berkeley)";
d357 1
a357 1
    FsDeviceIOHandle	**newHandlePtrPtr;	/* Return - installed handle */
d1588 6
a1593 2
    devHandlePtr->readNotifyScheduled = FALSE;
    FsWaitListNotify(&devHandlePtr->readWaitList);
d1640 6
a1645 2
    devHandlePtr->writeNotifyScheduled = FALSE;
    FsWaitListNotify(&devHandlePtr->writeWaitList);
@


6.19
log
@Changed from MigStart to Release procedure to handle new structuring
of migration.  A callback is now made by the I/O server to the source
of migration when it is ok to release references on a stream, and perhaps
the underlying I/O handle.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 6.18 88/10/19 09:43:06 brent Exp $ SPRITE (Berkeley)";
d314 1
a314 3
    ReturnStatus 	status;
    Boolean		found;
    FsDeviceState	*deviceStatePtr;
a315 5
    if (clientID != rpc_SpriteID) {
	Sys_Panic(SYS_FATAL, "FsRmtDeviceCltOpen, bad clientID for rmtOpen\n");
    }
    *ioHandlePtrPtr = (FsHandleHeader *)NIL;

a321 1
    deviceStatePtr = (FsDeviceState *)streamData;
d324 1
a324 2
				(ClientData)deviceStatePtr);

a325 6
	/*
	 * Install the handle and initialize its recovery state.
	 */
	register FsRecoveryInfo *recovPtr;
	FsRemoteIOHandle *rmtHandlePtr;

d327 3
a329 12
	found = FsHandleInstall(ioFileIDPtr, sizeof(FsRemoteIOHandle), name,
		(FsHandleHeader **)&rmtHandlePtr);
	recovPtr = &rmtHandlePtr->recovery;
	if (!found) {
	    FsRecoveryInit(recovPtr);
	}
	recovPtr->use.ref++;
	if (*flagsPtr & FS_WRITE) {
	    recovPtr->use.write++;
	}
	*ioHandlePtrPtr = (FsHandleHeader *)rmtHandlePtr;
	FsHandleUnlock(rmtHandlePtr);
d331 1
a331 1
    Mem_Free((Address)deviceStatePtr);
d333 40
@


6.18
log
@Fixed old-old bug, but one that doesn't affect correctness.
Was removing a waitlist entry from the wrong wait list
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 6.17 88/10/16 11:10:50 brent Exp $ SPRITE (Berkeley)";
d267 1
a267 1
			name, (Boolean *)NIL);
d845 1
a845 1
 * FsDeviceMigStart --
d847 1
a847 3
 *	Begin migration of a FS_LCL_DEVICE_STREAM.  There is no extra
 *	state that needs saving, but we do release a reference to the I/O
 *	handle.
d860 1
a860 1
FsDeviceMigStart(hdrPtr, flags, clientID, data)
a862 2
    int clientID;		/* Host doing the encapsulation */
    ClientData data;		/* Buffer we fill in */
d864 2
a865 3
    if ((flags & FS_RMT_SHARED) == 0) {
	FsHandleRelease(hdrPtr, FALSE);
    }
d873 1
a873 1
 * FsRemoteIOMigStart --
d875 2
a876 4
 *	Begin migration of a remote stream.  There is no extra
 *	state that needs saving, but we do decrement our recovery related
 *	use counts (because the stream is moving away), and we release our
 *	reference to the I/O handle.
d889 1
a889 1
FsRemoteIOMigStart(hdrPtr, flags, clientID, migFlagsPtr)
a891 2
    int clientID;		/* Host doing the encapsulation */
    int *migFlagsPtr;		/* Migration flags we may modify */
d896 3
a898 12
    if ((flags & FS_RMT_SHARED) == 0) {
	rmtHandlePtr->recovery.use.ref--;
	if (flags & FS_WRITE) {
	    rmtHandlePtr->recovery.use.write--;
	    if (rmtHandlePtr->recovery.use.write == 0) {
		*migFlagsPtr |= FS_LAST_WRITER;
	    }
	}
	if (flags & FS_EXECUTE) {
	    rmtHandlePtr->recovery.use.exec--;
	}
	FsHandleRelease(rmtHandlePtr, TRUE);
d900 4
a903 1

d961 1
a961 3
    FsStreamMigClient(&migInfoPtr->streamID, migInfoPtr->srcClientID,
			dstClientID, (FsHandleHeader *)devHandlePtr,
			&migInfoPtr->offset, &migInfoPtr->flags);
d1045 5
a1049 3
 *	Complete setup of a FS_RMT_DEVICE_STREAM after migration.
 *	The srvMigrate routine has done most all the work.
 *	We just grab a reference on the I/O handle for the stream.
@


6.17
log
@Fixed typo's in mousetraps just installed
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: /sprite/src/kernel/fs/RCS/fsDevice.c,v 6.16 88/10/15 17:33:30 mlgray Exp Locker: brent $ SPRITE (Berkeley)";
d1328 1
a1328 1
	    FsWaitListRemove(&devHandlePtr->readWaitList, remoteWaitPtr);
@


6.16
log
@Added mousetraps to Fs_NotifyReader & Fs_NotifyWriter
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.15 88/10/14 12:14:54 brent Exp $ SPRITE (Berkeley)";
d1570 1
a1570 1
    if (devHandlePtr->hdr.type != FS_LCL_DEVICE_STREAM) {
d1618 1
a1618 1
    if (devHandlePtr->hdr.type != FS_LCL_DEVICE_STREAM) {
@


6.15
log
@FsFileID FsUserID change
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.14 88/10/11 15:58:39 brent Exp $ SPRITE (Berkeley)";
d1570 3
d1618 3
@


6.14
log
@Cleaned up migration code.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.13 88/10/10 11:24:55 douglis Exp $ SPRITE (Berkeley)";
d46 1
a46 1
#include "fsNameOps.h"
d57 1
a57 1
    FsFileID	fileID;		/* I/O fileID from name server. */
d86 1
a86 1
    FsFileID		*fileIDPtr;
d152 1
a152 1
    register FsFileID	*ioFileIDPtr;	/* Return - FileID used for I/O or
d154 1
a154 1
    FsFileID	*streamIDPtr;		/* ID of stream being opened.  NIL
d175 1
a175 1
    if (streamIDPtr != (FsFileID *)NIL) {
d221 1
a221 1
    register FsFileID	*ioFileIDPtr;	/* I/O fileID */
d306 1
a306 1
    FsFileID		*ioFileIDPtr;	/* I/O fileID */
d382 1
a382 1
    FsFileID	*ioFileIDPtr;	/* Indicates I/O server.  This is modified
d404 1
a404 1
    storage.replyParamSize = sizeof(FsFileID);
d489 1
a489 1
	storagePtr->replyParamSize = sizeof(FsFileID);
d746 1
a746 1
    FsFileID	fileID;		/* File ID of file to reopen. */
d1162 1
a1162 1
    FsFileID	*fileIDPtr;	/* Client's I/O file ID */
d1486 1
a1486 1
    FsFileID			*fileIDPtr;	/* FileID of device */
d1526 1
a1526 1
    FsFileID			*fileIDPtr;	/* FileID of device */
@


6.13
log
@Keep around reference counts for shadow streams.  Got rid of 
clientdata argument to *MigStart routines, and pass in migFlagsPtr
>> instead so LAST_WRITER can be set.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.12 88/10/05 14:43:15 brent Exp $ SPRITE (Berkeley)";
a175 1
	register Fs_Stream *streamPtr;
a185 3
	 * We only need to choose the name here, that's why we discard
	 * the stream.  It will be re-created on the device server in
	 * the client open routine.
d187 1
a187 3
	streamPtr = FsStreamNew(ioFileIDPtr->serverID, (FsHandleHeader *)NIL,
				useFlags, handlePtr->hdr.name);
	*streamIDPtr = streamPtr->hdr.fileID;
a188 1
	FsStreamDispose(streamPtr);
d265 1
a265 1
	streamPtr = FsStreamFind(&deviceDataPtr->streamID,
a267 1
	(void)FsStreamClientOpen(&streamPtr->clientList, clientID, flags);
a955 4
    register Fs_Stream			*streamPtr;
    Boolean				found;
    Boolean				cache = FALSE;
    Boolean				keepReference = FALSE;
d976 3
a978 35
    streamPtr = FsStreamFind(&migInfoPtr->streamID,
		(FsHandleHeader *)devHandlePtr, migInfoPtr->flags,
		(char *)NIL, &found);
    if ((streamPtr->flags & FS_RMT_SHARED) == 0) {
	/*
	 * We don't think the stream is being shared so we
	 * grab the offset from the client.
	 */
	streamPtr->offset = migInfoPtr->offset;
    }
    if ((migInfoPtr->flags & FS_RMT_SHARED) == 0) {
	/*
	 * The client doesn't perceive sharing of the stream so
	 * it must be its last reference so we do an I/O close.
	 */
	(void)FsStreamClientClose(&streamPtr->clientList,
				migInfoPtr->srcClientID);
    } else if (migInfoPtr->flags & FS_NEW_STREAM) {
	keepReference = TRUE;
    }
    if (FsStreamClientOpen(&streamPtr->clientList, dstClientID,
	    migInfoPtr->flags)) {
	/*
	 * We detected network sharing so we mark the stream.
	 */
	streamPtr->flags |= FS_RMT_SHARED;
#ifdef notdef
	migInfoPtr->flags |= FS_RMT_SHARED;
#endif notdef
    }
    if (keepReference) {
	FsHandleUnlock(streamPtr);
    } else {
	FsHandleRelease(streamPtr, TRUE);
    }
d982 1
a982 30
     if ((migInfoPtr->flags & FS_NEW_STREAM) &&
       (migInfoPtr->flags & FS_RMT_SHARED)) {
      /*
       * The stream is becoming shared across the network so
       * we need to increment the use counts on the I/O handle
       * to reflect the additional client stream.
       */
      devHandlePtr->use.ref++;
      if ((migInfoPtr->flags & FS_WRITE) &&
	  !(migInfoPtr->flags & FS_LAST_WRITER)) {
	  devHandlePtr->use.write++;
      }
    } else if ((migInfoPtr->flags & (FS_NEW_STREAM|FS_RMT_SHARED)) == 0) {
	/*
	 * The stream is no longer shared, and it is not new on the
	 * target client, so we have to decrement the use counts
	 * to reflect the fact that the original client's stream is not
	 * referencing the I/O handle.
	 */
	devHandlePtr->use.ref--;
	if (migInfoPtr->flags & FS_WRITE) {
	    devHandlePtr->use.write--;
	}
    } else if (migInfoPtr->flags & FS_LAST_WRITER) {
	/*
	 * The stream is still open for reading but no longer for writing
	 * on the source client.
	 */
	devHandlePtr->use.write--;
    }
d985 1
a985 5
     * Move the client at the I/O handle level.  We are careful to only
     * close the srcClient if its migration state indicates it isn't
     * shared.  We are careful to only open the dstClient if it getting
     * the stream for the first time.  Also, if the srcClient is switching
     * from a writer to a reader, we remove its write reference.
d987 2
a988 21
    if ((migInfoPtr->flags & FS_RMT_SHARED) == 0) {
	found = FsIOClientClose(&devHandlePtr->clientList,
		    migInfoPtr->srcClientID, migInfoPtr->flags, &cache);
	if (!found) {
	    Sys_Panic(SYS_WARNING,
		"FsDeviceMigrate, IO Client %d not found\n",
		migInfoPtr->srcClientID);
	}
    } else if (migInfoPtr->flags & FS_LAST_WRITER) {
	found = FsIOClientRemoveWriter(&devHandlePtr->clientList,
		    migInfoPtr->srcClientID);
	if (!found) {
	    Sys_Panic(SYS_WARNING,
		"FsDeviceMigrate, IO Client %d not found\n",
		migInfoPtr->srcClientID);
	}
    }
    if (migInfoPtr->flags & FS_NEW_STREAM) {
	(void)FsIOClientOpen(&devHandlePtr->clientList, dstClientID,
		migInfoPtr->flags, FALSE);
    }
d992 2
a993 2
    *flagsPtr = streamPtr->flags;
    *offsetPtr = streamPtr->offset;
@


6.12
log
@Added required include
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.11 88/10/05 12:10:24 brent Exp $ SPRITE (Berkeley)";
a45 1
#include "fsOpTable.h"
d904 1
a904 1
FsRemoteIOMigStart(hdrPtr, flags, clientID, data)
d908 1
a908 1
    ClientData data;		/* Buffer we fill in */
d912 1
a913 1
	FsHandleLock(rmtHandlePtr);
d917 3
d926 1
d967 1
d1005 2
d1014 1
d1016 1
d1018 5
a1022 1
    FsHandleRelease(streamPtr, TRUE);
d1034 2
a1035 1
      if (migInfoPtr->flags & FS_WRITE) {
d1039 16
a1054 10
      /*
       * The stream is no longer shared, and it is not new on the
       * target client, so we have to decrement the use counts
       * to reflect the fact that the original client's stream is not
       * referencing the I/O handle.
       */
      devHandlePtr->use.ref--;
      if (migInfoPtr->flags & FS_WRITE) {
	  devHandlePtr->use.write--;
      }
d1061 2
a1062 1
     * the stream for the first time.
d1067 8
@


6.11
log
@Added domainTypePtr parameter to the clientVerify routine
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.10 88/09/28 08:38:14 brent Exp $ SPRITE (Berkeley)";
d46 3
a51 1
#include "fsNameOps.h"
@


6.10
log
@Changed IOControl interface to take Fs_Buffer's instead of
separate size/address parameters.  Need to pass user space
flag along to get pseudo-devices right after migration!
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.9 88/09/22 09:03:48 brent Exp $ SPRITE (Berkeley)";
d1227 1
a1227 1
FsRmtDeviceVerify(fileIDPtr, clientID)
d1230 1
d1254 3
@


6.9
log
@Changed I/O Control interface to take streamPtr instead of ioHandlePtr
so we can implement lock crash recovery based on stream ownership of locks.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.8 88/09/19 11:22:50 brent Exp $ SPRITE (Berkeley)";
d1491 1
a1491 2
FsDeviceIOControl(streamPtr, command, byteOrder, inBufSize, inBuffer, outBufSize, 
		outBuffer)
d1495 2
a1496 4
    int inBufSize;			/* Size of inBuffer */
    Address inBuffer;			/* Buffer of input arguments */
    int outBufSize;			/* Size of outBuffer */
    Address outBuffer;			/* Buffer for return parameters */
d1509 1
a1509 1
				inBuffer, inBufSize, &streamPtr->hdr.fileID);
d1519 2
a1520 1
		    command, inBufSize, inBuffer, outBufSize, outBuffer);
@


6.8
log
@Updated locking routines to take a streamID in order to record
the owner of a lock.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.7 88/09/16 16:51:07 brent Exp $ SPRITE (Berkeley)";
d1491 1
a1491 1
FsDeviceIOControl(hdrPtr, command, byteOrder, inBufSize, inBuffer, outBufSize, 
d1493 1
a1493 1
    FsHandleHeader *hdrPtr;		/* I/O handle for device. */
d1501 2
a1502 1
    FsDeviceIOHandle	*devHandlePtr = (FsDeviceIOHandle *)hdrPtr;
d1505 1
d1512 1
a1512 1
				inBuffer, inBufSize, (FsFileID *)NIL);
d1515 4
a1518 2
	    if (byteOrder != mach_ByteOrder) {
		FsFileError(hdrPtr, "Device I/O control byte swapping not done",
@


6.7
log
@Added procID to close procedure to support lock cleanup
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.6 88/09/13 11:27:04 brent Exp $ SPRITE (Berkeley)";
d548 1
a548 1
    FsLockClose(&devHandlePtr->lock, procID);
d1505 15
a1519 3
    if (byteOrder != mach_ByteOrder) {
	FsFileError(hdrPtr, "Device I/O control byte swapping not done",
	    SUCCESS);
a1520 3
    FsHandleLock(devHandlePtr);
    status = (*devFsOpTable[devicePtr->type].ioControl) (devicePtr,
	    command, inBufSize,	inBuffer, outBufSize, outBuffer);
@


6.6
log
@Added byte swapping code to IOControls
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.5 88/09/07 16:52:26 brent Exp $ SPRITE (Berkeley)";
d524 1
a524 1
FsDeviceClose(streamPtr, clientID, flags, size, data)
d527 1
d548 2
d609 2
d662 1
a662 1
FsRemoteIOClose(streamPtr, clientID, flags, dataSize, closeData)
d665 1
d693 1
a693 1
	status = FsSpriteClose(streamPtr, clientID, flags,
@


6.5
log
@Moved name from stream to I/O handle.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.4 88/09/02 14:33:59 brent Exp $ SPRITE (Berkeley)";
d1485 1
a1485 1
FsDeviceIOControl(hdrPtr, command, inBufSize, inBuffer, outBufSize, 
d1489 1
d1499 4
@


6.4
log
@Fixed FsDeviceSelect to clear the outFlags because
the device drivers expect that.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.3 88/08/31 12:04:59 brent Exp $ SPRITE (Berkeley)";
d84 1
a84 1
FsDeviceHandleInit(fileIDPtr, newHandlePtrPtr)
d86 1
d92 1
a92 1
    found = FsHandleInstall(fileIDPtr, sizeof(FsDeviceIOHandle),
d191 1
a191 1
				useFlags);
d226 1
a226 1
FsDeviceCltOpen(ioFileIDPtr, flagsPtr, clientID, streamData, ioHandlePtrPtr)
d231 1
d246 1
a246 1
    found = FsDeviceHandleInit(ioFileIDPtr, &tDevHandlePtr);
d272 2
a273 1
			(FsHandleHeader *)devHandlePtr, flags, (Boolean *)NIL);
d312 1
a312 1
FsRmtDeviceCltOpen(ioFileIDPtr, flagsPtr, clientID, streamData, ioHandlePtrPtr)
d317 1
d326 1
a326 1
	Sys_Panic(SYS_FATAL, "FsDeviceOpen, bad clientID for rmtOpen\n");
d334 1
d349 1
a349 1
	found = FsHandleInstall(ioFileIDPtr, sizeof(FsRemoteIOHandle),
d477 1
d489 1
a489 1
		     clientID, streamData, &hdrPtr);
d966 1
a966 1
    if (!FsDeviceHandleInit(&migInfoPtr->ioFileID, &devHandlePtr)) {
d977 2
a978 1
		(FsHandleHeader *)devHandlePtr, migInfoPtr->flags, &found);
d1187 1
a1187 1
		hdrPtrPtr);
@


6.3
log
@Removed lint.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.2 88/08/24 18:07:59 brent Exp $ SPRITE (Berkeley)";
d1424 1
a1424 1
    int outFlags;
@


6.2
log
@Changed SrvOpen routine to return handled unlocked
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.1 88/08/12 12:31:34 brent Exp $ SPRITE (Berkeley)";
d267 1
a267 1
	FsIOClientOpen(&devHandlePtr->clientList, clientID, flags, FALSE);
d271 1
a271 1
	FsStreamClientOpen(&streamPtr->clientList, clientID, flags);
d477 1
a477 1
	Byte_Copy(dataSize, &(paramPtr->openData), (Address)streamData);
@


6.1
log
@Added flags argument to setIOAttr routine that specifies
what attributes to update.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 6.0 88/08/11 12:15:24 brent Stable $ SPRITE (Berkeley)";
d145 2
a146 1
					 * Should be locked upon entry. */
d198 1
@


6.0
log
@Changing version numbers.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.11 88/08/11 10:54:26 brent Exp $ SPRITE (Berkeley)";
d1556 1
a1556 1
FsDeviceSetIOAttr(fileIDPtr, attrPtr)
d1559 1
d1563 7
a1569 5
    devHandlePtr = FsHandleFetchType(FsDeviceIOHandle, fileIDPtr);
    if (devHandlePtr != (FsDeviceIOHandle *)NIL) {
	devHandlePtr->accessTime = attrPtr->accessTime.seconds;
        devHandlePtr->modifyTime = attrPtr->dataModifyTime.seconds;
	FsHandleRelease(devHandlePtr, TRUE);
@


1.11
log
@Nuked extra free
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.10 88/08/05 13:19:44 brent Exp $ SPRITE (Berkeley)";
@


1.10
log
@Removed lint
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.9 88/08/04 15:03:51 mlgray Exp $ SPRITE (Berkeley)";
a408 6
    /*
     * This used to be freed automatically when the request data pointed
     * to this rather than our copying it over to the request parameter
     * portion.
     */
    Mem_Free(inBuffer);
@


1.9
log
@merging changes from fs into fs.new
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.8 88/08/03 17:18:20 mlgray Exp $ SPRITE (Berkeley)";
d830 1
a830 1
    register Rpc_Storage *storagePtr;	/* The request fields refer to the 
@


1.8
log
@works on Spur.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.7 88/06/08 14:57:59 brent Exp $ SPRITE (Berkeley)";
d984 4
d993 3
d1000 26
@


1.7
log
@Plugged core leak
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.6 88/06/06 09:36:34 brent Exp $ SPRITE (Berkeley)";
d49 1
a51 10
 * The client data set up by the device pre-open routine on the server
 * and used by the device open routine on the client.
 */
typedef struct FsDeviceState {
    int		accessTime;	/* Access time from disk descriptor */
    int		modifyTime;	/* Modify time from disk descriptor */
    FsFileID	streamID;	/* Used to set up client list */
} FsDeviceState;

/*
d58 2
d249 1
a249 1
    if (devHandlePtr->device.type >= fsNumDevices) {
d252 1
a252 1
	status = (*fsDeviceOpTable[devHandlePtr->device.type].open)
d395 4
a398 1

d401 2
a402 2
    storage.requestDataPtr = (Address) inBuffer;
    storage.requestDataSize = inSize;
d409 6
d468 1
a468 1
    register int	dataSize = storagePtr->requestDataSize;
d478 1
d481 1
a481 1
	Byte_Copy(dataSize, storagePtr->requestDataPtr, (Address)streamData);
d552 1
a552 1
    status = (*fsDeviceOpTable[devHandlePtr->device.type].close)
d619 1
a619 1
	(void)(*fsDeviceOpTable[devHandlePtr->device.type].close)
d1268 1
a1268 1
    status = (*fsDeviceOpTable[devicePtr->type].read)(devicePtr,
d1344 1
a1344 1
	status = (*fsDeviceOpTable[devicePtr->type].write)(devicePtr,
d1411 1
a1411 1
    status = (*fsDeviceOpTable[devicePtr->type].select)(devicePtr,
d1463 1
a1463 1
    status = (*fsDeviceOpTable[devicePtr->type].ioControl) (devicePtr,
@


1.6
log
@Changed close interface to pass back the streamID so the server's
shadow streams can be closed too.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.5 88/06/04 12:11:12 brent Exp $ SPRITE (Berkeley)";
d115 1
d728 3
@


1.5
log
@Put in checking against the device number so new devices don't crash
the kernel
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.4 88/04/19 10:34:08 brent Exp $ SPRITE (Berkeley)";
d518 2
a519 2
FsDeviceClose(hdrPtr, clientID, flags, size, data)
    FsHandleHeader	*hdrPtr;	/* Handle to close */
d527 1
a527 1
	    (FsDeviceIOHandle *)hdrPtr;
d533 2
a534 1
		  clientID, hdrPtr->fileID.major, hdrPtr->fileID.minor);
d554 1
a554 1
	    hdrPtr->fileID.major, hdrPtr->fileID.minor,
d651 2
a652 2
FsRemoteIOClose(hdrPtr, clientID, flags, dataSize, closeData)
    FsHandleHeader	*hdrPtr;	/* Handle to close */
d660 1
a660 1
	    (FsRemoteIOHandle *)hdrPtr;
d673 1
a673 1
	    hdrPtr->fileID.major, hdrPtr->fileID.minor,
d678 1
a678 1
    if (!FsHandleValid(hdrPtr)) {
d681 1
a681 1
	status = FsSpriteClose(rmtHandlePtr, clientID, flags,
@


1.4
log
@Changed interface to FsIOClient{Open,Close} to include cached property.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.3 88/04/11 17:47:17 brent Exp $ SPRITE (Berkeley)";
d255 6
a260 2
    status = (*fsDeviceOpTable[devHandlePtr->device.type].open)
		(&devHandlePtr->device, flags, (ClientData)devHandlePtr);
@


1.3
log
@nameInfoPtr is no longer a parameter to the client open routine.
It gets all set up by the prefix table module.
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.2 88/04/11 10:11:45 brent Exp $ SPRITE (Berkeley)";
d151 1
a151 2
					 * Should be locked upon entry.  It
					 * is unlocked and released here. */
d267 1
a267 1
	(void)FsIOClientOpen(&devHandlePtr->clientList, clientID, flags);
d461 2
d467 2
a468 1
     * named pipe open routine.
d471 6
d479 1
a479 1
		     clientID, storagePtr->requestDataPtr, &hdrPtr);
d524 1
a524 1
    Boolean			wasCached; /* IGNORED */
d526 1
a526 2
    if (!FsIOClientClose(&devHandlePtr->clientList, clientID, flags,
		    &wasCached)) {
d941 1
a941 1
    Boolean				wasCached;	/* IGNORED */
d990 1
a990 1
		    migInfoPtr->srcClientID, migInfoPtr->flags, &wasCached);
d999 1
a999 1
		migInfoPtr->flags);
d1373 1
a1373 1
    register FsHandleHeader	*hdrPtr;	/* Handle on device to select */
d1379 1
a1379 1
    FsDeviceIOHandle	*devHandlePtr = (FsDeviceIOHandle *)hdrPtr;
@


1.2
log
@Added offsetPtr parameter for migration
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.1 88/04/05 13:59:57 brent Exp $ SPRITE (Berkeley)";
a56 1
    FsFileID	nameFileID;	/* Needed to get to name server for attrs. */
a188 4
	deviceDataPtr->nameFileID = handlePtr->hdr.fileID;
	if (clientID != rpc_SpriteID) {
	    deviceDataPtr->nameFileID.type = FS_RMT_FILE_STREAM;
	}
d230 1
a230 2
FsDeviceCltOpen(ioFileIDPtr, flagsPtr, clientID, streamData, nameInfoPtr,
	ioHandlePtrPtr)
a234 2
    FsNameInfo		*nameInfoPtr;	/* We set the fileID part here for
					 * use in getting attributes later */
a279 7
	/*
	 * Save the fileID needed later to get back to the name server
	 * when settting/getting attributes for the device.
	 */
	if (nameInfoPtr != (FsNameInfo *)NIL) {
	    nameInfoPtr->fileID = deviceDataPtr->nameFileID;
	}
d310 1
a310 2
FsRmtDeviceCltOpen(ioFileIDPtr, flagsPtr, clientID, streamData, nameInfoPtr,
	    ioHandlePtrPtr)
a314 1
    FsNameInfo		*nameInfoPtr;	/* FileID field set for attributes */
a355 4
	/*
	 * Save name fileID for dealing with attributes later.
	 */
	nameInfoPtr->fileID = deviceStatePtr->nameFileID;
d471 1
a471 2
		     clientID, storagePtr->requestDataPtr,
		     (FsNameInfo *)NIL, &hdrPtr);
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
static char rcsid[] = "$Header: fsDevice.c,v 1.1 88/04/04 10:31:17 brent Exp $ SPRITE (Berkeley)";
d590 1
a590 1
 *	use counts on the file.
d601 2
a602 1
    FsDeviceIOHandle *devHandlePtr = (FsDeviceIOHandle *)hdrPtr;
a603 1
    int flags;
d635 1
d945 1
a945 1
FsDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, sizePtr, dataPtr)
d949 1
d963 1
a963 1
	return(FsRmtDeviceMigrate(migInfoPtr, dstClientID, flagsPtr,
d979 7
d1020 1
d1053 1
a1053 1
FsRmtDeviceMigrate(migInfoPtr, dstClientID, flagsPtr, sizePtr, dataPtr)
d1057 1
d1068 1
a1068 1
	return(FsDeviceMigrate(migInfoPtr, dstClientID, flagsPtr,
d1072 2
a1073 1
    status = FsNotifyOfMigration(migInfoPtr, flagsPtr, 0, (Address)NIL);
@
