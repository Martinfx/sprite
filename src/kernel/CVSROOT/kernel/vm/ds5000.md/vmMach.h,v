head     1.4;
branch   ;
access   ;
symbols  ds3100:1.4 sun3:1.4 sun4nw:1.3 symm:1.3 spur:1.3;
locks    ; strict;
comment  @ * @;


1.4
date     92.10.27.09.04.50;  author mgbaker;  state Exp;
branches ;
next     1.3;

1.3
date     91.03.19.10.57.45;  author jhh;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.05.15.12.06;  author jhh;  state Exp;
branches ;
next     1.1;

1.1
date     91.02.06.16.26.44;  author jhh;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Included vm3maxConst.h in vmMach.h.   This is necessary now that
machine-independent code in fsio uses the machine-dependent Xbus #defines.
@
text
@/*
 * vmMach.h
 *
 *     	Machine dependent virtual memory data structures and procedure
 *	headers.
 *
 * Copyright (C) 1989 Digital Equipment Corporation.
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies.
 * Digital Equipment Corporation makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/vm/ds5000.md/vmMach.h,v 1.3 91/03/19 10:57:45 jhh Exp $ SPRITE (DECWRL)
 */

#ifndef _VMMACH
#define _VMMACH

#ifdef KERNEL
#include <vm3maxConst.h>
#else
#include <kernel/vm3maxConst.h>
#endif

/*
 * Machine dependent data for each software segment.
 */
typedef struct VmMach_SegData {
    int	dummy;
} VmMach_SegData;

/*
 * Machine dependent shared memory data
 */
typedef struct VmMach_SharedData {
    int        *allocVector;           /* Allocated block vector. */
    int         allocFirstFree;         /* First free block. */
} VmMach_SharedData;

/*
 * Structure to allow processes to share regions of their VA with the kernel.
 */

typedef struct VmMach_KernSharedInfo {
    List_Links	links;
    unsigned	firstPage;		/* First virtual page in region. */
    unsigned	lastPage;		/* Last virtual page in region. */
    unsigned	firstPhysPage;		/* First physical page, if region
					 * is in the user mapping region. */
    int		flags;			/* See below. */
} VmMach_KernSharedInfo;

/*
 * Flags in a VmMach_KernSharedInfo.
 */

#define VMMACH_KERN_SHARED_UNCACHEABLE 1	/* Is region uncacheable? */

/*
 * Machine dependent data for each process.
 */
typedef struct VmMach_ProcData {
    struct Vm_Segment	*mapSegPtr;	/* Pointer to segment which is mapped
					 * into this processes address
					 * space. */
    unsigned int	mappedPage;	/* Page in the mapped seg where
					 * the mapping begins. */
    int			pid;		/* Which pid is used to map this
					 * process. */
    unsigned int	modPage;	/* A TLB modified fault occured on this
					 * virtual page - set the modify bit
					 * in the TLB entry if we try to
					 * validate this VA. */
    Address		sharedPtr;	/* Shared memory pointer, in case
					 * shared memory is mapped.
					 * This is really Vm_SegProcList*, 
					 * but made address because of
					 * header file problems.*/
    VmMach_SharedData	sharedData;	/* Data for shared memory. */
    List_Links		kernSharedList;	/* List of VA regions shared with
					 * the kernel. */
} VmMach_ProcData;

/*
 * TLB Map.
 */
extern unsigned *vmMach_KernelTLBMap;

/*
 * Machine dependent functions exported to machine dependent modules.
 */

extern Boolean VmMach_MakeDebugAccessible _ARGS_((unsigned addr));
extern ENTRY ReturnStatus VmMach_TLBFault _ARGS_((Address virtAddr));
extern ReturnStatus VmMach_TLBModFault _ARGS_((Address virtAddr));
extern ReturnStatus VmMach_UserMap _ARGS_((int numBytes, Address addr,
	Address physAddr, Boolean cache, Address *newAddrPtr));
extern ENTRY ReturnStatus VmMach_UserUnmap _ARGS_((Address addr));
extern int VmMachCopyEnd _ARGS_((void));

#endif _VMMACH
@


1.3
log
@modified routines to map kernel memory into user VA
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds5000.md/RCS/vmMach.h,v 1.2 91/03/05 15:12:06 jhh Exp $ SPRITE (DECWRL)
d20 6
@


1.2
log
@ds5000 port
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.8 90/09/11 14:10:01 mendel Exp $ SPRITE (DECWRL)
d37 19
d76 2
d92 3
a94 3
extern Address VmMach_UserMap _ARGS_((int numBytes, Address physAddr,
	Boolean firstTime, Boolean cache));
extern ENTRY void VmMach_UserUnmap _ARGS_((void));
@


1.1
log
@Initial revision
@
text
@d72 1
a72 1
	Boolean firstTime));
@
