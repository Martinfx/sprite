head     9.6;
branch   ;
access   ;
symbols  ds3100:9.6 sun3:9.6 sprited:9.3.1 sun4nw:9.5 symm:9.5 spur:9.5 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.6
date     92.08.10.17.26.48;  author mgbaker;  state Exp;
branches ;
next     9.5;

9.5
date     91.09.24.12.43.54;  author mgbaker;  state Exp;
branches ;
next     9.4;

9.4
date     91.09.10.18.38.11;  author rab;  state Exp;
branches ;
next     9.3;

9.3
date     90.12.06.21.56.53;  author jhh;  state Exp;
branches 9.3.1.1;
next     9.2;

9.2
date     90.10.10.11.08.04;  author mendel;  state Exp;
branches ;
next     9.1;

9.1
date     90.10.08.15.48.50;  author mendel;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.06.13;  author douglis;  state Stable;
branches ;
next     8.8;

8.8
date     89.08.21.15.26.18;  author mendel;  state Exp;
branches ;
next     8.7;

8.7
date     89.08.15.18.42.34;  author rab;  state Exp;
branches ;
next     8.6;

8.6
date     89.07.11.08.48.53;  author mendel;  state Exp;
branches ;
next     8.5;

8.5
date     89.06.21.12.29.21;  author brent;  state Exp;
branches ;
next     8.4;

8.4
date     89.05.31.10.11.58;  author mendel;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.10.11.30.37;  author mendel;  state Exp;
branches ;
next     8.2;

8.2
date     89.02.04.14.12.42;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     89.01.30.09.22.44;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.20.41;  author douglis;  state Stable;
branches ;
next     7.0;

7.0
date     88.11.07.14.47.16;  author brent;  state Exp;
branches ;
next     6.3;

6.3
date     88.10.19.13.12.24;  author brent;  state Exp;
branches ;
next     6.2;

6.2
date     88.10.14.12.16.29;  author brent;  state Exp;
branches ;
next     6.1;

6.1
date     88.09.15.17.54.06;  author brent;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.16.37;  author brent;  state Stable;
branches ;
next     1.3;

1.3
date     88.08.03.17.20.33;  author mlgray;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.04.12.11.40;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.05.13.59.02;  author brent;  state Exp;
branches ;
next     ;

9.3.1.1
date     91.11.15.15.55.31;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Definitions for the device access module
@


9.6
log
@Transparent server recovery now available.
@
text
@/*
 * fsioDevice.h --
 *
 *	Declarations for device access.  The DEVICE operation switch is
 *	defined here.  The I/O handle formas for devices is defined here.
 *
 * Copyright 1987 Regents of the University of California
 * All rights reserved.
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 *
 * $Header: /sprite/src/kernel/mgbaker/fsio/RCS/fsioDevice.h,v 1.1 92/04/30 12:13:21 mgbaker Exp $ SPRITE (Berkeley)
 */

#ifndef _FSIODEVICE
#define _FSIODEVICE

#include <fsio.h>
#include <fsioLock.h>
#include <fsNameOps.h>

/*
 * The I/O descriptor for a local device: FSIO_LCL_DEVICE_STREAM
 */

typedef struct Fsio_DeviceIOHandle {
    Fs_HandleHeader	hdr;		/* Standard handle header. The
					 * 'major' field of the fileID is
					 * the device type.  The 'minor'
					 * field is the unit number. */
    List_Links		clientList;	/* List of clients of the device. */
    Fsio_UseCounts		use;		/* Summary reference counts. */
    Fs_Device		device;		/* Device info passed to drivers.
					 * This includes a clientData field. */
    int			flags;		/* Flags returned by the device open.*/
    Fsio_LockState		lock;		/* User level lock state. */
    int			accessTime;	/* Cached version of access time */
    int			modifyTime;	/* Cached version of modify time */
    List_Links		readWaitList;	/* List of waiting reader processes. */
    List_Links		writeWaitList;	/* List of waiting writer processes. */
    List_Links		exceptWaitList;	/* List of process waiting for
					 * exceptions (is this needed?). */
    int			notifyFlags;	/* Bits set to optimize out notifies */
} Fsio_DeviceIOHandle;			/* 136 BYTES */

/*
 * Data transferred when a local device stream migrates.
 */
typedef struct Fsio_DeviceMigData {
    int foo;
} Fsio_DeviceMigData;

/*
 * The client data set up by the device pre-open routine on the server and
 * used by the device open routine on the client.
 */
typedef struct Fsio_DeviceState {
    int		accessTime;	/* Access time from disk descriptor */
    int		modifyTime;	/* Modify time from disk descriptor */
    Fs_FileID	streamID;	/* Used to set up client list */
} Fsio_DeviceState;

/*
 * Paramters for a device reopen RPC used to reestablish state on the
 * I/O server for a device.
 */
typedef struct Fsio_DeviceReopenParams {
    Fs_FileID		fileID;	/* File ID of file to reopen.  MUST BE FIRST! */
    Fsio_UseCounts	use;	/* Device usage information. */
} Fsio_DeviceReopenParams;

/*
 * Device support
 */
extern void Fsio_DevNotifyException _ARGS_((Fs_NotifyToken notifyToken));
extern void Fsio_DevNotifyWriter _ARGS_((Fs_NotifyToken notifyToken));
extern void Fsio_DevNotifyReader _ARGS_((Fs_NotifyToken notifyToken));
extern ReturnStatus Fsio_VanillaDevReopen _ARGS_((Fs_Device *devicePtr, 
			int refs, int writes, Fs_NotifyToken notifyToken));

/*
 * Open operations.
 */

extern ReturnStatus Fsio_DeviceClose _ARGS_((Fs_Stream *streamPtr, 
				int clientID, Proc_PID procID, int flags, 
				int size, ClientData data));
/*
 * Recovery testing operations.
 */
extern int Fsio_DeviceRecovTestUseCount _ARGS_((Fsio_DeviceIOHandle *handlePtr));
/*
 * Fast recov stuff.
 */
#include <fsrecovTypes.h>
extern ReturnStatus Fsio_DeviceSetupHandle _ARGS_((Fsrecov_HandleState *recovInfoPtr));


/*
 * Stream operations.
 */
extern ReturnStatus Fsio_DeviceIoOpen _ARGS_((Fs_FileID *ioFileIDPtr,
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
extern ReturnStatus Fsio_DeviceReopen _ARGS_((Fs_HandleHeader *hdrPtr,
		int clientID, ClientData inData, int *outSizePtr,
		ClientData *outDataPtr));
extern ReturnStatus Fsio_DeviceRead _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOParam *readPtr, Sync_RemoteWaiter *remoteWaitPtr, 
		Fs_IOReply *replyPtr));
extern ReturnStatus Fsio_DeviceWrite _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOParam *writePtr, Sync_RemoteWaiter *remoteWaitPtr, 
		Fs_IOReply *replyPtr));
extern ReturnStatus Fsio_DeviceSelect _ARGS_((Fs_HandleHeader *hdrPtr, 
		Sync_RemoteWaiter *waitPtr, int *readPtr, int *writePtr, 
		int *exceptPtr));
extern ReturnStatus Fsio_DeviceIOControl _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOCParam *ioctlPtr, Fs_IOReply *replyPtr));
extern ReturnStatus Fsio_DeviceGetIOAttr _ARGS_((Fs_FileID *fileIDPtr, 
		int clientID, register Fs_Attributes *attrPtr));
extern ReturnStatus Fsio_DeviceSetIOAttr _ARGS_((Fs_FileID *fileIDPtr, 
		Fs_Attributes *attrPtr, int flags));
extern ReturnStatus Fsio_DeviceMigClose _ARGS_((Fs_HandleHeader *hdrPtr, 
		int flags));
extern ReturnStatus Fsio_DeviceMigrate _ARGS_((Fsio_MigInfo *migInfoPtr, 
		int dstClientID, int *flagsPtr, int *offsetPtr, int *sizePtr,
		Address *dataPtr));
extern ReturnStatus Fsio_DeviceMigOpen _ARGS_((Fsio_MigInfo *migInfoPtr, int size,
		ClientData data, Fs_HandleHeader **hdrPtrPtr));
extern Boolean Fsio_DeviceScavenge _ARGS_((Fs_HandleHeader *hdrPtr));
extern void Fsio_DeviceClientKill _ARGS_((Fs_HandleHeader *hdrPtr, 
		int clientID));
extern Boolean FsioDeviceHandleInit _ARGS_((Fs_FileID *fileIDPtr, 
		char *name, Fsio_DeviceIOHandle **newHandlePtrPtr));
extern ReturnStatus FsioDeviceCloseInt _ARGS_((
		Fsio_DeviceIOHandle *devHandlePtr, int useFlags, int refs,
		int writes));

#endif /* _FSIODEVICE */
@


9.5
log
@New define for Fsio_DeviceReopen and associated data structures.
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fsio/RCS/fsioDevice.h,v 9.4 91/09/10 18:38:11 rab Exp Locker: mgbaker $ SPRITE (Berkeley)
d94 10
@


9.4
log
@Fixed lint errors and removed tracing.
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fsio/RCS/fsioDevice.h,v 9.3 90/12/06 21:56:53 jhh Exp Locker: rab $ SPRITE (Berkeley)
d70 9
d101 3
@


9.3
log
@Added sosp tracing code
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fsio/RCS/fsioDevice.h,v 9.2 90/10/10 11:08:04 mendel Exp Locker: jhh $ SPRITE (Berkeley)
a81 1
#ifdef SOSP91
a83 5
				int size, ClientData data, int *offsetPtr,
				int *rwFlagsPtr));
#else
extern ReturnStatus Fsio_DeviceClose _ARGS_((Fs_Stream *streamPtr, 
				int clientID, Proc_PID procID, int flags, 
a84 1
#endif
@


9.3.1.1
log
@Initial branch for Sprite server.
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/fsio/fsioDevice.h,v 9.3 90/12/06 21:56:53 jhh Exp $ SPRITE (Berkeley)
@


9.2
log
@Moved Fsio_DeviceNameOpen prototype to fsioFile.h
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fsio/RCS/fsioDevice.h,v 9.1 90/10/08 15:48:50 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d81 7
d91 1
@


9.1
log
@Changed name to fsioDevice.h
Fixed include files to use <> rather than "".
Added function prototyping.  
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs.mendel/RCS/fsioDevice.h,v 1.1 90/01/16 17:12:05 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d26 1
a80 3
extern ReturnStatus Fsio_DeviceNameOpen _ARGS_((Fsio_FileIOHandle *handlePtr, 
				Fs_OpenArgs *openArgsPtr, 
				Fs_OpenResults *openResultsPtr));
@


9.0
log
@Changing version numbers.
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fsio/RCS/fsioDevice.h,v 8.8 89/08/21 15:26:18 mendel Exp Locker: douglis $ SPRITE (Berkeley)
d21 2
a22 2
#ifndef _FSDEVICE
#define _FSDEVICE
d24 2
a25 2
#include "fsio.h"
#include "fsioLock.h"
d37 1
a37 1
    Fsutil_UseCounts		use;		/* Summary reference counts. */
d69 9
d80 6
a85 3
extern ReturnStatus	Fsio_DeviceNameOpen();
extern ReturnStatus	Fsio_DeviceClose();
extern ReturnStatus	FsDeviceDelete();
d90 33
a122 16
extern ReturnStatus Fsio_DeviceIoOpen();
extern ReturnStatus Fsio_DeviceRead();
extern ReturnStatus Fsio_DeviceWrite();
extern ReturnStatus Fsio_DeviceIOControl();
extern ReturnStatus Fsio_DeviceSelect();
extern ReturnStatus Fsio_DeviceGetIOAttr();
extern ReturnStatus Fsio_DeviceSetIOAttr();
extern ReturnStatus Fsio_DeviceMigClose();
extern ReturnStatus Fsio_DeviceMigOpen();
extern ReturnStatus Fsio_DeviceMigrate();
extern Boolean	    Fsio_DeviceScavenge();
extern void	    Fsio_DeviceClientKill();
extern ReturnStatus Fsio_DeviceClose();


extern ReturnStatus Fsio_DeviceBlockIO();
d124 1
a124 1
#endif _FSDEVICE
@


8.8
log
@Break up fs into many modules.    
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.6 89/07/11 08:48:53 mendel Exp Locker: mendel $ SPRITE (Berkeley)
@


8.7
log
@Commented #endif labels.
@
text
@d2 1
a2 1
 * fsDevice.h --
d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.6 89/07/11 08:48:53 mendel Exp Locker: rab $ SPRITE (Berkeley)
d24 2
a25 1
#include "fsRecovery.h"
d28 1
a28 1
 * Include the device switch declaration from dev.
a29 1
#include "devFsOpTable.h"
d31 2
a32 8


/*
 * The I/O descriptor for a local device: FS_LCL_DEVICE_STREAM
 */

typedef struct FsDeviceIOHandle {
    FsHandleHeader	hdr;		/* Standard handle header. The
d37 1
a37 1
    FsUseCounts		use;		/* Summary reference counts. */
d41 1
a41 1
    FsLockState		lock;		/* User level lock state. */
d49 1
a49 1
} FsDeviceIOHandle;			/* 136 BYTES */
d54 1
a54 1
typedef struct FsDeviceMigData {
d56 1
a56 1
} FsDeviceMigData;
d62 1
a62 1
typedef struct FsDeviceState {
d66 1
a66 1
} FsDeviceState;
d71 2
a72 3
extern ReturnStatus	FsDeviceSrvOpen();
extern ReturnStatus	FsDeviceClose();
extern ReturnStatus	FsDeviceReopen();
d78 14
a91 21
extern ReturnStatus FsDeviceCltOpen();
extern ReturnStatus FsDeviceRead();
extern ReturnStatus FsDeviceWrite();
extern ReturnStatus FsDeviceIOControl();
extern ReturnStatus FsDeviceSelect();
extern ReturnStatus FsDeviceGetIOAttr();
extern ReturnStatus FsDeviceSetIOAttr();
extern ReturnStatus FsDeviceRelease();
extern ReturnStatus FsDeviceMigEnd();
extern ReturnStatus FsDeviceMigrate();
extern Boolean	    FsDeviceScavenge();
extern void	    FsDeviceClientKill();
extern ReturnStatus FsDeviceClose();

extern ReturnStatus FsRmtDeviceCltOpen();
extern FsHandleHeader *FsRmtDeviceVerify();
extern ReturnStatus FsRemoteIORelease();
extern ReturnStatus FsRemoteIOMigEnd();
extern ReturnStatus FsRmtDeviceMigrate();
extern ReturnStatus FsRmtDeviceReopen();
extern ReturnStatus FsRemoteIOClose();
d93 1
a93 1
extern ReturnStatus FsDeviceBlockIO();
d95 1
a95 1
#endif /* _FSDEVICE */
@


8.6
log
@Added device driver open flags so that devices can stop the file 
system from locking and/or copying.
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.5 89/06/21 12:29:21 brent Exp Locker: mendel $ SPRITE (Berkeley)
d109 1
a109 1
#endif _FSDEVICE
@


8.5
log
@Added extern
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.4 89/05/31 10:11:58 mendel Exp Locker: brent $ SPRITE (Berkeley)
d46 1
@


8.4
log
@Fixed include
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.3 89/05/10 11:30:37 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d78 1
@


8.3
log
@*** empty log message ***
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.2 89/02/04 14:12:42 brent Exp $ SPRITE (Berkeley)
d29 1
a29 1
#include "../dev.new/devFsOpTable.h"
@


8.2
log
@Tidied up the Device IO Handle
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.1 89/01/30 09:22:44 brent Exp $ SPRITE (Berkeley)
d29 1
a29 1
#include "devFsOpTable.h"
a30 18
/*
 * FsDeviceBlockIO --
 *	A device specific Block I/O routine is used to read or write
 *	filesystem blocks on a disk.  Its maps from filesystem
 *	block indexes to disk addresses and does the I/O.
 */
#define FsDeviceBlockIO(readWriteFlag, devicePtr, blockNumber, numBlocks, buf) \
	(*devFsBlockOpTable[(devicePtr)->type].readWrite) \
	(readWriteFlag, devicePtr, blockNumber, numBlocks, buf)
#ifdef comment
    int readWriteFlag;		/* FS_READ or FS_WRITE */
    Fs_Device *devicePtr;	/* Specifies device type to do I/O with */
    int blockNumber;		/* CAREFUL, fragment index, not block index.
				 * This is relative to start of device. */
    int numBlocks;		/* CAREFUL, number of fragments, not blocks */
    Address buf;		/* I/O buffer */
#endif comment

d104 2
@


8.1
log
@Changed scavenge routine to a Boolean
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 8.0 88/11/11 18:20:41 douglis Stable Locker: brent $ SPRITE (Berkeley)
d71 2
a72 3
    Boolean	readNotifyScheduled;	/* Used to optimize out notifies; */
    Boolean	writeNotifyScheduled;	/*  important for serial lines, etc. */
} FsDeviceIOHandle;			/* 88 BYTES */
@


8.0
log
@Changing version numbers.
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 7.0 88/11/07 14:47:16 brent Exp Locker: douglis $ SPRITE (Berkeley)
d112 1
a112 1
extern void	    FsDeviceScavenge();
a117 4
extern ReturnStatus FsRmtDeviceRead();
extern ReturnStatus FsRmtDeviceWrite();
extern ReturnStatus FsRmtDeviceIOControl();
extern ReturnStatus FsRmtDeviceSelect();
a121 1
extern void	    FsRmtDeviceScavenge();
@


7.0
log
@New version for conversion to new C library
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 6.3 88/10/19 13:12:24 brent Exp Locker: brent $ SPRITE (Berkeley)
@


6.3
log
@Changed MigStart routine to Release
@
text
@d18 1
a18 1
 * $Header: /sprite/src/kernel/fs/RCS/fsDevice.h,v 6.2 88/10/14 12:16:29 brent Exp Locker: brent $ SPRITE (Berkeley)
@


6.2
log
@FsFileID FsUserID change
@
text
@d18 1
a18 1
 * $Header: fsDevice.h,v 6.1 88/09/15 17:54:06 brent Exp $ SPRITE (Berkeley)
d109 1
a109 1
extern ReturnStatus FsDeviceMigStart();
d122 1
a122 1
extern ReturnStatus FsRemoteIOMigStart();
@


6.1
log
@Added ownership list to FsLockState for crash recovery
@
text
@d18 1
a18 1
 * $Header: fsDevice.h,v 6.0 88/08/11 12:16:37 brent Stable $ SPRITE (Berkeley)
d89 1
a89 1
    FsFileID	streamID;	/* Used to set up client list */
@


6.0
log
@Changing version numbers.
@
text
@d18 1
a18 1
 * $Header: fsDevice.h,v 1.3 88/08/03 17:20:33 mlgray Exp $ SPRITE (Berkeley)
d73 1
a73 1
} FsDeviceIOHandle;			/* 80 BYTES */
@


1.3
log
@works on Spur.
@
text
@d18 1
a18 1
 * $Header: fsDevice.h,v 1.2 88/06/04 12:11:40 brent Exp $ SPRITE (Berkeley)
@


1.2
log
@Put in checking against the device number so new devices don't crash
the kernel
@
text
@d18 1
a18 1
 * $Header: fsDevice.h,v 1.1 88/04/05 13:59:02 brent Exp $ SPRITE (Berkeley)
d27 1
a27 16
 * Device types:
 *
 *	FS_DEV_CONSOLE		The console - basic character input/output
 *	FS_DEV_SYSLOG		The system log device
 *	FS_DEV_KEYBOARD		Keyboard
 *	FS_DEV_SCSI_DISK	Disk on the SCSI bus
 *	FS_DEV_SCSI_TAPE	Tape drive on the SCSI bus
 *	FS_DEV_MEMORY		Null device and kernel memory area.
 *	FS_DEV_XYLOGICS		Xylogics 450 controller
 *	FS_DEV_NET		Raw ethernet device - unit number is protocol.
 *	FS_DEV_SBC_DISK		Disk on Sun's "SCSI-3" host adaptor.
 *
 * NOTE: These numbers correspond to the major numbers for the devices
 * in /dev. Do not change them unless you redo makeDevice for all the devices
 * in /dev.
 *
d29 1
a30 11
#define	FS_DEV_CONSOLE		0
#define	FS_DEV_SYSLOG		1
#define	FS_DEV_KEYBOARD		2
#define	FS_DEV_PLACEHOLDER_2	3
#define	FS_DEV_SCSI_DISK	4
#define	FS_DEV_SCSI_TAPE	5
#define	FS_DEV_MEMORY		6
#define	FS_DEV_XYLOGICS		7
#define	FS_DEV_NET		8
#define FS_DEV_SBC_DISK		9

a31 29
 * Device type specific operations.
 *	The arguments to the operations are commented below the
 *	macro definitions used to invoke them.
 */

typedef struct FsDeviceTypeOps {
    int		 type;	/* One of the device types. */
    ReturnStatus (*open)();
    ReturnStatus (*read)();
    ReturnStatus (*write)();
    ReturnStatus (*ioControl)();
    ReturnStatus (*close)();
    ReturnStatus (*select)();
} FsDeviceTypeOps;

extern FsDeviceTypeOps fsDeviceOpTable[];
extern int fsNumDevices;

/*
 * The filesystem device block I/O operation switch.
 */
typedef struct FsBlockOps {
    int 	deviceType;		/* Redundant device type info */
    ReturnStatus (*readWrite)();	/* Block read/write routine */
} FsBlockOps;

extern FsBlockOps fsBlockOpTable[];

/*
d38 1
a38 1
	(*fsBlockOpTable[(devicePtr)->type].readWrite) \
d81 10
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 * $Header: fsDevice.h,v 1.1 88/04/04 10:31:30 brent Exp $ SPRITE (Berkeley)
d36 2
d54 1
d73 1
@
