head     9.2;
branch   ;
access   ;
symbols  sun4nw:9.2 symm:9.2 spur:9.2 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.2
date     91.07.26.17.02.35;  author shirriff;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.30.20.50.20;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.54.51;  author douglis;  state Stable;
branches ;
next     1.3;

1.3
date     89.07.26.20.35.34;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     89.07.24.19.52.50;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.20.11.30.08;  author nelson;  state Exp;
branches ;
next     ;


desc
@@


9.2
log
@Large install for unix compatibility
@
text
@/* 
 * signals.c --
 *
 *	Procedure to map from Unix signal system calls to Sprite.
 *
 *
 * Copyright (C) 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds3100.md/RCS/signals.c,v 9.1 89/10/30 20:50:20 rab Exp Locker: rab $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "sig.h"
#include "status.h"

#include "compatInt.h"
#include "user/sys/signal.h"
#include "machInt.h"
#include "mach.h"
#include "machConst.h"

extern Mach_State	*machCurStatePtr;


/*
 *----------------------------------------------------------------------
 *
 * sigvec --
 *
 *	Procedure to map from Unix sigvec system call to Sprite Sig_SetAction.
 *
 * Results:
 *	Error code is returned upon error.  Otherwise SUCCESS is returned.
 *
 * Side effects:
 *	The signal handler associated with the specified signal is modified.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
MachUNIXSigvec(sig, newVectorPtr, oldVectorPtr)
    int 		sig;		/* Signal to set the vector for. */
    struct sigvec	*newVectorPtr;	/* New vector. */
    struct sigvec	*oldVectorPtr;	/* Old vector. */
{
    int 		spriteSignal;	/* Equivalent signal for Sprite */
    Sig_Action 		newAction;	/* Action to take */
    Sig_Action		*newActionPtr;
    Sig_Action 		oldAction;	/* Former action */
    Sig_Action		*oldActionPtr;
    ReturnStatus 	status;		/* Generic result code */
    Address		usp;
    struct sigvec newVector;
    struct sigvec oldVector;

    usp = (Address)machCurStatePtr->userState.regState.regs[SP];
    newActionPtr = (Sig_Action *)(usp - sizeof(Sig_Action));
    oldActionPtr = (Sig_Action *)(usp - 2 * sizeof(Sig_Action));

    status = Compat_UnixSignalToSprite(sig, &spriteSignal);
    if (status == FAILURE || spriteSignal == NULL) {
	return(SYS_INVALID_ARG);
    }

    if (newVectorPtr != (struct sigvec *)NULL) {
	status = Vm_CopyIn(sizeof(struct sigvec), (Address)newVectorPtr,
			   (Address)&newVector);
	if (status != SUCCESS) {
	    return(status);
	}
	switch ((int)newVector.sv_handler) {
	    case SIG_DFL:
		newAction.action = SIG_DEFAULT_ACTION;
		break;
	    case SIG_IGN:
		newAction.action = SIG_IGNORE_ACTION;
		break;
	    default:
		newAction.action = SIG_HANDLE_ACTION;
		newAction.handler = (int(*)())newVector.sv_handler;
	}
	status = Compat_UnixSigMaskToSprite(newVector.sv_mask,
					    &newAction.sigHoldMask);
	if (status == FAILURE) {
	    return(SYS_INVALID_ARG);
	}

	status = Vm_CopyOut(sizeof(Sig_Action), (Address)&newAction,
			    (Address)newActionPtr);
	if (status != SUCCESS) {
	    return(status);
	}
	status = Sig_SetAction(spriteSignal, newActionPtr, oldActionPtr);
	if (status != SUCCESS) {
	    return(status);
	} 
    }

    if (oldVectorPtr != NULL) {
	(void)Vm_CopyIn(sizeof(Sig_Action), (Address)oldActionPtr, 
			(Address)&oldAction);
	switch (oldAction.action) {
	    case SIG_DEFAULT_ACTION:
		oldVector.sv_handler = SIG_DFL;
		break;
	    case SIG_IGNORE_ACTION:
		oldVector.sv_handler = SIG_IGN;
		break;
	    default:
		oldVector.sv_handler = (void(*)())oldActionPtr->handler;
		break;
	}
	(void) Compat_SpriteSigMaskToUnix(oldAction.sigHoldMask, 
					  &oldVector.sv_mask);
	oldVector.sv_flags = 0;
	status = Vm_CopyOut(sizeof(oldVector), (Address)&oldVector,
			    (Address)oldVectorPtr);
	if (status != SUCCESS) {
	    return(status);
	}
    }

    return(SUCCESS);
}


/*
 *----------------------------------------------------------------------
 *
 * sigblock --
 *
 *	Procedure to map from Unix sigblock system call to Sprite 
 *	Sig_SetHoldMask.
 *
 * Results:
 *	Error code is returned upon error.  Otherwise SUCCESS is returned.
 *
 * Side effects:
 *	The current signal mask is modified.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
MachUNIXBlock(mask)
    int mask;			/* additional bits to mask */
{
    int spriteMask = 0;		/* equivalent mask for Sprite */
    int oldSpriteMask;		/* old mask, in Sprite terms */
    ReturnStatus status;	/* generic result code */

    status = Compat_UnixSigMaskToSprite(mask,&spriteMask);
    if (status == FAILURE) {
	return(SYS_INVALID_ARG);
    }
    status = Compat_GetSigHoldMask(&oldSpriteMask);
    if (status == FAILURE) {
	return(SYS_INVALID_ARG);
    }
    status = Sig_SetHoldMask(spriteMask | oldSpriteMask, (int *) NULL);
    if (status != SUCCESS) {
	return(status);
    } else {
	status = Compat_SpriteSigMaskToUnix(oldSpriteMask, 
					&machCurStatePtr->userState.unixRetVal);
	if (status == FAILURE) {
	    return(SYS_INVALID_ARG);
	}
	return(SUCCESS);
    }
}



/*
 *----------------------------------------------------------------------
 *
 * sigsetmask --
 *
 *	Procedure to map from Unix sigsetmask system call to Sprite 
 *	Sig_SetHoldMask.
 *
 * Results:
 *	Error code is returned upon error.  Otherwise SUCCESS is returned.
 *
 * Side effects:
 *	The current signal mask is modified.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
MachUNIXSigSetmask(mask)
    int mask;			/* new mask */
{
    int spriteMask = 0;		/* equivalent mask for Sprite */
    int oldSpriteMask;		/* old mask, in Sprite terms */
    ReturnStatus status;	/* generic result code */
    Address usp;

    status = Compat_UnixSigMaskToSprite(mask,&spriteMask);
    if (status == FAILURE) {
	return(SYS_INVALID_ARG);
    }
    usp = (Address)(machCurStatePtr->userState.regState.regs[SP] - 4);
    status = Sig_SetHoldMask(spriteMask, (int *)usp);
    if (status != SUCCESS) {
	return(status);
    } else {
	(void)Vm_CopyIn(sizeof(oldSpriteMask), usp, (Address)&oldSpriteMask);
	status = Compat_SpriteSigMaskToUnix(oldSpriteMask,
				    &machCurStatePtr->userState.unixRetVal);
	if (status == FAILURE) {
	    return(SYS_INVALID_ARG);
	}
	return(SUCCESS);
    }
}



/*
 *----------------------------------------------------------------------
 *
 * sigpause --
 *
 *	Procedure to map from Unix sigsetmask system call to Sprite 
 *	Sig_SetHoldMask.
 *
 * Results:
 *	Error code is returned upon error.  Otherwise SUCCESS is returned.
 *
 * Side effects:
 *	The current signal mask is modified.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
MachUNIXSigPause(mask)
    int mask;			/* new mask */
{
    int spriteMask = 0;		/* equivalent mask for Sprite */
    ReturnStatus status;	/* generic result code */

    status = Compat_UnixSigMaskToSprite(mask,&spriteMask);
    if (status == FAILURE) {
	return(SYS_INVALID_ARG);
    }
    status = Sig_Pause(spriteMask);
    if (status != SUCCESS) {
	return(status);
    } else {
	return(GEN_ABORTED_BY_SIGNAL);
    }
}


/*
 *----------------------------------------------------------------------
 *
 * sigstack --
 *
 *	Procedure to fake the Unix sigstack system call.
 *
 * Results:
 *	Error code is returned upon error.  Otherwise SUCCESS is returned.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
/*ARGSUSED*/
ReturnStatus
MachUNIXSigStack(ss, oss)
    struct sigstack *ss, *oss;
{
    struct sigstack oldStack;
    if (oss != NULL) {
	oldStack.ss_sp = 0;
	oldStack.ss_onstack = 0;
	return(Vm_CopyOut(sizeof(struct sigstack), (Address)&oldStack,
			  (Address)oss));
    }
    return(SUCCESS);
}

@


9.1
log
@fixed lint stuff.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds3100.md/RCS/signals.c,v 9.0 89/09/12 14:54:51 douglis Stable Locker: rab $ SPRITE (Berkeley)";
d83 1
a83 1
		newAction.handler = newVector.sv_handler;
d113 1
a113 1
		oldVector.sv_handler = oldActionPtr->handler;
@


9.0
log
@Changing version numbers.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds3100.md/RCS/signals.c,v 1.3 89/07/26 20:35:34 nelson Exp Locker: douglis $ SPRITE (Berkeley)";
d276 1
@


1.3
log
@Fixed lint errors.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds3100.md/RCS/signals.c,v 1.2 89/07/24 19:52:50 nelson Exp $ SPRITE (Berkeley)";
@


1.2
log
@Optimized UNIX compatible system calls.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds3100.md/RCS/signals.c,v 1.1 89/07/20 11:30:08 nelson Exp Locker: nelson $ SPRITE (Berkeley)";
a152 1
    int oldMask = 0;		/* old mask, in Unix terms */
a199 1
    int oldMask = 0;		/* old mask, in Unix terms */
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: signals.c,v 1.2 89/07/19 19:19:50 mnelson Exp $ SPRITE (Berkeley)";
d44 1
a44 2
MachUNIXSigvec(retValPtr, sig, newVectorPtr, oldVectorPtr)
    int			*retValPtr;
d148 1
a148 2
MachUNIXBlock(retValPtr, mask)
    int	*retValPtr;
d168 2
a169 1
	status = Compat_SpriteSigMaskToUnix(oldSpriteMask, retValPtr);
d196 1
a196 2
MachUNIXSigSetmask(retValPtr, mask)
    int *retValPtr;
d215 2
a216 1
	status = Compat_SpriteSigMaskToUnix(oldSpriteMask, retValPtr);
d244 1
a244 2
MachUNIXSigPause(retValPtr, mask)
    int *retValPtr;
d279 1
a279 2
MachUNIXSigStack(retValPtr, ss, oss)
    int	*retValPtr;
@
