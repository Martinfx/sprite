head     8.3;
branch   ;
access   ;
symbols  symm:8.3 spur:8.3 newlib:8.0;
locks    ; strict;
comment  @ * @;


8.3
date     89.09.11.12.25.07;  author douglis;  state Exp;
branches ;
next     8.2;

8.2
date     89.08.17.17.25.39;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     89.08.01.20.39.45;  author jhh;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.06.48;  author douglis;  state Stable;
branches ;
next     1.2;

1.2
date     88.11.11.15.36.40;  author mendel;  state Exp;
branches ;
next     1.1;

1.1
date     88.10.21.17.11.51;  author mendel;  state Exp;
branches ;
next     ;


desc
@@


8.3
log
@cleaned up some lint
@
text
@/* 
 * machMigrate.c --
 *
 *     	Machine dependent code to support process migration.  These routines
 *     	encapsulate and deencapsulate the machine-dependent state of a
 *	process and set up the state of the process on its new machine.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/mach/spur.md/RCS/machMigrate.c,v 8.2 89/08/17 17:25:39 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "machConst.h"
#include "machInt.h"
#include "mach.h"
#include "machMon.h"
#include "sched.h"
#include "procMigrate.h"

/*
 * The information that is transferred between two machines.
 */
typedef struct {
    Mach_UserState userState;	/* the contiguous machine-dependent
				 * user state. */
    int	pc[2];			/* PC's at which to resume execution. */
} MigratedState;


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_EncapState --
 *
 *	Copy the machine-dependent information for a process into
 *	a buffer.  The buffer passed to the routine must contain space for
 *	a MigratedState structure, the size of which is accessible via 
 *	another procedure.  
 *
 * Results:
 *	The buffer is filled with the user state and PC of the process.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
/* ARGSUSED */
ReturnStatus
Mach_EncapState(procPtr, hostID, infoPtr, buffer)
    register Proc_ControlBlock 	*procPtr;  /* The process being migrated */
    int hostID;				   /* host to which it migrates */
    Proc_EncapInfo *infoPtr;		   /* area w/ information about
					    * encapsulated state */
    Address buffer;			   /* Pointer to allocated buffer */
{
    return(GEN_NOT_IMPLEMENTED);
}    
    

/*
 * ----------------------------------------------------------------------------
 *
 * Mach_DeencapState --
 *
 *	Copy the machine-dependent information for a process from
 *	a buffer.  The buffer passed to the routine must contain
 *	a MigratedState structure created by Mach_EncapState on the
 *	machine starting a migration.  
 *
 * Results:
 *	The user state and PC of the process are initialized from the
 *	encapsulated information, and the other standard process
 *	initialization operations are performed (by the general initialization
 *	procedure).
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
/* ARGSUSED */
ReturnStatus
Mach_DeencapState(procPtr, infoPtr, buffer)
    register Proc_ControlBlock 	*procPtr; /* The process being migrated */
    Proc_EncapInfo *infoPtr;		  /* information about the buffer */
    Address buffer;			  /* buffer containing data */
{
    return(GEN_NOT_IMPLEMENTED);
}    
    


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_GetEncapSize --
 *
 *	Return the size of the encapsulated machine-dependent data.
 *
 * Results:
 *	The size of the migration information structure.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 *
 */

int
Mach_GetEncapSize()
{
    return(sizeof(MigratedState));
}


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_CanMigrate --
 *
 *	Indicate whether a process's state is in a form suitable for
 *	starting a migration.
 *
 * Results:
 *	TRUE if we can migrate using this state, FALSE otherwise.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
/* ARGSUSED */
Boolean
Mach_CanMigrate(procPtr)
    Proc_ControlBlock *procPtr;		/* pointer to process to check */
{
    return(FALSE);
}

/*
 *----------------------------------------------------------------------
 *
 * Mach_GetLastSyscall --
 *
 *	Return the number of the last system call performed for the current
 *	process.
 *
 * Results:
 *	The system call number is returned.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
Mach_GetLastSyscall()
{
    return 0;
}

@


8.2
log
@now uses Fmt_Convert
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/spur.md/RCS/machMigrate.c,v 8.1 89/08/01 20:39:45 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d58 8
a65 4
void
Mach_EncapState(procPtr, buffer)
    Proc_ControlBlock *procPtr;		/* pointer to process to encapsulate */
    Address buffer;			/* area in which to encapsulate it */
d67 1
a67 8
    Mach_State *machStatePtr = procPtr->machStatePtr;
    MigratedState *migPtr = (MigratedState *) buffer;
    
    bcopy( (Address) &machStatePtr->userState,
	      (Address) &migPtr->userState, sizeof(Mach_UserState));
#ifdef notdef
    migPtr->pc = machStatePtr->userState.excStackPtr->pc;
#endif
d92 1
a92 1
/*ARGSUSED*/
d94 4
a97 3
Mach_DeencapState(procPtr, buffer)
    Proc_ControlBlock *procPtr;		/* pointer to process to initialize */
    Address buffer;			/* area from which to get state */
d99 1
a99 23
#ifdef notdef
    MigratedState *migPtr = (MigratedState *) buffer;
    ReturnStatus status;
#endif

    /*
     * This procedure relies on the fact that Mach_SetupNewState
     * only looks at the Mach_UserState part of the Mach_State structure
     * it is given.  Therefore, we can coerce the pointer to a Mach_State
     * pointer and give it to Mach_UserState to get registers & such.
     */

#ifdef notdef
    status = Mach_SetupNewState(procPtr, (Mach_State *) &migPtr->userState,
				Proc_ResumeMigProc, migPtr->pc, TRUE);
    return(status);
#else notdef
#ifdef lint
    procPtr = procPtr;
#endif lint    
    return(FAILURE);
#endif notdef

@


8.1
log
@added a stub for some migration related call
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/spur.md/RCS/machMigrate.c,v 1.2 88/11/11 15:36:40 mendel Exp $ SPRITE (Berkeley)";
a25 1
#include "mem.h"
@


8.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/spur.md/RCS/machMigrate.c,v 1.2 88/11/11 15:36:40 mendel Exp Locker: douglis $ SPRITE (Berkeley)";
d176 24
@


1.2
log
@Changes for multiprocessor, ibuffer, and new libc.a.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/spur.md/RCS/machMigrate.c,v 1.1 88/10/21 17:11:51 mendel Exp Locker: mendel $ SPRITE (Berkeley)";
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: machMigrate.c,v 1.1 88/07/07 11:14:58 douglis Exp $ SPRITE (Berkeley)";
a29 1
#include "byte.h"
d67 2
a68 2
    Byte_Copy(sizeof(Mach_UserState), (Address) &machStatePtr->userState,
	      (Address) &migPtr->userState);
@
