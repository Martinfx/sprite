head     9.2;
branch   ;
access   ;
symbols  ds3100:9.2 sun3:9.2 sun4nw:9.2 symm:9.2 spur:9.2 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.2
date     91.09.10.18.17.19;  author rab;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.30.20.49.02;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.52.18;  author douglis;  state Stable;
branches ;
next     8.7;

8.7
date     89.09.11.23.43.46;  author rab;  state Exp;
branches ;
next     8.6;

8.6
date     89.09.08.11.30.50;  author douglis;  state Exp;
branches ;
next     8.5;

8.5
date     89.08.03.23.11.21;  author rab;  state Exp;
branches ;
next     8.4;

8.4
date     89.07.31.17.56.04;  author douglis;  state Exp;
branches ;
next     8.3;

8.3
date     89.04.06.11.54.37;  author douglis;  state Exp;
branches ;
next     8.2;

8.2
date     89.01.05.15.37.13;  author douglis;  state Exp;
branches ;
next     8.1;

8.1
date     88.12.04.14.03.43;  author ouster;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.04.58;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.11.07.14.16.22;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.27.19.34.04;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.10.12;  author brent;  state Stable;
branches ;
next     1.3;

1.3
date     88.08.10.16.58.42;  author douglis;  state Exp;
branches ;
next     1.2;

1.2
date     88.07.26.11.00.46;  author douglis;  state Exp;
branches ;
next     1.1;

1.1
date     88.07.07.11.14.58;  author douglis;  state Exp;
branches 1.1.2.1;
next     ;

1.1.2.1
date     88.07.26.10.59.58;  author douglis;  state Exp;
branches ;
next     ;


desc
@Routines for machine-dependent portions of process migration (state
encapsulation and de-encapsulation).
@


9.2
log
@Fixed lint errors and removed tracing.
@
text
@/* 
 * machMigrate.c --
 *
 *     	Machine dependent code to support process migration.  These routines
 *     	encapsulate and deencapsulate the machine-dependent state of a
 *	process and set up the state of the process on its new machine.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 9.1 89/10/30 20:49:02 rab Exp Locker: rab $ SPRITE (Berkeley)";
#endif /* not lint */

#include "sprite.h"
#include "stdio.h"
#include "machConst.h"
#include "machInt.h"
#include "mach.h"
#include "machMon.h"
#include "sched.h"
#include "procMigrate.h"

/*
 * The information that is transferred between two machines.
 */
typedef struct {
    Mach_UserState userState;		/* The contiguous machine-dependent
					 * user state. */
    int	pc;				/* PC at which to resume execution. */
} MigratedState;


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_EncapState --
 *
 *	Copy the machine-dependent information for a process into
 *	a buffer.  The buffer passed to the routine must contain space for
 *	a MigratedState structure, the size of which is accessible via 
 *	another procedure.  
 *
 * Results:
 *  	SUCCESS.
 *	The buffer is filled with the user state and PC of the process.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
/* ARGSUSED */
ReturnStatus
Mach_EncapState(procPtr, hostID, infoPtr, buffer)
    register Proc_ControlBlock 	*procPtr;  /* The process being migrated */
    int hostID;				   /* host to which it migrates */
    Proc_EncapInfo *infoPtr;		   /* area w/ information about
					    * encapsulated state */
    Address buffer;			   /* Pointer to allocated buffer */
{
    Mach_State *machStatePtr = procPtr->machStatePtr;
    MigratedState *migPtr = (MigratedState *) buffer;

    bcopy((Address) &machStatePtr->userState, (Address) &migPtr->userState,
	    sizeof(Mach_UserState));
    migPtr->pc = machStatePtr->userState.excStackPtr->pc;
    return(SUCCESS);
}    
    

/*
 * ----------------------------------------------------------------------------
 *
 * Mach_DeencapState --
 *
 *	Copy the machine-dependent information for a process from
 *	a buffer.  The buffer passed to the routine must contain
 *	a MigratedState structure created by Mach_EncapState on the
 *	machine starting a migration.  
 *
 * Results:
 *	The user state and PC of the process are initialized from the
 *	encapsulated information, and the other standard process
 *	initialization operations are performed (by the general initialization
 *	procedure).  The status from that procedure is returned.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
/* ARGSUSED */
ReturnStatus
Mach_DeencapState(procPtr, infoPtr, buffer)
    register Proc_ControlBlock 	*procPtr; /* The process being migrated */
    Proc_EncapInfo *infoPtr;		  /* information about the buffer */
    Address buffer;			  /* buffer containing data */
{
    MigratedState *migPtr = (MigratedState *) buffer;
    ReturnStatus status;

    if (infoPtr->size != sizeof(MigratedState)) {
	if (proc_MigDebugLevel > 0) {
	    printf("Mach_DeencapState: warning: host %d tried to migrate",
		procPtr->peerHostID);
	    printf(" onto this host with wrong structure size.");
	    printf("  Ours is %d, theirs is %d.\n",
		sizeof(MigratedState), infoPtr->size);
	}
	return(PROC_MIGRATION_REFUSED);
    }

#ifdef sun3
    if (migPtr->userState.trapFpuState.version != 0) {
	if (mach68881Present == FALSE) {
	    /*
	     *  This machine has no fpu, and this process needs one.
	     *  So we can't accept it.
	     */
	    printf("Mach_DeencapState: warning: host %d tried to migrate",
		procPtr->peerHostID);
	    printf(" a process that uses the fpu.  This host has no fpu.\n");
	    return PROC_MIGRATION_REFUSED;
	}
	if (migPtr->userState.trapFpuState.state != MACH_68881_IDLE_STATE) {
	    printf("Mach_DeencapState: warning: host %d tried to migrate",
		procPtr->peerHostID);
	    printf(" a process with a non-idle fpu onto this host.  ");
	    printf("The fpu was in state 0x%02x\n",
		migPtr->userState.trapFpuState.state);
	    return PROC_MIGRATION_REFUSED;
	}
	if (migPtr->userState.trapFpuState.version != mach68881Version) {
	    /*
	     *  The sending host has a different version of the
	     *  mc68881 fpu.  The state frames are incompatible
	     *  between versions.  But since it is in idle state
	     *  we can just use a generic idle state frame, rather
	     *  than the one we were sent.
	     */
	    migPtr->userState.trapFpuState = mach68881IdleState;
	}
    }
#endif

    /*
     * Get rid of the process's old machine-dependent state if it exists.
     */
    if (procPtr->machStatePtr != (Mach_State *) NIL) {
	Mach_FreeState(procPtr);
    }

    /*
     * This procedure relies on the fact that Mach_SetupNewState
     * only looks at the Mach_UserState part of the Mach_State structure
     * it is given.  Therefore, we can coerce the pointer to a Mach_State
     * pointer and give it to Mach_UserState to get registers & such.
     */

    status = Mach_SetupNewState(procPtr, (Mach_State *) &migPtr->userState,
				Proc_ResumeMigProc, (Address)migPtr->pc, TRUE);
    return(status);
}    
    


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_GetEncapSize --
 *
 *	Return the size of the encapsulated machine-dependent data.
 *
 * Results:
 *	SUCCESS is returned directly; the size of the encapsulated state
 *	is returned in infoPtr->size.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 *
 */

/* ARGSUSED */
ReturnStatus
Mach_GetEncapSize(procPtr, hostID, infoPtr)
    Proc_ControlBlock *procPtr;			/* process being migrated */
    int hostID;					/* host to which it migrates */
    Proc_EncapInfo *infoPtr;			/* area w/ information about
						 * encapsulated state */
{
    infoPtr->size = sizeof(MigratedState);
    return(SUCCESS);
}


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_CanMigrate --
 *
 *	Indicate whether a process's trapstack is in a form suitable for
 *	starting a migration.
 *
 * Results:
 *	TRUE if we can migrate using this trapstack, FALSE otherwise.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
Boolean
Mach_CanMigrate(procPtr)
    Proc_ControlBlock *procPtr;		/* pointer to process to check */
{
    Boolean okay;

    okay = TRUE;

#ifdef sun3
    /*
     *  If the floating point state is busy, that means that a
     *  floating point instruction is suspended, waiting to be
     *  restarted.  It cannot be restarted on a machine with another
     *  version of the chip, since the microcode is incompatible between
     *  revisions.  So we will delay the migration until the instruction
     *  completes.
     */
    if (procPtr->machStatePtr->userState.trapFpuState.state >=
        MACH_68881_BUSY_STATE) {
	okay = FALSE;
    }
#endif

    if (proc_MigDebugLevel > 4) {
	printf("Mach_CanMigrate called. PC %x, stackFormat %x, returning %d.\n",
		   procPtr->machStatePtr->userState.excStackPtr->pc, okay);
    }
    return(okay);
}    


/*
 *----------------------------------------------------------------------
 *
 * Mach_GetLastSyscall --
 *
 *	Return the number of the last system call performed for the current
 *	process.
 *
 * Results:
 *	The system call number is returned.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
Mach_GetLastSyscall()
{
    Proc_ControlBlock *procPtr;		/* pointer to process to check */

    procPtr = Proc_GetCurrentProc();
    return(procPtr->machStatePtr->userState.lastSysCall);
}
@


9.1
log
@fixed lint stuff.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 9.0 89/09/12 14:52:18 douglis Stable Locker: rab $ SPRITE (Berkeley)";
d23 1
@


9.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 8.7 89/09/11 23:43:46 rab Exp Locker: douglis $ SPRITE (Berkeley)";
a224 1
    int stackFormat;
a228 11
#ifdef sun2
    /*
     * We have trouble getting the pc from the 68010 bus fault stack,
     * but it seems okay for others.
     */
    stackFormat = procPtr->machStatePtr->userState.excStackPtr->vor.stackFormat;
    if (stackFormat == MACH_MC68010_BUS_FAULT) {
	okay = FALSE;
    }
#endif

d246 1
a246 2
		   procPtr->machStatePtr->userState.excStackPtr->pc,
		   stackFormat, okay);
@


8.7
log
@Changes to fix floating point migration.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 8.6 89/09/08 11:30:50 douglis Exp Locker: rab $ SPRITE (Berkeley)";
@


8.6
log
@added check for bogus encap structure size
@
text
@d19 2
a20 2
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 8.5 89/08/03 23:11:21 rab Exp Locker: douglis $ SPRITE (Berkeley)";
#endif not lint
d111 5
a115 3
	    printf("Mach_DeencapState: warning: host %d tried to migrate onto this host with wrong structure size.  Ours is %d, theirs is %d.\n",
		   procPtr->peerHostID, sizeof(MigratedState),
		   infoPtr->size);
d119 34
d228 3
a230 2
    stackFormat = procPtr->machStatePtr->userState.excStackPtr->vor.stackFormat;
    okay = (stackFormat != MACH_MC68010_BUS_FAULT) ? TRUE : FALSE;
d235 21
d257 1
a257 1
	printf("Mach_CanMigrate called.  PC %x, stackFormat %x, returning %d.\n",
d263 1
a263 1
    
@


8.5
log
@Deleted include of "mem.h", which no longer exists.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 8.4 89/07/31 17:56:04 douglis Exp Locker: rab $ SPRITE (Berkeley)";
d34 1
a34 1
    Mach_UserState userState;		/* the contiguous machine-dependent
d70 1
a70 1
    
d109 8
@


8.4
log
@added Mach_GetLastSyscall
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 8.3 89/04/06 11:54:37 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
a25 1
#include "mem.h"
@


8.3
log
@changes for table-driven migration encapsulation.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machMigrate.c,v 8.2 89/01/05 15:37:13 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d199 26
@


8.2
log
@Get rid of the process's old machine-dependent state if it exists.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machMigrate.c,v 8.1 88/12/04 14:03:43 ouster Exp Locker: douglis $ SPRITE (Berkeley)";
d52 1
d60 8
a67 4
void
Mach_EncapState(procPtr, buffer)
    Proc_ControlBlock *procPtr;		/* pointer to process to encapsulate */
    Address buffer;			/* area in which to encapsulate it */
d75 1
d93 1
a93 1
 *	procedure).
d100 1
d102 4
a105 3
Mach_DeencapState(procPtr, buffer)
    Proc_ControlBlock *procPtr;		/* pointer to process to initialize */
    Address buffer;			/* area from which to get state */
d139 2
a140 1
 *	The size of the migration information structure.
d149 7
a155 2
int
Mach_GetEncapSize()
d157 2
a158 1
    return(sizeof(MigratedState));
@


8.1
log
@Don't include byte.h anymore:  not needed.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machMigrate.c,v 6.2 88/11/07 14:16:22 mlgray Exp $ SPRITE (Berkeley)";
d101 7
@


8.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machMigrate.c,v 6.2 88/11/07 14:16:22 mlgray Exp Locker: douglis $ SPRITE (Berkeley)";
a29 1
#include "byte.h"
@


6.2
log
@Converted to new C library.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machMigrate.c,v 6.1 88/08/27 19:34:04 nelson Exp Locker: mlgray $ SPRITE (Berkeley)";
@


6.1
log
@Fixed lint errors.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: machMigrate.c,v 1.3 88/08/10 16:58:42 douglis Exp $ SPRITE (Berkeley)";
d68 2
a69 2
    Byte_Copy(sizeof(Mach_UserState), (Address) &machStatePtr->userState,
	      (Address) &migPtr->userState);
d171 1
a171 1
	Sys_Printf("Mach_CanMigrate called.  PC %x, stackFormat %x, returning %d.\n",
@


6.0
log
@Changing version numbers.
@
text
@d30 1
d111 1
a111 1
				Proc_ResumeMigProc, migPtr->pc, TRUE);
@


1.3
log
@say it's okay to migrate iff stackFormat != MACH_MC68010_BUS_FAULT.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: machMigrate.c,v 1.2 88/07/26 11:00:46 douglis Exp $ SPRITE (Berkeley)";
@


1.2
log
@has Mach_CanMigrate to look at the stack.  This goes along with 
the change in machCode.c 5.20.2 for Sig_AllowMigration.
(Also checked in as 1.1.1)
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: machMigrate.c,v 1.1.1.1 88/07/26 10:33:21 douglis Exp $ SPRITE (Berkeley)";
d160 5
d166 2
a167 1
     * We can get the pc from the "short stack".
d170 3
a172 3
	Sys_Printf("Mach_CanMigrate called.  Returning %d.\n",
		   (procPtr->machStatePtr->userState.excStackPtr->vor.stackFormat
		   == MACH_SHORT) ? TRUE : FALSE);
d174 1
a174 6
    if (procPtr->machStatePtr->userState.excStackPtr->vor.stackFormat ==
	MACH_SHORT) {
	return(TRUE);
    } else {
	return(FALSE);
    }
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: machCode.c,v 5.15 88/06/25 20:01:56 ouster Exp $ SPRITE (Berkeley)";
d139 37
@


1.1.2.1
log
@calls Mach_SetupNewState with the excStack.  (note, Mach_SetupNewState
not yet modified to take this, which is why this is a branch.)
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: machMigrate.c,v 1.1 88/07/07 11:14:58 douglis Exp $ SPRITE (Berkeley)";
d37 1
a37 2
    Mach_ExcStack excStack;		/* the exception stack, pointed to
					 * by userState. */
d52 1
a52 1
 *	The buffer is filled with the user state of the process.
d69 1
a69 3
    Byte_Copy(sizeof(Mach_ExcStack),
	      (Address) machStatePtr->userState->excStackPtr,
	      (Address) &migPtr->excStack);
d84 2
a85 2
 *	The user state and exception stack of the process are initialized 
 *	from the encapsulated information, and the other standard process
a109 1
				(Mach_ExcStack *) &migPtr->excStack,
@
