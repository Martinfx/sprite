head     9.6;
branch   ;
access   ;
symbols  ds3100:9.6 sun3:9.6 sun4nw:9.5 symm:9.5 spur:9.5 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @# @;


9.6
date     92.06.17.13.23.59;  author jhh;  state Exp;
branches ;
next     9.5;

9.5
date     91.07.26.17.03.06;  author shirriff;  state Exp;
branches ;
next     9.4;

9.4
date     91.04.08.12.59.08;  author shirriff;  state Exp;
branches ;
next     9.3;

9.3
date     91.03.29.17.53.05;  author shirriff;  state Exp;
branches ;
next     9.2;

9.2
date     90.12.07.23.40.42;  author rab;  state Exp;
branches ;
next     9.1;

9.1
date     90.02.07.19.15.00;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.51.20;  author douglis;  state Stable;
branches ;
next     8.7;

8.7
date     89.09.11.23.43.19;  author rab;  state Exp;
branches ;
next     8.6;

8.6
date     89.07.26.09.22.47;  author ouster;  state Exp;
branches ;
next     8.5;

8.5
date     89.07.20.07.06.23;  author rab;  state Exp;
branches ;
next     8.4;

8.4
date     89.06.30.01.03.47;  author rab;  state Exp;
branches ;
next     8.3;

8.3
date     89.05.24.02.03.35;  author rab;  state Exp;
branches ;
next     8.2;

8.2
date     89.05.23.09.41.55;  author mendel;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.13.17.31.55;  author ouster;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.03.19;  author douglis;  state Stable;
branches ;
next     6.3;

6.3
date     88.11.11.14.51.20;  author mlgray;  state Exp;
branches ;
next     6.2;

6.2
date     88.11.07.14.24.52;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.24.17.51.25;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.09.20;  author brent;  state Stable;
branches ;
next     5.8;

5.8
date     88.07.17.19.37.02;  author nelson;  state Exp;
branches ;
next     5.7;

5.7
date     88.05.05.17.53.41;  author nelson;  state Exp;
branches ;
next     5.6;

5.6
date     88.05.04.16.39.41;  author nelson;  state Exp;
branches ;
next     5.5;

5.5
date     88.05.04.15.53.42;  author nelson;  state Exp;
branches ;
next     5.4;

5.4
date     88.04.13.11.24.50;  author ouster;  state Exp;
branches ;
next     5.3;

5.3
date     88.01.19.19.28.47;  author nelson;  state Exp;
branches ;
next     5.2;

5.2
date     87.12.11.14.16.43;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     87.08.21.13.16.43;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.50.05;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.6
log
@Magic number for returning SYS_INVALID_SYSTEM_CALL was wrong.
@
text
@|* machTrap.s -
|*
|*     Contains the trap handlers.
|*
|* Copyright (C) 1985 Regents of the University of California
|* All rights reserved.
|*

#include <machConst.h>
#include <machAsmDefs.h>
#include <user/status.h>

.data
.asciz "$Header: /sprite/src/kernel/Cvsroot/kernel/mach/sun3.md/machTrap.s,v 9.5 91/07/26 17:03:06 shirriff Exp $ SPRITE (Berkeley)"
.even
.text

|*
|* ----------------------------------------------------------------------------
|*
|* Trap handling --
|*
|*	Handle exceptions.  In all cases except kernel calls, call
|*	the C trap handler.  See the kernel call code below.
|*
|* Results:
|*	None.
|*
|* Side effects:
|*	None.
|*
|* ----------------------------------------------------------------------------
|*
	.globl	MachReset
MachReset:
	CallTrapHandler(MACH_RESET)

	.globl	MachBusError
MachBusError:
	CallTrapHandler(MACH_BUS_ERROR)

	.globl	MachAddrError
MachAddrError:
	CallTrapHandler(MACH_ADDRESS_ERROR)

	.globl	MachIllegalInst
MachIllegalInst:
	CallTrapHandler(MACH_ILLEGAL_INST)

	.globl	MachZeroDiv
MachZeroDiv:
	CallTrapHandler(MACH_ZERO_DIV)

	.globl	MachChkInst
MachChkInst:
	CallTrapHandler(MACH_CHK_INST)

	.globl	MachTrapv
MachTrapv:
	CallTrapHandler(MACH_TRAPV)

	.globl	MachPrivVio
MachPrivVio:
	CallTrapHandler(MACH_PRIV_VIOLATION)

	.globl	MachTraceTrap
MachTraceTrap:
	CallTrapHandler(MACH_TRACE_TRAP)

	.globl	MachEmu1010
MachEmu1010:
	CallTrapHandler(MACH_EMU1010)

	.globl	MachEmu1111
MachEmu1111:
	CallTrapHandler(MACH_EMU1111)

	.globl	MachFmtError	
MachFmtError:
	CallTrapHandler(MACH_STACK_FMT_ERROR)

	.globl	MachUninitVect
MachUninitVect:
	CallTrapHandler(MACH_UNINIT_VECTOR)

	.globl	MachSigRetTrap
MachSigRetTrap:
	CallTrapHandler(MACH_SIG_RET_TRAP)

	.globl	MachBadTrap
MachBadTrap:
	CallTrapHandler(MACH_BAD_TRAP)

	.globl	MachBrkptTrap
	.globl _MachBrkptTrap
_MachBrkptTrap:
MachBrkptTrap:
	CallTrapHandler(MACH_BRKPT_TRAP)

.globl MachFpUnorderedCond
MachFpUnorderedCond:
    CallTrapHandler(MACH_FP_UNORDERED_COND)

.globl MachFpInexactResult
MachFpInexactResult:
    CallTrapHandler(MACH_FP_INEXACT_RESULT)

.globl MachFpZeroDiv
MachFpZeroDiv:
    CallTrapHandler(MACH_FP_ZERO_DIV)

.globl MachFpUnderflow
MachFpUnderflow:
    CallTrapHandler(MACH_FP_UNDERFLOW)

.globl MachFpOperandError
MachFpOperandError:
    CallTrapHandler(MACH_FP_OPERAND_ERROR)

.globl MachFpOverflow
MachFpOverflow:
    CallTrapHandler(MACH_FP_OVERFLOW)

.globl MachFpNaN
MachFpNaN:
    CallTrapHandler(MACH_FP_NAN)



|*
|* ----------------------------------------------------------------------
|*
|* MachUnixSyscallTrap --
|*
|*	This is the code entered on Unix compatible system call traps.
|*	The code below is tuned to get into and out of kernel calls as
|*      fast as possible.
|*
|* Results:
|*	If the carry flag is clear, d0 contains the result of the system call.
|*      If the carry flag is set, the system call failed, and d0 contains
|*      the errno.
|*
|* Side effects:
|*	Depends on the kernel call.
|*
|* ----------------------------------------------------------------------
|*

    .globl MachUnixSyscallTrap
MachUnixSyscallTrap:

	|* Save the address registers we use, and the sp.
	|* We used to not save a0, a1, but the Sun longjmp code counts
	|* on a0 being preserved.
	movl	a0, sp@@-
	movl	a1, sp@@-
	movl	a2, sp@@-
	movl	a3, sp@@-
	movl	sp, a3

	movl	_machCurStatePtr, a0

	|* Save d0, because the Sigreturn system call needs it.
	|* (Boneheaded SunOS convention for that system call!)
	movl	d0, a0@@(MACH_TRAP_REGS_OFFSET + 0)


	|* Save the exc stack pointer since we need that too.
	|* We should probably use special handling for some of this.
	lea	sp@@(16), a1
	movl	a1, a0@@(MACH_EXC_STACK_PTR_OFFSET)
	|* Clear the carry bit to indicate no error.
	movw	a1@@, d0
	andw	#~0x1, d0
	movw	d0, a1@@

	|* Pop the call number into d0
	movc	usp, a1
	movl    a1@@+, d0
	movc    a1, usp

	|*
	|* Always save the user stack pointer because it can be needed
	|* while processing the system call.
	|*
	movl	a1, a0@@(MACH_USER_SP_OFFSET)

	|*
	|* Store this kernel call in the last kernel call variable.
	|*
	movl	d0, a0@@(MACH_LAST_SYS_CALL_OFFSET)

	|*
	|* If this is a fork kernel call, save the registers in the PCB.
	|* This is a hack, and should eventually go away by adding another
	|* parameter to fork, which gives the address of an area of
	|* memory containing the process' saved state.
	|*

	cmpl    #2, d0
	beqs	0f
	cmpl	#66, d0
	bnes	1f
0:
	moveml	#0xffff, a0@@(MACH_TRAP_REGS_OFFSET)
	movl	sp@@(0), a1	| a3
	movl	a1, a0@@(MACH_TRAP_REGS_OFFSET+48)
	movl	sp@@(4), a1	| a2
	movl	a1, a0@@(MACH_TRAP_REGS_OFFSET+44)
	movl	sp@@(8), a1	| a1
	movl	a1, a0@@(MACH_TRAP_REGS_OFFSET+40)
	movl	sp@@(12), a1	| a0
	movl	a1, a0@@(MACH_TRAP_REGS_OFFSET+32)

	SaveUserFpuState();

1:
	|*
	|* Check number of kernel call for validity.
	|*

	cmpl	_sysUnixNumSyscalls, d0
	bges     2f

	|*
	|* Copy the arguments from user space and push them onto the stack.
	|*

	lsll    #3, d0
	addl	#_sysUnixSysCallTable, d0
	movl    d0, a2
	movl    a2@@(4), d1
	movl    d1, sp@@-
	beqs    4f
	subql   #1, d1
	addl    #8, a1
	lsll    #2, d1
	addl    d1, a1
	lsrl    #2, d1

	|* Allow page faults in the copy-in.

	.globl _MachFetchArgs2
_MachFetchArgs2:
3:	
	movl	a1@@-, sp@@-
	dbra    d1, 3b
	.globl _MachFetchArgsEnd2
_MachFetchArgsEnd2:
4:
	movl    a2@@, a1
	jsr     a1@@

	|*
	|* Disable interrupts and see if any special processing must
	|* be done on the process.  Note:  this is checking the
	|* specialHandling field of the process control block, and depends
	|* on the fact that specialHandling follows immediately after the
	|* kcallTable field.
	|*

	movl	_machCurStatePtr, a0
	movl	a0@@(MACH_USER_SP_OFFSET), a2 | restore the (new) SP
	movc	a2, usp

	movl	_proc_RunningProcesses, a0
	movl	a0@@, a2			| d1 now has PCB address.
	addl	_machKcallTableOffset, a2
					| a2 now has address of kcallTable
					| field in PCB.
	movw	#0x2700, sr		| Disable interrupts.
	tstl	a2@@(4)			| Check specialHandling
	bnes    6f
5:
	movl    a3, sp
	movl    sp@@+, a3
	movl    sp@@+, a2
	movl    sp@@+, a1
	movl    sp@@+, a0
	cmpl    #-1, d0
	beqs    7f
	rte
7:
	movw	sp@@, d0		| Set the carry bit to indicate error
	orw	#0x1, d0
	movw	d0, sp@@
	movel	_proc_RunningProcesses,a0	| Move errno into d0
	movel	a0@@,a0
	movel	a0@@(MACH_UNIX_ERRNO_OFFSET),d0
	rte

2:
	movl    a3, sp
	movl    sp@@+, a3
	movl    sp@@+, a2
	movl    sp@@+, a1
	movl    sp@@+, a0
	movw	sp@@, d0		| Set the carry bit to indicate error
	orw	#0x1, d0
	movw	d0, sp@@
	movel   #22, d0		| Return EINVAL
	rte

6:
	|*
	|* Something's up with the process (context switch, maybe, or
	|* single-step mode?).  Restore the stack to what it was at
	|* the beginning of the kernel call, then go through a slow
	|* trap-processing procedure to take special action.
	|*
	|* We have to make sure we do the right thing with errno,
	|* even if special handling is set.
	|*

	movl	a3, sp			| Pop kcall args off stack.
	|*clrl	a2@@(4)
	movw	#0x2000, sr
	movl	sp@@+, a3
	movl	sp@@+, a2
	movl    sp@@+, a1
	movl    sp@@+, a0
	cmpl    #-1, d0
	beqs    7f
	CallTrapHandler(MACH_UNIX_SYSCALL_TRAP)
7:
	movw	sp@@, d0		| Set the carry bit to indicate error
	orw	#0x1, d0
	movw	d0, sp@@
	movel	_proc_RunningProcesses,a0	| Move errno into d0
	movel	a0@@,a0
	movel	a0@@(MACH_UNIX_ERRNO_OFFSET),d0
	CallTrapHandler(MACH_UNIX_SYSCALL_TRAP)


|*
|* ----------------------------------------------------------------------
|*
|* MachSyscallTrap --
|*
|*	This is the code entered on system call traps.  The code below
|*	is tuned to get into and out of kernel calls as fast as possible.
|*
|* Results:
|*	Returns a status to the caller in d0.
|*
|* Side effects:
|*	Depends on the kernel call.
|*
|* ----------------------------------------------------------------------
|*

	.globl _machMaxSysCall, _machKcallTableOffset, _machArgOffsets
	.globl _machArgDispatch, _machCurStatePtr
	.globl _sys_NumCalls, _proc_RunningProcesses
	.globl MachSyscallTrap
MachSyscallTrap:

	|*
	|* Always save the user stack pointer because it can be needed
	|* while processing the system call.
	|*
	movl	_machCurStatePtr, a0
	movc	usp, a1
	movl	a1, a0@@(MACH_USER_SP_OFFSET)

	|*
	|* If this is a fork kernel call, save the registers in the PCB.
	|* This is a hack, and should eventually go away by adding another
	|* parameter to fork, which gives the address of an area of
	|* memory containing the process' saved state.
	|*

	tstl	d0
	jne	1f
	moveml	#0xffff, a0@@(MACH_TRAP_REGS_OFFSET)
	movl	sp, a0@@(MACH_EXC_STACK_PTR_OFFSET)
	SaveUserFpuState();

	|*
	|* Save registers used here:  two address registers and sp.
	|*

1:	movl	a2, sp@@-
	movl	a3, sp@@-
	movl	sp, a3

	|*
	|* Check number of kernel call for validity.
	|*

	cmpl	_machMaxSysCall, d0
	jls	2f
	movl	#SYS_INVALID_SYSTEM_CALL, d0
	jra	return

2:
	|*
	|* Store this kernel call in the last kernel call variable.
	|*
	movl	d0, a0@@(MACH_LAST_SYS_CALL_OFFSET)

	|*
	|* Increment a count of the number of times this kernel call
	|* has been invoked.
	|*
	asll	#2, d0			| Used to index into tables.
	movl	#_sys_NumCalls, a0
	addql	#1, a0@@(0, d0:w)

	|*
	|* Copy the arguments from user space and push them onto the
	|* stack.  Note:  this code interacts heavily with the C code
	|* in Mach_InitSyscall().  If you change one, be sure to change
	|* the other.
	|*

	movc	usp, d1
	movl	#_machArgOffsets, a0
	addl	a0@@(0, d0:w), d1
	movl	d1, a0
	movl	#_machArgDispatch, a1
	movl	a1@@(0, d0:w), a1
	jmp	a1@@

	.globl _MachFetchArgs
_MachFetchArgs:
	movl	a0@@-, sp@@-		| 16 argument words.
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-		| 12 argument words.
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-		| 8 argument words.
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-		| 4 argument words.
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-
	movl	a0@@-, sp@@-

	.globl _MachFetchArgsEnd
_MachFetchArgsEnd:			| Marks last place where PC could be
					| when a page fault occurs while
					| fetching arguments.  Needed to
					| distinguish a page fault during
					| arg fetch (which is OK) from other
					| page faults in the kernel, which are
					| fatal errors.

	|*
	|* Find the location in the current process's control block
	|* of the trapFlags and kcallTable fields.  Then lookup the
	|* address of the kernel-call handling routine and invoke it.
	|*

	movl	_proc_RunningProcesses, a0
	movl	a0@@, d1			| d1 now has PCB address.
	addl	_machKcallTableOffset, d1
	movl	d1, a2			| a2 now has address of kcallTable
					| field in PCB.
	movl	a2@@, a0			| a0 points to 0th entry in table.
	movl	a0@@(0, d0:w), a1
	jsr	a1@@			| Dispatches to the top-level kernel
					| call procedure.

	|*
	|* Disable interrupts and see if any special processing must
	|* be done on the process.  Note:  this is checking the
	|* specialHandling field of the process control block, and depends
	|* on the fact that specialHandling follows immediately after the
	|* kcallTable field, whose address was loaded into a2 above.
	|*

	movl	a3, sp			| Pop kcall args off stack.
	movw	#0x2700, sr		| Disable interrupts.
	tstl	a2@@(4)
	jeq	return

	|*
	|* Something's up with the process (context switch, maybe, or
	|* single-step mode?).  Restore the stack to what it was at
	|* the beginning of the kernel call, then go through a slow
	|* trap-processing procedure to take special action.
	|*

	clrl	a2@@(4)
	movw	#0x2000, sr
	movl	sp@@+, a3
	movl	sp@@+, a2
	CallTrapHandler(MACH_SYSCALL_TRAP)

return:
	movl	sp@@+, a3
	movl	sp@@+, a2
	rte

/*
 *-------------------------------------------------------------------------
 *
 * MachReturnFromUserTrap --
 *
 *	Routine to return from a trap handler.  Called by CallTrapHandler
 *	macro after have returned from MachTrap.  The proper action is
 *	taken depending on the error code and then an rte to user space
 *	is performed.
 *
 *-------------------------------------------------------------------------
 */
	.globl MachReturnFromUserTrap
MachReturnFromUserTrap:

|*
|* Take proper action depending on the return code.
|*
        cmpl 	#MACH_OK, d0
        beq 	normReturn
	cmpl	#MACH_KERN_ERROR, d0
	beq	kernError
	cmpl	#MACH_SIG_RETURN, d0
	beq	sigReturn
|*
|* Bogus return code so trap to debugger.
|*
	jra 	_Dbg_Trap

sigReturn:
|*
|* Are returning from a signal handler.  First get pointer to
|* mach state structure.
|*
	movl	_machCurStatePtr, a0
|*
|* The saved stack pointer points to where the exception stack is to
|* be restored at.
|*
	movl	a0@@(MACH_TRAP_REGS_OFFSET + 60), sp
	movl	sp, a0@@(MACH_EXC_STACK_PTR_OFFSET)	
|*
|* Call bcopy((Address)excStack, (Address)sp, sizeof(excStack));
|*
	movl	sp, d0
	movl	a0@@(MACH_SIG_EXC_STACK_SIZE_OFFSET), sp@@-
	movl	d0, sp@@-
|*	movl	sp, sp@@-
	pea	a0@@(MACH_SIG_EXC_STACK_OFFSET)
	jsr	_bcopy
	addl	#12, sp
|*
|* Call the normal return from trap return MachUserReturn(procPtr, &excStack)
|* after enabling interrupts because they were disabled when we were called.
|*
	movw	#0x2000, sr
	movl	_proc_RunningProcesses, a0
	movl	a0@@, sp@@-
	jsr	_MachUserReturn
|*
|* Do a normal return.
|*
	jra	normReturn

kernError:
|*
|* Got a fatal kernel error.  First sync disks, then restore the registers so
|* that the debugger doesn't have to rely on being able to get registers from
|* the proc table and then move the stack pointer back so that the trap code
|* and bus error register are visible.
|*
	jsr	_Sys_SyncDisks
	RestoreUserFpuState()
	RestoreUserRegs()
	subl	#MACH_TRAP_INFO_SIZE, sp
	jra 	_Dbg_Trap

normReturn:
|*
|* Normal return from trap (no errors).
|*

	RestoreUserFpuState()
	RestoreUserRegs()
        rte


/*
 * ----------------------------------------------------------------------------
 *
 * RestoreKernRegs --
 *
 *      Restore the 4 saved temporary registers from the stack after moving
 *	the stack pointer past the trap code and bus error register.
 *
 * ----------------------------------------------------------------------------
 */
#define RestoreKernRegs() \
	addql	#8, sp; \
	moveml	sp@@+, #0x0303


/*
 *-------------------------------------------------------------------------
 *
 * MachReturnFromKernTrap --
 *
 *	Routine to return from a trap handler.  Called by CallTrapHandler
 *	macro after have returned from MachTrap.  The proper action is
 *	taken depending on the error code and then an rte to kern space
 *	is performed.
 *
 *-------------------------------------------------------------------------
 */
	.globl MachReturnFromKernTrap
MachReturnFromKernTrap:

|*
|* Take proper action depending on the return code.
|*
        cmpl 	#MACH_OK, d0
        beq 	kernNormReturn
	cmpl	#MACH_KERN_ERROR, d0
	beq	kernKernError
	cmpl	#MACH_USER_ERROR, d0
	beq	kernUserError

|*
|* Bogus return code so trap to debugger.
|*
	jra 	_Dbg_Trap

kernUserError:
|*
|* Got an error on a copy in from user space.  Blow away the
|* exception stack and return SYS_ARG_NOACCESS to the function doing the copy.
|* We have to compute the exception size of the exception stack from the
|* vector offset register.
|*
	RestoreKernRegs()
	clrl	d0
	movw	sp@@(6), d0		| D0 = VOR
	lsrl	#8, d0			| DO >> 12 to get to stack format
	lsrl	#4, d0
	cmpl	#MACH_MC68010_BUS_FAULT, d0
	bne	1f
	addl	#MACH_MC68010_BUS_FAULT_SIZE, sp
	bra	4f
1:	cmpl	#MACH_SHORT_BUS_FAULT, d0
	bne	2f
	addl	#MACH_SHORT_BUS_FAULT_SIZE, sp
	bra	4f
2:	cmpl	#MACH_LONG_BUS_FAULT, d0
	bne	3f
	addl	#MACH_LONG_BUS_FAULT_SIZE, sp
	bra	4f
3:	trap	#15

4:	movl	#0x20000, d0
	rts

kernKernError:
|*
|* Got a fatal kernel error.  First sync disks, then restore the registers so
|* that the debugger doesn't have to rely on being able to get registers from
|* the proc table and then move the stack pointer back so that the trap code
|* and bus error register are visible.
|*
	jsr	_Sys_SyncDisks
	RestoreKernRegs()
	subl	#MACH_TRAP_INFO_SIZE, sp
	jra 	_Dbg_Trap

kernNormReturn:
|*
|* Normal return from trap (no errors).
|*
	RestoreKernRegs()
        rte

@


9.5
log
@Large install for unix compatibility
@
text
@d9 3
a11 2
#include "machConst.h"
#include "machAsmDefs.h"
d14 1
a14 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 9.4 91/04/08 12:59:08 shirriff Exp $ SPRITE (Berkeley)"
d394 1
a394 1
	movl	#20002, d0
@


9.4
log
@Fixes to unix compatibility traps.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 9.3 91/03/29 17:53:05 shirriff Exp $ SPRITE (Berkeley)"
a261 1

d311 3
d316 1
a316 1
	clrl	a2@@(4)
d322 10
@


9.3
log
@Made changes to the Unix system call handler: saving registers, etc.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 9.2 90/12/07 23:40:42 rab Exp $ SPRITE (Berkeley)"
a160 4
	|*
	|* Always save the user stack pointer because it can be needed
	|* while processing the system call.
	|*
a161 1
	movl	a1, a0@@(MACH_USER_SP_OFFSET)
d167 10
d183 6
d201 2
d204 1
d206 8
a213 3
	lea	sp@@(16), sp
	movl	sp, a0@@(MACH_EXC_STACK_PTR_OFFSET)
	lea	sp@@(-16), sp
d217 1
d240 5
d248 2
d262 5
d273 1
a273 1
	tstl	a2@@(4)
d285 6
a290 5
	movel _proc_RunningProcesses,a0
	movel a0@@,a0
	movel a0@@(MACH_UNIX_ERRNO_OFFSET),d0
	negl    d0
	negl    d0
a293 1
	movel   #22, d0
d299 4
a302 2
	negl    d0
	negl    d0
@


9.2
log
@Unix compatiblity
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 9.1 90/02/07 19:15:00 rab Exp Locker: rab $ SPRITE (Berkeley)"
d152 8
a159 3
	movc	usp, a1
	movl    a1@@+, d0
	movc    a1, usp
d168 9
d178 5
d192 1
d194 1
a198 8
	|* Save registers used here:  two address registers and sp.
	|*

1:	movl	a2, sp@@-
	movl	a3, sp@@-
	movl	sp, a3

	|*
d236 3
a238 3
	movl	a0@@, d1			| d1 now has PCB address.
	addl	_machKcallTableOffset, d1
	movl	d1, a2			| a2 now has address of kcallTable
d247 2
d265 2
d284 3
a286 1
	CallTrapHandler(MACH_SYSCALL_TRAP)
@


9.1
log
@Changed local labels to Gnu syntax.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 9.0 89/09/12 14:51:20 douglis Stable Locker: rab $ SPRITE (Berkeley)"
d127 1
d129 141
@


9.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.7 89/09/11 23:43:19 rab Exp Locker: douglis $ SPRITE (Berkeley)"
d167 1
a167 1
	jne	1$
d176 1
a176 1
1$:	movl	a2, sp@@-
d185 1
a185 1
	jls	2$
d189 1
a189 1
2$:
a251 1
1$:
d438 1
a438 1
	bne	1$
d440 3
a442 3
	bra	4$
1$:	cmpl	#MACH_SHORT_BUS_FAULT, d0
	bne	2$
d444 3
a446 3
	bra	4$
2$:	cmpl	#MACH_LONG_BUS_FAULT, d0
	bne	3$
d448 2
a449 2
	bra	4$
3$:	trap	#15
d451 1
a451 1
4$:	movl	#0x20000, d0
@


8.7
log
@Changes to fix floating point migration.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.6 89/07/26 09:22:47 ouster Exp Locker: rab $ SPRITE (Berkeley)"
@


8.6
log
@Added more documentation for argument copying during system calls.
No code changes.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.5 89/07/20 07:06:23 rab Exp $ SPRITE (Berkeley)"
d375 1
@


8.5
log
@Fixed support for mc68881
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.4 89/06/30 01:03:47 rab Exp Locker: rab $ SPRITE (Berkeley)"
d206 1
a206 1
	|* in Mach_SyscallInit().  If you change one, be sure to change
@


8.4
log
@*** empty log message ***
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.3 89/05/24 02:03:35 rab Exp Locker: rab $ SPRITE (Berkeley)"
d170 1
a292 17

/*
 * ----------------------------------------------------------------------------
 *
 * RestoreUserRegs --
 *
 *      Restore the user stack pointer and the general purpose registers from
 *	the process state.
 *
 * ----------------------------------------------------------------------------
 */
#define RestoreUserRegs() \
	movl	_machCurStatePtr, a0; \
	movl	a0@@(MACH_USER_SP_OFFSET), a1; \
	movc	a1, usp; \
	moveml	a0@@(MACH_TRAP_REGS_OFFSET), #0xffff

d366 1
d375 1
@


8.3
log
@Changes to support floating point.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.2 89/05/23 09:41:55 mendel Exp Locker: rab $ SPRITE (Berkeley)"
@


8.2
log
@1) Replaced setjmp/longjmp with Mach_Probe. 2) Changed interrupt callback
interface to allow modules to register callbacks. 
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machTrap.s,v 8.1 88/11/13 17:31:55 ouster Exp Locker: mendel $ SPRITE (Berkeley)"
d98 29
@


8.1
log
@More documentation for "specialHandling" field.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machTrap.s,v 8.0 88/11/11 18:03:19 douglis Stable Locker: ouster $ SPRITE (Berkeley)"
@


8.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machTrap.s,v 6.3 88/11/11 14:51:20 mlgray Exp Locker: douglis $ SPRITE (Berkeley)"
d235 4
a238 1
	|* be done on the process.
@


6.3
log
@Fixed Byte_Copy -> bcopy bug I introduced.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machTrap.s,v 6.2 88/11/07 14:24:52 mlgray Exp $ SPRITE (Berkeley)"
@


6.2
log
@Converted to new C library.
@
text
@d13 1
a13 1
.asciz "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machTrap.s,v 6.1 88/08/24 17:51:25 nelson Exp Locker: mlgray $ SPRITE (Berkeley)"
d322 1
d324 2
a325 1
	movl	sp, sp@@-
@


6.1
log
@Stores last system call in proc table.
@
text
@d13 1
a13 1
.asciz "$Header: machTrap.s,v 6.0 88/08/11 12:09:20 brent Stable $ SPRITE (Berkeley)"
d320 1
a320 1
|* Call Byte_Copy(sizeof(excStack), (Address)excStack, (Address)sp);
d322 1
d325 1
a325 2
	movl	a0@@(MACH_SIG_EXC_STACK_SIZE_OFFSET), sp@@-
	jsr	_Byte_Copy
@


6.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
.asciz "$Header: machTrap.s,v 5.8 88/07/17 19:37:02 nelson Exp $ SPRITE (Berkeley)"
d159 1
d161 5
a168 2

2$:
@


5.8
log
@Added the call to retrieve the user stack pointer out of the mach state
struct.  This required saving the user's stack pointer even on system
call traps.
@
text
@d13 1
a13 1
.asciz "$Header: machTrap.s,v 5.7 88/05/05 17:53:41 nelson Exp $ SPRITE (Berkeley)"
@


5.7
log
@Handles move of functionality from sys to mach.
@
text
@d13 1
a13 1
.asciz "$Header: machTrap.s,v 5.6 88/05/04 16:39:41 nelson Exp $ SPRITE (Berkeley)"
d123 8
a138 1
	movl	_machCurStatePtr, a0
a139 2
	movc	usp, a1
	movl	a1, a0@@(MACH_USER_SP_OFFSET)
@


5.6
log
@Comments.
@
text
@d10 1
a10 1
#include "asmDefs.h"
d13 1
a13 1
.asciz "$Header: excTrap.s,v 5.4 88/04/13 11:24:50 ouster Exp $ SPRITE (Berkeley)"
@


5.5
log
@New trap handling code with machine state struct per proc.
@
text
@d21 1
d33 2
a34 3

	.globl	Mach_Reset
Mach_Reset:
d37 2
a38 2
	.globl	Mach_BusError
Mach_BusError:
d41 2
a42 2
	.globl	Mach_AddrError
Mach_AddrError:
d45 2
a46 2
	.globl	Mach_IllegalInst
Mach_IllegalInst:
d49 2
a50 2
	.globl	Mach_ZeroDiv
Mach_ZeroDiv:
d53 2
a54 2
	.globl	Mach_ChkInst
Mach_ChkInst:
d57 2
a58 2
	.globl	Mach_Trapv
Mach_Trapv:
d61 2
a62 2
	.globl	Mach_PrivVio
Mach_PrivVio:
d65 2
a66 2
	.globl	Mach_TraceTrap
Mach_TraceTrap:
d69 2
a70 2
	.globl	Mach_Emu1010
Mach_Emu1010:
d73 2
a74 2
	.globl	Mach_Emu1111
Mach_Emu1111:
d77 2
a78 2
	.globl	Mach_FmtError	
Mach_FmtError:
d81 2
a82 2
	.globl	Mach_UninitVect
Mach_UninitVect:
d85 2
a86 2
	.globl	Mach_SigRetTrap
Mach_SigRetTrap:
d89 2
a90 2
	.globl	Mach_BadTrap
Mach_BadTrap:
d93 4
a96 4
	.globl	Mach_BrkptTrap
	.globl _Mach_BrkptTrap
_Mach_BrkptTrap:
Mach_BrkptTrap:
d102 1
a102 1
|* Mach_SyscallTrap --
d119 2
a120 2
	.globl Mach_SyscallTrap
Mach_SyscallTrap:
d275 1
a275 1
 *	macro after have returned from Mach_Trap.  The proper action is
d372 1
a372 1
 *	macro after have returned from Mach_Trap.  The proper action is
@


5.4
log
@Changes to make system calls much faster.
@
text
@d1 1
a1 1
|* excVector.s -
d9 1
a9 1
#include "excAsm.h"
d13 1
a13 1
.asciz "$Header: excTrap.s,v 5.3 88/01/19 19:28:47 nelson Exp $ SPRITE (Berkeley)"
d33 3
a35 3
	.globl	Exc_Reset
Exc_Reset:
	CallTrapHandler(EXC_RESET)
d37 3
a39 3
	.globl	Exc_BusError
Exc_BusError:
	CallTrapHandler(EXC_BUS_ERROR)
d41 3
a43 3
	.globl	Exc_AddrError
Exc_AddrError:
	CallTrapHandler(EXC_ADDRESS_ERROR)
d45 3
a47 3
	.globl	Exc_IllegalInst
Exc_IllegalInst:
    	CallTrapHandler(EXC_ILLEGAL_INST)
d49 3
a51 3
	.globl	Exc_ZeroDiv
Exc_ZeroDiv:
    	CallTrapHandler(EXC_ZERO_DIV)
d53 3
a55 3
	.globl	Exc_ChkInst
Exc_ChkInst:
    	CallTrapHandler(EXC_CHK_INST)
d57 3
a59 3
	.globl	Exc_Trapv
Exc_Trapv:
    	CallTrapHandler(EXC_TRAPV)
d61 3
a63 3
	.globl	Exc_PrivVio
Exc_PrivVio:
    	CallTrapHandler(EXC_PRIV_VIOLATION)
d65 3
a67 3
	.globl	Exc_TraceTrap
Exc_TraceTrap:
    	CallTrapHandler(EXC_TRACE_TRAP)
d69 3
a71 3
	.globl	Exc_Emu1010
Exc_Emu1010:
    	CallTrapHandler(EXC_EMU1010)
d73 3
a75 3
	.globl	Exc_Emu1111
Exc_Emu1111:
    	CallTrapHandler(EXC_EMU1111)
d77 3
a79 3
	.globl	Exc_FmtError	
Exc_FmtError:
    	CallTrapHandler(EXC_STACK_FMT_ERROR)
d81 3
a83 3
	.globl	Exc_UninitVect
Exc_UninitVect:
    	CallTrapHandler(EXC_UNINIT_VECTOR)
d85 3
a87 3
	.globl	Exc_SigRetTrap
Exc_SigRetTrap:
	CallTrapHandler(EXC_SIG_RET_TRAP)
d89 3
a91 3
	.globl	Exc_BadTrap
Exc_BadTrap:
    	CallTrapHandler(EXC_BAD_TRAP)
d93 5
a97 5
	.globl	Exc_BrkptTrap
	.globl _Exc_BrkptTrap
_Exc_BrkptTrap:
Exc_BrkptTrap:
	CallTrapHandler(EXC_BRKPT_TRAP)
d102 1
a102 1
|* Exc_SyscallTrap --
d116 2
a117 2
	.globl _excMaxSysCall, _excKcallTableOffset, _excArgOffsets
	.globl _excArgDispatch, _excStateOffset
d119 2
a120 2
	.globl Exc_SyscallTrap
Exc_SyscallTrap:
d131 2
a132 5
	movl	_proc_RunningProcesses, a0
	movl	a0@@, d1
	addl	_excStateOffset, d1
	movl	d1, a0
	moveml	#0x7fff, a0@@
d134 2
a135 2
	movl	a1, a0@@(60)
	movl	sp@@(2), a0@@(64)
d149 1
a149 1
	cmpl	_excMaxSysCall, d0
d167 1
a167 1
	|* in Exc_SyscallInit().  If you change one, be sure to change
d172 1
a172 1
	movl	#_excArgOffsets, a0
d175 1
a175 1
	movl	#_excArgDispatch, a1
d179 2
a180 2
	.globl _ExcFetchArgs
_ExcFetchArgs:
d198 2
a199 2
	.globl _ExcFetchArgsEnd
_ExcFetchArgsEnd:			| Marks last place where PC could be
d216 1
a216 1
	addl	_excKcallTableOffset, d1
d245 1
a245 1
	CallTrapHandler(EXC_SYSCALL_TRAP)
d251 17
d272 1
a272 1
 * ExcReturnFromTrap --
d275 1
a275 1
 *	macro after have returned from Exc_Trap.  The proper action is
d281 2
a282 2
	.globl ExcReturnFromTrap
ExcReturnFromTrap:
d287 1
a287 1
        cmpl 	#EXC_OK, d0
d289 1
a289 1
	cmpl	#EXC_KERN_ERROR, d0
d291 1
a291 3
	cmpl	#EXC_USER_ERROR, d0
	beq	userError
	cmpl	#EXC_SIG_RETURN, d0
a292 2

callHandler:
d294 1
a294 4
|* Are calling a signal handler. d0 and the saved SP both
|* point to where the exception stack used to return to user
|* space is to be put.  We set up a short exception stack, restore
|* registers, make SP point to the short stack and then do an rte.
d296 1
a296 13
	movl	sp, a0	 		|* Put the return PC into d1
	addl	#EXC_TRAP_STACK_SIZE, a0|*
	movl	a0@@(EXC_PC_OFFSET), d1	|*
	movl	d0, a0 			|* Set up the exception stack.
	clrw	a0@@			|*    SR <= 0
	movl	d1, a0@@(EXC_PC_OFFSET)	|*    PC <= d1
	clrw	a0@@(EXC_VOR_OFFSET) 	|*    VOR <= 0
	addl	#6, sp  		|* Remove type and bus error reg
	movl	sp@@+, d0  		|* Restore user stack pointer.
	movc	d0, usp			|*
	moveml	sp@@+, #0x7fff 		|* Restore all regs but SP.
	movl	sp@@, sp 		|* Saved SP points to new stack.
	rte
d300 2
a301 6
|* Are returning from a signal handler.  A1 points to where the
|* restored exception stack is to be stored at, A0 points to where
|* to copy the stack from and D0 contains the size.  We first restore registers
|* so that we can get to A0, A1 and D0.  Then we copy the new exception
|* stack into the right spot on the stack, call the routine that processes
|* return from signals and then do a normal return with the restored stack.
d303 14
a316 7
	RestoreTrapRegs()
	movl	a1, sp 		|* Set SP to new value.
	movl	a0, sp@@-	|* Save address of exception stack.
	movl	a1, sp@@- 	|* Call byte copy with arguments 
	movl	a0, sp@@- 	|*     Byte_Copy(d0, a0, a1)
	movl	d0, sp@@-	|*
	jsr	_Byte_Copy	|*
d318 12
a329 3
	jsr	_ExcSigReturn 	|* Call ExcSigReturn(a0, trapStack)
	addql	#4, sp
	jra	ExcReturnFromTrap	|* Do a normal return from trap.
d331 1
a331 1
userError:
d333 65
d400 2
a401 1
|* The size of the exception stack has been put into the saved D0.
d403 20
a422 3
	RestoreTrapRegs()
	addl	d0, sp
	movl	#0x20000, d0
d425 1
a425 1
kernError:
d427 4
a430 1
|* Got a fatal kernel error.
d433 2
d437 1
a437 1
normReturn:
d441 1
a441 1
	RestoreTrapRegs()
d443 1
@


5.3
log
@Fixed bug in signal returns where back-to-back signals weren't working
correctly.
@
text
@d13 1
a13 1
.asciz "$Header: excTrap.s,v 5.2 87/12/11 14:16:43 nelson Exp $ SPRITE (Berkeley)"
d21 2
a22 1
|*     Handle exceptions.  In all cases call the C trap handler.
d25 1
a25 1
|*     None.
d28 1
a28 1
|*     None.
a84 4
	.globl	Exc_SyscallTrap
Exc_SyscallTrap:
	CallTrapHandler(EXC_SYSCALL_TRAP)

d97 18
a114 1
    	CallTrapHandler(EXC_BRKPT_TRAP)
d116 138
@


5.2
log
@Return SYS_ARG_NO_ACCESS on bus error from kernel mode.
@
text
@d13 1
a13 1
.asciz "$Header: excTrap.s,v 5.1 87/08/21 13:16:43 nelson Exp $ SPRITE (Berkeley)"
d170 1
a170 1
	jra	normReturn	|* Do a normal return from signal.
@


5.1
log
@Fixed bug with handling failed cross-address-space copies on Sun-3s.
@
text
@d13 1
a13 1
.asciz "$Header: excTrap.s,v 5.0 87/08/11 10:50:05 sprite Exp $ SPRITE (Berkeley)"
d175 1
a175 1
|* exception stack and return to the function doing the copy.
d180 1
a180 1
	movl	#1, d0
@


5.0
log
@First Sprite native copy
@
text
@d13 1
a13 1
.asciz "$Header: excTrap.s,v 4.3 87/06/01 17:53:34 nelson Exp $ SPRITE (Berkeley)"
d137 1
a137 1
	movl	sp, a0; 		|* Put the return PC into d1
d176 1
d179 1
a179 1
	addl	#EXC_LONG_STACK, sp
@
