head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.2 symm:9.2 spur:9.2 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     92.06.15.22.29.30;  author jhh;  state Exp;
branches ;
next     9.2;

9.2
date     91.05.17.18.25.03;  author kupfer;  state Exp;
branches ;
next     9.1;

9.1
date     90.09.11.12.52.40;  author kupfer;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.20.38;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.08.15.21.47.13;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     89.02.09.22.36.46;  author douglis;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.38.51;  author douglis;  state Stable;
branches ;
next     6.0;

6.0
date     88.08.11.12.27.43;  author brent;  state Stable;
branches ;
next     5.1;

5.1
date     88.03.08.14.18.24;  author douglis;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.51.16;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@Added Sys_GetHostName and Sys_SetHostName system calls.
@
text
@/*
 * sysSysCallParam.h --
 *
 *	Declarations of constants and types relevant to system call
 *	parameterization.
 *
 * Copyright (C) 1986 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/sys/sysSysCallParam.h,v 9.2 91/05/17 18:25:03 kupfer Exp $ SPRITE (Berkeley)
 */

#ifndef _SYSSYSCALLPARAM
#define _SYSSYSCALLPARAM

#ifdef KERNEL
#include <sys.h>
#else
#include <kernel/sys.h>
#endif

/*
 * For each parameter to a system call, there are several possible
 * dispositions:
 *
 *	SYS_PARAM_IN		- Pass the value of the parameter into the
 *				  system call.
 *	SYS_PARAM_OUT		- Copy the value returned by the system
 *				  call back into the location specified
 *				- By the pointer argument.
 *	SYS_PARAM_ACC		- Indicates that the argument is to
 *				  be made accessible.
 *	SYS_PARAM_COPY		- Indicates that the argument is to
 *				  be copied into and/or out of kernel memory.
 *	SYS_PARAM_NIL		- If set in disposition field during RPC,
 *				  indicates that the corresponding pointer
 *				  was NIL.
 *	SYS_PARAM_ARRAY		- Indicates that the argument is a pointer
 *				  to an array of the specified type.  The
 *				  size of the array must be specified as the
 *				  preceding argument.  If multiple arrays
 *				  are specified as successive args, then they
 *				  each are assumed to have the same number
 *				  of arguments.
 */

#define SYS_PARAM_IN		0x0001
#define SYS_PARAM_OUT		0x0002
#define SYS_PARAM_ACC		0x0010
#define SYS_PARAM_COPY		0x0020
#define SYS_PARAM_NIL		0x0100
#define SYS_PARAM_ARRAY		0x1000

/*
 * Define constants to indicate types of arguments.  The value of the
 * argument type may be used to simplify packaging of the arguments
 * (for example, int's do not need to be made accessible).  It is also
 * used as a subscript into an array of sizes corresponding to each type.
 *
 * Most of the types are self-explanatory, with the exception of Time values.
 * Time structures are two words, and they are sometimes passed by value
 * (on the stack) and sometimes by reference.  TIMEPTR is used to indicate
 * a Time that is passed by reference, and TIME1/TIME2 are used for a Time
 * that is passed by value.  TIME1 and TIME2 are just like ints and are
 * treated like two separate arguments in order to reduce the number of special
 * cases in the parameter parsing routines.
 *
 * SYS_PARAM_INT	-	integer
 * SYS_PARAM_CHAR	-	character (for input, will cause problems due
 *				to the number of bytes!)
 * SYS_PARAM_PROC_PID	- 	Proc_PID
 * SYS_PARAM_PROC_RES   -	Proc_ResUsage
 * SYS_PARAM_SYNC_LOCK	-	Sync_Lock
 * SYS_PARAM_FS_ATT	-	Fs_Attributes
 * SYS_PARAM_FS_NAME	-	string containing a path name: call
 *				Fs_MakeNameAccessible.
 * SYS_PARAM_TIMEPTR	-	Time: only used as OUT or INOUT (ie, pointer)
 * SYS_PARAM_TIME1	-	first word of a Time being passed IN
 * SYS_PARAM_TIME2	-	second word of a Time structure.
 * SYS_PARAM_VM_CMD	-	Vm_Command
 * SYS_PARAM_DUMMY	-	A placeholder for cases in which the
 *				number of arguments is different from the
 *				number of words.
 * SYS_PARAM_RANGE1	-	Start of range of values for array subscripts
 * SYS_PARAM_RANGE2	-	End of range for array.
 * SYS_PARAM_PCB	-	Process control block.
 * SYS_PARAM_FS_DEVICE	-	Device specification.
 * SYS_PARAM_HOSTNAME	-	Hostname.
 */

#define SYS_PARAM_INT			0
#define SYS_PARAM_CHAR			1
#define SYS_PARAM_PROC_PID              2
#define SYS_PARAM_PROC_RES              3
#define SYS_PARAM_SYNC_LOCK             4
#define SYS_PARAM_FS_ATT                5
#define SYS_PARAM_FS_NAME               6
#define SYS_PARAM_TIMEPTR               7
#define SYS_PARAM_TIME1                 8
#define SYS_PARAM_TIME2                 9
#define SYS_PARAM_VM_CMD                10
#define SYS_PARAM_DUMMY			11
#define SYS_PARAM_RANGE1		12
#define SYS_PARAM_RANGE2		13
#define SYS_PARAM_PCB			14
#define SYS_PARAM_FS_DEVICE		15
#define SYS_PARAM_PCBARG		16
#define SYS_PARAM_HOSTNAME		17

typedef struct {
    int type;
    int disposition;
} Sys_CallParam;

/*
 * Define a structure for passing system call parameters to a routine
 * regardless of the number of arguments.
 */

typedef struct {
    int argArray[SYS_MAX_ARGS];
} Sys_ArgArray;

/*
 * Array of sizes of system call parameters, declared in sysSysCall.c.
 */

extern int *sys_ParamSizes;

#endif /* _SYSSYSCALLPARAM */
@


9.2
log
@Fix "include <sys.h>" so that it works for user programs, too.
@
text
@d11 1
a11 1
 * $Header: /sprite/src/kernel/sys/RCS/sysSysCallParam.h,v 9.1 90/09/11 12:52:40 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d89 1
d109 1
@


9.1
log
@Include <sys.h> to get definition of SYS_MAX_ARGS.
@
text
@d11 1
a11 1
 * $Header: proto.h,v 1.4 86/03/20 14:00:21 andrew Exp $ SPRITE (Berkeley)
d17 1
d19 3
@


9.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
 * $SysSysCallParam: proto.h,v 1.4 86/03/20 14:00:21 andrew Exp $ SPRITE (Berkeley)
d16 2
@


8.2
log
@Commented #endif labels.
@
text
@@


8.1
log
@removed obsolete SYS_PARAM_STRING (not implemented) and
environment-related params.
@
text
@d123 1
a123 1
#endif _SYSSYSCALLPARAM
@


8.0
log
@Changing version numbers.
@
text
@a65 1
 * SYS_PARAM_STRING	- 	string 
a75 3
 * SYS_PARAM_PROC_ENV_NAME -	First field in a Proc_EnvironVar, which 
 *				contains pointers to two strings.
 * SYS_PARAM_PROC_ENV_VALUE -	Second field in a Proc_EnvironVar.
d87 15
a101 18
#define SYS_PARAM_STRING		2
#define SYS_PARAM_PROC_PID		3
#define SYS_PARAM_PROC_RES		4
#define SYS_PARAM_SYNC_LOCK		5
#define SYS_PARAM_FS_ATT		6
#define SYS_PARAM_FS_NAME		7
#define SYS_PARAM_TIMEPTR		8
#define SYS_PARAM_TIME1			9
#define SYS_PARAM_TIME2			10
#define SYS_PARAM_VM_CMD		11
#define SYS_PARAM_PROC_ENV_NAME		12
#define SYS_PARAM_PROC_ENV_VALUE	13
#define SYS_PARAM_DUMMY			14
#define SYS_PARAM_RANGE1		15
#define SYS_PARAM_RANGE2		16
#define SYS_PARAM_PCB			17
#define SYS_PARAM_FS_DEVICE		18
#define SYS_PARAM_PCBARG		19
@


6.0
log
@Changing version numbers.
@
text
@@


5.1
log
@Added SYS_PARAM_PCBARG, which is an argument corresponding to the
fixed-length strings passed back to Proc_GetPCBInfo.
@
text
@@


5.0
log
@First Sprite native copy
@
text
@d36 4
a39 1
 *				  preceding argument.
d108 1
@
