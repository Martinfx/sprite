head     9.5;
branch   ;
access   ;
symbols  ds3100:9.5 sun3:9.5 sun4nw:9.5 symm:9.5 spur:9.5 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.5
date     91.03.30.17.21.16;  author mendel;  state Exp;
branches ;
next     9.4;

9.4
date     90.12.06.17.37.17;  author shirriff;  state Exp;
branches ;
next     9.3;

9.3
date     90.09.11.10.52.41;  author shirriff;  state Exp;
branches ;
next     9.2;

9.2
date     90.02.20.15.31.12;  author rab;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.24.14.41.14;  author jhh;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.20.33;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.08.30.12.18.19;  author mgbaker;  state Exp;
branches ;
next     8.1;

8.1
date     89.04.04.10.44.30;  author mgbaker;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.38.44;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.28.18.46.55;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.29.12.31.01;  author mlgray;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.27.37;  author brent;  state Stable;
branches ;
next     5.2;

5.2
date     88.05.05.18.01.03;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     88.05.04.17.23.57;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.09.03.19.01.24;  author nelson;  state Exp;
branches ;
next     ;


desc
@@


9.5
log
@Added Sys_TestPrintWhatever routine for the sun4's too.
@
text
@/* 
 * sysTestCall.c --
 *
 *	These routines do direct console I/O.
 *	These routines are so close to obsolete they should be removed.
 *	However, I tried that and it broke initsprite.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 9.4 90/12/06 17:37:17 shirriff Exp Locker: mendel $ SPRITE (Berkeley)";
#endif not lint

#include <sprite.h>
#include <sysSysCall.h>
#include <sysTestCall.h>
#include <sys.h>
#include <dbg.h>
#include <vm.h>
#include <machMon.h>
#include <stdio.h>

struct test_args {
    int argArray[SYS_MAX_ARGS];
};


/*
 * ----------------------------------------------------------------------------
 *
 * Test_PrintOut --
 *
 *      Does a printf that will work during boot before everything
 *	else gets initialized.  This is used only by initsprite, as far
 *	as I can tell.
 *
 * Results:
 *      None.
 *
 * Side effects:
 *      Outputs data.
 *
 * ----------------------------------------------------------------------------
 */

int 
Test_PrintOut(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    int arg0; 
    int arg1; 
    int arg2; 
    int arg3; 
    int arg4; 
    int arg5; 
    int arg6;
    int arg7; 
    int arg8; 
    int arg9;
{
    struct test_args args;
    struct {
	int 	arg;
	int 	mapped;
	int	numBytes;
    } nargs[SYS_MAX_ARGS];
    int		len;
    int		i;
    char	*string;

    args.argArray[0] = arg0;
    args.argArray[1] = arg1;
    args.argArray[2] = arg2;
    args.argArray[3] = arg3;
    args.argArray[4] = arg4;
    args.argArray[5] = arg5;
    args.argArray[6] = arg6;
    args.argArray[7] = arg7;
    args.argArray[8] = arg8;
    args.argArray[9] = arg9;

    Vm_MakeAccessible(VM_READONLY_ACCESS, 1024, (Address) (args.argArray[0]), 
					  &len, (Address *) &(nargs[0].arg));
    if (len == 0) {
	return(FAILURE);
    }
    nargs[0].numBytes = len;

    nargs[0].mapped = TRUE;
    for (i = 1; i < SYS_MAX_ARGS; i++) {
	nargs[i].mapped = FALSE;
    }
    string = (char *) nargs[0].arg;
    i = 1;
    while (*string != '\0') {
	if (*string != '%') {
	    string++;
	    continue;
	}
	string++;
	if (*string == 's') {
	    Vm_MakeAccessible(VM_READONLY_ACCESS, 1024,
	      		      (Address) args.argArray[i], &len,
			      (Address *) &(nargs[i].arg));
	    if (len == 0) {
		for (i = 0; i < SYS_MAX_ARGS; i++) {
		    if (nargs[i].mapped) {
			Vm_MakeUnaccessible((Address) (nargs[i].arg),
				nargs[i].numBytes);
		    }
		}
		return(FAILURE);
	    }

	    nargs[i].mapped = TRUE;
	    nargs[i].numBytes = len;
	} else {
	    nargs[i].arg = args.argArray[i];
	}
	string++;
	i++;
    }
    printf((char *) nargs[0].arg, nargs[1].arg, nargs[2].arg,
	    nargs[3].arg, nargs[4].arg, nargs[5].arg, nargs[6].arg,
	    nargs[7].arg, nargs[8].arg, nargs[9].arg);
    for (i = 0; i < SYS_MAX_ARGS; i++) {
	if (nargs[i].mapped) {
	    Vm_MakeUnaccessible((Address) (nargs[i].arg), nargs[i].numBytes);
	}
    }
    return(0);
}

/*
 * ----------------------------------------------------------------------------
 *
 * Test_GetLine --
 *
 *      Gets data from console.  I'm not sure this is actually used.
 *
 * Results:
 *      The string.
 *
 * Side effects:
 *      Gets a string.
 *
 * ----------------------------------------------------------------------------
 */
int 
Test_GetLine(string, length)
    char	*string;
    int		length;
{
#ifdef sun4c
    printf("Test_GetLine() doesn`t work on sun4c\n");
    return (FAILURE);
#else
    int		i, numBytes;
    char 	*realString;

    printf("Obsolete Test_GetLine() called\n");
    Vm_MakeAccessible(VM_OVERWRITE_ACCESS, length, (Address) string,
		      &numBytes, (Address *) &realString);

    Mach_MonGetLine(1);
    i = 0;
    realString[i] = Mach_MonGetNextChar();
    while (i < length - 1 && realString[i] != '\0') {
	i++;
	realString[i] = Mach_MonGetNextChar();
    }
    realString[i] = '\0';

    Vm_MakeUnaccessible((Address) realString, numBytes);

    return(SUCCESS);
#endif
}

/*
 * ----------------------------------------------------------------------------
 *
 * Test_GetChar --
 *
 *      Gets data from console.  I'm not sure this is actually used.
 *
 * Results:
 *      The character.
 *
 * Side effects:
 *      Gets a character.
 *
 * ----------------------------------------------------------------------------
 */
int 
Test_GetChar(charPtr)
    char	*charPtr;
{
#ifdef sun4c
    printf("Test_GetChar() doesn`t work on sun4c\n");
    return (FAILURE);
#else
    char 	*realCharPtr;
    int		numBytes;

    printf("Obsolete Test_GetChar() called\n");
    Vm_MakeAccessible(VM_OVERWRITE_ACCESS, 1, (Address) charPtr,
		      &numBytes, (Address *) &realCharPtr);
    if (numBytes == 0) {
	return(SYS_ARG_NOACCESS);
    }
    *realCharPtr = Mach_MonGetNextChar();

    printf("%c", *realCharPtr);

    Vm_MakeUnaccessible((Address) realCharPtr, numBytes);
    return(SUCCESS);
#endif
}
@


9.4
log
@Put Test_PrintOut back, since it was almost, but not quite, obsolete.
@
text
@d13 1
a13 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 9.2 90/02/20 15:31:12 rab Exp $ SPRITE (Berkeley)";
d25 3
a27 5
/*
 * All the routines in this file have no comments.  What are they for?  I'll
 * put in comments for them as soon as I figure out their true purpose, but
 * passing structs this way sure won't work on the sun4.
 */
a28 1
#if !defined(sun4) && !defined(sun4c)
d49 12
a60 1
Test_PrintOut(args)
a61 1
{
d71 11
a132 9
#else
/*ARGSUSED*/
int 
Test_PrintOut(args)
    struct test_args args;
{
    return 0;
}
#endif 
a133 1
#ifndef sun4c
d154 4
d161 1
d177 1
d199 4
a206 1

a216 1

d218 1
a218 16
}
#else
/*ARGSUSED*/
int 
Test_GetLine(string, length)
    char	*string;
    int		length;
{
    return 0;
}
/*ARGSUSED*/
int
Test_GetChar(charPtr)
    char	*charPtr;
{
    return 0;
a219 1
#endif sun4c
@


9.3
log
@Removed sysTestCall.c, sysTestCall.h
@
text
@d1 219
@


9.2
log
@Fixed compiler warning about `struct defined in parameter list'.
@
text
@a0 150
/* 
 * sysTestCall.c --
 *
 *	Routines and structs for system calls.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 9.1 89/10/24 14:41:14 jhh Exp Locker: rab $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "sysSysCall.h"
#include "sys.h"
#include "dbg.h"
#include "vm.h"
#include "machMon.h"

/*
 * All the routines in this file have no comments.  What are they for?  I'll
 * put in comments for them as soon as I figure out their true purpose, but
 * passing structs this way sure won't work on the sun4.
 */

#if !defined(sun4) && !defined(sun4c)
struct test_args {
    int argArray[SYS_MAX_ARGS];
};

int 
Test_PrintOut(args)
    struct test_args args;
{
    struct {
	int 	arg;
	int 	mapped;
	int	numBytes;
    } nargs[SYS_MAX_ARGS];
    int		len;
    int		i;
    char	*string;

    Vm_MakeAccessible(VM_READONLY_ACCESS, 1024, (Address) (args.argArray[0]), 
					  &len, (Address *) &(nargs[0].arg));
    if (len == 0) {
	return(FAILURE);
    }
    nargs[0].numBytes = len;

    nargs[0].mapped = TRUE;
    for (i = 1; i < SYS_MAX_ARGS; i++) {
	nargs[i].mapped = FALSE;
    }
    string = (char *) nargs[0].arg;
    i = 1;
    while (*string != '\0') {
	if (*string != '%') {
	    string++;
	    continue;
	}
	string++;
	if (*string == 's') {
	    Vm_MakeAccessible(VM_READONLY_ACCESS, 1024,
	      		      (Address) args.argArray[i], &len,
			      (Address *) &(nargs[i].arg));
	    if (len == 0) {
		for (i = 0; i < SYS_MAX_ARGS; i++) {
		    if (nargs[i].mapped) {
			Vm_MakeUnaccessible((Address) (nargs[i].arg),
				nargs[i].numBytes);
		    }
		}
		return(FAILURE);
	    }

	    nargs[i].mapped = TRUE;
	    nargs[i].numBytes = len;
	} else {
	    nargs[i].arg = args.argArray[i];
	}
	string++;
	i++;
    }
    printf((char *) nargs[0].arg, nargs[1].arg, nargs[2].arg,
	    nargs[3].arg, nargs[4].arg, nargs[5].arg, nargs[6].arg,
	    nargs[7].arg, nargs[8].arg, nargs[9].arg);
    for (i = 0; i < SYS_MAX_ARGS; i++) {
	if (nargs[i].mapped) {
	    Vm_MakeUnaccessible((Address) (nargs[i].arg), nargs[i].numBytes);
	}
    }
    return(0);
}
#else
Test_PrintOut()
{
}
#endif 

#ifndef sun4c
int 
Test_GetLine(string, length)
    char	*string;
    int		length;
{
    int		i, numBytes;
    char 	*realString;

    Vm_MakeAccessible(VM_OVERWRITE_ACCESS, length, (Address) string,
		      &numBytes, (Address *) &realString);

    Mach_MonGetLine(1);
    i = 0;
    realString[i] = Mach_MonGetNextChar();
    while (i < length - 1 && realString[i] != '\0') {
	i++;
	realString[i] = Mach_MonGetNextChar();
    }
    realString[i] = '\0';

    Vm_MakeUnaccessible((Address) realString, numBytes);

    return(SUCCESS);
}

int 
Test_GetChar(charPtr)
    char	*charPtr;
{
    char 	*realCharPtr;
    int		numBytes;

    printf("Obsolete Test_GetChar() called\n");

    Vm_MakeAccessible(VM_OVERWRITE_ACCESS, 1, (Address) charPtr,
		      &numBytes, (Address *) &realCharPtr);
    if (numBytes == 0) {
	return(SYS_ARG_NOACCESS);
    }
    *realCharPtr = Mach_MonGetNextChar();

    printf("%c", *realCharPtr);

    Vm_MakeUnaccessible((Address) realCharPtr, numBytes);

    return(SUCCESS);
}
#endif sun4c
@


9.1
log
@#ifndef's for sun4 and sun4c were wrong
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 9.0 89/09/12 15:20:33 douglis Stable Locker: jhh $ SPRITE (Berkeley)";
d28 4
d34 1
a34 3
    struct {
	int argArray[SYS_MAX_ARGS];
    } args;
@


9.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 8.2 89/08/30 12:18:19 mgbaker Exp Locker: douglis $ SPRITE (Berkeley)";
d27 1
a27 2
#ifndef sun4
#ifndef sun4c
d98 1
a98 2
#endif sun4c
#endif sun4
@


8.2
log
@Changes for sun4c.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 8.1 89/04/04 10:44:30 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
@


8.1
log
@Sun4 can't handle structures passed the way Test_PrintOut() does it.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 8.0 88/11/11 18:38:44 douglis Stable Locker: mgbaker $ SPRITE (Berkeley)";
d28 1
d99 1
d102 1
d150 1
@


8.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 6.2 88/10/28 18:46:55 mlgray Exp Locker: douglis $ SPRITE (Berkeley)";
d21 7
d94 5
@


6.2
log
@More conversion to new C library.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/sys/RCS/sysTestCall.c,v 6.1 88/08/29 12:31:01 mlgray Exp Locker: mlgray $ SPRITE (Berkeley)";
@


6.1
log
@fixed lint errors.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: sysTestCall.c,v 6.0 88/08/11 12:27:37 brent Stable $ SPRITE (Berkeley)";
d77 1
a77 1
    Sys_SafePrintf((char *) nargs[0].arg, nargs[1].arg, nargs[2].arg,
d120 1
a120 1
    Sys_Printf("Obsolete Test_GetChar() called\n");
d129 1
a129 1
    Sys_Printf("%c", *realCharPtr);
@


6.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: sysTestCall.c,v 5.2 88/05/05 18:01:03 nelson Exp $ SPRITE (Berkeley)";
d36 2
a37 2
    Vm_MakeAccessible(VM_READONLY_ACCESS, 1024, args.argArray[0], 
					  &len, &(nargs[0].arg));
d57 2
a58 1
	      		      args.argArray[i], &len, &(nargs[i].arg));
d62 2
a63 1
			Vm_MakeUnaccessible(nargs[i].arg, nargs[i].numBytes);
d77 3
a79 3
    Sys_SafePrintf(nargs[0].arg, nargs[1].arg, nargs[2].arg, nargs[3].arg, 
		   nargs[4].arg, nargs[5].arg, nargs[6].arg, nargs[7].arg, 
		   nargs[8].arg, nargs[9].arg);
d82 1
a82 1
	    Vm_MakeUnaccessible(nargs[i].arg, nargs[i].numBytes);
a94 1
    int		loop = 1;
d108 1
a108 1
    Vm_MakeUnaccessible((Address *) realString, numBytes);
@


5.2
log
@Handles move of functionality from sys to mach.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: sysTestCall.c,v 5.1 88/05/04 17:23:57 nelson Exp $ SPRITE (Berkeley)";
@


5.1
log
@Changed to handle new structure of mach module.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: sysTestCall.c,v 5.0 87/09/03 19:01:24 nelson Exp $ SPRITE (Berkeley)";
d19 1
a19 1
#include "sunMon.h"
d98 1
a98 1
    Mon_GetLine(1);
d100 1
a100 1
    realString[i] = Mon_GetNextChar();
d103 1
a103 1
	realString[i] = Mon_GetNextChar();
d126 1
a126 1
    *realCharPtr = Mon_GetNextChar();
@


5.0
log
@*** empty log message ***
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: sysTestCall.c,v 5.0 87/08/11 10:51:34 sprite Exp $ SPRITE (Berkeley)";
a14 1
#include "exc.h"
a17 1
#include "machine.h"
@
