head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.2 symm:9.2 spur:9.2 sprited:9.2.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     92.06.03.22.47.57;  author voelker;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.19.15.45.37;  author jhh;  state Exp;
branches 9.2.1.1;
next     9.1;

9.1
date     90.09.12.17.10.20;  author jhh;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.12.40;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.08.15.21.20.39;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     89.05.24.07.56.39;  author rab;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.26.10;  author douglis;  state Stable;
branches ;
next     6.0;

6.0
date     88.08.11.12.19.40;  author brent;  state Stable;
branches ;
next     5.5;

5.5
date     88.07.15.17.31.58;  author mendel;  state Exp;
branches ;
next     5.4;

5.4
date     88.06.27.10.43.23;  author mendel;  state Exp;
branches ;
next     5.3;

5.3
date     88.06.21.10.56.53;  author mendel;  state Exp;
branches ;
next     5.2;

5.2
date     88.06.14.15.53.00;  author brent;  state Exp;
branches ;
next     5.1;

5.1
date     87.09.17.12.02.26;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.45.52;  author sprite;  state Exp;
branches ;
next     ;

9.2.1.1
date     91.10.22.12.40.56;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@FDDI implementation
@
text
@/*
 * netInt.h --
 *
 *	This defines the types and constants for the networking software.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 *
 * $Header: /sprite/src/kernel/voelker/net/RCS/netInt.h,v 1.1 92/05/28 17:58:15 voelker Exp Locker: voelker $ SPRITE (Berkeley)
 */

#ifndef _NETINT
#define _NETINT

#include <sprite.h>
#include <list.h>
#include <bf.h>
#include <net.h>
#include <stdio.h>
#include <stdlib.h>

#include <netTypes.h>

/*
 * The following is a NIL function pointer.
 */

#define NILPROC	(void (*)()) NIL

/*
 * The following macros are used to access bit fields in strings of bytes.
 * The upper 24 bits of the index are the offset of the bit field, and
 * the lower 8 bits are the size of the bit field.  See bf.h for info
 * on the Bf macros.
 */

#define NetBfByteSet(ptr, index, value)			\
    Bf_ByteSet(ptr, (index) >> 8, (index) & 0xff, value)

#define NetBfByteTest(ptr, index, value)			\
    Bf_ByteTest(ptr, (index) >> 8, (index) & 0xff, value)

#define NetBfByteGet(ptr, index)			\
    Bf_ByteGet(ptr, (index) >> 8, (index) & 0xff)

#define NetBfShortSet(ptr, index, value)			\
    Bf_HalfwordSet(ptr, (index) >> 8, (index) & 0xff, value)

#define NetBfShortTest(ptr, index, value)			\
    Bf_HalfwordTest(ptr, (index) >> 8, (index) & 0xff, value)

#define NetBfShortGet(ptr, index)			\
    Bf_HalfwordGet(ptr, (index) >> 8, (index) & 0xff)

#define NetBfWordSet(ptr, index, value)			\
    Bf_WordSet(ptr, (index) >> 8, (index) & 0xff, value)

#define NetBfWordTest(ptr, index, value)			\
    Bf_WordTest(ptr, (index) >> 8, (index) & 0xff, value)

#define NetBfWordGet(ptr, index)			\
    Bf_WordGet(ptr, (index) >> 8, (index) & 0xff)

/*
 * A transmission queue element.
 */

typedef struct {
    List_Links		links;
    Net_EtherHdr	*etherHdrPtr;		/* Ethernet header with address
						 * of receiver already set */
    Net_ScatterGather	*scatterGatherPtr;	/* The scatter/gather array. */
    int			scatterGatherLength;	/* Number of items in the 
						   scatter/gather array. */
} NetXmitElement;

extern	Net_EtherStats	net_EtherStats;
extern	Net_Address 	netEtherBroadcastAddress;
extern Net_Interface	*netInterfaces[];
extern int		netNumInterfaces;
extern Net_Address	netZeroAddress;
extern Boolean		netDebug;
/*
 * Procedures for the internet packet handler.
 */
extern void NetOutputWakeup _ARGS_((Sync_Semaphore *mutexPtr));

/*
 * Forward declarations.
 */

extern Net_Route *NetAllocRoute _ARGS_((void));


extern void NetEtherInit _ARGS_((void));

#endif /* _NETINT */
@


9.2
log
@Rewrite to support multiple interfaces and the Ultranet
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 9.1 90/09/12 17:10:20 jhh Exp Locker: jhh $ SPRITE (Berkeley)
d28 2
@


9.2.1.1
log
@Initial branch for Sprite server.
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 9.2 90/10/19 15:45:37 jhh Exp $ SPRITE (Berkeley)
@


9.1
log
@fixed include statements
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 9.0 89/09/12 15:12:40 douglis Stable Locker: jhh $ SPRITE (Berkeley)
d24 1
d26 2
a28 6
typedef struct NetInterface {
    char	*name;
    int		 number;
    unsigned int ctrlAddr;
    Boolean	(*init)();
} NetInterface;
d30 40
d82 6
d89 1
a89 2
 * The routines for the use of the proper ethernet controller.  We should
 * fix this to support multiple interfaces!
d91 1
a91 7
typedef struct {
    Boolean (*init)();
    void (*output)();
    void (*intr)();
    void (*reset)();
} NetEtherFuncs;
extern	NetEtherFuncs	netEtherFuncs;
d94 1
a94 1
 * Procedures for the internet packet handler.
d96 5
a100 1
extern	void	NetOutputWakeup();
@


9.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 8.2 89/08/15 21:20:39 rab Exp Locker: douglis $ SPRITE (Berkeley)
d22 3
a24 3
#include "sprite.h"
#include "list.h"
#include "net.h"
@


8.2
log
@Commented #endif labels.
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 8.1 89/05/24 07:56:39 rab Exp Locker: rab $ SPRITE (Berkeley)
@


8.1
log
@*** empty log message ***
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 8.0 88/11/11 18:26:10 douglis Stable Locker: rab $ SPRITE (Berkeley)
d62 1
a62 1
#endif _NETINT
@


8.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/net/RCS/netInt.h,v 6.0 88/08/11 12:19:40 brent Stable Locker: douglis $ SPRITE (Berkeley)
@


6.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
 * $Header: netInt.h,v 5.5 88/07/15 17:31:58 mendel Exp $ SPRITE (Berkeley)
@


5.5
log
@Moved net device code to dev module.
@
text
@d16 1
a16 1
 * $Header: netInt.h,v 5.4 88/06/27 10:43:23 mendel Exp $ SPRITE (Berkeley)
@


5.4
log
@Updated Copyright notice.
@
text
@d16 1
a16 1
 * $Header: netInt.h,v 5.3 88/06/21 10:56:53 mendel Exp $ SPRITE (Berkeley)
a59 2
extern	void	NetEtherHandler();

@


5.3
log
@Corrected netEtherFuncs structure to reflect the init routine returning a
boolean.
@
text
@d6 8
a13 2
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
d16 1
a16 1
 * $Header: netInt.h,v 5.2 88/06/14 15:53:00 brent Exp $ SPRITE (Berkeley)
@


5.2
log
@Added the (still unused) Net_Interface struct
@
text
@d10 1
a10 1
 * $Header: netInt.h,v 5.1 87/09/17 12:02:26 nelson Exp $ SPRITE (Berkeley)
d16 1
d44 1
a44 1
    void (*init)();
@


5.1
log
@Added ability to reset 3Com and Intel chips.
@
text
@d10 1
a10 1
 * $Header: netInt.h,v 5.0 87/08/11 10:45:52 sprite Exp $ SPRITE (Berkeley)
d19 6
a48 18

/*
 * Procedures for the 3Com driver.
 */

extern	void	Net3CInit();
extern	void	Net3COutput();
extern	void	Net3CIntr();
extern	void	Net3CRestart();

/*
 * Procedures for the Intel driver.
 */

extern	void	NetIEInit();
extern	void	NetIEOutput();
extern	void	NetIEIntr();
extern	void	NetIERestart();
@


5.0
log
@First Sprite native copy
@
text
@d10 1
a10 1
 * $Header: netInt.h,v 4.3 87/05/14 10:27:13 nelson Exp $ SPRITE (Berkeley)
d40 1
d51 1
d60 1
@
