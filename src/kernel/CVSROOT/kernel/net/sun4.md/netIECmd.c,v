head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.3 symm:9.3 spur:9.3 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     91.09.10.18.40.56;  author rab;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.19.15.47.22;  author jhh;  state Exp;
branches ;
next     9.1;

9.1
date     89.11.16.15.16.50;  author rab;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.13.13;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.05.24.07.58.10;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.30.11.50.24;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.27.18;  author douglis;  state Stable;
branches ;
next     6.0;

6.0
date     88.08.11.12.20.29;  author brent;  state Stable;
branches ;
next     5.2;

5.2
date     88.06.27.10.46.01;  author mendel;  state Exp;
branches ;
next     5.1;

5.1
date     88.05.05.17.58.33;  author brent;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.46.16;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@Fixed lint errors and removed tracing.
@
text
@/* netIECmd.c -
 *
 * Routines to execute commands for the Intel 82586 device driver.
 *
 * Copyright 1985, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/net/sun3.md/RCS/netIECmd.c,v 9.2 90/10/19 15:47:22 jhh Exp Locker: rab $ SPRITE (Berkeley)";
#endif

#include <sprite.h>
#include <sys.h>
#include <list.h>
#include <vm.h>
#include <sync.h>
#include <netIEInt.h>


/*
 *----------------------------------------------------------------------
 *
 * NetIECheckSCBCmdAccept --
 *
 *	Check to see if the scb command was accepted.  Panic if not accepted.
 *	This routine is always called with interrupts disabled.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
NetIECheckSCBCmdAccept(scbPtr)
    volatile NetIESCB	*scbPtr;
{
    int	 i;

    for (i = 0; i < 5; i++) {
	NET_IE_DELAY((*(short *) scbPtr->cmdWord == 0));

	if (*(short *) scbPtr->cmdWord != 0) {
	    printf( "Intel: scb command not accepted\n");
	} else {
	    return;
	}
    }
    panic( "Intel: scb command not accepted\n");
}


/*
 *----------------------------------------------------------------------
 *
 * NetIEExecCommand --
 *
 *	Execute a simple Intel command.  This is done by executing the command
 *	and then waiting until it completes.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

void
NetIEExecCommand(cmdPtr, statePtr)
    register volatile NetIECommandBlock	*cmdPtr;
    NetIEState		*statePtr;
{
    /*
     * Initialize the command header.
     */

    *(short *) cmdPtr = 0;	
    /* 
     * Mark this as the end of the list. 
     */
    NetBfShortSet(cmdPtr->bits, EndOfList, 1); 
    /* 
     * Have the command unit interrupt us when it is done.

     */
    NetBfShortSet(cmdPtr->bits, Interrupt, 1); 

    /*
     * Start the command unit.
     */

    NetBfShortSet(statePtr->scbPtr->cmdWord, CmdUnitCmd, NET_IE_CUC_START); 
    NET_IE_CHANNEL_ATTENTION(statePtr);
    NetIECheckSCBCmdAccept(statePtr->scbPtr);

    /*
     * Wait for the command to complete.
     */

    NET_IE_DELAY(NetBfShortTest(cmdPtr->bits, CmdDone, 1) && 
		 NetBfShortTest(statePtr->scbPtr->statusWord, CmdDone, 1) &&
	         NetBfShortTest(statePtr->scbPtr->statusWord, CmdUnitNotActive,
		     1));
    if (NetBfShortTest(cmdPtr->bits, CmdDone, 0) ||
        NetBfShortTest(statePtr->scbPtr->statusWord, CmdDone, 0) ||
	NetBfShortTest(statePtr->scbPtr->statusWord, CmdUnitNotActive, 0)) {

	int cmdCmdDone;
	int statusCmdDone;
	int cmdNotActive;
	cmdCmdDone = NetBfShortGet(cmdPtr->bits, CmdDone);
	statusCmdDone = NetBfShortGet(statePtr->scbPtr->statusWord, CmdDone);
	cmdNotActive = NetBfShortGet(statePtr->scbPtr->statusWord, 
	    CmdUnitNotActive);
	panic( "Intel: Could not execute a simple command: %d %d %d\n", 
		    cmdCmdDone, statusCmdDone, cmdNotActive);
	return;
    }

    /*
     * Ack the the command completion and the command unit going not active.
     */

    NetBfShortSet(statePtr->scbPtr->cmdWord, AckCmdDone, 1);
    NetBfShortSet(statePtr->scbPtr->cmdWord, AckCmdUnitNotActive, 1);

    NET_IE_CHANNEL_ATTENTION(statePtr);
    NetIECheckSCBCmdAccept(statePtr->scbPtr);
    return;
}
@


9.2
log
@Rewrite to support multiple interfaces and the Ultranet
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/net.jhh/sun3.md/RCS/netIECmd.c,v 9.4 90/09/20 21:13:41 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d51 1
a51 1
	NET_IE_DELAY((*(short *) &(scbPtr->cmdWord) == 0));
d53 1
a53 1
	if (*(short *) &(scbPtr->cmdWord) != 0) {
@


9.1
log
@Checked volatiles.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/net/sun3.md/RCS/netIECmd.c,v 9.0 89/09/12 15:13:13 douglis Stable Locker: rab $ SPRITE (Berkeley)";
d19 6
a24 8
#include "sprite.h"
#include "sys.h"
#include "list.h"
#include "vm.h"
#include "sync.h"
#include "netIEInt.h"
#include "net.h"
#include "netInt.h"
d41 1
d81 1
a81 1
NetIEExecCommand(cmdPtr)
d83 1
d89 10
a98 4
    *(short *) cmdPtr = 0;	/* Clear the status bits. */
    cmdPtr->endOfList = 1;	/* Mark this as the end of the list. */
    cmdPtr->interrupt = 1;	/* Have the command unit interrupt us when
				   it is done. */
d104 3
a106 3
    netIEState.scbPtr->cmdWord.cmdUnitCmd = NET_IE_CUC_START;
    NET_IE_CHANNEL_ATTENTION;
    NetIECheckSCBCmdAccept(netIEState.scbPtr);
d112 15
a126 5
    NET_IE_DELAY(cmdPtr->cmdDone && netIEState.scbPtr->statusWord.cmdDone &&
	         netIEState.scbPtr->statusWord.cmdUnitNotActive);
    if (!cmdPtr->cmdDone ||
        !netIEState.scbPtr->statusWord.cmdDone ||
	!netIEState.scbPtr->statusWord.cmdUnitNotActive) {
d128 1
a128 2
			cmdPtr->cmdDone, netIEState.scbPtr->statusWord.cmdDone,
			netIEState.scbPtr->statusWord.cmdUnitNotActive);
d136 2
a137 2
    netIEState.scbPtr->cmdWord.ackCmdDone = 1;
    netIEState.scbPtr->cmdWord.ackCmdUnitNotActive = 1;
d139 2
a140 2
    NET_IE_CHANNEL_ATTENTION;
    NetIECheckSCBCmdAccept(netIEState.scbPtr);
@


9.0
log
@Changing version numbers.
@
text
@d16 2
a17 2
static char rcsid[] = "$Header: /sprite/src/kernel/net/sun3.md/RCS/netIECmd.c,v 8.2 89/05/24 07:58:10 rab Exp Locker: douglis $ SPRITE (Berkeley)";
#endif not lint
d126 1
@


8.2
log
@Changes to allow optimization.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/net/sun3.md/RCS/netIECmd.c,v 8.1 88/11/30 11:50:24 brent Exp Locker: rab $ SPRITE (Berkeley)";
@


8.1
log
@Sys_Printf => printf   Sys_Panic => panic
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/net/sun3.md/RCS/netIECmd.c,v 8.0 88/11/11 18:27:18 douglis Stable Locker: brent $ SPRITE (Berkeley)";
d47 1
a47 1
    NetIESCB	*scbPtr;
d83 1
a83 1
    register	NetIECommandBlock	*cmdPtr;
@


8.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/net/sun3.md/RCS/netIECmd.c,v 6.0 88/08/11 12:20:29 brent Stable Locker: douglis $ SPRITE (Berkeley)";
d55 1
a55 1
	    Sys_Panic(SYS_WARNING, "Intel: scb command not accepted\n");
d60 1
a60 1
    Sys_Panic(SYS_FATAL, "Intel: scb command not accepted\n");
d111 1
a111 1
	Sys_Panic(SYS_FATAL, "Intel: Could not execute a simple command: %d %d %d\n", 
@


6.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: netIECmd.c,v 5.2 88/06/27 10:46:01 mendel Exp $ SPRITE (Berkeley)";
@


5.2
log
@Updated copyright notice and cleaned up comment typos.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: netIECmd.c,v 5.1 88/05/05 17:58:33 brent Exp $ SPRITE (Berkeley)";
@


5.1
log
@Conversion to use Mach module
@
text
@d5 8
a12 2
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
d16 1
a16 1
static char rcsid[] = "$Header: netIECmd.c,v 5.0 87/08/11 10:46:16 sprite Exp $ SPRITE (Berkeley)";
d24 1
a24 1
#include "netIE.h"
@


5.0
log
@First Sprite native copy
@
text
@d10 1
a10 1
static char rcsid[] = "$Header: netIECmd.c,v 4.1 87/05/14 10:18:43 nelson Exp $ SPRITE (Berkeley)";
a13 1
#include "machine.h"
@
