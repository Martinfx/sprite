head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.2 symm:9.2 spur:9.2 sprited:9.2.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     92.07.09.21.46.42;  author kupfer;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.02.16.29.32;  author mgbaker;  state Exp;
branches 9.2.1.1;
next     9.1;

9.1
date     90.09.11.11.35.30;  author mgbaker;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.17.40;  author douglis;  state Stable;
branches ;
next     8.0;

8.0
date     88.11.11.18.34.51;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.07.14.54.40;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.26.18.27.37;  author mlgray;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.24.43;  author brent;  state Stable;
branches ;
next     5.0;

5.0
date     87.08.11.10.48.21;  author sprite;  state Exp;
branches ;
next     ;

9.2.1.1
date     91.10.21.21.48.36;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@Make the lock in Rpc_Histogram always be a kernel lock.
@
text
@/*
 * rpcHistogram.h --
 *
 *	Definitions for the histograms of event durations.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/rpc/rpcHistogram.h,v 9.2 90/10/02 16:29:32 mgbaker Exp $ SPRITE (Berkeley)
 */

#ifndef _RPCHISTOGRAM
#define _RPCHISTOGRAM

#include <spriteTime.h>
#ifdef KERNEL
#include <sync.h>
#else
#include <kernel/sync.h>
#endif /* KERNEL */

/*
 * An empirical time distribution is kept in the following structure.
 * This includes the average, plus an array of calls vs. microseconds
 * with some granularity on the time for each bucket.  We explicitly 
 * specify a kernel lock, so that we can copyout this struct to a user
 * program and have the user program understand what it's getting.
 */
typedef struct Rpc_Histogram {
    Sync_KernelLock lock;	/* Used to monitor access to histogram */
    int numCalls;		/* The total number of calls */
    Time aveTimePerCall;	/* The average interval duration */
    Time totalTime;		/* The total time spent in the calls */
    Time overheadTime;		/* Overhead cost per call */
    int	usecPerBucket;		/* The granularity of the histogram */
    int numHighValues;		/* Count of out-of-bounds values */
    int bucketShift;		/* Used to map from time to bucket */
    int numBuckets;		/* The number of slots in the histogram */
    int *bucket;		/* The array of counters */
} Rpc_Histogram;

/*
 * This is the size of all the histograms kept by the system.
 * Although they could vary in size, one size is used in order to
 * simplify the interface to the user program that prints out
 * the histograms.
 */
#define RPC_NUM_HIST_BUCKETS 50
/*
 * The service time is measured on both the client and the server.
 * These flags enable/disable this measurement.  The macros are used
 * to invoke the tracing procedures, subject to the flags.
 */
extern Boolean rpcServiceTiming;
extern Boolean rpcCallTiming;

#define RPC_CALL_TIMING_START(command, timePtr) \
    if (rpcCallTiming) { \
	Rpc_HistStart(rpcCallTime[command], timePtr); \
    }
#define RPC_CALL_TIMING_END(command, timePtr) \
    if (rpcCallTiming) { \
	Rpc_HistEnd(rpcCallTime[command], timePtr); \
    }
#define RPC_SERVICE_TIMING_START(command, timePtr) \
    if (rpcServiceTiming) { \
	Rpc_HistStart(rpcServiceTime[command], timePtr); \
    }
#define RPC_SERVICE_TIMING_END(command, timePtr) \
    if (rpcServiceTiming) { \
	Rpc_HistEnd(rpcServiceTime[command], timePtr); \
    }

extern Rpc_Histogram *Rpc_HistInit _ARGS_((int numBuckets, int usecPerBucket));
extern void Rpc_HistReset _ARGS_((register Rpc_Histogram *histPtr));
extern void Rpc_HistStart _ARGS_((register Rpc_Histogram *histPtr, register Time *timePtr));
 extern void Rpc_HistEnd _ARGS_((register Rpc_Histogram *histPtr, register Time * timePtr));
extern ReturnStatus Rpc_HistDump _ARGS_((register Rpc_Histogram *histPtr, register Address buffer));
extern void Rpc_HistPrint _ARGS_((register Rpc_Histogram *histPtr));

#endif /* _RPCHISTOGRAM */
@


9.2
log
@More prototyping garbage.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.h,v 9.1 90/09/11 11:35:30 mgbaker Exp $ SPRITE (Berkeley)
d26 3
a28 1
 * with some granularity on the time for each bucket.
d31 1
a31 1
    Sync_Lock lock;		/* Used to monitor access to histogram */
@


9.2.1.1
log
@Initial branch for Sprite server.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.h,v 9.2 90/10/02 16:29:32 mgbaker Exp $ SPRITE (Berkeley)
@


9.1
log
@Added function prototypes (Mendel checking for mary)
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.h,v 9.0 89/09/12 15:17:40 douglis Stable Locker: mgbaker $ SPRITE (Berkeley)
d16 6
a21 2
#include "spriteTime.h"
#include "sync.h"
@


9.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.h,v 8.0 88/11/11 18:34:51 douglis Stable Locker: douglis $ SPRITE (Berkeley)
d69 6
a74 6
extern Rpc_Histogram	*Rpc_HistInit();
extern void		Rpc_HistReset();
extern void		Rpc_HistStart();
extern void		Rpc_HistEnd();
extern ReturnStatus	Rpc_HistDump();
extern void		Rpc_HistPrint();
@


8.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.h,v 6.2 88/10/07 14:54:40 mlgray Exp Locker: douglis $ SPRITE (Berkeley)
@


6.2
log
@Fixed include file references.
@
text
@d10 1
a10 1
 * $Header: rpcHistogram.h,v 6.1 88/08/26 18:27:37 mlgray Exp $ SPRITE (Berkeley)
@


6.1
log
@Fixed some lint errors.
@
text
@d10 1
a10 1
 * $Header: rpcHistogram.h,v 6.0 88/08/11 12:24:43 brent Stable $ SPRITE (Berkeley)
d16 1
a16 1
#include "time.h"
@


6.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: rpcHistogram.h,v 5.0 87/08/11 10:48:21 sprite Exp $ SPRITE (Berkeley)
d76 1
a76 1
#endif _RPCHISTOGRAM
@


5.0
log
@First Sprite native copy
@
text
@d10 1
a10 1
 * $Header: rpcHistogram.h,v 1.3 86/12/10 20:16:24 brent Exp $ SPRITE (Berkeley)
@
