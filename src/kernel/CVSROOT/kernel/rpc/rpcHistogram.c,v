head     9.2;
branch   ;
access   ;
symbols  ds3100:9.2 sun3:9.2 sun4nw:9.1 symm:9.1 spur:9.1 sprited:9.1.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.2
date     92.07.10.14.42.24;  author kupfer;  state Exp;
branches ;
next     9.1;

9.1
date     90.10.02.16.29.31;  author mgbaker;  state Exp;
branches 9.1.1.1;
next     9.0;

9.0
date     89.09.12.15.18.22;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.05.30.16.13.50;  author jhh;  state Exp;
branches ;
next     8.3;

8.3
date     89.02.15.08.19.38;  author jhh;  state Exp;
branches ;
next     8.2;

8.2
date     89.01.06.11.28.14;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     88.12.04.15.29.46;  author ouster;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.35.54;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.28.19.24.08;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.26.18.26.34;  author mlgray;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.25.34;  author brent;  state Stable;
branches ;
next     5.1;

5.1
date     87.12.15.15.25.45;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.48.50;  author sprite;  state Exp;
branches ;
next     ;

9.1.1.1
date     91.10.22.15.39.52;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.2
log
@There are a million microseconds in a second, not a thousand.
@
text
@/*
 * rpcHistogram.c --
 *
 *      Simple histograms of event durations are maintained by the
 *      routines in this module.  The data recorded includes an average of
 *      time samples, and a histogram at some granularity of time
 *      intervals.
 *
 * Copyright (C) 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/rpc/rpcHistogram.c,v 9.1 90/10/02 16:29:31 mgbaker Exp $ SPRITE (Berkeley)";
#endif /* not lint */


#include <sprite.h>
#include <stdio.h>
#include <bstring.h>
#include <status.h>
#include <sync.h>
#include <timer.h>
#include <rpcHistogram.h>
#include <stdlib.h>
#include <vm.h>

#define LOCKPTR (&histPtr->lock)


/*
 *----------------------------------------------------------------------
 *
 * Rpc_HistInit --
 *
 *	Initialize the data structure used to keep an empirical time
 *	distribution, or histogram.
 *
 * Results:
 *	A pointer to the data structure, suitable for passing to
 *	Rpc_HistStart and Rpc_HistStop.
 *
 * Side effects:
 *	Allocates memory for the structure.
 *
 *----------------------------------------------------------------------
 */
Rpc_Histogram *
Rpc_HistInit(numBuckets, usecPerBucket)
    int numBuckets;	/* The number of columns in the histogram */
    int usecPerBucket;	/* The time step between columns in the histogram */
{
    register Rpc_Histogram *histPtr;
    register int bound;
    Timer_Ticks startTicks, endTicks;

    histPtr = (Rpc_Histogram *)malloc(sizeof(Rpc_Histogram));
    histPtr->numBuckets = numBuckets;
    histPtr->bucket = (int *)malloc(numBuckets * sizeof(int));
    Sync_LockInitDynamic(&histPtr->lock, "Rpc:histPtr->lock");
    histPtr->aveTimePerCall.seconds = 0;
    histPtr->aveTimePerCall.microseconds = 0;
    bzero((Address)&histPtr->totalTime, sizeof(Time));
    histPtr->numCalls = 0;
    /*
     * Truncate the usecPerBucket to a power of two.  This lets the sampling
     * routines use shifts instead of modulo.
     */
    if (usecPerBucket < 2) {
	usecPerBucket = 2;
    }
    histPtr->bucketShift = 0;
    for (bound = 2 ; bound <= usecPerBucket ; bound <<= 1) {
	histPtr->bucketShift++;
    }
    
    histPtr->usecPerBucket = bound >> 1;
    /*
     * Time the cost of calling the histogram sampling routines.
     */
    Timer_GetCurrentTicks(&startTicks);
    for (bound=0 ; bound<10 ; bound++) {
	Time time;
	Rpc_HistStart(histPtr, &time);
	Rpc_HistEnd(histPtr, &time);
    }
    Timer_GetCurrentTicks(&endTicks);
    Timer_SubtractTicks(endTicks, startTicks, &endTicks);
    Timer_TicksToTime(endTicks, &histPtr->overheadTime);
    Time_Divide(histPtr->overheadTime, 10, &histPtr->overheadTime);
    Rpc_HistReset(histPtr);
    return(histPtr);
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_HistReset --
 *
 *	Reset the histograms, so they start fresh for another benchmark.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The counters and average are reset.
 *
 *----------------------------------------------------------------------
 */
ENTRY void
Rpc_HistReset(histPtr)
    register Rpc_Histogram *histPtr;
{
    register int i;

    LOCK_MONITOR;

    histPtr->numCalls = 0;
    bzero((Address)&histPtr->totalTime, sizeof(Timer_Ticks));
    histPtr->aveTimePerCall.seconds = 0;
    histPtr->aveTimePerCall.microseconds = 0;
    histPtr->numHighValues = 0;
    for (i=0 ; i<histPtr->numBuckets ; i++) {
	histPtr->bucket[i] = 0;
    }

    UNLOCK_MONITOR;
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_HistStart --
 *
 *	Take a time sample to start a measured interval and update
 *	the number of calls.  On a Sun-2 this costs about 650 microseconds.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Take a time sample and count calls.
 *
 *----------------------------------------------------------------------
 */
ENTRY void
Rpc_HistStart(histPtr, timePtr)
    register Rpc_Histogram *histPtr;	/* The histogram */
    register Time *timePtr;		/* Client storage area fro the time
					 * sample */
{
    LOCK_MONITOR;
    Timer_GetRealTimeOfDay(timePtr, (int *)NIL, (Boolean *)NIL);
    histPtr->numCalls++;
    UNLOCK_MONITOR;
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_HistEnd --
 *
 *	Called at the end of an interval, this determines the length of
 *	the interval, keeps a running sum, and updates a counter
 *	in the histogram corresponding to the interval length.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Increment a counter in the histogram.
 *
 *----------------------------------------------------------------------
 */
ENTRY void
Rpc_HistEnd(histPtr, timePtr)
    register Rpc_Histogram *histPtr;	/* The histogram */
    register Time *timePtr;		/* Result from Rpc_HistStart */
{
    Time endTime;
    register int index;
    LOCK_MONITOR;
    Timer_GetRealTimeOfDay(&endTime, (int *)NIL, (Boolean *)NIL);
    Time_Subtract(endTime, *timePtr, timePtr);
    /* 
     * If the command took more than about a half hour, we run into the 
     * risk of overflow when we convert seconds to microseconds.  So, treat 
     * anything greater than 2000 seconds as 2000 seconds.
     */
    if (timePtr->seconds > 2000) {
	timePtr->seconds = 2000;
    }
    index = (timePtr->seconds * 1000000 + timePtr->microseconds) >>
		histPtr->bucketShift;
    if (index >= histPtr->numBuckets) {
	histPtr->numHighValues++;
    } else {
	histPtr->bucket[index]++;
    }
    Time_Add(histPtr->totalTime, *timePtr, &histPtr->totalTime);
    UNLOCK_MONITOR;
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_HistDump --
 *
 *	Copy the histogram data structure to the callers buffer.
 *	It is assumed that it is a user space buffer, and that it
 *	is large enough (a lame assumption).
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The copy.
 *
 *----------------------------------------------------------------------
 */
ENTRY ReturnStatus
Rpc_HistDump(histPtr, buffer)
    register Rpc_Histogram *histPtr;
    register Address buffer;
{
    register ReturnStatus status;
    
    LOCK_MONITOR;
    status = Vm_CopyOut(sizeof(Rpc_Histogram), (Address)histPtr, buffer);
    if (status == SUCCESS) {
	buffer += sizeof(Rpc_Histogram);
	status = Vm_CopyOut(histPtr->numBuckets * sizeof(int),
			    (Address)histPtr->bucket, buffer);
    }
    UNLOCK_MONITOR;
    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_HistPrint --
 *
 *	Print the histogram data structure to the console.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	The copy.
 *
 *----------------------------------------------------------------------
 */
ENTRY void
Rpc_HistPrint(histPtr)
    register Rpc_Histogram *histPtr;
{
    register int i;
    LOCK_MONITOR;
    Time_Divide(histPtr->totalTime, histPtr->numCalls,
				    &histPtr->aveTimePerCall);
    printf("%d Calls,  ave %d.%06d secs each\n",
		   histPtr->numCalls, histPtr->aveTimePerCall.seconds,
		   histPtr->aveTimePerCall.microseconds);
    for (i=0 ; i<histPtr->numBuckets ; i++) {
	printf("%8d ", i * histPtr->usecPerBucket);
    }
    printf("Overflow\n");
    for (i=0 ; i<histPtr->numBuckets ; i++) {
	printf("%7d  ", histPtr->bucket[i]);
    }
    printf("%d\n", histPtr->numHighValues);
    printf("\n");
    UNLOCK_MONITOR;
}
@


9.1
log
@More prototyping garbage.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 9.0 89/09/12 15:18:22 douglis Stable Locker: mgbaker $ SPRITE (Berkeley)";
d185 9
a193 1
    index = (timePtr->seconds * 1000 + timePtr->microseconds) >>
@


9.1.1.1
log
@Initial branch for Sprite server.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 9.1 90/10/02 16:29:31 mgbaker Exp $ SPRITE (Berkeley)";
@


9.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 8.4 89/05/30 16:13:50 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
d18 9
a26 6
#include "sprite.h"
#include "status.h"
#include "sync.h"
#include "timer.h"
#include "rpcHistogram.h"
#include "stdlib.h"
@


8.4
log
@Removed call to Sync_LockRegister
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 8.3 89/02/15 08:19:38 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
@


8.3
log
@Updated Sync_Lock initialization
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 8.2 89/01/06 11:28:14 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
a57 1
    Sync_LockRegister(&histPtr->lock);
@


8.2
log
@New Sync_Lock definition
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 8.1 88/12/04 15:29:46 ouster Exp $ SPRITE (Berkeley)";
d57 2
a58 1
    SYNC_LOCK_INIT_DYNAMIC(&histPtr->lock);
@


8.1
log
@Stop using obsolete header files.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 8.0 88/11/11 18:35:54 douglis Stable Locker: ouster $ SPRITE (Berkeley)";
d57 1
a57 2
    histPtr->lock.inUse = FALSE;
    histPtr->lock.waiting = FALSE;
@


8.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 6.2 88/10/28 19:24:08 mlgray Exp Locker: douglis $ SPRITE (Berkeley)";
a21 1
#include "byte.h"
d23 1
a23 1
#include "mem.h"
@


6.2
log
@Conversion to new C library.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcHistogram.c,v 6.1 88/08/26 18:26:34 mlgray Exp Locker: mlgray $ SPRITE (Berkeley)";
@


6.1
log
@Fixed some lint errors.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcHistogram.c,v 6.0 88/08/11 12:25:34 brent Stable $ SPRITE (Berkeley)";
d55 1
a55 1
    histPtr = (Rpc_Histogram *)Mem_Alloc(sizeof(Rpc_Histogram));
d57 1
a57 1
    histPtr->bucket = (int *)Mem_Alloc(numBuckets * sizeof(int));
d62 1
a62 1
    Byte_Zero(sizeof(Time), (Address)&histPtr->totalTime);
d118 1
a118 1
    Byte_Zero(sizeof(Timer_Ticks), (Address)&histPtr->totalTime);
d253 1
a253 1
    Sys_Printf("%d Calls,  ave %d.%06d secs each\n",
d257 1
a257 1
	Sys_Printf("%8d ", i * histPtr->usecPerBucket);
d259 1
a259 1
    Sys_Printf("Overflow\n");
d261 1
a261 1
	Sys_Printf("%7d  ", histPtr->bucket[i]);
d263 2
a264 2
    Sys_Printf("%d\n", histPtr->numHighValues);
    Sys_Printf("\n");
@


6.0
log
@Changing version numbers.
@
text
@d1 1
a1 1
/* 
d14 2
a15 2
static char rcsid[] = "$Header: rpcHistogram.c,v 5.1 87/12/15 15:25:45 nelson Exp $ SPRITE (Berkeley)";
#endif not lint
@


5.1
log
@Fixed lint errors.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcHistogram.c,v 5.0 87/08/11 10:48:50 sprite Exp $ SPRITE (Berkeley)";
@


5.0
log
@First Sprite native copy
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcHistogram.c,v 1.2 86/12/10 20:20:48 brent Exp $ SPRITE (Berkeley)";
d24 1
@
