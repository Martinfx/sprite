head     9.13;
branch   ;
access   ;
symbols  ds3100:9.13 sun3:9.13 sun4nw:9.13 symm:9.13 spur:9.13 sprited:9.13.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.13
date     91.05.08.20.01.34;  author mgbaker;  state Exp;
branches 9.13.1.1;
next     9.12;

9.12
date     91.05.08.19.26.14;  author mgbaker;  state Exp;
branches ;
next     9.11;

9.11
date     90.11.14.15.16.50;  author shirriff;  state Exp;
branches ;
next     9.10;

9.10
date     90.10.02.16.30.17;  author mgbaker;  state Exp;
branches ;
next     9.9;

9.9
date     90.09.20.15.17.39;  author mgbaker;  state Exp;
branches ;
next     9.8;

9.8
date     90.09.11.11.35.32;  author mgbaker;  state Exp;
branches ;
next     9.7;

9.7
date     90.06.21.15.54.16;  author mgbaker;  state Exp;
branches ;
next     9.6;

9.6
date     90.04.04.10.11.43;  author mgbaker;  state Exp;
branches ;
next     9.5;

9.5
date     90.04.03.14.41.10;  author mgbaker;  state Exp;
branches ;
next     9.4;

9.4
date     90.03.29.12.46.38;  author mgbaker;  state Exp;
branches ;
next     9.3;

9.3
date     90.03.22.12.13.51;  author mgbaker;  state Exp;
branches ;
next     9.2;

9.2
date     90.03.22.12.10.09;  author mgbaker;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.12.12.06.42;  author brent;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.17.47;  author douglis;  state Stable;
branches ;
next     8.3;

8.3
date     89.06.23.12.59.02;  author brent;  state Exp;
branches ;
next     8.2;

8.2
date     89.06.08.09.40.51;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.22.19.34.55;  author jhh;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.34.59;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.08.29.14.29.23;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.26.18.27.45;  author mlgray;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.24.48;  author brent;  state Stable;
branches ;
next     5.2;

5.2
date     88.05.16.10.03.00;  author brent;  state Exp;
branches ;
next     5.1;

5.1
date     87.09.11.09.49.44;  author brent;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.48.27;  author sprite;  state Exp;
branches ;
next     ;

9.13.1.1
date     91.10.21.21.06.02;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.13
log
@Fixed typo.
@
text
@/*
 * rpcServer.h --
 *
 *	Definitions for the server side of the RPC system.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.12 91/05/08 19:26:14 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
 */

#ifndef _RPCSERVER
#define _RPCSERVER

#ifdef KERNEL
#include <net.h>
#include <sync.h>
#include <timer.h>
#include <rpcTypes.h>
#include <rpcPacket.h>
#include <rpcSrvStat.h>
#include <rpcHistogram.h>
#else
#include <kernel/net.h>
#include <kernel/sync.h>
#include <kernel/timer.h>
#include <kernel/rpcTypes.h>
#include <kernel/rpcPacket.h>
#include <kernel/rpcSrvStat.h>
#include <kernel/rpcHistogram.h>
#endif /* KERNEL */


/*
 *      Definition of the state table maintained for all the RPC server
 *      processes.  The state of each server is similar to the state kept
 *      for each client in the channel table.  It includes the current RPC
 *      sequence number, the client's address and channel number, and
 *      buffer space for input and reply message headers.  The server
 *      state table is scanned during dispatch in order to find the server
 *      for incoming messages.
 */
typedef struct RpcServerState {
    /*
     * Rpc transaction state:  There are state bits to drive the algorithm,
     * the values are described below with their definitions.
     */
    int			state;
    /*
     * The current RPC sequence number.
     */
    unsigned int	ID;
    /*
     * The index is a self reference to this server's state.
     * It is kept here because it will be part of the packet header.
     */
    int			index;
    /*
     * Servers go into an aging state after waiting for a reply
     * from the client for too long.  A callback procedure is put
     * in the the timer queue to probe the client, and the server's
     * age is recorded here.
     */
    int			age;
    Timer_QueueElement timeoutItem;

    /*
     * The client's host ID and channel number uniquely identify it.
     * This is used to match incoming requests to the correct server process.
     */
    int			clientID;
    int			channel;

    /*
     * Synchronization between the dispatcher and the server processes
     * is with 'mutex', a master lock.  The condition variable is
     * used to notify the server process that it has input.
     */
    Sync_Semaphore	mutex;
    Sync_Condition	waitCondition;

    /*
     * This bitmask indicates which fragments our client has recieved.
     * It is used by RpcOutput for partial resends.
     */
    unsigned	int	fragsDelivered;
    /*
     * This bitmask indicates which fragments we've gotten.
     * It is maintained by ServerDispatch and returned to the
     * client in partial acknowledgments.
     */
    int			fragsReceived;

    /*
     * Header and buffer specifications for request messages.
     */
    RpcHdr		requestRpcHdr;
    RpcBufferSet	request;

    /*
     * Header and buffer specification for the reply message.
     */
    RpcHdr		replyRpcHdr;
    RpcBufferSet	reply;

    /*
     * A callback procedure is used to free up the reply.  This is called
     * by the RPC module when it knows the client has successfully received
     * the reply, or it has crashed.
     */
    int			(*freeReplyProc) _ARGS_((ClientData freeReplyData));
    ClientData		freeReplyData;

    /*
     * An array of RPC headers and buffer specifications is needed
     * when fragmenting a large reply.
     */
    RpcHdr		fragRpcHdr[RPC_MAX_NUM_FRAGS];
    RpcBufferSet	fragment[RPC_MAX_NUM_FRAGS];

    /*
     * Buffer space for server acknowlegment messages.
     */
    RpcHdr		ackRpcHdr;
    RpcBufferSet	ack;

    /*
     * Two temporaries are needed to record the
     * amount of data actually sent by the client.
     */
    int			actualDataSize;
    int			actualParamSize;

} RpcServerState;

/*
 * These are data structures for sending negative acknowledgements when
 * there's no server available to allocate to a client channel.  Since there's
 * no server available, this stuff isn't part of the server state.
 */
typedef struct  NackData {
    RpcHdr              *rpcHdrArray;		/* headers to transmit */
    int			*hdrState;		/* which headers are free */
    RpcBufferSet        *bufferSet;		/* buffers for transmission */
    Sync_Semaphore      mutex;			/* protect nack data */
    int			numFree;		/* are any free? */
} NackData;
extern	NackData	rpcNack;
extern	int		rpc_NumNackBuffers;	/* settable number of buffers */
#define	RPC_NACK_FREE		0		/* Can use this header */
#define	RPC_NACK_WAITING	1		/* Hdr full, waiting for xmit */
#define	RPC_NACK_XMITTING	2		/* Hdr being xmitted */


/*
 * Definitions of state bits for a remote procedure call.
 *  SRV_NOTREADY	The server has no buffer space yet.
 *  SRV_FREE		The server is free.
 *  SRV_BUSY		The server is working on a request.
 *  SRV_WAITING		The server has sent off its reply.
 *  SRV_AGING		The server is aging, waiting for a client request.
 *  SRV_FRAGMENT	 ... waiting for reasembly of a fragmented request.
 *  SRV_NO_REPLY	The server is explicitly not returning a reply
 *			in response to a broadcast request.  This state
 *			prevents the dispatcher from sending acknowledments
 *			and prevents the top level server process from
 *			sending a default error reply to the client.
 * SRV_STUCK		This server is apparently stuck during an RPC for
 *			a dead or rebooted client.  The server will not
 *			be picked by the dispatcher until its current
 *			RPC completes and this flag is reset.
 */
#define SRV_NOTREADY	0x00
#define SRV_FREE	0x01
#define SRV_BUSY	0x02
#define SRV_WAITING	0x04
#define SRV_AGING	0x08
#define SRV_FRAGMENT	0x10
#define SRV_NO_REPLY	0x20
#define SRV_STUCK	0x40

/*
 * The server's state table has a maximum number of entries, but not all
 * the entries are initialized and have an associated process.  The current
 * number of existing server processes is recorded in rpcNumServers.  Up to
 * rpcMaxServer processes may be created by Rpc_Deamon.  rpcMaxServers may
 * not be set above rpcAbsoluteMaxServers.  (This is for allowing the
 * maximum number of servers to be changed by a system call and thus set
 * in boot scripts differently for different servers.)
 */
extern RpcServerState **rpcServerPtrPtr;
extern int		rpcMaxServers;
extern int		rpcNumServers;
extern int		rpcAbsoluteMaxServers;

/*
 * Whether or not the server should send negative acknowledgements.
 */
extern	Boolean		rpcSendNegAcks;

/*
 * The service procedure switch. This is indexed by procedure number.
 */
typedef ReturnStatus (*IntProc) _ARGS_((ClientData srvToken, int clientID, 
			int command, Rpc_Storage *storagePtr));
typedef struct RpcService {
    IntProc	serviceProc;
    char	*name;
} RpcService;
extern RpcService rpcService[];

/*
 * A histogram of the service times for the different RPCs.
 */
extern Rpc_Histogram	*rpcServiceTime[];

/*
 * A raw count of the number of service calls.
 */
extern int		rpcServiceCount[];

/*
 * For determining whether rpc being handled by this server was sent
 * to the broadcast server ID.
 */
#define	RPC_IS_BROADCAST(srvrPtr)	\
    (((RpcServerState *) srvrPtr)->requestRpcHdr.serverID == RPC_BROADCAST_SERVER_ID)

/*
 * For tracing calls.
 */
extern void Rpc_OkayToTrace _ARGS_((Boolean okay));
extern void Rpc_FreeTraces _ARGS_((void));
extern void RpcAddServerTrace _ARGS_((RpcServerState *srvPtr, RpcHdr *rpcHdrPtr, Boolean noneThere, int num));
extern ReturnStatus Rpc_DumpServerTraces _ARGS_((int length, RpcServerUserStateInfo *resultPtr, int *lengthNeededPtr));

/*
 * Forward declarations.
 */
extern RpcServerState *RpcServerAlloc _ARGS_((RpcHdr *rpcHdrPtr));
extern RpcServerState *RpcServerInstall _ARGS_((void));
extern void RpcServerDispatch _ARGS_((register RpcServerState *srvPtr, register RpcHdr *rpcHdrPtr));
extern RpcServerState *RpcInitServerState _ARGS_((int index));
extern void RpcAck _ARGS_((RpcServerState *srvPtr, int flags));
extern void RpcResend _ARGS_((RpcServerState *srvPtr));
extern void RpcProbe _ARGS_((RpcServerState *srvPtr));
extern void RpcSrvInitHdr _ARGS_((RpcServerState *srvPtr, RpcHdr *rpcHdrPtr, RpcHdr *requestHdrPtr));
extern void RpcSetNackBufs _ARGS_((void));
extern void RpcReclaimServers _ARGS_((Boolean serversMaxed));
extern void RpcInitServerTraces _ARGS_((void));


#endif /* _RPCSERVER */
@


9.13.1.1
log
@Initial branch for Sprite server.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.13 91/05/08 20:01:34 mgbaker Exp $ SPRITE (Berkeley)
@


9.12
log
@New macro to determine whether a server is handling something sent
to the broadcast id.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.11 90/11/14 15:16:50 shirriff Exp Locker: mgbaker $ SPRITE (Berkeley)
d228 1
a228 1
    (((RpcServer *) srvrPtr)->requestRpcHdr.serverID == RPC_BROADCAST_SERVER_ID)
@


9.11
log
@Moved declaration to rpcTypes.h
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.10 90/10/02 16:30:17 mgbaker Exp $ SPRITE (Berkeley)
d222 7
@


9.10
log
@More prototyping garbage.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.9 90/09/20 15:17:39 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
a211 12

/*
 * The form in which the user expects the server tracing info.
 */
typedef	struct	RpcServerUserStateInfo {
    int		index;
    int		clientID;
    int		channel;
    int		state;
    int		num;
    Time	time;
} RpcServerUserStateInfo;
@


9.9
log
@Fixed some prototyping.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.8 90/09/11 11:35:32 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d16 17
a32 7
#include "net.h"
#include "sync.h"
#include "timer.h"

#include "rpcInt.h"
#include "rpcSrvStat.h"
#include "rpcHistogram.h"
@


9.8
log
@Added function prototypes (Mendel checking for mary)
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.7 90/06/21 15:54:16 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d196 1
a196 1
			int command, struct Rpc_Storage *storagePtr));
@


9.7
log
@New stuff for negative acks.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.6 90/04/04 10:11:43 mgbaker Exp $ SPRITE (Berkeley)
d102 1
a102 1
    int			(*freeReplyProc)();
d195 2
a196 1
typedef int		(*IntProc)();
d204 12
d228 4
a231 4
extern	void		Rpc_OkayToTrace();
extern	void		Rpc_FreeTraces();
extern	void		RpcAddServerTrace();
extern	ReturnStatus	Rpc_DumpServerTraces();
d236 12
a247 9
RpcServerState		*RpcServerAlloc();
RpcServerState		*RpcServerInstall();
RpcServerState		*RpcInitServerState();
void			RpcServerDispatch();
void			RpcAck();
void			RpcResend();
void			RpcProbe();
void			RpcSrvInitHdr();
void			RpcSetNackBufs();
@


9.6
log
@More synchronization and static queuing for neg acks from server.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.5 90/04/03 14:41:10 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d133 3
a135 3
    RpcHdr              rpcHdrArray[4];		/* headers to transmit */
    int			hdrState[4];		/* which headers are free */
    RpcBufferSet        bufferSet[4];		/* buffers for transmission */
d140 1
d226 6
a231 5
void			 RpcServerDispatch();
void			 RpcAck();
void			 RpcResend();
void			 RpcProbe();
void			 RpcSrvInitHdr();
@


9.5
log
@Fixed synchronization problem on servers with negative acknowledgement
buffers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.4 90/03/29 12:46:38 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d133 3
a135 2
    RpcHdr              rpcHdr;			/* header to transmit */
    RpcBufferSet        bufferSet;		/* buffers for transmission */
d137 1
a137 1
    Boolean		busy;			/* check if free */
d140 3
@


9.4
log
@New negative ack stuff.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.3 90/03/22 12:13:51 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d133 4
a136 3
    RpcHdr              rpcHdr;
    RpcBufferSet        bufferSet;
    Sync_Semaphore      mutex;
@


9.3
log
@After merge with rpc.mgb.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc.mgb/RCS/rpcServer.h,v 1.1 90/01/19 19:15:27 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d128 13
d171 4
a174 1
 * rpcMaxServer processes may be created by Rpc_Deamon.
d179 6
@


9.2
log
@Prepare to merge.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.1 89/10/12 12:06:42 brent Exp $ SPRITE (Berkeley)
a24 1

d183 8
@


9.1
log
@Added the ID of the current transaction to the server's state.
Previously the reply packet header was used, but this
could lead cases where the previous reply was resent
with the current transaction ID, thereby breaking the client.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 9.0 89/09/12 15:17:47 douglis Stable Locker: brent $ SPRITE (Berkeley)
@


9.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 8.3 89/06/23 12:59:02 brent Exp Locker: douglis $ SPRITE (Berkeley)
d41 4
@


8.3
log
@Added extern
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 8.2 89/06/08 09:40:51 brent Exp Locker: brent $ SPRITE (Berkeley)
@


8.2
log
@Added SRV_STUCK
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 8.1 88/11/22 19:34:55 jhh Exp $ SPRITE (Berkeley)
d175 5
@


8.1
log
@new semaphore definition
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 6.2 88/08/29 14:29:23 mlgray Exp $ SPRITE (Berkeley)
d137 4
d149 1
@


8.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpcServer.h,v 6.2 88/08/29 14:29:23 mlgray Exp Locker: douglis $ SPRITE (Berkeley)
d67 1
a67 1
    int			mutex;
@


6.2
log
@lint
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 6.1 88/08/26 18:27:45 mlgray Exp $ SPRITE (Berkeley)
@


6.1
log
@Fixed some lint errors.
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 6.0 88/08/11 12:24:48 brent Stable $ SPRITE (Berkeley)
d74 1
a74 1
    int			fragsDelivered;
@


6.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 5.2 88/05/16 10:03:00 brent Exp $ SPRITE (Berkeley)
d183 1
a183 1
#endif _RPCSERVER
@


5.2
log
@Took out use of rpcNoServers
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 5.1 87/09/11 09:49:44 brent Exp $ SPRITE (Berkeley)
@


5.1
log
@Moved rpcNotifyList and rpcBootIds to rpcRecovery.c
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 5.0 87/08/11 10:48:27 sprite Exp $ SPRITE (Berkeley)
a154 1
extern int		rpcNoServers;
@


5.0
log
@First Sprite native copy
@
text
@d10 1
a10 1
 * $Header: rpcServer.h,v 3.5 86/12/09 22:01:52 brent Exp $ SPRITE (Berkeley)
a157 5
 * A bootId is kept for each client to detect reboots.
 */
extern int		rpcBootIds[];

/*
a170 5

/*
 * The list of call-back procedures invoked when we detect a client crash.
 */
extern	List_Links	rpcNotifyList;
@
