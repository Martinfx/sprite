head     9.9;
branch   ;
access   ;
symbols  ds3100:9.9 sun3:9.9 sun4nw:9.9 symm:9.9 spur:9.9 sprited:9.8.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.9
date     91.09.10.18.42.48;  author rab;  state Exp;
branches ;
next     9.8;

9.8
date     91.02.12.14.15.39;  author jhh;  state Exp;
branches 9.8.1.1;
next     9.7;

9.7
date     90.12.02.20.31.30;  author kupfer;  state Exp;
branches ;
next     9.6;

9.6
date     90.11.14.15.16.14;  author shirriff;  state Exp;
branches ;
next     9.5;

9.5
date     90.10.18.13.55.54;  author kupfer;  state Exp;
branches ;
next     9.4;

9.4
date     90.10.09.11.56.57;  author jhh;  state Exp;
branches ;
next     9.3;

9.3
date     90.09.11.16.08.13;  author mendel;  state Exp;
branches ;
next     9.2;

9.2
date     90.09.11.11.35.15;  author mgbaker;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.30.11.16.23;  author shirriff;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.17.21;  author douglis;  state Stable;
branches ;
next     8.1;

8.1
date     89.06.05.12.32.31;  author rab;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.34.22;  author douglis;  state Stable;
branches ;
next     6.1;

6.1
date     88.08.26.18.27.21;  author mlgray;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.24.20;  author brent;  state Stable;
branches ;
next     5.10;

5.10
date     87.12.10.12.30.01;  author brent;  state Exp;
branches ;
next     5.9;

5.9
date     87.10.09.09.29.09;  author brent;  state Exp;
branches ;
next     5.8;

5.8
date     87.10.04.15.55.24;  author brent;  state Exp;
branches ;
next     5.7;

5.7
date     87.10.01.16.38.56;  author brent;  state Exp;
branches ;
next     5.6;

5.6
date     87.09.30.10.30.10;  author brent;  state Exp;
branches ;
next     5.5;

5.5
date     87.09.30.09.47.25;  author brent;  state Exp;
branches ;
next     5.4;

5.4
date     87.09.21.16.28.54;  author brent;  state Exp;
branches ;
next     5.3;

5.3
date     87.09.21.16.24.42;  author brent;  state Exp;
branches ;
next     5.2;

5.2
date     87.09.15.08.54.13;  author brent;  state Exp;
branches ;
next     5.1;

5.1
date     87.09.10.11.22.58;  author brent;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.48.13;  author sprite;  state Exp;
branches ;
next     ;

9.8.1.1
date     91.10.21.20.55.46;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.9
log
@Fixed lint errors and removed tracing.
@
text
@/*
 * rpc.h --
 *
 *	External definitions needed by users of the RPC system.  The
 *	remote procedure call numbers are defined in rpcCall.h which
 *	is also included by this file.  The other main thing needed
 *	by users of the RPC system is the Rpc_Storage type.  This is
 *	a record of buffer references manipulated by stub procedures
 *	and passed into Rpc_Call.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.8 91/02/12 14:15:39 jhh Exp Locker: rab $ SPRITE (Berkeley)
 */

#ifndef _RPC
#define _RPC

#include <status.h>
#ifdef KERNEL
#include <net.h>
#include <sys.h>
#include <rpcTypes.h>
#include <rpcCall.h>
#else
#include <kernel/net.h>
#include <kernel/sys.h>
#include <kernel/rpcTypes.h>
#include <kernel/rpcCall.h>
#endif /* KERNEL */

/*
 * Structure to use for the simple call back to free up memory.
 * The reply a service stub generates is held onto until the
 * next request from the client arrives.  These pointers are to
 * memory that should be free'ed - ie. the previous reply.
 * If either pointer is NIL then it isn't freed.  See Rpc_Reply.
 */

typedef struct {
    Address	paramPtr;
    Address	dataPtr;
} Rpc_ReplyMem;

/*
 * This is set up to be the Sprite Host ID used for broadcasting.
 */
#define RPC_BROADCAST_SERVER_ID	NET_BROADCAST_HOSTID

/*
 * The local host's Sprite ID is exported for convenience to the filesystem
 * which needs to know who it is relative to file servers.
 */
extern int rpc_SpriteID;

/*
 * Hooks exported so they can be set via Fs_Command...
 */
extern Boolean rpc_Tracing;
extern Boolean rpc_NoTimeouts;

/*
 * Forward declarations
 */
extern ReturnStatus Rpc_Call _ARGS_((int serverID, int command, Rpc_Storage *storagePtr));
extern void Rpc_Reply _ARGS_((ClientData srvToken, int error, register Rpc_Storage *storagePtr, int (*freeReplyProc)(ClientData freeReplyData), ClientData freeReplyData));
extern void Rpc_ErrorReply _ARGS_((ClientData srvToken, int error));
extern int Rpc_FreeMem _ARGS_((ClientData freeReplyData));
extern ReturnStatus Rpc_CreateServer _ARGS_((int *pidPtr));
extern ReturnStatus Rpc_Echo _ARGS_((int serverId, Address inputPtr, Address returnPtr, int size));
extern ReturnStatus Rpc_Ping _ARGS_((int serverId));
extern ReturnStatus Rpc_EchoTest _ARGS_((int serverId, int numEchoes, int size, Address inputPtr, Address returnPtr, Time *deltaTimePtr));
extern ReturnStatus Rpc_GetTime _ARGS_((int serverId, Time *timePtr, int *timeZoneMinutesPtr, int *timeZoneDSTPtr));
extern ReturnStatus Test_RpcStub _ARGS_((int command, Address argPtr));
extern void Rpc_Init _ARGS_((void));
extern void Rpc_Start _ARGS_((void));
extern void Rpc_MaxSizes _ARGS_((int *maxDataSizePtr, int *maxParamSizePtr));
extern void Rpc_Daemon _ARGS_((void));
extern void Rpc_Server _ARGS_((void));
extern void Rpc_Dispatch _ARGS_((Net_Interface *interPtr, int protocol, 
    Address headerPtr, Address rpcHdrAddr, int packetLength));
extern void Rpc_Timeout _ARGS_((Timer_Ticks time, ClientData data));
extern void Rpc_PrintTrace _ARGS_((ClientData numRecords));
extern ReturnStatus Rpc_DumpTrace _ARGS_((int firstRec, int lastRec, char *fileName));
extern void Rpc_StampTest _ARGS_((void));
extern void Rpc_PrintCallCount _ARGS_((void));
extern void Rpc_PrintServiceCount _ARGS_((void));
extern ReturnStatus Rpc_GetStats _ARGS_((int command, int option, Address argPtr));
extern ReturnStatus Rpc_SendTest _ARGS_((int serverId, int numSends, int size, Address inputPtr, Time *deltaTimePtr));
extern ReturnStatus Rpc_Send _ARGS_((int serverId, Address inputPtr, int size));
extern ENTRY void	Rpc_OkayToTrace _ARGS_((Boolean okay));
extern ENTRY void	Rpc_FreeTraces _ARGS_((void));
extern ENTRY ReturnStatus	Rpc_DumpServerTraces _ARGS_((int length,
	RpcServerUserStateInfo *resultPtr, int *lengthNeededPtr));
#endif /* _RPC */
@


9.8
log
@Added RPC sanity checking
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.7 90/12/02 20:31:30 kupfer Exp $ SPRITE (Berkeley)
a63 3

extern int	rpc_SanityCheck;

a96 5

extern ReturnStatus Rpc_SanityCheck _ARGS_((int length, 
		    Net_ScatterGather *scatterPtr, int packetLength));


@


9.8.1.1
log
@Initial branch for Sprite server.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.8 91/02/12 14:15:39 jhh Exp $ SPRITE (Berkeley)
@


9.7
log
@Move Rpc_Storage from rpc.h to rpcTypes.h.  Add an include of
rpcTypes.h to rpcCall.h.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.6 90/11/14 15:16:14 shirriff Exp Locker: kupfer $ SPRITE (Berkeley)
d64 3
d100 3
@


9.6
log
@Added a couple of missing prototypes.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.5 90/10/18 13:55:54 kupfer Exp Locker: shirriff $ SPRITE (Berkeley)
d26 1
d31 1
a32 43


/*
 * A client stub procedure has to set up 2 sets of 2 storage areas for an
 * RPC.  The first pair of storage areas is for the request, or input,
 * parameters of the service procedure.  The second pair is for the reply,
 * or return, parameters of the service procedure.  Both the request and
 * the reply have a "data" area and a "parameter" area.  The general
 * convention is that the parameter area is meant for flags, tokens, and
 * other small control information.  The data area is for larger chunks of
 * data like pathnames or fileblocks. Either, or both, of the areas can
 * be empty by setting the address to NIL and the size to zero.
 *
 * The function of a client stub is to arrange its input parameters into
 * two buffers for the two parts of the request.  Also, it must set up the
 * buffer space for the two parts of the reply.  The RPC system will copy
 * the reply data and parameters into these areas, and the stub can access
 * them after Rpc_Call returns.
 */

typedef struct Rpc_Storage {
    /*
     * Two areas for data sent to the server.
     */
    Address	requestParamPtr;
    int		requestParamSize;
    Address	requestDataPtr;
    int		requestDataSize;
    /*
     * Two areas for data returned from the server.
     */
    Address	replyParamPtr;
    int		replyParamSize;
    Address	replyDataPtr;
    int		replyDataSize;
} Rpc_Storage;

#ifdef KERNEL
#include <rpcCall.h>
#else
#include <kernel/rpcCall.h>
#endif

@


9.5
log
@Rpc_PrintTrace should take a ClientData.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.4 90/10/09 11:56:57 jhh Exp Locker: kupfer $ SPRITE (Berkeley)
d25 1
d29 1
d134 4
@


9.4
log
@function prototypes
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.3 90/09/11 16:08:13 mendel Exp Locker: jhh $ SPRITE (Berkeley)
d124 1
a124 1
extern void Rpc_PrintTrace _ARGS_((int numRecords));
@


9.3
log
@Cleaned up some lint from prototypes.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.2 90/09/11 11:35:15 mgbaker Exp $ SPRITE (Berkeley)
d21 8
a28 3
#include "net.h"
#include "sys.h"
#include "status.h"
d30 1
d66 5
a70 1
#include "rpcCall.h"
d121 2
a122 1
extern int Rpc_Dispatch _ARGS_((int headerType, Address headerPtr, Address rpcHdrAddr, int packetLength));
@


9.2
log
@Added function prototypes (Mendel checking for mary)
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 9.1 89/10/30 11:16:23 shirriff Exp Locker: mgbaker $ SPRITE (Berkeley)
d99 1
a99 1
extern int Rpc_FreeMem _ARGS_((Rpc_ReplyMem *replyMemPtr));
@


9.1
log
@Lint fixes.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 8.1 89/06/05 12:32:31 rab Exp $ SPRITE (Berkeley)
a24 2
#include "rpcCall.h"

d60 3
d96 25
a120 25
ReturnStatus	Rpc_Call();
void		Rpc_Reply();
void		Rpc_ErrorReply();
int		Rpc_FreeMem();

ReturnStatus    Rpc_CreateServer();
ReturnStatus	Rpc_Echo();
ReturnStatus	Rpc_Ping();
ReturnStatus	Rpc_EchoTest();
ReturnStatus	Rpc_GetTime();

ReturnStatus	Test_RpcStub();

void		Rpc_Init();
void		Rpc_Start();
void		Rpc_MaxSizes();

void		Rpc_Daemon();
void		Rpc_Server();
int		Rpc_Dispatch();
void		Rpc_Timeout();

void		Rpc_PrintTrace();
ReturnStatus	Rpc_DumpTrace();
void		Rpc_StampTest();
a121 2
void		Rpc_PrintCallCount();
void		Rpc_PrintServiceCount();
@


9.0
log
@Changing version numbers.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 8.1 89/06/05 12:32:31 rab Exp Locker: douglis $ SPRITE (Berkeley)
d120 3
@


8.1
log
@Added extern
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 8.0 88/11/11 18:34:22 douglis Stable Locker: rab $ SPRITE (Berkeley)
@


8.0
log
@Changing version numbers.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/rpc/RCS/rpc.h,v 6.1 88/08/26 18:27:21 mlgray Exp Locker: douglis $ SPRITE (Berkeley)
d100 1
@


6.1
log
@Fixed some lint errors.
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 6.0 88/08/11 12:24:20 brent Stable $ SPRITE (Berkeley)
@


6.0
log
@Changing version numbers.
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.10 87/12/10 12:30:01 brent Exp $ SPRITE (Berkeley)
d62 1
a62 1
/* 
d120 1
a120 1
#endif _RPC
@


5.10
log
@Changed Rpc_FreeMem to return an int for compatibility with Rpc_Reply
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.9 87/10/09 09:29:09 brent Exp $ SPRITE (Berkeley)
@


5.9
log
@Moved things to recov.h
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.8 87/10/04 15:55:24 brent Exp $ SPRITE (Berkeley)
d98 1
a98 1
void		Rpc_FreeMem();
@


5.8
log
@Changed Rpc_HostIsDown extern
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.7 87/10/01 16:38:56 brent Exp $ SPRITE (Berkeley)
a86 22
 * Flags for the Rpc_RebootNotify.
 */
#define RPC_WHEN_HOST_DOWN		0x1
#define RPC_WHEN_HOST_REBOOTS		0x2

/*
 * Host state flags for use by RPC clients.  These flags are set
 * by users of the RPC module to define/get host states beyond
 * the simple up/down state maintained by the RPC system.
 *	RPC_RECOV_REOPEN		The client is in the fs re-open phase.
 *				This is used to block open requests.
 */
#define RPC_RECOV_REOPEN			0x1

/*
 * Trace types for use with Rpc_HostTrace.  These are defined to be compatible
 *		with the values defined in rpcRecovery.c
 *	RPC_RECOV_TRACE_STALE	A stale handle was returned from a file server
 */
#define RPC_RECOV_TRACE_STALE	0x1000

/*
a118 8

void		Rpc_HostNotify();
int		Rpc_WaitForHost();
ReturnStatus	Rpc_HostIsDown();
void		Rpc_HostPrint();
void		Rpc_HostTrace();
void		Rpc_HostSetState();
int		Rpc_HostGetState();
@


5.7
log
@Exported some varialbes settable by Fs_Command
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.6 87/09/30 10:30:10 brent Exp $ SPRITE (Berkeley)
d144 1
a144 1
Boolean		Rpc_HostIsDown();
@


5.6
log
@Added recovery trace flags for use with Rpc_HostTrace(),
plus externs.
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.5 87/09/30 09:47:25 brent Exp $ SPRITE (Berkeley)
d107 6
@


5.5
log
@Added extern
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.4 87/09/21 16:28:54 brent Exp $ SPRITE (Berkeley)
d102 7
d140 3
@


5.4
log
@Oops, had name conflict
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.3 87/09/21 16:24:42 brent Exp $ SPRITE (Berkeley)
d132 1
@


5.3
log
@Added re-open flag for the host state, used by fs.
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.2 87/09/15 08:54:13 brent Exp $ SPRITE (Berkeley)
d96 1
a96 1
 *	RPC_FS_REOPEN		The client is in the fs re-open phase.
d99 1
a99 1
#define RPC_FS_REOPEN			0x1
@


5.2
log
@Added flags for Rpc_HostNotify and its callbacks.
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.1 87/09/10 11:22:58 brent Exp $ SPRITE (Berkeley)
d91 9
@


5.1
log
@Added exterms
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 5.0 87/08/11 10:48:13 sprite Exp $ SPRITE (Berkeley)
d64 4
d87 6
d120 1
a120 1
void		Rpc_RebootNotify();
@


5.0
log
@First Sprite native copy
@
text
@d15 1
a15 1
 * $Header: rpc.h,v 4.2 87/02/24 11:16:41 brent Exp $ SPRITE (Berkeley)
d91 1
a93 1
ReturnStatus	Rpc_GetClientId();
a95 1
ReturnStatus	Test_StatsStub();
d111 2
@
