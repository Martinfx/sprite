head     9.23;
branch   ;
access   ;
symbols  ds3100:9.22 sun3:9.22 sun4nw:9.15 symm:9.15 spur:9.15 sprited:9.15.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.23
date     92.12.13.18.20.09;  author mgbaker;  state Exp;
branches ;
next     9.22;

9.22
date     92.10.26.22.20.15;  author mgbaker;  state Exp;
branches ;
next     9.21;

9.21
date     92.10.26.14.36.52;  author mgbaker;  state Exp;
branches ;
next     9.20;

9.20
date     92.08.10.20.47.23;  author mgbaker;  state Exp;
branches ;
next     9.19;

9.19
date     92.08.10.15.54.11;  author mgbaker;  state Exp;
branches ;
next     9.18;

9.18
date     92.08.04.15.29.25;  author mgbaker;  state Exp;
branches ;
next     9.17;

9.17
date     92.08.04.11.55.23;  author mgbaker;  state Exp;
branches ;
next     9.16;

9.16
date     92.04.22.15.20.31;  author mgbaker;  state Exp;
branches ;
next     9.15;

9.15
date     90.11.29.23.04.05;  author kupfer;  state Exp;
branches 9.15.1.1;
next     9.14;

9.14
date     90.10.11.14.10.40;  author kupfer;  state Exp;
branches ;
next     9.13;

9.13
date     90.10.09.18.32.03;  author mendel;  state Exp;
branches ;
next     9.12;

9.12
date     90.10.09.11.56.33;  author jhh;  state Exp;
branches ;
next     9.11;

9.11
date     90.08.29.18.01.12;  author mgbaker;  state Exp;
branches ;
next     9.10;

9.10
date     90.04.18.17.28.45;  author mgbaker;  state Exp;
branches ;
next     9.9;

9.9
date     90.03.26.12.15.11;  author mgbaker;  state Exp;
branches ;
next     9.8;

9.8
date     90.03.13.16.27.58;  author brent;  state Exp;
branches ;
next     9.7;

9.7
date     90.02.20.14.55.16;  author brent;  state Exp;
branches ;
next     9.6;

9.6
date     90.01.05.11.58.19;  author mgbaker;  state Exp;
branches ;
next     9.5;

9.5
date     89.11.01.18.50.30;  author brent;  state Exp;
branches ;
next     9.4;

9.4
date     89.10.12.12.06.19;  author brent;  state Exp;
branches ;
next     9.3;

9.3
date     89.10.12.08.45.51;  author brent;  state Exp;
branches ;
next     9.2;

9.2
date     89.10.10.17.52.50;  author brent;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.10.17.44.57;  author brent;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.17.09;  author douglis;  state Stable;
branches ;
next     8.3;

8.3
date     89.08.29.15.47.28;  author brent;  state Exp;
branches ;
next     8.2;

8.2
date     89.06.15.17.05.06;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     89.05.24.07.59.37;  author rab;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.34.07;  author douglis;  state Stable;
branches ;
next     6.3;

6.3
date     88.10.20.23.02.44;  author douglis;  state Exp;
branches ;
next     6.2;

6.2
date     88.09.15.10.35.53;  author brent;  state Exp;
branches ;
next     6.1;

6.1
date     88.09.15.10.26.24;  author brent;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.24.07;  author brent;  state Stable;
branches ;
next     1.4;

1.4
date     87.10.13.15.44.54;  author brent;  state Exp;
branches ;
next     1.3;

1.3
date     87.10.13.09.17.32;  author brent;  state Exp;
branches ;
next     1.2;

1.2
date     87.10.09.09.31.41;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     87.10.08.16.33.58;  author brent;  state Exp;
branches ;
next     ;

9.15.1.1
date     91.10.22.15.51.04;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Header file for the recovery module.
@


9.23
log
@Code for server-driven recovery.
@
text
@/*
 * recov.h --
 *
 *	External definitions needed by users of the Recovery system.
 *	This module maintains up/down state about other hosts, provides
 *	a call-back mechanism for other modules, and some state bits
 *	that can also be set by other modules.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.22 92/10/26 22:20:15 mgbaker Exp $ SPRITE (Berkeley)
 */

#ifndef _RECOV
#define _RECOV

#ifdef KERNEL
#include <trace.h>
#include <proc.h>
#else
#include <kernel/trace.h>
#include <kernel/proc.h>
#endif
#include <recovBox.h>
#include <hostd.h>

/*
 * External view of the state kept about each host.
 */
typedef struct Recov_State {
    int spriteID;		/* Host ID of the peer */
    unsigned int bootID;	/* Boot timestamp from RPC header */
    int state;			/* Recovery state, defined below */
    int clientState;		/* Client bits */
    Time time;			/* Time of last message */
} Recov_State;
/*
 * recov_PrintLevel defines how noisey we are about other hosts.
 *	Values for the print level should be defined in increasing order.
 */
#define RECOV_PRINT_NONE	0
#define RECOV_PRINT_REBOOT	1
#define RECOV_PRINT_IF_UP	2
#define RECOV_PRINT_CRASH	2
#define RECOV_PRINT_ALL		10

extern int recov_PrintLevel;

/*
 * Host state used by the recov module and accessible via the
 * Recov_{G,S}etHostState calls:
 *	RECOV_STATE_UNKNOWN	Initial state.
 *	RECOV_HOST_ALIVE	Set when we receive a message from the host
 *	RECOV_HOST_DEAD		Set when crash callbacks have been started.
 *	RECOV_HOST_BOOTING	Set in the limbo period when a host is booting
 *				and talking to the world, but isn't ready
 *				for full recovery actions yet.
 *
 *	RECOV_CRASH_CALLBACKS	Set during the crash call-backs, this is used
 *				to block RPC server processes until the
 *				crash recovery actions have completed.
 *	RECOV_WANT_RECOVERY	Set if another module wants a callback at reboot
 *	RECOV_PINGING_HOST	Set for hosts we ping to see when it reboots.
 *	RECOV_REBOOT_CALLBACKS	Set while reboot callbacks are pending.
 *	RECOV_FAST_BOOT		Set if the server went through a fast boot.
 *	RECOV_SERVER_DRIVEN	Set if the server is driving recovery.
 *	RECOV_FAILURE		Set if a communication failure occurs during
 *				the reboot callbacks.  This triggers another
 *				invokation of the reboot callbacks so that
 *				a client can't miss out on recovery.
 *
 *	RECOV_CRASH		artificial state to trace RecovCrashCallBacks
 *	RECOV_REBOOT		artificial state to trace RecovRebootCallBacks
 */
#define RECOV_STATE_UNKNOWN	0x0
#define RECOV_HOST_ALIVE	0x1
/* Space here now. */
#define RECOV_HOST_DEAD		0x4

#define RECOV_HOST_BOOTING	0x10
#define RECOV_CRASH		0x20
#define RECOV_REBOOT		0x40
#define RECOV_FAILURE		0x80

#define RECOV_CRASH_CALLBACKS	0x0100
#define RECOV_WANT_RECOVERY	0x0200
#define RECOV_PINGING_HOST	0x0400
#define RECOV_REBOOT_CALLBACKS	0x0800

#define	RECOV_FAST_BOOT		0x1000
#define	RECOV_SERVER_DRIVEN	0x2000

/*
 * If dying_state is not defined then crash callbacks are made
 * immidiately after a timeout.  Otherwise the host lingers in
 * the RECOV_HOST_DYING state for recov_CrashDelay seconds.
 */
#undef dying_state

/*
 * Host state flags for use by Recov clients.  These flags are set
 * by users of the Recov module to define/get host states beyond
 * the simple up/down state maintained by the Recov system.
 *	CLT_RECOV_IN_PROGRESS	The client needs to go through full
 *				recovery with the server.  This is set when
 *				the server gets a reopen from the client,
 *				and reset after the
 *				client tells us it's done re-opening files.
 *				The flag is used on the server to tell us to
 *				block opens from this client while it is
 *				going through recovery.
 *	SRV_RECOV_IN_PROGRESS	This is set on a client while it is reopening
 *				files in order to ensure only one set of
 *				reopens is in process.
 *	SRV_RECOV_FAILED	Recovery with the server failed.  This is
 *				used to catch a race between the end of
 *				a failed recovery and re-establishing contact
 *				with the server.  If the server "comes back"
 *				before a failed recovery clears the
 *				SRV_RECOV_IN_PROGRESS bit, then a reboot
 *				callback could get lost.  This bit is used
 *				to detect this.
 *	CLT_OLD_RECOV		This client is running an old kernel and
 *				returned INVALID_RPC to server trying to get
 *				it to do server-driven recovery.
 *	CLT_DOING_SRV_RECOV	Client is currently going through server-driven
 *				recovery.
 *	SRV__DRIVEN_IN_PROGRESS	Set on client if server has contacted client
 *				for server-driven recovery.
 */
#define CLT_RECOV_IN_PROGRESS	0x01
#define SRV_RECOV_IN_PROGRESS	0x02
#define SRV_RECOV_FAILED	0x04
#define CLT_OLD_RECOV		0x08
#define CLT_DOING_SRV_RECOV	0x10
#define	SRV_DRIVEN_IN_PROGRESS	0x20

/*
 * Whether or not to use absolute intervals for pinging servers.  The default
 * is to use them in order to avoid synchronizing clients due to server
 * reboots.
 */
extern	Boolean	recov_AbsoluteIntervals;

/*
 * Trace types for use with Recov_HostTrace.  Compatible with recov.h bits.
 *	RECOV_TRACE_FS_STALE	A stale handle was returned from a file server
 */
#define RECOV_TRACE_FS_STALE	0x1000

/*
 * A trace is kept for debugging/understanding the host state transisions.
 */
typedef struct RecovTraceRecord {
    int		spriteID;		/* Host ID whose state changed */
    int		state;			/* Their new state */
} RecovTraceRecord;

/*
 * Tracing events, these describe the trace record.
 *
 *	RECOV_CUZ_WAIT		Wait in Recov_WaitForHost
 *	RECOV_CUZ_WAKEUP	Wakeup in Recov_WaitForHost
 *	RECOV_CUZ_INIT		First time we were interested in the host
 *	RECOV_CUZ_REBOOT	We detected a reboot
 *	RECOV_CUZ_CRASH		We detected a crash
 *	RECOV_CUZ_DONE		Recovery actions completed
 *	RECOV_CUZ_PING_CHK	We are pinging the host to check it out
 *	RECOV_CUZ_PING_ASK	We are pinging the host because we were asked
 *	RECOV_CUZ_CRASH_UNDETECTED	Crash wasn't detected until reboot
 *	RECOV_CUZ_SCHED_CALLBACK	Called Proc_CallFunc to schedule
 *					reboot callbacks.
 *	RECOV_CUZ_DONE_CALLBACKS	Called CallBacksDone. 
 *	RECOV_CUZ_FAILURE	RECOV_FAILURE was detected in CallBacksDone.
 *	RECOV_CUZ_WAS_BOOTING	Got alive packet when in booting state.
 *	RECOV_CUZ_NOW_BOOTING	Got booting packet when in dead state.
 *	RECOV_CUZ_WAS_DEAD	Got alive packet when in dead state.
 *	RECOV_CUZ_DOING_CALLBACKS	In RecovRebootCallBacks. 
 *	RECOV_CUZ_START		We're starting up, so maybe unknown state.
 */
#define RECOV_CUZ_WAIT		0x1
#define RECOV_CUZ_WAKEUP	0x2
#define RECOV_CUZ_INIT		0x4
#define RECOV_CUZ_REBOOT	0x8
#define RECOV_CUZ_CRASH		0x10
#define RECOV_CUZ_DONE		0x20
#define RECOV_CUZ_PING_CHK	0x40
#define RECOV_CUZ_PING_ASK	0x80
#define RECOV_CUZ_CRASH_UNDETECTED	0x100
#define RECOV_CUZ_SCHED_CALLBACK	0x200
#define RECOV_CUZ_DONE_CALLBACKS	0x400
#define RECOV_CUZ_FAILURE	0x800
/* 0x1000 taken by stale handle thing, above. */
#define RECOV_CUZ_WAS_BOOTING	0x2000
#define RECOV_CUZ_NOW_BOOTING	0x4000
#define RECOV_CUZ_WAS_DEAD	0x8000
#define RECOV_CUZ_DOING_CALLBACKS	0x10000
#define RECOV_CUZ_START		0x20000

#ifndef CLEAN

#define RECOV_TRACE(zspriteID, zstate, event) \
    if (recovTracing) {\
	RecovTraceRecord rec;\
	rec.spriteID = zspriteID;\
	rec.state = zstate;\
	Trace_Insert(recovTraceHdrPtr, event, (ClientData)&rec);\
    }
#else

#define RECOV_TRACE(zspriteID, zstate, event)

#endif /* not CLEAN */

/*
 * More parameters for controlling recovery.  The first of these
 * (0 to 99) are for the use of the recovery box and are defined in
 * /usr/include/recovBox.h.
 */
#define	RECOV_BULK_REOPEN	100	/* Do bulk reopen rpcs. */
#define	RECOV_SINGLE_REOPEN	101	/* Do normal reopen rpcs. */
#define	RECOV_IGNORE_CLEAN	102	/* Don't reopen files that have only
					 * clean blocks in the cache. */
#define	RECOV_REOPEN_CLEAN	103	/* Do reopen files that have only
					 * clean blocks in the cache. */
#define	RECOV_SKIP_CLEAN	104	/* Skip the reopen of files that have
					 * only clean blocks in the cache.
					 * But don't invalidate them as is
					 * done for IGNORE_CLEAN. */
#define RECOV_DO_SERVER_DRIVEN	105	/* Turn on server-driven recovery
					 * acceptance for clients.
					 */
#define RECOV_NO_SERVER_DRIVEN	106	/* Turn off server-driven recovery
					 * acceptance for clients.
					 */

extern Trace_Header *recovTraceHdrPtr;
extern Boolean recovTracing;
/*
 * Statistics about the recovery module.
 */
typedef struct Recov_Stats {
    int packets;	/* Number of packets examined */
    int	pings;		/* Number of pings made to check on other hosts */
    int pingsSuppressed;/* Number of pings that were suppressed due to
			 * recent message traffic */
    int timeouts;	/* The number of timeout's detected */
    int crashes;	/* The number of times crash call-backs were called */
    int nonCrashes;	/* The number of times crash call-backs were avoided */
    int reboots;	/* The number of times reboot call-backs were called */
    int numHostsPinged;	/* The number of hosts being pinged */
} Recov_Stats;

extern Recov_Stats recov_Stats;
extern	Boolean	recov_RestartDebug;

/*
 * TRUE if we're using transparent server recovery.
 */
extern	Boolean		recov_Transparent;
/*
 * TRUE if we want a client to ignore the fact that a server can do transparent
 * recovery.  If the client ignores this, this means it sends reopen requests
 * even though it doesn't have to.  (In this case, the server will check
 * the client's info against what it has stored in its recovery box.)
 */
extern	Boolean		recov_ClientIgnoreTransparent;

/*
 * TRUE if client is ignoring server-driven recovery.  It will repsond
 * instead with "invalid rpc."
 */
extern	Boolean		recov_ClientIgnoreServerDriven;

/*
 * TRUE if we're avoiding downloading text and initialized data.  (Should
 * be true usually.)
 */
extern	Boolean		recov_DoInitDataCopy;

/*
 * Do batching of reopen rpc's.
 */
extern	Boolean		recov_BulkHandles;

/*
 * Don't bother to reopen files that have only clean blocks in the cache.
 */
extern	Boolean		recov_IgnoreCleanFiles;

/*
 * Skip reopening this file.  It may have clean blocks in the cache, but
 * it has no current streams.  The server will be contacted by reguar means
 * the next time somebody opens the file.
 */
extern	Boolean		recov_SkipCleanFiles;
/*
 * Server is driving recovery, rather than allowing clients to initiate it.
 */
extern	Boolean	recov_ServerDriven;

/*
 * We're blocking rpc's that aren't related to recovery.
 */
extern	Boolean	recov_BlockingRpcs;

/*
 * A printf for during recovery.
 */
#define qprintf if (recov_BlockingRpcs) printf

extern void 	Recov_Init _ARGS_((void));
extern void 	Recov_CrashRegister _ARGS_((void (*crashCallBackProc)(), ClientData crashData));
extern void 	Recov_RebootRegister _ARGS_((int spriteID, void (*rebootCallBackProc)(), ClientData rebootData));
extern void 	Recov_RebootUnRegister _ARGS_((int spriteID, void (*rebootCallBackProc)(), ClientData rebootData));
extern void 	Recov_HostAlive _ARGS_((int spriteID, unsigned int bootID, Boolean asyncRecovery, Boolean rpcNotActive, unsigned int recovType));
extern void 	Recov_HostDead _ARGS_((int spriteID));
extern int 	Recov_GetHostState _ARGS_((int spriteID));
extern int 	Recov_GetHostOldState _ARGS_((int spriteID));
extern void 	Recov_SetHostOldState _ARGS_((int spriteID, int state));
extern Boolean 	Recov_GetHostInfo _ARGS_((int spriteID, Recov_State *recovStatePtr));
extern ReturnStatus 	Recov_IsHostDown _ARGS_((int spriteID));
extern void 	Recov_HostTrace _ARGS_((int spriteID, int event));
extern int 	Recov_GetClientState _ARGS_((int spriteID));
extern int 	Recov_SetClientState _ARGS_((int spriteID, int stateBits));
extern void 	Recov_ClearClientState _ARGS_((int spriteID, int stateBits));
extern void 	Recov_AddHandleCountToClientState _ARGS_((int type, int clientID, ReturnStatus status));
extern void 	RecovRebootCallBacks _ARGS_((ClientData data, Proc_CallInfo *callInfoPtr));
extern ReturnStatus 	Recov_DumpClientRecovInfo _ARGS_((int length, Address resultPtr, int *lengthNeededPtr));
extern ReturnStatus 	Recov_GetStats _ARGS_((int size, Address userAddr));
extern ReturnStatus 	Recov_DumpState _ARGS_((int size, Address userAddr));
extern void 		Recov_ChangePrintLevel _ARGS_((int newLevel));
extern void 		RecovPingInit _ARGS_((void));
extern void 		RecovPrintPingList _ARGS_((void));
extern void 		Recov_PrintTrace _ARGS_((ClientData numRecs));
extern void 		Recov_PrintState _ARGS_((void));
extern int 		Recov_PrintTraceRecord _ARGS_((ClientData clientData, int event, Boolean printHeaderFlag));
extern void 		Recov_Proc _ARGS_((void));
extern void 		RecovAddHostToPing _ARGS_((int spriteID));
extern int 		RecovCheckHost _ARGS_((int spriteID));
extern int 		RecovGetLastHostState _ARGS_((int spriteID));
extern Boolean		Recov_InitRecovBox _ARGS_((void));
extern ReturnStatus	Recov_InitType _ARGS_((int objectSize, int maxNumObjects, int applicationTypeID, int *objectTypePtr, unsigned short (*Checksum)()));
extern ReturnStatus	Recov_InsertObject _ARGS_((int typeID, ClientData objectPtr, int applicationObjectNum, Recov_ObjectID *objectIDPtr));
extern ReturnStatus	Recov_InsertObjects _ARGS_((int typeID, int numObjs, char *obuffer, int *objNumBuffer, Recov_ObjectID *objIDBuffer));
extern ReturnStatus	Recov_DeleteObject _ARGS_((Recov_ObjectID objectID));
extern ReturnStatus	Recov_UpdateObject _ARGS_((ClientData objectPtr, Recov_ObjectID objectID));
extern ReturnStatus	Recov_ReturnObject _ARGS_((ClientData objectPtr, Recov_ObjectID objectID, Boolean checksum));
extern ReturnStatus	Recov_ReturnObjects _ARGS_((int typeID, int *olengthPtr, char *obuffer, int *ilengthPtr, char *ibuffer, int *alengthPtr, char *abuffer));
extern ReturnStatus	Recov_ReturnContents _ARGS_((int *lengthPtr, char *buffer));
extern int		Recov_MaxNumObjects _ARGS_((int objectSize, Boolean restart));
extern	void		Recov_PrintSpace _ARGS_((int objectSize));
extern	void		Recov_ToggleChecksum _ARGS_((int typeID));
extern	int		Recov_NumObjects _ARGS_((int typeID));
extern	int		Recov_GetObjectSize _ARGS_((int typeID));
extern ReturnStatus	Recov_MapType _ARGS_((int applicationTypeID, int *typeIDPtr));
extern ReturnStatus	Recov_MapObjectNum _ARGS_((int typeID, int applicationObjectNum, int *objectNumPtr));
extern unsigned short	Recov_Checksum _ARGS_((int len, Address bufPtr));
extern	ReturnStatus	Recov_Cmd _ARGS_((int option, Address argPtr));
extern	void		Recov_InitServerDriven _ARGS_((void));
extern	void		Recov_StartServerDrivenRecovery _ARGS_((int serverID));
extern	void 		Recov_WaitForServerDriven _ARGS_((int serverID));
extern	void		Recov_MarkOldClient _ARGS_((int clientID));
extern	void		Recov_ServerStartingRecovery _ARGS_((void));
extern	void		Recov_ServerFinishedRecovery _ARGS_((void));
extern	Boolean		Recov_HoldForRecovery _ARGS_((int clientID, int command));
extern	void		Recov_StopServerDriven _ARGS_((void));
extern	int		Recov_GetCurrentHostStates _ARGS_((Dev_ClientInfo *infoBuffer, int bufEntries));
extern	void		Recov_MarkDoingServerRecovery _ARGS_((int clientID));
extern	void		Recov_UnmarkDoingServerRecovery _ARGS_((int clientID));
#endif /* _RECOV */

@


9.22
log
@Fixed header file include path problem.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.21 92/10/26 14:36:52 mgbaker Exp $ SPRITE (Berkeley)
d27 1
d68 1
d93 1
d106 4
a109 3
 *	CLT_RECOV_IN_PROGESS	The client has crashed and needs to go
 *				through full recovery.  This is set when
 *				we detect a crash, and reset after the
d111 3
d125 14
a138 4
 */
#define CLT_RECOV_IN_PROGRESS	0x1
#define SRV_RECOV_IN_PROGRESS	0x2
#define SRV_RECOV_FAILED	0x4
d232 6
d270 7
d299 4
d304 10
d318 1
a318 1
extern void 	Recov_HostAlive _ARGS_((int spriteID, unsigned int bootID, Boolean asyncRecovery, Boolean rpcNotActive, Boolean fastBoot));
d362 11
a372 2


@


9.21
log
@Support for bulk reopen rpcs and for ignoring files with no dirty cache
blocks during recovery.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.20 92/08/10 20:47:23 mgbaker Exp $ SPRITE (Berkeley)
a21 1
#include <recovBox.h>
a24 1
#include <kernel/recovBox.h>
d26 1
@


9.20
log
@Changes for transparent server recovery.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.19 92/08/10 15:54:11 mgbaker Exp $ SPRITE (Berkeley)
d201 16
d253 17
@


9.19
log
@Client can ignore fast recovery.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.18 92/08/04 15:29:25 mgbaker Exp $ SPRITE (Berkeley)
d22 1
d26 1
d67 1
d91 9
d219 1
d232 5
d242 1
a242 1
extern void 	Recov_HostAlive _ARGS_((int spriteID, unsigned int bootID, Boolean asyncRecovery, Boolean rpcNotActive));
d268 18
@


9.18
log
@Fixed spelling problem.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.17 92/08/04 11:55:23 mgbaker Exp $ SPRITE (Berkeley)
d212 7
@


9.17
log
@Added transparent recovery variable.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.16 92/04/22 15:20:31 mgbaker Exp $ SPRITE (Berkeley)
d211 1
a211 1
extern	Boolean		recov_transparent;
@


9.16
log
@Added more logging of recovery events and removed "DYING" state.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/recov/recov.h,v 9.15 90/11/29 23:04:05 kupfer Exp $ SPRITE (Berkeley)
d207 5
@


9.15
log
@Fix includes for use by user programs.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.14 90/10/11 14:10:40 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
a53 1
 *	RECOV_HOST_DYING	Set when an RPC times out.
d75 1
a75 1
#define RECOV_HOST_DYING	0x2
a88 7
 * If dying_state is not defined then crash callbacks are made
 * immidiately after a timeout.  Otherwise the host lingers in
 * the RECOV_HOST_DYING state for recov_CrashDelay seconds.
 */
#undef dying_state

/*
d145 9
d164 9
d215 2
@


9.15.1.1
log
@Initial branch for Sprite server.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.15 90/11/29 23:04:05 kupfer Exp $ SPRITE (Berkeley)
@


9.14
log
@Recov_PrintTrace should take a ClientData.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.13 90/10/09 18:32:03 mendel Exp Locker: kupfer $ SPRITE (Berkeley)
d19 1
d22 4
@


9.13
log
@Fixed include to use <> rather than "".
Removed lint.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.12 90/10/09 11:56:33 jhh Exp Locker: mendel $ SPRITE (Berkeley)
d214 1
a214 1
extern void 		Recov_PrintTrace _ARGS_((int numRecs));
@


9.12
log
@function prototypes
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.11 90/08/29 18:01:12 mgbaker Exp $ SPRITE (Berkeley)
d19 2
a20 2
#include "trace.h"
#include "proc.h"
@


9.11
log
@Done 1st pass of prototyping.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.10 90/04/18 17:28:45 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d216 1
a216 1
extern void 		Recov_PrintTraceRecord _ARGS_((ClientData clientData, int event, Boolean printHeaderFlag));
@


9.10
log
@Added hooks for printing recovery state.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.9 90/03/26 12:15:11 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d20 1
d193 28
a220 17
extern void             Recov_Init();
extern void		Recov_CrashRegister();
extern void		Recov_RebootRegister();
extern void		Recov_HostAlive();
extern void		Recov_HostDead();
extern int		Recov_GetHostState();
extern ReturnStatus	Recov_IsHostDown();
extern void		Recov_HostTrace();
extern int		Recov_SetClientState();
extern int		Recov_GetClientState();
extern void		Recov_ClearClientState();
extern void		Recov_AddHandleCountToClientState();
extern ReturnStatus	Recov_GetStats();
extern void		Recov_ChangePrintLevel();

extern void		Recov_HostTrace();
extern void		Recov_PrintTrace();
a221 4
extern void		Recov_Proc();
extern void		RecovAddHostToPing();
extern int		RecovCheckHost();
extern int		RecovGetLastHostState();
@


9.9
log
@Code to keep clients from synchronizing their pings to servers.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.8 90/03/13 16:27:58 brent Exp $ SPRITE (Berkeley)
d146 1
d156 1
d205 1
d213 1
@


9.8
log
@Added RECOV_FAILURE and nuked the dying_state
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.7 90/02/20 14:55:16 brent Exp $ SPRITE (Berkeley)
d113 7
@


9.7
log
@Added SRV_RECOV_FALIED client state bit.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.6 90/01/05 11:58:19 mgbaker Exp $ SPRITE (Berkeley)
d58 6
a63 2
 *	RECOV_PINGING_HOST	Set while we ping a host to see when it reboots
 *	RECOV_REBOOT_CALLBACKS	Set while reboot callbacks are pending.	
d72 1
d76 1
a76 1

d88 1
a88 1
#define dying_state
@


9.6
log
@Added new server recovery information gathering.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov.mgb/RCS/recov.h,v 1.1 90/01/03 18:18:13 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)
d96 8
d107 1
@


9.5
log
@Added Recov_State, and external view of the recovery state
for a host.  This can be passed out to user level.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.4 89/10/12 12:06:19 brent Exp $ SPRITE (Berkeley)
d180 1
@


9.4
log
@Changed related to adding Recov_Proc
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.3 89/10/12 08:45:51 brent Exp $ SPRITE (Berkeley)
d22 22
a60 1
 *	RECOV_WAITING		artificial state to trace Rpc_WaitForHost
d69 8
a84 9
#define RECOV_CRASH_CALLBACKS	0x0100
#define RECOV_WANT_RECOVERY	0x0200
#define RECOV_PINGING_HOST	0x0400
#define RECOV_REBOOT_CALLBACKS	0x0800

#define RECOV_WAITING		0x10
#define RECOV_CRASH		0x20
#define RECOV_REBOOT		0x40

d117 2
a118 2
 *	RECOV_CUZ_WAIT		Wait in Rpc_WaitForHost
 *	RECOV_CUZ_WAKEUP	Wakeup in Rpc_WaitForHost
@


9.3
log
@Added extern for Recov_Proc
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.2 89/10/10 17:52:50 brent Exp Locker: brent $ SPRITE (Berkeley)
d19 2
d87 46
d144 1
a149 1
extern void		Recov_Proc();
d164 4
@


9.2
log
@Fixed extern declaration
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.1 89/10/10 17:44:57 brent Exp Locker: brent $ SPRITE (Berkeley)
d101 1
@


9.1
log
@Added Recov_Stats
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 9.0 89/09/12 15:17:09 douglis Stable Locker: brent $ SPRITE (Berkeley)
d111 1
a111 1
extern void		Recov_GetStats();
@


9.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 8.3 89/08/29 15:47:28 brent Exp Locker: douglis $ SPRITE (Berkeley)
d84 16
d111 1
@


8.3
log
@Added dying_state #define to allow no dying state.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 8.2 89/06/15 17:05:06 rab Exp $ SPRITE (Berkeley)
@


8.2
log
@Fixed lint
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 8.1 89/05/24 07:59:37 rab Exp Locker: rab $ SPRITE (Berkeley)
d46 7
@


8.1
log
@*** empty log message ***
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 8.0 88/11/11 18:34:07 douglis Stable Locker: rab $ SPRITE (Berkeley)
d77 11
a87 10
void		Recov_CrashRegister();
void		Recov_RebootRegister();
void		Recov_HostAlive();
void		Recov_HostDead();
int		Recov_GetHostState();
ReturnStatus	Recov_IsHostDown();
void		Recov_HostTrace();
int		Recov_SetClientState();
int		Recov_GetClientState();
void		Recov_ClearClientState();
d89 2
a90 2
void		Recov_HostTrace();
void		Recov_PrintTrace();
@


8.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 6.3 88/10/20 23:02:44 douglis Exp Locker: douglis $ SPRITE (Berkeley)
d91 1
a91 1
#endif _RECOV
@


6.3
log
@moved recovery states into this file and declared Recov_GetHostState which
returns them.
@
text
@d13 1
a13 1
 * $Header: /sprite/src/kernel/recov/RCS/recov.h,v 6.2 88/09/15 10:35:53 brent Exp Locker: douglis $ SPRITE (Berkeley)
@


6.2
log
@Added SRV_RECOV_IN_PROGRESS and CLT_RECOV_IN_PROGRESS
@
text
@d13 1
a13 1
 * $Header: recov.h,v 6.0 88/08/11 12:24:07 brent Stable $ SPRITE (Berkeley)
d20 37
d81 1
@


6.1
log
@Changed client recovery flags and the SetClientBit interface
so it behaves like set-and-test
@
text
@d23 1
a23 1
 *	RECOV_IN_PROGESS	The client has crashed and needs to go
d27 3
d31 2
a32 1
#define RECOV_IN_PROGRESS	0x1
@


6.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
 * $Header: recov.h,v 1.4 87/10/13 15:44:54 brent Exp $ SPRITE (Berkeley)
d42 1
a42 1
void		Recov_SetClientState();
@


1.4
log
@Fixed externs, constants.
@
text
@d13 1
a13 1
 * $Header: recov.h,v 1.3 87/10/13 09:17:32 brent Exp $ SPRITE (Berkeley)
@


1.3
log
@Update externs
@
text
@d13 1
a13 1
 * $Header: recov.h,v 1.2 87/10/09 09:31:41 brent Exp $ SPRITE (Berkeley)
a17 5
/*
 * Flags to call-backs indicating why they were called.
 */
#define RECOV_WHEN_HOST_DOWN		0x1
#define RECOV_WHEN_HOST_REBOOTS		0x2
d36 2
a37 1
void		Recov_Register();
a40 1
void		Recov_RebootCallBack();
@


1.2
log
@Added extern
@
text
@d13 1
a13 1
 * $Header: recov.h,v 1.1 87/10/08 16:33:58 brent Exp $ SPRITE (Berkeley)
d19 1
a19 1
 * Flags for the Rpc_RebootNotify.
d25 3
a27 3
 * Host state flags for use by RPC clients.  These flags are set
 * by users of the RPC module to define/get host states beyond
 * the simple up/down state maintained by the RPC system.
d36 1
a36 2
 * Trace types for use with Rpc_HostTrace.  These are defined to be compatible
 *		with the values defined in rpcRecovery.c
d41 1
a41 1
void		Recov_HostNotify();
d44 2
a45 2
int		Recov_WaitForHost();
ReturnStatus	Recov_HostIsDown();
d49 1
d51 1
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
 * $Header: rpc.h,v 5.8 87/10/04 15:55:24 brent Exp $ SPRITE (Berkeley)
d51 1
@
