head     1.2;
branch   ;
access   ;
symbols  sun4nw:1.2 symm:1.2 spur:1.2;
locks    ; strict;
comment  @ * @;


1.2
date     89.06.19.13.58.48;  author jhh;  state Exp;
branches ;
next     1.1;

1.1
date     89.01.11.10.01.27;  author mendel;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@Changed debugging interface
@
text
@/*
 * dbgInt.h --
 *
 *	Declarations of the network protocol for the SPUR kernel debugger and
 *	downloader.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/kernel/dbg/spur.md/RCS/dbgInt.h,v 1.1 89/01/11 10:01:27 mendel Exp $ SPRITE (Berkeley)
 */

#ifndef _DBGINT
#define _DBGINT

/*
 *  LED values.
 */

#define LED_ERROR  0x00		/* Turn on the leds for an error*/
#define LED_OK     0x0f		/* Turn off the leds for a progress report*/
#define LED_ONE	   ~0x01
#define LED_TWO	   ~0x02
#define LED_THREE  ~0x04
#define LED_FOUR   ~0x08

/*
 * 7 segment display values.
 */
#define GET_STOP_INFO_LED 	1
#define READ_ALL_REGS_LED 	2
#define GET_VERSION_STRING_LED 	3
#define DATA_READ_LED	 	4
#define SET_PID_LED	 	5
#define REBOOT_LED	 	6
#define DATA_WRITE_LED	 	7
#define WRITE_REG_LED		8
#define DIVERT_SYSLOG_LED	9
#define BEGIN_CALL_LED		10
#define END_CALL_LED		11
#define CALL_FUNCTION_LED	12
#define CONTINUE_LED		13
#define SINGLESTEP_LED		14
#define	DETACH_LED		15
#define SET_PROCESSOR_LED	16

#define RUNNING_LED        	0x20
#define REQUEST_LED        	0x22
#define REPLY_LED      		0x23
#define PROCESS_LED		0x24
#define GOT_PACKET_LED		0x25
#define BAD_PACKET_TYPE_LED	0x26
#define EXTRA_PACKET_LED	0x27
#define BAD_PACKET_MAGIC_LED	0x28
#define BAD_PACKET_SIZE_LED	0x29
#define TRAPPED_LED    		0x40    /* or'ed with signal number */


typedef struct {
    Net_EtherHdr	etherHeader;
    Net_IPHeader	ipHeader;
    Net_UDPHeader	udpHeader;
    Dbg_Request		request;
} Dbg_RawRequest;

typedef struct {
    Net_EtherHdr	etherHeader;
    Net_IPHeader	ipHeader;
    Net_UDPHeader	udpHeader;
    Dbg_Reply		reply;
} Dbg_RawReply;

#define	FillReplyField(field, value) {\
    dbgReplyPtr->data.field = (value); \
    replyEndPtr = (char *) (((int) &dbgReplyPtr->data.field) + \
    sizeof(dbgReplyPtr->data.field)); \
    strcpy(replyContents, contentStrings.field);\
}

extern	int	dbgTraceLevel;

extern	Dbg_RawReply		dbgRawReply;
extern	Dbg_RawRequest		dbgRawRequest;
extern	Dbg_Reply		*dbgReplyPtr;
extern	Dbg_Request		*dbgRequestPtr;
extern	Boolean			dbgGotPacket;
#endif _DBGINT
@


1.1
log
@Initial revision
@
text
@a6 32
 * The interface to the debugger and the stub consists of two routines:
 *
 * void getpkt(buffer)
 *	char *buffer;
 * and
 *
 * void putpkt(buffer)
 *	char *buffer;
 *
 * where buffer is a null (zero) byte terminate string.  putpkt sends a buffer 
 * to the other side and returns when it is received.  getpkt receives a data 
 * buffers sent by the other side.  The protocol used assumes that the
 * two sides agree on sending and receiving. If one side executes a putpkt the
 * other side should execute a getpkt().
 *
 * The ethernet debugging stub runs it's protocol on top of UDP datagrams. 
 * To recover from loss packets, the side sending data (putpkt) is respondsible
 * for retransmitting the data until an acknowledgement is received. This
 * acknowledgement maybe an explicit ACK or the next command. All data and
 * acks contain a sequence number in the header. To send data the putpkt 
 * command sends a packet with header.type == DBG_DATA_PACKET and the
 * sequence number greater than any sequence number received or sent so 
 * far.  After sending the packet, the putpkt routine must wait for a
 * packet with a sequence number greater than to equal to the one sent.
 *
 * The getpkt() routine receives data packets and if it has not already
 * seen it before it sends an ACK and returns.
 * 
 *
 * The kernel downloader uses the same packet headers but has header type 
 * of DBG_DOWNLOAD_PACKET.
 *
d16 1
a16 1
 * $Header: proto.h,v 1.2 88/03/11 08:39:40 ouster Exp $ SPRITE (Berkeley)
d23 1
a23 39
 * This header starts caller DBG packets. The contents should be all 32bit
 * integers and sent in network byte order. An data bytes should follow this
 * packet.
 */

typedef struct Dbg_PacketHeader {
    unsigned int	magic;		/* Magic number for packet. */
    int			type;		/* Pack type - see below. */
    unsigned int	sequenceNumber; /* Sequence number of packet. */
    int			initial;	/* 1 if this is the initial seq # */
    unsigned int	startAddress;	/* Start of address for download. */
    int			command;	/* Download command. */
    int			dataLength;	/* Length of data portion. */
} Dbg_PacketHeader;

/*
 * Magic number for header. This is for two reasons: throwing away garbage sent
 * to the DBG port and watching for bad byte swap routines.
 */

#define	DBG_HEADER_MAGIC	0x01020304

/*
 * Packet types.
 */
#define	DBG_ACK_PACKET	1
#define	DBG_DATA_PACKET 2
#define	DBG_DOWNLOAD_PACKET	4

/*
 * DBG_DOWNLOAD_PACKET commands.
 */
#define	DBG_DOWNLOAD_PING	0	/* Packet echo. */
#define	DBG_DOWNLOAD_DATA_XFER	1	/* Data transfer. */
#define	DBG_DOWNLOAD_ZERO_MEM	2	/* Zero memory. */
#define	DBG_DOWNLOAD_JUMP	3	/* Jump to address. */

/*
 * The UDP port number used by the debugger.
a24 13
#define	DBG_UDP_PORT	3033

/*
 * Maximum size of the data portion.
 */

#define	DBG_MAX_BUFFER_SIZE	1420


extern void Dbg_IPputpkt();
extern void Dbg_IPgetpkt();
extern void Dbg_Rs232putpkt();
extern void Dbg_Rs232getpkt();
d26 67
@
