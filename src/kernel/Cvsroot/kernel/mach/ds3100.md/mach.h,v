head     9.7;
branch   ;
access   ;
symbols  ds3100:9.7 sun3:9.7 sun4nw:9.6 symm:9.6 spur:9.6 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.7
date     92.08.10.17.58.14;  author mgbaker;  state Exp;
branches ;
next     9.6;

9.6
date     91.07.26.17.02.31;  author shirriff;  state Exp;
branches ;
next     9.5;

9.5
date     91.03.29.17.55.13;  author shirriff;  state Exp;
branches ;
next     9.4;

9.4
date     90.12.07.23.42.07;  author rab;  state Exp;
branches ;
next     9.3;

9.3
date     90.10.09.11.46.19;  author jhh;  state Exp;
branches ;
next     9.2;

9.2
date     90.09.21.15.51.24;  author mgbaker;  state Exp;
branches ;
next     9.1;

9.1
date     90.09.11.10.52.34;  author mendel;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.54.05;  author douglis;  state Stable;
branches ;
next     1.6;

1.6
date     89.09.05.15.55.14;  author douglis;  state Exp;
branches ;
next     1.5;

1.5
date     89.08.17.17.26.04;  author jhh;  state Exp;
branches ;
next     1.4;

1.4
date     89.08.15.18.28.18;  author rab;  state Exp;
branches ;
next     1.3;

1.3
date     89.07.24.19.52.12;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     89.07.23.23.42.38;  author douglis;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.11.17.55.13;  author nelson;  state Exp;
branches ;
next     ;


desc
@Original source from DECWRL.
@


9.7
log
@Changes for transparent recovery.
@
text
@/*
 * mach.h --
 *
 *     	Exported structures for the mach module.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/mach/ds3100.md/mach.h,v 9.6 91/07/26 17:02:31 shirriff Exp $ SPRITE (Berkeley)
 */

#ifndef _MACH
#define _MACH

#ifdef KERNEL
#include "machTypes.h"
#include "user/fmt.h"
#else
#include <kernel/machTypes.h>
#include <fmt.h>
#endif

/*
 * Macros to disable and enable interrupts.
 */
#define DISABLE_INTR() \
    if (!Mach_AtInterruptLevel()) { \
	Mach_DisableIntr(); \
	if (mach_NumDisableIntrsPtr[0] < 0) { \
	    panic("Negative interrupt count.\n"); \
	} \
	mach_NumDisableIntrsPtr[0]++; \
    }
#define ENABLE_INTR() \
    if (!Mach_AtInterruptLevel()) { \
	mach_NumDisableIntrsPtr[0]--; \
	if (mach_NumDisableIntrsPtr[0] < 0) { \
	    panic("Negative interrupt count.\n"); \
	} \
	if (mach_NumDisableIntrsPtr[0] == 0) { \
	    Mach_EnableIntr(); \
	} \
    }

/*
 * Macro to get level of nesting of disabled interrupts.
 */
#define Mach_IntrNesting(cpu) (mach_NumDisableIntrsPtr[(cpu)])

/*
 * A macro to test if the current processor is at interrupt level.
 */
#define	Mach_AtInterruptLevel()	(mach_AtInterruptLevel)

/*
 * A macro to test if the current processor is in kernel mode.
 */
#define	Mach_KernelMode() (mach_KernelMode)

/*
 * Delay for N microseconds.
 */
#define	MACH_DELAY(n)	{ register int N = (n)*6; while (N > 0) {N--;} }

extern Mach_State *machCurStatePtr;
/*
 * Macro to get the user's stack pointer.
 */
#define Mach_UserStack()\
	((Address)(machCurStatePtr->userState.regState.regs[SP]))

/*
 * Dispatch tables for kernel calls.
 */
extern ReturnStatus (*(mach_NormalHandlers[]))();
extern ReturnStatus (*(mach_MigratedHandlers[]))();

/*
 * Macro to get processor number
 */
#define	Mach_GetProcessorNumber() 	0

extern	Boolean	mach_KernelMode;
extern	int	mach_NumProcessors;
extern	Boolean	mach_AtInterruptLevel;
extern	int	*mach_NumDisableIntrsPtr;
/*
 * mach_MachineType is a string used to expand $MACHINE in pathnames.
 */
extern	char	*mach_MachineType;

/*
 * mach_Format defines a byte ordering/structure alignment type
 * used when servicing IOControls.  The input and output buffers for
 * IOControls have to be made right by the server.
 */
extern	Fmt_Format	mach_Format;

/*
 * Routine to initialize mach module.  Must be called first as part of boot
 * sequence.
 */
extern void Mach_Init _ARGS_((int boot_argc, MachStringTable *boot_argv));

/*
 * Routines to munge machine state struct.
 */
extern void Mach_InitFirstProc _ARGS_((Proc_ControlBlock *procPtr));
extern ReturnStatus Mach_SetupNewState _ARGS_((Proc_ControlBlock *procPtr, Mach_State *fromStatePtr, void (*startFunc)(), Address startPC, Boolean user));
extern void Mach_SetReturnVal _ARGS_((Proc_ControlBlock *procPtr, int retVal,
	int retVal2));
extern void Mach_StartUserProc _ARGS_((Proc_ControlBlock *procPtr, Address entryPoint));
extern void Mach_ExecUserProc _ARGS_((Proc_ControlBlock *procPtr, Address userStackPtr, Address entryPoint));
extern void Mach_FreeState _ARGS_((Proc_ControlBlock *procPtr));
extern void Mach_CopyState _ARGS_((Mach_State *statePtr, Proc_ControlBlock *destProcPtr));
extern void Mach_GetDebugState _ARGS_((Proc_ControlBlock *procPtr, Proc_DebugState *debugStatePtr));
extern void Mach_SetDebugState _ARGS_((Proc_ControlBlock *procPtr, Proc_DebugState *debugStatePtr));
extern Address Mach_GetUserStackPtr _ARGS_((Proc_ControlBlock *procPtr));

/*
 * Migration routines.
 */
extern ReturnStatus Mach_EncapState _ARGS_((register Proc_ControlBlock *procPtr, int hostID, Proc_EncapInfo *infoPtr, Address buffer));
extern ReturnStatus Mach_DeencapState _ARGS_((register Proc_ControlBlock *procPtr, Proc_EncapInfo *infoPtr, Address buffer));
extern ReturnStatus Mach_GetEncapSize _ARGS_((Proc_ControlBlock *procPtr, int hostID, Proc_EncapInfo *infoPtr));
extern Boolean Mach_CanMigrate _ARGS_((Proc_ControlBlock *procPtr));
extern int Mach_GetLastSyscall _ARGS_((void));


/*
 * Other routines.
 */
extern void Mach_InitSyscall _ARGS_((int callNum, int numArgs, ReturnStatus (*normalHandler)(), ReturnStatus (*migratedHandler)()));

extern int Mach_GetNumProcessors _ARGS_((void));
extern Mach_ProcessorStates Mach_ProcessorState _ARGS_((int processor));
extern Address			Mach_GetPC();
/*
 * Machine dependent routines.
 */
extern void Mach_GetEtherAddress _ARGS_((Net_EtherAddress *etherAddrPtr));
extern	void		Mach_ContextSwitch();
extern	int		Mach_TestAndSet();
extern int Mach_GetMachineArch _ARGS_((void));
extern int Mach_GetMachineType _ARGS_((void));
extern Address Mach_GetStackPointer _ARGS_((Proc_ControlBlock *procPtr));
extern void Mach_CheckSpecialHandling _ARGS_((int pnum));
extern int Mach_GetBootArgs _ARGS_((int argc, int bufferSize, char **argv, char *buffer));
extern  ReturnStatus	Mach_Probe _ARGS_((int size, Address srcAddress,
					Address, destAddress));
extern  ReturnStatus	Mach_ProbeAddr _ARGS_((int numArgs));
extern void Mach_FlushCode _ARGS_((Address addr, unsigned len));
extern void Mach_Return2 _ARGS_((int val));
extern int Mach_SigreturnStub _ARGS_((struct sigcontext *sigContextPtr));

/*
 * Machine dependent variables.
 */
extern	Address	mach_KernStart;
extern	Address	mach_CodeStart;
extern	Address	mach_StackBottom;
extern	int	mach_KernStackSize;
extern	Address	mach_KernEnd;
extern	Address	mach_FirstUserAddr;
extern	Address	mach_LastUserAddr;
extern	Address	mach_MaxUserStackAddr;
extern	int	mach_LastUserStackPage;

/*
 * Set the errno for Unix compatible system calls.
 */
#define Mach_SetErrno(err) Proc_GetActualProc()->unixErrno = (err)

/*
 * Fast recovery definitions.
 */
extern  int     storedDataSize;
extern  char    storedData[];
extern  char    *mach_RestartTablePtr;
extern  ReturnStatus    Mach_FastBoot _ARGS_((void));
extern  int     Mach_GetRestartTableSize _ARGS_((void));

#endif /* _MACH */
@


9.6
log
@Large install for unix compatibility
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach.ken/ds3100.md/RCS/mach.h,v 1.1 91/05/30 16:23:47 shirriff Exp $ SPRITE (Berkeley)
d178 9
@


9.5
log
@Added new declarations.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 9.4 90/12/07 23:42:07 rab Exp Locker: shirriff $ SPRITE (Berkeley)
d69 7
@


9.4
log
@Unix compatiblity
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 9.3 90/10/09 11:46:19 jhh Exp Locker: rab $ SPRITE (Berkeley)
d108 2
a109 1
extern void Mach_SetReturnVal _ARGS_((Proc_ControlBlock *procPtr, int retVal));
d151 2
@


9.3
log
@added Mach_Probe
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 9.2 90/09/21 15:51:24 mgbaker Exp Locker: jhh $ SPRITE (Berkeley)
d163 5
@


9.2
log
@prototyping.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 9.1 90/09/11 10:52:34 mendel Exp Locker: mgbaker $ SPRITE (Berkeley)
d146 2
a149 1

@


9.1
log
@Move typedefs into machTypes.h
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 9.0 89/09/12 14:54:05 douglis Stable Locker: mendel $ SPRITE (Berkeley)
d101 1
a101 1
extern void	Mach_Init();
d106 10
a115 10
extern	void		Mach_InitFirstProc();
extern	ReturnStatus	Mach_SetupNewState();
extern	void		Mach_SetReturnVal();
extern	void		Mach_StartUserProc();
extern	void		Mach_ExecUserProc();
extern	void		Mach_FreeState();
extern	void		Mach_CopyState();
extern	void		Mach_GetDebugState();
extern	void		Mach_SetDebugState();
extern	Address		Mach_GetUserStackPtr();
d120 5
a124 4
extern ReturnStatus		Mach_EncapState();
extern ReturnStatus		Mach_DeencapState();
extern ReturnStatus		Mach_GetEncapSize();
extern Boolean			Mach_CanMigrate();
d126 1
d130 4
a133 3
extern void			Mach_InitSyscall();
extern Mach_ProcessorStates	Mach_ProcessorState();
extern int			Mach_GetNumProcessors();
d138 1
a138 1
extern	void		Mach_GetEtherAddress();
d141 8
a148 7
extern	int		Mach_GetMachineType();
extern	int		Mach_GetMachineArch();
extern	Address		Mach_GetStackPointer();
extern 	void		Mach_CheckSpecialHandling();
extern 	int		Mach_GetBootArgs();
extern  ReturnStatus	Mach_ProbeAddr();
extern	void		Mach_FlushCode();
@


9.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 1.6 89/09/05 15:55:14 douglis Exp Locker: douglis $ SPRITE (Berkeley)
d21 1
a21 1
#include "machConst.h"
d24 1
a24 1
#include <kernel/machConst.h>
a28 8
 * The state of each processor: user mode or kernel mode.
 */
typedef enum {
    MACH_USER,
    MACH_KERNEL
} Mach_ProcessorStates;

/*
a74 92

/*
 * State for each process.
 *
 * IMPORTANT NOTE: If the order or size of fields in these structures change
 *		   then the constants which give the offsets must be
 *		   changed in "machConst.h".
 */

/*
 * The register state of a user process which is passed to debuggers.
 */
typedef struct {
    Address		pc;			/* The program counter. */
    unsigned		regs[MACH_NUM_GPRS];	/* General purpose registers.*/
    unsigned		fpRegs[MACH_NUM_FPRS];	/* The floating point
						 * registers. */
    unsigned		fpStatusReg;		/* The floating point status
						 * register. */
    unsigned		mflo, mfhi;		/* Multiply lo and hi
						 * registers. */
} Mach_RegState;

/*
 * The user state for a process.
 */
typedef struct {
    Mach_RegState	regState;		/* State of a process after
						 * a trap. */
    int			unixRetVal;		/* Return value from a
						 * UNIX system call. */
} Mach_UserState;

/*
 * The kernel and user state for a process.
 */
typedef struct Mach_State {
    Mach_UserState	userState;		/* User state for a process. */
    Mach_RegState	switchRegState;		/* The state to save on a
						 * context switch. */
    Address		kernStackStart;		/* Address of the beginning of
						 * the kernel stack. */
    Address		kernStackEnd;		/* Address of the end of the
						 * the kernel stack. */
    unsigned		sstepInst;		/* The instruction that we
						 * replaced to do a single
						 * step. */
    unsigned		tlbHighEntry;		/* The TLB high entry value
						 * for the first stack page. */
    unsigned		tlbLowEntries[MACH_KERN_STACK_PAGES - 1];
    						/* The TLB low entry values
						 * for the mapped stack
						 * pages. */
} Mach_State;

/*
 * The machine dependent signal structure.
 */
typedef struct {
    int		  	break1Inst;	/* The instruction that is
					 * executed upon return. */
    Mach_UserState	userState;	/* The user process machine state
					 * info. */
    unsigned		fpRegs[MACH_NUM_FPRS];	/* The floating point
						 * registers. */
    unsigned		fpStatusReg;		/* The floating point status
						 * register. */
} Mach_SigContext;

/*
 * The structure used by the debugger to hold the machine state.
 */
typedef struct {
    int		regs[MACH_NUM_GPRS];
    int		fpRegs[MACH_NUM_FPRS];
    unsigned	sig[32];
    unsigned	excPC;
    unsigned	causeReg;
    unsigned	multHi;
    unsigned	multLo;
    unsigned	fpCSR;
    unsigned	fpEIR;
    unsigned	trapCause;
    unsigned	trapInfo;
    unsigned	tlbIndex;
    unsigned	tlbRandom;
    unsigned	tlbLow;
    unsigned	tlbContext;
    unsigned	badVaddr;
    unsigned	tlbHi;
    unsigned	statusReg;
} Mach_DebugState;
@


1.6
log
@use 3 kernel stack pages, and flag implicit dependencies on this constant
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 1.5 89/08/17 17:26:04 jhh Exp Locker: douglis $ SPRITE (Berkeley)
@


1.5
log
@now uses Fmt_Convert
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 1.4 89/08/15 18:28:18 rab Exp $ SPRITE (Berkeley)
d132 4
a135 2
    unsigned		tlbLowEntries[2];	/* The two TLB low entry values
						 * for the two stack pages. */
@


1.4
log
@Commented #endif labels.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 1.3 89/07/24 19:52:12 nelson Exp Locker: rab $ SPRITE (Berkeley)
d22 1
d25 1
d189 1
a189 1
 * mach_ByteOrder defines a byte ordering/structure alignment type
d193 1
a193 1
extern	int	mach_ByteOrder;
@


1.3
log
@Optimized UNIX compatible system calls.
@
text
@d9 1
a9 1
 *	provided that the above copyright notice appears in all copies.  
d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 1.2 89/07/23 23:42:38 douglis Exp Locker: nelson $ SPRITE (Berkeley)
d100 1
a100 1
    unsigned		mflo, mfhi;		/* Multiply lo and hi 
d110 1
a110 1
    int			unixRetVal;		/* Return value from a 
d194 1
a194 1
 * Routine to initialize mach module.  Must be called first as part of boot 
d238 1
a238 1
extern 	int		Mach_GetBootArgs();	
d255 1
a255 1
#endif _MACH
@


1.2
log
@changes for table-driven migration.
@
text
@d14 1
a14 1
 * $Header: /sprite/src/kernel/mach/ds3100.md/RCS/mach.h,v 1.1 89/07/11 17:55:13 nelson Exp Locker: douglis $ SPRITE (Berkeley)
d108 1
a108 1
    Mach_RegState	regState		/* State of a process after
d110 2
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
 * $Header: mach.h,v 1.11 89/06/29 10:03:57 mnelson Exp $ SPRITE (Berkeley)
d214 1
a214 1
extern void			Mach_EncapState();
d216 2
a217 1
extern int			Mach_GetEncapSize();
@
