head     9.6;
branch   ;
access   ;
symbols  ds3100:9.6 sun3:9.6 sun4nw:9.6 symm:9.6 spur:9.6 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.6
date     91.07.26.17.03.23;  author shirriff;  state Exp;
branches ;
next     9.5;

9.5
date     91.03.29.17.53.24;  author shirriff;  state Exp;
branches ;
next     9.4;

9.4
date     90.12.07.23.41.03;  author rab;  state Exp;
branches ;
next     9.3;

9.3
date     90.02.20.15.38.44;  author brent;  state Exp;
branches ;
next     9.2;

9.2
date     89.10.12.12.38.18;  author shirriff;  state Exp;
branches ;
next     9.1;

9.1
date     89.09.18.17.26.18;  author shirriff;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.14.52.14;  author douglis;  state Stable;
branches ;
next     8.7;

8.7
date     89.09.11.23.43.43;  author rab;  state Exp;
branches ;
next     8.6;

8.6
date     89.06.30.01.04.01;  author rab;  state Exp;
branches ;
next     8.5;

8.5
date     89.06.16.13.06.32;  author rab;  state Exp;
branches ;
next     8.4;

8.4
date     89.05.24.02.04.10;  author rab;  state Exp;
branches ;
next     8.3;

8.3
date     89.04.14.02.52.16;  author rab;  state Exp;
branches ;
next     8.2;

8.2
date     88.12.12.14.50.45;  author nelson;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.15.12.37.29;  author rab;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.04.55;  author douglis;  state Stable;
branches ;
next     6.3;

6.3
date     88.10.29.16.35.26;  author jhh;  state Exp;
branches ;
next     6.2;

6.2
date     88.08.25.12.22.03;  author nelson;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.24.14.38.44;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.10.08;  author brent;  state Stable;
branches ;
next     1.3;

1.3
date     88.05.05.17.55.27;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     88.05.04.16.40.45;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.04.15.53.28;  author nelson;  state Exp;
branches ;
next     ;


desc
@New trap handling code with machine state struct per proc.
@


9.6
log
@Large install for unix compatibility
@
text
@/*
 * machConst.h --
 *
 *     Machine dependent constants.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 9.5 91/03/29 17:53:24 shirriff Exp $ SPRITE (Berkeley)
 */

#ifndef _MACHCONST
#define _MACHCONST

#ifdef KERNEL
#include "vmSunConst.h"
#else
#include <kernel/vmSunConst.h>
#endif

/*
 * Here are the different types of exceptions.
 */
#define	MACH_RESET		0
#define	MACH_BUS_ERROR		2
#define	MACH_ADDRESS_ERROR	3
#define	MACH_ILLEGAL_INST	4
#define	MACH_ZERO_DIV		5
#define	MACH_CHK_INST		6
#define	MACH_TRAPV		7
#define	MACH_PRIV_VIOLATION	8
#define	MACH_TRACE_TRAP		9
#define	MACH_EMU1010		10
#define	MACH_EMU1111		11
#define	MACH_STACK_FMT_ERROR	14
#define	MACH_UNINIT_VECTOR	15
#define	MACH_SPURIOUS_INT	24
#define	MACH_LEVEL1_INT		25
#define	MACH_LEVEL2_INT		26
#define	MACH_LEVEL3_INT		27
#define	MACH_LEVEL4_INT		28
#define	MACH_LEVEL5_INT		29
#define	MACH_LEVEL6_INT		30
#define	MACH_LEVEL7_INT		31
#define	MACH_UNIX_SYSCALL_TRAP	32
#define	MACH_SYSCALL_TRAP	33
#define	MACH_SIG_RET_TRAP	34
#define	MACH_BAD_TRAP		35

#define	MACH_BRKPT_TRAP		47
#define MACH_FP_UNORDERED_COND  48
#define MACH_FP_INEXACT_RESULT  49
#define MACH_FP_ZERO_DIV        50
#define MACH_FP_UNDERFLOW       51
#define MACH_FP_OPERAND_ERROR   52
#define MACH_FP_OVERFLOW        53
#define MACH_FP_NAN             54
#define	MACH_UNKNOWN_EXC	55

/*
 * The offsets for the various things on the exception stack
 */
#define	MACH_PC_OFFSET	2
#define	MACH_VOR_OFFSET	6

/*
 * Offsets of the fields in the Mach_State structure.
 */
#define	MACH_USER_SP_OFFSET		0
#define MACH_TRAP_REGS_OFFSET		(MACH_USER_SP_OFFSET + 4)
#define	MACH_EXC_STACK_PTR_OFFSET	(MACH_TRAP_REGS_OFFSET + 64)
#define	MACH_LAST_SYS_CALL_OFFSET	(MACH_EXC_STACK_PTR_OFFSET + 4)
#ifdef sun3
#define MACH_TRAP_FP_REGS_OFFSET        (MACH_LAST_SYS_CALL_OFFSET + 4)
#define MACH_TRAP_FP_CTRL_REGS_OFFSET   (MACH_TRAP_FP_REGS_OFFSET + 96)
#define MACH_TRAP_FP_STATE_OFFSET       (MACH_TRAP_FP_CTRL_REGS_OFFSET + 12)
#define	MACH_SWITCH_REGS_OFFSET		(MACH_TRAP_FP_STATE_OFFSET + 184)
#else
#define	MACH_SWITCH_REGS_OFFSET		(MACH_LAST_SYS_CALL_OFFSET + 4)
#endif
#define	MACH_KERN_STACK_START_OFFSET	(MACH_SWITCH_REGS_OFFSET + 64)
#define	MACH_SIG_EXC_STACK_SIZE_OFFSET	(MACH_KERN_STACK_START_OFFSET + 4)
#define	MACH_SIG_EXC_STACK_OFFSET	(MACH_SIG_EXC_STACK_SIZE_OFFSET + 4)
#if 0
#define MACH_SWITCH_FP_REGS_OFFSET      (MACH_SIG_EXC_STACK_OFFSET + 92)
#define MACH_SWITCH_FP_CTRL_REGS_OFFSET (MACH_SWITCH_FP_REGS_OFFSET + 96)
#define MACH_SWITCH_FP_STATE_OFFSET     (MACH_SWITCH_FP_CTRL_REGS_OFFSET + 12)
#endif

/*
 * Amount of data that is pushed onto the stack after a trap occurs.
 */
#define	MACH_TRAP_INFO_SIZE	24

/*
 * Return codes from Exc_Trap.
 *
 *   MACH_OK		The trap was handled successfully.
 *   MACH_KERN_ERROR	The trap could not be handled so the debugger must be
 *			called.
 *   MACH_USER_ERROR	A cross address space copy to/from user space failed
 *			because of a bad address.
 *   MACH_SIG_RETURN	Are returning from a signal handler.
 */
#define	MACH_OK		0
#define	MACH_KERN_ERROR	1
#define	MACH_USER_ERROR	2
#define	MACH_SIG_RETURN	3

/*
 *  Definition of bits in the 68010 status register (SR)
 *	
 *	MACH_SR_TRACEMODE	Trace mode mask
 *	MACH_SR_SUPSTATE	Supervisor state mask
 *	MACH_SR_INTMASK		Interrupt level mask
 *	MACH_SR_CC		Condition codes mask
 */

#define	MACH_SR_TRACEMODE	0x8000
#define	MACH_SR_SUPSTATE	0x2000
#define	MACH_SR_INTMASK		0x0700
#define	MACH_SR_CC		0x001F

/*
 *  Masks for eight interrupt priority levels:
 *   lowest = 0,   highest = 7.
 */
#define	MACH_SR_PRIO_0		0x0000
#define	MACH_SR_PRIO_1		0x0100
#define	MACH_SR_PRIO_2		0x0200
#define	MACH_SR_PRIO_3		0x0300
#define	MACH_SR_PRIO_4		0x0400
#define	MACH_SR_PRIO_5		0x0500
#define	MACH_SR_PRIO_6		0x0600
#define	MACH_SR_PRIO_7		0x0700

/*
 *  State priorities in the status register:
 *
 *	MACH_SR_HIGHPRIO	Supervisor mode + interrupts disabled
 *	MACH_SR_LOWPRIO		Supervisor mode + interrupts enabled
 *	MACH_SR_USERPRIO	User mode
 */
#define	MACH_SR_HIGHPRIO	0x2700
#define	MACH_SR_LOWPRIO		0x2000
#define	MACH_SR_USERPRIO	0x0000

/*
 * Different stack formats on a 68000
 */
#define	MACH_SHORT		0x0
#define	MACH_THROWAWAY		0x1
#define	MACH_INST_EXCEPT	0x2
#define	MACH_MC68010_BUS_FAULT	0x8
#define	MACH_COPROC_MID_INSTR	0x9
#define	MACH_SHORT_BUS_FAULT	0xa
#define	MACH_LONG_BUS_FAULT	0xb

/*
 * The sizes of the different stack formats.
 */
#define	MACH_SHORT_SIZE			8
#define MACH_THROWAWAY_SIZE		8
#define	MACH_INST_EXCEPT_SIZE		12
#define MACH_MC68010_BUS_FAULT_SIZE	58
#define MACH_COPROC_MID_INSTR_SIZE	20
#define MACH_SHORT_BUS_FAULT_SIZE	32
#define	MACH_LONG_BUS_FAULT_SIZE	92

/*
 * MACH_KERN_START	The address where the kernel image is loaded at.
 * MACH_CODE_START	The address where the kernel code is loaded at.
 * MACH_STACK_BOTTOM	The address of the bottom of the kernel stack for the
 *			main process that is initially run.
 * MACH_KERN_END	The address where the last kernel virtual address is
 *			at.  Beyond this is used for device mappings.
 * MACH_KERN_STACK_SIZE Number of bytes in a kernel stack.
 * MACH_BARE_STACK_OFFSET	Offset of where a bare kernel stack starts.
 *				It doesn't start at the very top because
 *				the debugger requires a couple of integers
 *				of padding on the top.
 * MAGIC		A magic number which is pushed onto the stack before
 *			a context switch.  Used to verify that the stack 
 *			doesn't get trashed.
 */
#ifdef sun3
#define	MACH_KERN_START		0xe000000
#define	MACH_CODE_START		0xe004000
#define	MACH_STACK_BOTTOM	0xe000000
#else
#define	MACH_KERN_START		0x800000
#define	MACH_CODE_START		0x804000
#define	MACH_STACK_BOTTOM	0x802000
#endif
#define MACH_KERN_END		VMMACH_KERN_END
#define	MACH_KERN_STACK_SIZE	(MACH_CODE_START - MACH_STACK_BOTTOM)
#define	MACH_BARE_STACK_OFFSET	(MACH_KERN_STACK_SIZE - 8)
#define	MAGIC			0xFeedBabe

/*
 * Constants for the user's address space.
 * 
 * MACH_FIRST_USER_ADDR		The lowest possible address in the user's VAS.
 * MACH_LAST_USER_ADDR		The highest possible address in the user's VAS.
 * MACH_LAST_USER_STACK_PAGE	The highest page in the user stack segment.
 * MACH_MAX_USER_STACK_ADDR	The highest value that the user stack pointer
 *				can have.  Note that the stack pointer must be 
 *				decremented before anything can be stored on 
 *				the stack.
 */
#define	MACH_FIRST_USER_ADDR		VMMACH_PAGE_SIZE
#define	MACH_LAST_USER_ADDR		(MACH_MAX_USER_STACK_ADDR - 1)
#define	MACH_LAST_USER_STACK_PAGE	((MACH_MAX_USER_STACK_ADDR - 1) / VMMACH_PAGE_SIZE)
#if 0
#define	MACH_MAX_USER_STACK_ADDR	(VMMACH_MAP_SEG_ADDR - VMMACH_USER_SHARED_PAGES*VMMACH_PAGE_SIZE)
#else
#define	MACH_MAX_USER_STACK_ADDR	0x0d000000
#endif

/*
 * Offset of unixErrno in process control block
 */
#define MACH_UNIX_ERRNO_OFFSET      696

/*
 * Maximum number of processors configuable.
 */

#define	MACH_MAX_NUM_PROCESSORS		1

#ifdef sun3
/*
 * Constants to access bits in the interrupt register.
 */

#define	MACH_ENABLE_ALL_INTERRUPTS	0x01
#define	MACH_ENABLE_LEVEL7_INTR		0x80
#define	MACH_ENABLE_LEVEL5_INTR		0x20

/*
 * Constants to access bits in the system enable register.
 */
#define MACH_ENABLE_FPP			0x40

/*
 * Then number of floating point registers in the mc68881/2
 */
#define MACH_NUM_FPRS       8

/*
 * The amount of memory needed to store the internal state of the
 * floating point coprocessor.  This is 184 for the mc68881, but
 * 216 for the mc68882.
 */
#define MACH_FP_STATE_SIZE  184

#endif /* sun3 */

/*
 * The number of general purpose registers (d0-d7 and a0-a7)
 */
#define	MACH_NUM_GPRS	16

/*
 * The indices of all of the registers in the standard 16 register array of
 * saved register.
 */
#define	D0	0
#define	D1	1
#define	D2	2
#define	D3	3
#define	D4	4
#define	D5	5
#define	D6	6
#define	D7	7
#define	A0	8
#define	A1	9
#define	A2	10
#define	A3	11
#define	A4	12
#define	A5	13
#define	A6	14
#define	FP	14
#define	A7	15
#define	SP	15

#endif /* _MACHCONST */
@


9.5
log
@Added MACH_UNIX_SYSCALL_TRAP
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 9.4 90/12/07 23:41:03 rab Exp Locker: shirriff $ SPRITE (Berkeley)
d215 1
d217 3
@


9.4
log
@Unix compatiblity
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 9.3 90/02/20 15:38:44 brent Exp Locker: rab $ SPRITE (Berkeley)
d46 1
@


9.3
log
@Changed this to use VMMACH_KERN_END
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 9.2 89/10/12 12:38:18 shirriff Exp $ SPRITE (Berkeley)
d216 4
@


9.2
log
@Added parentheses to #define value.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 9.1 89/09/18 17:26:18 shirriff Exp Locker: shirriff $ SPRITE (Berkeley)
d176 1
a176 1
 *			at.
d195 1
a195 1
#define MACH_KERN_END		VMMACH_DEV_START_ADDR
@


9.1
log
@Moved stack to make room for shared virtual memory.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 9.0 89/09/12 14:52:14 douglis Stable Locker: shirriff $ SPRITE (Berkeley)
d214 1
a214 1
#define	MACH_MAX_USER_STACK_ADDR	VMMACH_MAP_SEG_ADDR - VMMACH_USER_SHARED_PAGES*VMMACH_PAGE_SIZE
@


9.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 8.7 89/09/11 23:43:43 rab Exp Locker: douglis $ SPRITE (Berkeley)
d214 1
a214 1
#define	MACH_MAX_USER_STACK_ADDR	VMMACH_MAP_SEG_ADDR
@


8.7
log
@Changes to fix floating point migration.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 8.6 89/06/30 01:04:01 rab Exp Locker: rab $ SPRITE (Berkeley)
@


8.6
log
@*** empty log message ***
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 8.5 89/06/16 13:06:32 rab Exp Locker: rab $ SPRITE (Berkeley)
d77 1
a77 1
#define	MACH_SWITCH_REGS_OFFSET		(MACH_TRAP_FP_STATE_OFFSET + 180)
d84 1
d88 1
d244 2
a245 2
 * floating point coprocessor.  This is 180 for the mc68881, but
 * 212 for the mc68882.
d247 1
a247 1
#define MACH_FP_STATE_SIZE  180
@


8.5
log
@*** empty log message ***
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 8.4 89/05/24 02:04:10 rab Exp Locker: rab $ SPRITE (Berkeley)
d46 3
a48 5
#define	MACH_SYSCALL_TRAP	32
#define	MACH_SIG_RET_TRAP	33
#define	MACH_BAD_TRAP		34
#define	MACH_BRKPT_TRAP		35
#define	MACH_UNKNOWN_EXC	36
d50 1
a50 1
#ifdef sun3
d58 1
a58 1
#endif
@


8.4
log
@Changes to support floating point.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 8.3 89/04/14 02:52:16 rab Exp Locker: rab $ SPRITE (Berkeley)
d75 6
d82 1
d88 1
a88 1
#define MACH_FP_STATE_OFFSET            (MACH_SWITCH_FP_CTRL_REGS_OFFSET + 12)
@


8.3
log
@*** empty log message ***
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun3.md/RCS/machConst.h,v 8.2 88/12/12 14:50:45 nelson Exp Locker: rab $ SPRITE (Berkeley)
d26 25
a50 25
#define	MACH_BUS_ERROR		1
#define	MACH_ADDRESS_ERROR	2
#define	MACH_ILLEGAL_INST	3
#define	MACH_ZERO_DIV		4
#define	MACH_CHK_INST		5
#define	MACH_TRAPV		6
#define	MACH_PRIV_VIOLATION	7
#define	MACH_TRACE_TRAP		8
#define	MACH_EMU1010		9
#define	MACH_EMU1111		10
#define	MACH_STACK_FMT_ERROR	11
#define	MACH_UNINIT_VECTOR	12
#define	MACH_SPURIOUS_INT	13
#define	MACH_LEVEL1_INT		14
#define	MACH_LEVEL2_INT		15
#define	MACH_LEVEL3_INT		16
#define	MACH_LEVEL4_INT		17
#define	MACH_LEVEL5_INT		18
#define	MACH_LEVEL6_INT		19
#define	MACH_LEVEL7_INT		20
#define	MACH_SYSCALL_TRAP	21
#define	MACH_SIG_RET_TRAP	22
#define	MACH_BAD_TRAP		23
#define	MACH_BRKPT_TRAP		24
#define	MACH_UNKNOWN_EXC	25
d52 10
d77 1
a77 2
#define	MACH_SET_JUMP_STATE_PTR_OFFSET	(MACH_KERN_STACK_START_OFFSET + 4)
#define	MACH_SIG_EXC_STACK_SIZE_OFFSET	(MACH_SET_JUMP_STATE_PTR_OFFSET + 4)
d79 3
d229 12
@


8.2
log
@Moved the kernel.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun2.md/RCS/machConst.h,v 8.1 88/11/15 12:37:29 rab Exp $ SPRITE (Berkeley)
d248 1
a248 1
#endif _MACHCONST
@


8.1
log
@changed SUN to sun
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun2.md/RCS/machConst.h,v 8.0 88/11/11 18:04:55 douglis Stable Locker: rab $ SPRITE (Berkeley)
d168 3
a170 3
#define	MACH_KERN_START		0xf000000
#define	MACH_CODE_START		0xf004000
#define	MACH_STACK_BOTTOM	0xf000000
@


8.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/mach/sun2.md/RCS/machConst.h,v 6.3 88/10/29 16:35:26 jhh Exp Locker: douglis $ SPRITE (Berkeley)
d167 1
a167 1
#ifdef SUN3
d204 1
a204 1
#ifdef SUN3
d218 1
a218 1
#endif SUN3
@


6.3
log
@added MACH_MAX_NUM_PROCESSORS
@
text
@d10 1
a10 1
 * $Header: machConst.h,v 6.2 88/08/25 12:22:03 nelson Exp $ SPRITE (Berkeley)
@


6.2
log
@Changed the user state around so that the debugger can get at appropriate
info.
@
text
@d10 1
a10 1
 * $Header: machConst.h,v 6.1 88/08/24 14:38:44 nelson Exp $ SPRITE (Berkeley)
d196 7
@


6.1
log
@Added the last system call field to the machine dependent struct and
moved the user register stuff into a separate struct and moved set jump
from a macro to a C routine.
@
text
@d10 1
a10 1
 * $Header: machConst.h,v 1.3 88/05/05 17:55:27 nelson Exp $ SPRITE (Berkeley)
d16 1
d18 3
@


6.0
log
@Changing version numbers.
@
text
@d60 2
a61 1
#define	MACH_SWITCH_REGS_OFFSET		(MACH_EXC_STACK_PTR_OFFSET + 4)
@


1.3
log
@Handles move of functionality from sys to mach.
@
text
@d10 1
a10 1
 * $Header: machConst.h,v 1.2 88/05/04 16:40:45 nelson Exp $ SPRITE (Berkeley)
@


1.2
log
@Comments.
@
text
@d10 1
a10 1
 * $Header: machConst.h,v 1.1 88/05/04 15:53:28 nelson Exp $ SPRITE (Berkeley)
d62 2
a63 1
#define	MACH_SIG_EXC_STACK_SIZE_OFFSET	(MACH_KERN_STACK_START_OFFSET + 4)
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
 * $Header: excAsm.h,v 5.0 87/08/11 10:50:21 sprite Exp $ SPRITE (Berkeley)
a52 19

/*
 * The length of the small basic stack.
 */
#define	MACH_SHORT_STACK	8

/*
 * The length of the longest stack in bytes.
 */
#ifdef SUN3
#define	MACH_LONG_STACK	92
#else
#define	MACH_LONG_STACK	58
#endif

/*
 * Masks to get at the stack format.
 */
#define	MACH_STACK_FORMAT_MASK	0xF000
@
