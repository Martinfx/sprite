head     9.0;
branch   ;
access   ;
symbols  sun4nw:9.0 symm:9.0 spur:9.0 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.0
date     89.09.12.14.52.03;  author douglis;  state Stable;
branches ;
next     8.0;

8.0
date     88.11.11.18.04.37;  author douglis;  state Stable;
branches ;
next     6.0;

6.0
date     88.08.11.12.09.56;  author brent;  state Stable;
branches ;
next     5.2;

5.2
date     88.03.18.14.54.44;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     87.12.11.14.19.35;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.50.37;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.0
log
@Changing version numbers.
@
text
@/* 
 * machDep.c --
 *
 *     Machine dependent routines for Sun-2 and Sun-3.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun3.md/RCS/machDep.c,v 8.0 88/11/11 18:04:37 douglis Stable Locker: douglis $ SPRITE (Berkeley)";
#endif not lint

#include "sprite.h"
#include "sys.h"
#include "machine.h"
#include "machineConst.h"
#include "dbg.h"
#include "proc.h"
#include "sunSR.h"

/*
 * The format that the kernel stack has to be in to start a process off.
 */

typedef struct {
    int		magicNumber;		/* Magic number used to determine if
					   the stack has been corrupted. */
    Address	userStackPtr;		/* The user's stack pointer. */
    short	statusReg;		/* The status register. */
    void	(*startFunc)();		/* Function to call when process
					   first starts executing. */
    Address	progCounter;		/* Value of program counter where
					   startFunc should jump to when
					   it is ready to actually start the
					   process. */
    void	(*exitProc)();		/* Function to call if the process
					   dies.  This is left on top of the
					   stack so that if the process 
					   returns it will jump to this
					   function. */
    int		fill1;			/* Filler for the debugger. */
    int		fill2;			/* Filler for the debugger. */
} KernelStack;


/*
 * Machine dependent variables.
 */
int	mach_SP;
int	mach_FP;
Address	mach_KernStart;
Address	mach_CodeStart;
Address	mach_StackBottom;
int	mach_KernStackSize;
Address	mach_KernEnd;
int	mach_DummySPOffset;
int	mach_DummyFPOffset;
int	mach_ExecStackOffset;
Address	mach_FirstUserAddr;
Address	mach_LastUserAddr;
Address	mach_MaxUserStackAddr;
int	mach_LastUserStackPage;


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_Init --
 *
 *     Machine dependent boot time initialization.
 *
 * Results:
 *     None.
 *
 * Side effects:
 *     The stack is initialized.
 *
 * ----------------------------------------------------------------------------
 */
void
Mach_Init()
{
    KernelStack	stack;

    mach_SP = MACH_STACK_PTR;
    mach_FP = MACH_FRAME_PTR;
    mach_KernStart = (Address)MACH_KERN_START;
    mach_KernEnd = (Address)MACH_KERN_END;
    mach_CodeStart = (Address)MACH_CODE_START;
    mach_StackBottom = (Address)MACH_STACK_BOTTOM;
    mach_KernStackSize = MACH_KERN_STACK_SIZE;
    mach_DummySPOffset = MACH_KERN_STACK_SIZE - sizeof(KernelStack);
    mach_DummyFPOffset = MACH_KERN_STACK_SIZE - sizeof(KernelStack) +
		(unsigned int)&stack.statusReg - (unsigned int)&stack;
    mach_ExecStackOffset = MACH_EXEC_STACK_OFFSET;
    mach_FirstUserAddr = (Address)MACH_FIRST_USER_ADDR;
    mach_LastUserAddr = (Address)MACH_LAST_USER_ADDR;
    mach_MaxUserStackAddr = (Address)MACH_MAX_USER_STACK_ADDR;
    mach_LastUserStackPage = (MACH_MAX_USER_STACK_ADDR - 1) / VMMACH_PAGE_SIZE;
    Exc_Init();
}


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_InitStack --
 *
 *     Initialize a new process's stack.
 *
 * Results:
 *     None.
 *
 * Side effects:
 *     The stack is initialized.
 *
 * ----------------------------------------------------------------------------
 */
void
Mach_InitStack(stackStart, startFunc, progCounter)
    int		stackStart;
    void	(*startFunc)();
    Address	progCounter;
{
    register	KernelStack	*stackPtr;

    /*
     * initialize the stack so that it looks like it is the middle of
     * Sun_ContextSwitch.  The old frame pointer is set to the highest 
     * possible stack address to make kdbx happy.
     */
    stackPtr = (KernelStack *) (stackStart + mach_DummySPOffset);
    stackPtr->magicNumber = MAGIC;
    stackPtr->userStackPtr = mach_MaxUserStackAddr;
    stackPtr->statusReg = SUN_SR_HIGHPRIO;
    stackPtr->startFunc =  startFunc;
    stackPtr->progCounter = progCounter;
    stackPtr->exitProc = Proc_Exit;
    stackPtr->fill1 = 0;
    stackPtr->fill2 = 0;
}
@


8.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/sun2.md/RCS/machDep.c,v 6.0 88/08/11 12:09:56 brent Stable Locker: douglis $ SPRITE (Berkeley)";
@


6.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: machDep.c,v 5.2 88/03/18 14:54:44 nelson Exp $ SPRITE (Berkeley)";
@


5.2
log
@Updated context switch stack format
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: machDep.c,v 5.1 87/12/11 14:19:35 nelson Exp $ SPRITE (Berkeley)";
@


5.1
log
@Changed to use new machine dependent name format.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: machDep.c,v 5.0 87/08/11 10:50:37 sprite Exp $ SPRITE (Berkeley)";
a30 1
    int		framePtr;		/* The value of a6, the framePtr. */
d95 1
a95 1
		(unsigned int)&stack.framePtr - (unsigned int)&stack;
a136 1
    stackPtr->framePtr = stackStart + mach_KernStackSize;
@


5.0
log
@First Sprite native copy
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: machDep.c,v 1.1 86/11/21 12:42:40 nelson Exp $ SPRITE (Berkeley)";
d17 1
d29 1
a29 5
    int		destFuncCode;		/* The value of the destination 
					   function code register. */
    int		srcFuncCode;		/* The value of the source 
					   function code register. */
    int		userStackPtr;		/* The user's stack pointer. */
d47 19
d70 39
a120 1

d134 1
a134 1
    stackPtr = (KernelStack *) (stackStart + MACH_DUMMY_SP_OFFSET);
d136 1
a136 3
    stackPtr->destFuncCode = VM_USER_DATA_SPACE;
    stackPtr->srcFuncCode = VM_USER_DATA_SPACE;
    stackPtr->userStackPtr = MACH_MAX_USER_STACK_ADDR;
d138 1
a138 1
    stackPtr->framePtr = stackStart + MACH_NUM_STACK_PAGES * VM_PAGE_SIZE;
@
