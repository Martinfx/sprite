head     1.4;
branch   ;
access   ;
symbols  ds3100:1.4 sun3:1.4 sun4nw:1.3 symm:1.3 spur:1.3;
locks    ; strict;
comment  @ * @;


1.4
date     92.08.18.11.03.12;  author jhh;  state Exp;
branches ;
next     1.3;

1.3
date     91.05.08.16.27.21;  author jhh;  state Exp;
branches ;
next     1.2;

1.2
date     91.03.05.15.06.40;  author jhh;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.27.10.42.11;  author jhh;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Abort should call the prom routine "restart", not "halt".
Mach_MonSetenv mistakenly called the prom routine "getenv".
@
text
@/* 
 * machMon.c --
 *
 *	Routines to access the PMAX prom monitor.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.  
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/mach/ds5000.md/machMon.c,v 1.3 91/05/08 16:27:21 jhh Exp $ SPRITE (DECWRL)";
#endif not lint

#include "sprite.h"
#define _MONFUNCS
#include "machMon.h"
#include "machConst.h"
#include "machInt.h"
#include "ctype.h"
#include "mach.h"


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_MonAbort --
 *
 *     Abort to prom.
 *
 * Results:
 *     None.
 *
 * Side effects:
 *     Aborts to monitor.
 *
 * ----------------------------------------------------------------------------
 */
void
Mach_MonAbort()
{
	mach_MonFuncs.restart();
}

/*
 * ----------------------------------------------------------------------------
 *
 * Mach_MonPutChar --
 *
 *     Call the monitor put character routine
 *
 * Results:
 *     None.
 *
 * Side effects:
 *     None.
 *
 * ----------------------------------------------------------------------------
 */
int
Mach_MonPutChar(ch)
    int		ch;
{
    return(Dev_GraphicsPutc(ch));
}


/*
 * ----------------------------------------------------------------------------
 *
 * Mach_MonReboot --
 *
 *     	Reboot the system.
 *
 * Results:
 *     None.
 *
 * Side effects:
 *     System rebooted.
 *
 * ----------------------------------------------------------------------------
 */
void
Mach_MonReboot(rebootString)
    char	*rebootString;
{
    char *bootpath;
    if (*rebootString != '\0') {
	mach_MonFuncs.setenv2("boot",rebootString);
    } else {
	bootpath = mach_MonFuncs.getenv2("boot");
	if (bootpath == (char *)NULL || *bootpath == '\0') {
	    /*
	     * Hardware doesn't have a bootpath.
	     */
	    mach_MonFuncs.setenv2("boot",DEFAULT_REBOOT);
	    printf("Using default %s\n",DEFAULT_REBOOT);
	}
	/*
	 * Otherwise use hardware's bootpath.
	 */
    }
    *MACH_USE_NON_VOLATILE |= MACH_NON_VOLATILE_FLAG;
    mach_MonFuncs.autoboot();
    panic("Mach_MonReboot: Reboot failed (I'm still alive aren't I?)\n");
}
@


1.3
log
@changed name of prom reboot variable
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds5000.md/RCS/machMon.c,v 1.2 91/03/05 15:06:40 jhh Exp $ SPRITE (DECWRL)";
d46 1
a46 1
	mach_MonFuncs.halt();
@


1.2
log
@ds5000 port
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/mach/ds3100.md/RCS/machMon.c,v 9.3 90/02/20 14:33:45 shirriff Exp $ SPRITE (DECWRL)";
d93 1
a93 1
	mach_MonFuncs.setenv2("bootpath",rebootString);
d95 1
a95 1
	bootpath = mach_MonFuncs.getenv2("bootpath");
d100 1
a100 1
	    mach_MonFuncs.setenv2("bootpath",DEFAULT_REBOOT);
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
	mach_MonFuncs.restart();
@
