head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.3 symm:9.3 spur:9.3 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     90.09.12.13.36.36;  author shirriff;  state Exp;
branches ;
next     9.2;

9.2
date     90.09.11.10.44.54;  author shirriff;  state Exp;
branches ;
next     9.1;

9.1
date     90.05.13.23.25.44;  author shirriff;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.23.38;  author douglis;  state Stable;
branches ;
next     8.3;

8.3
date     89.09.07.14.25.25;  author shirriff;  state Exp;
branches ;
next     8.2;

8.2
date     89.05.24.01.05.06;  author rab;  state Exp;
branches ;
next     8.1;

8.1
date     88.12.04.15.51.43;  author ouster;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.43.49;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.28.18.19.32;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.15.18.16.40;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.30.45;  author brent;  state Stable;
branches ;
next     1.3;

1.3
date     88.07.12.19.54.48;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     88.05.04.17.27.07;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     88.01.11.11.46.02;  author nelson;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@Changed includes from quotes to angles.
@
text
@/* 
 * vmPrefetch.c --
 *
 *      This file contains routines to do prefetch.
 *	
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 9.2 90/09/11 10:44:54 shirriff Exp Locker: shirriff $ SPRITE (Berkeley)";
#endif not lint

#include <sprite.h>
#include <vmStat.h>
#include <vm.h>
#include <vmInt.h>
#include <user/vm.h>
#include <sync.h>
#include <dbg.h>
#include <list.h>
#include <lock.h>
#include <sys.h>
#include <stdlib.h>
#include <stdio.h>

Boolean	vmPrefetch = FALSE;

/*
 * Information needed to do a prefetch.
 */
typedef struct {
    Vm_VirtAddr	virtAddr;
} PrefetchInfo;

static Boolean StartPrefetch _ARGS_((register Vm_Segment *segPtr,
	register Vm_PTE *ptePtr));
static void DoPrefetch _ARGS_((ClientData data, Proc_CallInfo *callInfoPtr));
static void FinishPrefetch _ARGS_((Vm_VirtAddr *virtAddrPtr,
	register Vm_PTE *ptePtr));
static void AbortPrefetch _ARGS_((Vm_VirtAddr *virtAddrPtr, Vm_PTE *ptePtr));


/*
 * ----------------------------------------------------------------------------
 *
 * VmPrefetch --
 *
 *	Start a fetch for the next page if it isn't resident and it's on
 *	swap or in a file.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Memory is allocated.
 *
 * ----------------------------------------------------------------------------
 */
void
VmPrefetch(virtAddrPtr, ptePtr)
    register	Vm_VirtAddr	*virtAddrPtr;
    register	Vm_PTE		*ptePtr;
{
    register	PrefetchInfo	*prefetchInfoPtr;
    register	Vm_Segment	*segPtr;

    segPtr = virtAddrPtr->segPtr;
    if (segPtr->type == VM_STACK) {
	if (virtAddrPtr->page == mach_LastUserStackPage) {
	    return;
	}
    } else {
	if (virtAddrPtr->page == segOffset(virtAddrPtr) + segPtr->numPages - 1) {
	    return;
	}
    }
    if (!(*ptePtr & VM_VIRT_RES_BIT) || 
        (*ptePtr & (VM_ZERO_FILL_BIT | VM_PHYS_RES_BIT | VM_IN_PROGRESS_BIT | 
		    VM_COR_BIT | VM_COW_BIT)) || 
	 !StartPrefetch(segPtr, ptePtr)) {
	return;
    }
    prefetchInfoPtr = (PrefetchInfo *)malloc(sizeof(PrefetchInfo));
    prefetchInfoPtr->virtAddr.segPtr = segPtr;
    prefetchInfoPtr->virtAddr.page = virtAddrPtr->page + 1;
    prefetchInfoPtr->virtAddr.flags = 0;
    prefetchInfoPtr->virtAddr.sharedPtr = virtAddrPtr->sharedPtr;
    switch (segPtr->type) {
	case VM_CODE:
	    vmStat.codePrefetches++;
	    break;
	case VM_HEAP:
	    if (*ptePtr & VM_ON_SWAP_BIT) {
		vmStat.heapSwapPrefetches++;
	    } else {
		vmStat.heapFSPrefetches++;
	    }
	    break;
	case VM_STACK:
	    vmStat.stackPrefetches++;
	    break;
    }
    Proc_CallFunc(DoPrefetch, (ClientData)prefetchInfoPtr, 0);
}


/*
 * ----------------------------------------------------------------------------
 *
 * StartPrefetch
 *
 *	Set up things for the next page to be fetched.
 *
 * Results:
 *	TRUE if decided that the next page should be prefetched.
 *
 * Side effects:
 *	In progress bit set in the pte if a prefetch should be done.
 *
 * ----------------------------------------------------------------------------
 */
ENTRY static Boolean
StartPrefetch(segPtr, ptePtr)
    register	Vm_Segment	*segPtr;
    register	Vm_PTE		*ptePtr;
{
    LOCK_MONITOR;

    if (*ptePtr & (VM_ZERO_FILL_BIT | VM_PHYS_RES_BIT | 
	            VM_IN_PROGRESS_BIT | VM_COR_BIT | VM_COW_BIT)) {
	UNLOCK_MONITOR;
	return(FALSE);
    }
    *ptePtr |= VM_IN_PROGRESS_BIT;
    segPtr->ptUserCount++;

    UNLOCK_MONITOR;
    return(TRUE);
}


/*
 * ----------------------------------------------------------------------------
 *
 * DoPrefetch --
 *
 *	Fetch the given page for the segment.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
/*ARGSUSED*/
static void
DoPrefetch(data, callInfoPtr)
    ClientData		data;
    Proc_CallInfo	*callInfoPtr;
{
    register	PrefetchInfo	*prefetchInfoPtr;
    unsigned	int		virtFrameNum;
    register	Vm_PTE		*ptePtr;
    ReturnStatus		status;

    prefetchInfoPtr = (PrefetchInfo *)data;
    ptePtr = VmGetAddrPTEPtr(&(prefetchInfoPtr->virtAddr), 
			 prefetchInfoPtr->virtAddr.page);
    /*
     * Fetch a page frame.  Note that we don't block if no memory is
     * available because we are a process out of the call-func process pool.
     * If we block then we can easily use up all of the processes and there
     * will be noone left to clean memory.  Thus it could cause deadlock.
     */
    virtFrameNum = VmPageAllocate(&prefetchInfoPtr->virtAddr, 
				  VM_ABORT_WHEN_DIRTY);
    if (virtFrameNum == VM_NO_MEM_VAL) {
	vmStat.prefetchAborts++;
	AbortPrefetch(&prefetchInfoPtr->virtAddr, ptePtr);
	goto exit;
    }
    *ptePtr |= virtFrameNum;
    if (*ptePtr & VM_ON_SWAP_BIT ||
	    prefetchInfoPtr->virtAddr.segPtr->type == VM_SHARED) {
	vmStat.psFilled++;
	if ( prefetchInfoPtr->virtAddr.segPtr->type == VM_SHARED) {
	    printf("Prefetching shared page\n");
        }
	status = VmPageServerRead(&prefetchInfoPtr->virtAddr, virtFrameNum);
    } else {
	vmStat.fsFilled++;
	status = VmFileServerRead(&prefetchInfoPtr->virtAddr, virtFrameNum);
    }
    FinishPrefetch(&prefetchInfoPtr->virtAddr, ptePtr);
    if (status != SUCCESS) {
	VmKillSharers(prefetchInfoPtr->virtAddr.segPtr);
    }
exit:
    VmDecPTUserCount(prefetchInfoPtr->virtAddr.segPtr);
    free((Address)data);
}


/*
 * ----------------------------------------------------------------------------
 *
 * FinishPrefetch --
 *
 *	Finish up a prefetch,
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
ENTRY static void
FinishPrefetch(virtAddrPtr, ptePtr)
    Vm_VirtAddr		*virtAddrPtr;
    register	Vm_PTE	*ptePtr;
{
    register	Vm_Segment	*segPtr;

    LOCK_MONITOR;

    segPtr = virtAddrPtr->segPtr;
    segPtr->resPages++;
    *ptePtr |= VM_PHYS_RES_BIT | VM_PREFETCH_BIT;
    *ptePtr &= ~VM_IN_PROGRESS_BIT;
    Sync_Broadcast(&segPtr->condition);
    VmUnlockPageInt(Vm_GetPageFrame(*ptePtr));

    UNLOCK_MONITOR;
}


/*
 * ----------------------------------------------------------------------------
 *
 * AbortPrefetch --
 *
 *	Clear the in progress bit from the page table entry.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 * ----------------------------------------------------------------------------
 */
ENTRY static void
AbortPrefetch(virtAddrPtr, ptePtr)
    Vm_VirtAddr	*virtAddrPtr;
    Vm_PTE	*ptePtr;
{
    LOCK_MONITOR;

    *ptePtr &= ~VM_IN_PROGRESS_BIT;
    Sync_Broadcast(&virtAddrPtr->segPtr->condition);

    UNLOCK_MONITOR;
}

@


9.2
log
@Added function prototyping.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm.ken/RCS/vmPrefetch.c,v 9.1 90/05/13 23:25:44 shirriff Exp Locker: shirriff $ SPRITE (Berkeley)";
d14 12
a25 12
#include "sprite.h"
#include "vmStat.h"
#include "vm.h"
#include "vmInt.h"
#include "user/vm.h"
#include "sync.h"
#include "dbg.h"
#include "list.h"
#include "lock.h"
#include "sys.h"
#include "stdlib.h"
#include "stdio.h"
@


9.1
log
@Fixed prefetch of shared pages.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 9.0 89/09/12 15:23:38 douglis Stable Locker: shirriff $ SPRITE (Berkeley)";
a15 1
#include "vmMach.h"
d25 1
d36 6
a41 4
static Boolean	StartPrefetch();
static void	DoPrefetch();
static void	FinishPrefetch();
static void	AbortPrefetch();
@


9.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 8.3 89/09/07 14:25:25 shirriff Exp Locker: douglis $ SPRITE (Berkeley)";
d184 2
a185 1
    if (*ptePtr & VM_ON_SWAP_BIT) {
d187 3
@


8.3
log
@Changes for shared memory.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /c/src/kernel/vm.ken/RCS/vmPrefetch.c,v 1.2 89/08/15 12:01:56 shirriff Exp $ SPRITE (Berkeley)";
@


8.2
log
@Added forward references for static functions.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 8.1 88/12/04 15:51:43 ouster Exp $ SPRITE (Berkeley)";
d47 1
a47 1
 *	Start a fetch for the next page if it isn't resident and its on
d72 1
a72 1
	if (virtAddrPtr->page == segPtr->offset + segPtr->numPages - 1) {
d86 1
d168 1
a168 1
    ptePtr = VmGetPTEPtr(prefetchInfoPtr->virtAddr.segPtr, 
@


8.1
log
@Stop using obsolete header files.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 8.0 88/11/11 18:43:49 douglis Stable Locker: ouster $ SPRITE (Berkeley)";
d36 4
a39 4
Boolean	StartPrefetch();
void	DoPrefetch();
void	FinishPrefetch();
void	AbortPrefetch();
d215 1
a215 1
ENTRY void
@


8.0
log
@Changing version numbers.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 6.2 88/10/28 18:19:32 mlgray Exp Locker: douglis $ SPRITE (Berkeley)";
d25 1
a25 2
#include "byte.h"
#include "mem.h"
@


6.2
log
@Converted to new C library.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/kernel/vm/RCS/vmPrefetch.c,v 6.1 88/08/15 18:16:40 nelson Exp Locker: mlgray $ SPRITE (Berkeley)";
@


6.1
log
@Fixed lint errors and added some more tracing stuff for David Wood.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: vmPrefetch.c,v 1.3 88/07/12 19:54:48 nelson Exp $ SPRITE (Berkeley)";
d83 1
a83 1
    prefetchInfoPtr = (PrefetchInfo *)Mem_Alloc(sizeof(PrefetchInfo));
d197 1
a197 1
    Mem_Free((Address)data);
@


6.0
log
@Changing version numbers.
@
text
@d156 1
a156 1
/* ARGSUSED */
@


1.3
log
@Lint error fixes and more tracing.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: vmPrefetch.c,v 1.2 88/05/04 17:27:07 nelson Exp $ SPRITE (Berkeley)";
@


1.2
log
@Removed calls to old machine header files.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: vmPrefetch.c,v 1.1 88/01/11 11:46:02 nelson Exp $ SPRITE (Berkeley)";
d156 1
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: vmPage.c,v 5.17 88/01/06 16:29:36 nelson Exp $ SPRITE (Berkeley)";
a22 1
#include "machine.h"
@
