head     9.8;
branch   ;
access   ;
symbols  ds3100:9.8 sun3:9.8 sun4nw:9.8 symm:9.8 spur:9.8 Summer89:9.0;
locks    ; strict;
comment  @ * @;


9.8
date     90.09.11.14.10.01;  author mendel;  state Exp;
branches ;
next     9.7;

9.7
date     90.09.11.10.46.49;  author shirriff;  state Exp;
branches ;
next     9.6;

9.6
date     90.07.30.11.41.21;  author shirriff;  state Exp;
branches ;
next     9.5;

9.5
date     90.07.16.11.08.35;  author mendel;  state Exp;
branches ;
next     9.4;

9.4
date     90.05.14.12.59.20;  author shirriff;  state Exp;
branches ;
next     9.3;

9.3
date     89.11.13.20.25.38;  author mgbaker;  state Exp;
branches ;
next     9.2;

9.2
date     89.10.30.18.01.52;  author shirriff;  state Exp;
branches ;
next     9.1;

9.1
date     89.09.18.17.32.43;  author shirriff;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.24.39;  author douglis;  state Stable;
branches ;
next     1.3;

1.3
date     89.09.08.16.23.15;  author shirriff;  state Exp;
branches ;
next     1.2;

1.2
date     89.08.15.19.26.07;  author rab;  state Exp;
branches ;
next     1.1;

1.1
date     89.07.10.14.26.52;  author nelson;  state Exp;
branches ;
next     ;


desc
@Initial source from DECWRL.
@


9.8
log
@Added VmMachCopyEnd for the mach module.
@
text
@/*
 * vmMach.h
 *
 *     	Machine dependent virtual memory data structures and procedure
 *	headers.
 *
 * Copyright (C) 1989 Digital Equipment Corporation.
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appears in all copies.
 * Digital Equipment Corporation makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.7 90/09/11 10:46:49 shirriff Exp Locker: mendel $ SPRITE (DECWRL)
 */

#ifndef _VMMACH
#define _VMMACH

/*
 * Machine dependent data for each software segment.
 */
typedef struct VmMach_SegData {
    int	dummy;
} VmMach_SegData;

/*
 * Machine dependent shared memory data
 */
typedef struct VmMach_SharedData {
    int        *allocVector;           /* Allocated block vector. */
    int         allocFirstFree;         /* First free block. */
} VmMach_SharedData;

/*
 * Machine dependent data for each process.
 */
typedef struct VmMach_ProcData {
    struct Vm_Segment	*mapSegPtr;	/* Pointer to segment which is mapped
					 * into this processes address
					 * space. */
    unsigned int	mappedPage;	/* Page in the mapped seg where
					 * the mapping begins. */
    int			pid;		/* Which pid is used to map this
					 * process. */
    unsigned int	modPage;	/* A TLB modified fault occured on this
					 * virtual page - set the modify bit
					 * in the TLB entry if we try to
					 * validate this VA. */
    Address		sharedPtr;	/* Shared memory pointer, in case
					 * shared memory is mapped.
					 * This is really Vm_SegProcList*, 
					 * but made address because of
					 * header file problems.*/
    VmMach_SharedData	sharedData;	/* Data for shared memory. */
} VmMach_ProcData;

/*
 * TLB Map.
 */
extern unsigned *vmMach_KernelTLBMap;

/*
 * Machine dependent functions exported to machine dependent modules.
 */

extern Boolean VmMach_MakeDebugAccessible _ARGS_((unsigned addr));
extern ENTRY ReturnStatus VmMach_TLBFault _ARGS_((Address virtAddr));
extern ReturnStatus VmMach_TLBModFault _ARGS_((Address virtAddr));
extern Address VmMach_UserMap _ARGS_((int numBytes, Address physAddr,
	Boolean firstTime));
extern ENTRY void VmMach_UserUnmap _ARGS_((void));
extern int VmMachCopyEnd _ARGS_((void));

#endif _VMMACH
@


9.7
log
@Added function prototyping.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.6 90/07/30 11:41:21 shirriff Exp $ SPRITE (DECWRL)
d74 1
@


9.6
log
@Added declaration so modules don't need vmMachInt.h
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.5 90/07/16 11:08:35 mendel Exp Locker: shirriff $ SPRITE (DECWRL)
d65 1
a65 1
 * Machine dependent functions.
d68 6
a73 93
/*
 * Initialization
 */
extern	void		VmMach_BootInit();
extern	Address		VmMach_AllocKernSpace();
extern	void		VmMach_Init();
/*
 * Segment creation, expansion, and destruction.
 */
extern	void		VmMach_SegInit();
extern	void		VmMach_SegExpand();
extern	void		VmMach_SegDelete();
/*
 * Process initialization.
 */
extern	void		VmMach_ProcInit();
/*
 * Manipulating protection.
 */
extern	void		VmMach_SetSegProt();
extern	void		VmMach_SetPageProt();
/*
 * Reference and modify bits.
 */
extern	void		VmMach_GetRefModBits();
extern	void		VmMach_ClearRefBit();
extern	void		VmMach_ClearModBit();
extern	void		VmMach_AllocCheck();
/*
 * Page validation and invalidation.
 */
extern	void		VmMach_PageValidate();
extern	void		VmMach_PageInvalidate();
/*
 * Routine to parse a virtual address.
 */
extern	Boolean		VmMach_VirtAddrParse();

/*
 * Routines to manage contexts.
 */
extern	ClientData	VmMach_SetupContext();
extern	void		VmMach_FreeContext();
extern	void		VmMach_ReinitContext();
/*
 * Routines to copy data to/from user space.
 */
extern	ReturnStatus	VmMach_CopyIn();
extern	ReturnStatus	VmMach_CopyOut();
extern	ReturnStatus	VmMach_CopyInProc();
extern	ReturnStatus	VmMach_CopyOutProc();
extern	ReturnStatus	VmMach_StringNCopy();
extern	ReturnStatus	VmMach_MapKernelIntoUser();
extern	int		VmMachCopyEnd();
/*
 * Pinning and unpinning user memory pages.
 */
extern	void		VmMach_PinUserPages();
extern	void		VmMach_UnpinUserPages();
/*
 * Cache flushing.
 */
extern	void		VmMach_FlushPage();
extern	void		VmMach_FlushCode();
/*
 * Migration.
 */
extern	void		VmMach_HandleSegMigration();
/*
 * Routines to map and unmap kernel data into/out-of the user's address space.
 */
extern	Address		VmMach_UserMap();
extern	void		VmMach_UserUnmap();

extern	ReturnStatus	VmMach_Cmd();
extern	void		VmMach_Trace();
extern	void		VmMach_MakeNonCacheable();

/*
 * Shared memory.
 */ 
extern  ReturnStatus	VmMach_SharedStartAddr(); 
extern  void		VmMach_SharedSegFinish(); 
extern	void		VmMach_SharedProcStart();
extern	void		VmMach_SharedProcFinish();

/*
 * File cache page lock/unlock routines.
 */

extern	void		VmMach_LockCachePage();
extern	void		VmMach_UnlockCachePage();

d75 1
a75 1
#endif /* _VMMACH */
@


9.5
log
@Added routines for locking down and unlocking cache blocks.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.4 90/05/14 12:59:20 shirriff Exp Locker: mendel $ SPRITE (DECWRL)
d121 1
@


9.4
log
@Added shared memory pointer for page mapping so shared memory can
be used in dbx.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.3 89/11/13 20:25:38 mgbaker Exp $ SPRITE (DECWRL)
d152 8
@


9.3
log
@Migration stub.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.2 89/10/30 18:01:52 shirriff Exp Locker: mgbaker $ SPRITE (DECWRL)
d51 5
@


9.2
log
@Lint change.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 9.1 89/09/18 17:32:43 shirriff Exp $ SPRITE (DECWRL)
d126 4
@


9.1
log
@Made changes to allocate shared memory above the stack.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 1.3 89/09/08 16:23:15 shirriff Exp $ SPRITE (DECWRL)
d125 1
@


9.0
log
@Changing version numbers.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 1.3 89/09/08 16:23:15 shirriff Exp Locker: douglis $ SPRITE (DECWRL)
d29 8
d51 1
d138 4
a141 1
extern  Address         VmMach_SharedStart(); 
@


1.3
log
@Added VmMach_SharedStart declaration.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 1.2 89/08/15 19:26:07 rab Exp $ SPRITE (DECWRL)
@


1.2
log
@Commented #endif labels.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/vm/ds3100.md/RCS/vmMach.h,v 1.1 89/07/10 14:26:52 nelson Exp Locker: rab $ SPRITE (DECWRL)
d125 5
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 *     	Machine dependent virtual memory data structures and procedure 
d10 1
a10 1
 * provided that the above copyright notice appears in all copies.  
d15 1
a15 1
 * $Header: vmMach.h,v 1.7 89/06/29 10:29:43 mnelson Exp $ SPRITE (DECWRL)
d22 1
a22 1
 * Machine dependent data for each software segment.  
d35 1
a35 1
    unsigned int	mappedPage;	/* Page in the mapped seg where 
d41 1
a41 1
					 * in the TLB entry if we try to 
d80 1
a80 1
extern	void		VmMach_ClearModBit();		
d126 1
a126 1
#endif _VMMACH
@
