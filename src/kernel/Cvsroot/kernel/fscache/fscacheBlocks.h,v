head     9.2;
branch   ;
access   ;
symbols  ds3100:9.2 sun3:9.2 sprited:9.1.1 sun4nw:9.1 symm:9.1 spur:9.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.2
date     92.10.26.13.55.19;  author mgbaker;  state Exp;
branches ;
next     9.1;

9.1
date     90.10.08.16.20.01;  author mendel;  state Exp;
branches 9.1.1.1;
next     9.0;

9.0
date     89.09.12.15.04.00;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.08.21.15.24.13;  author mendel;  state Exp;
branches ;
next     8.3;

8.3
date     89.08.15.18.42.11;  author rab;  state Exp;
branches ;
next     8.2;

8.2
date     89.06.09.11.23.47;  author brent;  state Exp;
branches ;
next     8.1;

8.1
date     89.02.09.08.38.17;  author brent;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.17.59;  author douglis;  state Stable;
branches ;
next     7.0;

7.0
date     88.11.07.14.47.05;  author brent;  state Exp;
branches ;
next     6.2;

6.2
date     88.09.14.11.34.35;  author nelson;  state Exp;
branches ;
next     6.1;

6.1
date     88.09.07.21.19.40;  author nelson;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.14.46;  author brent;  state Stable;
branches ;
next     1.5;

1.5
date     88.08.04.14.49.08;  author mlgray;  state Exp;
branches ;
next     1.4;

1.4
date     88.06.06.09.34.36;  author brent;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.01.16.50.54;  author brent;  state Exp;
branches ;
next     1.2;

1.2
date     88.04.11.08.25.56;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.04.10.29.25;  author brent;  state Exp;
branches ;
next     ;

9.1.1.1
date     91.11.15.15.20.25;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Definitions for the block cache manager
@


9.2
log
@New code to support recovery that ignores files without dirty cache blocks.
@
text
@/*
 * fscacheBlocks.h --
 *
 *	Declarations for the file systems block cache.
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 */

#ifndef _FSBLOCKCACHE
#define _FSBLOCKCACHE

#include <fscache.h>
#include <fsio.h>
#include <fslcl.h>
#include <fsrmt.h>

#include <stdio.h>
#include <bstring.h>

/*
 * Minimum number of cache blocks required.  The theoretical limit
 * is about 3, enough for indirect blocks and data blocks, but
 * that is a bit extreme.  The maximum number of cache blocks is
 * a function of the physical memory size and is computed at boot time.
 */
#define FSCACHE_MIN_BLOCKS	32

/*
 * Macros to get from the links of a cache block to the cache block itself.
 */

#define DIRTY_LINKS_TO_BLOCK(ptr) ((Fscache_Block *) ((ptr)))

#define USE_LINKS_TO_BLOCK(ptr) \
		((Fscache_Block *) ((int) (ptr) - sizeof(List_Links)))

#define FILE_LINKS_TO_BLOCK(ptr) \
		((Fscache_Block *) ((int) (ptr) - 2 * sizeof(List_Links)))

/*
 * routines.
 */
extern void FscacheBlocksUnneeded _ARGS_((Fscache_FileInfo *cacheInfoPtr,
		int offset, int numBytes));
extern Boolean FscacheAllBlocksInCache _ARGS_((Fscache_FileInfo *cacheInfoPtr));
extern int FscacheBlockOkToScavenge _ARGS_((Fscache_FileInfo *cacheInfoPtr));
extern int FscacheBlockOkToScavengeExceptDirty _ARGS_((Fscache_FileInfo
	*cacheInfoPtr));

#endif _FSBLOCKCACHE
@


9.1
log
@Major changes:
Changed file names to start with "fscache".
Added new cache backend interface. 
Added function prototypes and new include format.
Removed old traceing code.
Added locking/unlocking of cache blocks.
@
text
@d55 2
@


9.1.1.1
log
@Initial branch for Sprite server.
@
text
@@


9.0
log
@Changing version numbers.
@
text
@d2 1
a2 1
 * fsBlockCache.h --
d20 4
a23 4
#include "fscache.h"
#include "fsio.h"
#include "fslcl.h"
#include "fsrmt.h"
d25 3
d37 1
a37 1
 * Macros to get from the dirtyLinks of a cache block to the cache block itself.
d39 4
a42 1
#define DIRTY_LINKS_TO_BLOCK(ptr) \
d51 4
a54 2
extern	void		FscacheBlocksUnneeded();
extern  void            Fs_BlockCleaner();
@


8.4
log
@Break up fs into many modules.
@
text
@@


8.3
log
@Commented #endif labels.
@
text
@d6 8
a13 2
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
a14 2
 *
 * $Header: /sprite/src/kernel/fs/RCS/fsBlockCache.h,v 8.2 89/06/09 11:23:47 brent Exp Locker: rab $ SPRITE (Berkeley)
d20 4
a23 3
#include "sync.h"
#include "list.h"
#include "fs.h"
d31 1
a31 47
#define FS_MIN_CACHE_BLOCKS	32

/*
 * Values for flags field in the FsCacheFileInfo struct defined in fsInt.h
 *
 *   FS_CLOSE_IN_PROGRESS	There is a close being done on this file so
 *				no more delayed writes are allowed.
 *   FS_CACHE_SERVER_DOWN	The host that this file belongs is down.
 *   FS_CACHE_NO_DISK_SPACE	The domain that this file lives in has no
 *				disk space.
 *   FS_CACHE_DOMAIN_DOWN	The domain to write to is not available.
 *   FS_CACHE_GENERIC_ERROR	An error occured for which we just hang onto
 *				file blocks until we can write them out.
 *   FS_CACHE_SYNC_DONE		The server has been told to force all blocks
 *				for this file to disk.
 *   FS_FILE_BEING_WRITTEN	There already is a block cleaner working on
 *				this process.
 *   FS_FILE_ON_DIRTY_LIST	This file is on the dirty list.
 *   FS_FILE_IS_WRITE_THRU	(unused?) Means that there is no delayed write.
 *   FS_FILE_NOT_CACHEABLE	This is set when files served by remote hosts
 *				are no longer caching because of write sharing
 *   FS_LARGE_FILE_MODE		This file is large enough such that we limit it
 *				to only a few blocks in the cache.
 *   FS_FILE_GONE		The file has been removed and any delayed
 *				writes should be discarded.
 *   FS_CACHE_WB_ON_LDB		Force this file to be written back to disk
 *				on the last dirty block.
 */
#define	FS_CLOSE_IN_PROGRESS		0x0001
#define	FS_CACHE_SERVER_DOWN		0x0002
#define	FS_CACHE_NO_DISK_SPACE		0x0004
#define FS_CACHE_DOMAIN_DOWN		0x0008
#define FS_CACHE_GENERIC_ERROR		0x0010
#define	FS_CACHE_SYNC_DONE		0x0020
#define FS_FILE_BEING_WRITTEN		0x0040
#define	FS_FILE_ON_DIRTY_LIST		0x0080
#define FS_FILE_IS_WRITE_THRU		0x0100
#define FS_FILE_NOT_CACHEABLE		0x0200
#define	FS_LARGE_FILE_MODE		0x0400
#define FS_FILE_GONE			0x0800
#define	FS_CACHE_WB_ON_LDB		0x1000


/*
 * Structure to represent a cache block in the fileservers cache block
 * list and the core map list.
 */
a32 27
typedef struct FsCacheBlock {
    List_Links	cacheLinks;	/* Links to put block into list of unused
				   cache blocks or LRU list of cache blocks.
				   THIS MUST BE FIRST in the struct. */
    List_Links	dirtyLinks;	/* Links to put block into list of dirty
				 * blocks for the file.  THIS MUST BE 2ND */
    List_Links	fileLinks;	/* Links to put block into list of blocks
				 * for the file.  There are two lists, either
				 * regular or for indirect blocks. */
    unsigned int timeDirtied;	/* Time in seconds that block was
				   dirtied if at all. */
    unsigned int timeReferenced;/* Time in seconds that this block was
				 * last referenced. */
    Address	blockAddr;	/* Kernel virtual address where data for
				   cache block is at. */
    FsCacheFileInfo *cacheInfoPtr;	/* Reference to file's cache info. */
    int		fileNum;	/* For consistency checks */
    int		blockNum;	/* The number of this block in the file. */
    int		diskBlock;	/* The block number on disk for this block.
				   For remote blocks this equals blockNum. */
    int		blockSize;	/* The number of valid bytes in this block. */
    int		refCount;	/* Number of times that the block is referenced.
				   0 means is unreferenced. */
    Sync_Condition ioDone;	/* Notified when block is unlocked after I/O */
    int		flags;		/* Flags to indicate state of block. */
} FsCacheBlock;

d37 1
a37 1
		((FsCacheBlock *) ((int) (ptr) - sizeof(List_Links)))
d40 1
a40 62
		((FsCacheBlock *) ((int) (ptr) - 2 * sizeof(List_Links)))
/*
 * Flags for a FsCacheBlock:
 *
 *   FS_BLOCK_FREE		The block is not being used.
 *   FS_BLOCK_ON_DIRTY_LIST	The block is on the dirty list.
 *   FS_BLOCK_BEING_WRITTEN	The block is in the process of being written to
 *				disk.
 *   FS_BLOCK_DIRTY		The block contains dirty data.
 *   FS_BLOCK_DELETED		This block has been deleted.  This flag is set
 *				when a block is to be invalidated after it has
 *				been cleaned.
 *   FS_MOVE_TO_FRONT		After this block has finished being cleaned
 *				move it to the front of the LRU list.
 *   FS_WRITE_BACK_WAIT		This block is being written out by
 *				FsCacheWriteBack which is waiting for all
 *				such blocks to be written out.
 *   FS_BLOCK_WRITE_LOCKED	This block is being modified.
 *   FS_BLOCK_NEW		This block was just created.
 *   FS_BLOCK_CLEANER_WAITING	The block cleaner is waiting for this
 *				block to become unlocked in order to write
 *				it out.
 *   FS_NOT_MAPPED		This cache block does not have physical memory
 *				behind it.
 *   FS_IND_CACHE_BLOCK		This block is an indirect block.
 *   FS_DESC_CACHE_BLOCK	This block is a file descriptor block.
 *   FS_DIR_CACHE_BLOCK		This is a directory block.
 *   FS_DATA_CACHE_BLOCK	This is a data block.
 *   FS_READ_AHEAD_BLOCK	This block was read ahead.
 *   FS_IO_IN_PROGRESS		IO is in progress on this block.
 *   FS_CACHE_DONT_BLOCK	Don't block if the cache block is already
 *				locked.
 *   FS_PIPE_BLOCK		This is a block that is permanently locked
 *				so that it can serve as the data area for
 *				a pipe.
 *   FS_WRITE_THRU_BLOCK	This block is being written through by the
 *				caller to FsCacheUnlockBlock.
 */
#define	FS_BLOCK_FREE			0x000001
#define	FS_BLOCK_ON_DIRTY_LIST		0x000002
#define	FS_BLOCK_BEING_WRITTEN		0x000004
#define	FS_BLOCK_DIRTY			0x000008
#define	FS_BLOCK_DELETED		0x000010
#define	FS_MOVE_TO_FRONT		0x000020
#define	FS_WRITE_BACK_WAIT		0x000040
#define	FS_BLOCK_WRITE_LOCKED		0x000100
#define	FS_BLOCK_NEW			0x000200
#define	FS_BLOCK_CLEANER_WAITING	0x000400
#define	FS_NOT_MAPPED			0x000800
#define	FS_IND_CACHE_BLOCK		0x001000
#define	FS_DESC_CACHE_BLOCK		0x002000
#define	FS_DIR_CACHE_BLOCK		0x004000
#define	FS_DATA_CACHE_BLOCK		0x008000
#define	FS_READ_AHEAD_BLOCK		0x010000
#define	FS_IO_IN_PROGRESS		0x020000
#define FS_CACHE_DONT_BLOCK		0x040000
#define FS_PIPE_BLOCK			0x080000
#define	FS_WRITE_THRU_BLOCK		0x100000

/*
 * Macro to get the block address field of the FsCacheBlock struct.
 */
a41 49
#define	FsCacheBlockAddress(cacheBlockPtr) ((cacheBlockPtr)->blockAddr)

/*
 * Constant to pass to FsCacheFileWriteBack, which takes block numbers as
 * arguments.
 */
#define FS_LAST_BLOCK	-1

/*
 * Constants to pass as flags to FsCacheFileWriteBack.
 *
 *    FS_FILE_WB_WAIT		Wait for blocks to be written back.
 *    FS_FILE_WB_INDIRECT	Write back indirect blocks.
 *    FS_FILE_WB_INVALIDATE	Invalidate after writing back.
 */
#define FS_FILE_WB_WAIT		0x1
#define	FS_FILE_WB_INDIRECT	0x2
#define	FS_FILE_WB_INVALIDATE	0x4

/*
 * Constants to pass as flags to FsUnlockCacheBlock.
 *
 *    FS_DELETE_BLOCK	    The block should be deleted when it is unlocked.
 *    FS_CLEAR_READ_AHEAD   Clear the read ahead flag from the block.
 *    FS_BLOCK_UNNEEDED     This block is not needed anymore.  Throw it away
 *			    as soon as possible.
 *    FS_DONT_WRITE_THRU    Don't write this block through to disk.
 *
 * Also can pass one of the 4 block types defined above (0x1000 - 0x8000).
 */
#define	FS_DELETE_BLOCK			0x0001
#define	FS_CLEAR_READ_AHEAD		0x0002
#define FS_BLOCK_UNNEEDED		0x0004
#define	FS_DONT_WRITE_THRU		0x0008

/*
 * Global cache variables.
 */
extern	int	fsCacheDebug;		/* Debug flag */
extern	int	fsNumCacheBlocks;	/* Number of blocks in the cache */
extern	Boolean	fsLargeFileMode;	/* TRUE => are in mode where large
					 * files cannot occupy too large a
					 * portion of the cache. */
extern	int	fsMaxFilePortion;	/* Number to divide maximum number of
					 * cache blocks by determine size of
					 * file that puts it into large file
					 * mode. */
extern	int	fsMaxFileSize;		/* Maximum size of a file before
					 * changing to large file mode. */
d43 1
a43 1
 * Cache routines.
d45 2
a46 18
extern	void		Fs_CacheWriteBack();
extern	ReturnStatus	FsCacheFileWriteBack();
extern	void		FsCacheFileInvalidate();
extern	void		Fs_CacheEmpty();
extern	void		Fs_CheckFragmentation();
extern	void		Fs_BlockCleaner();

extern	void		FsCacheInfoInit();
extern	void		FsCacheInfoSyncLockCleanup();
extern	void		FsCacheFetchBlock();
extern	void		FsCacheUnlockBlock();
extern	void		FsCacheBlockTrunc();
extern	void		FsCacheIODone();
extern	void		FsCacheBlocksUnneeded();
extern	void		FsCleanBlocks();
extern	void		FsBlockCacheInit();
extern	int		FsPreventWriteBacks();
extern	void		FsAllowWriteBacks();
d48 1
a48 1
#endif /* _FSBLOCKCACHE */
@


8.2
log
@Added FS_MIN_CACHE_BLOCKS
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/fs/RCS/fsBlockCache.h,v 8.1 89/02/09 08:38:17 brent Exp Locker: brent $ SPRITE (Berkeley)
d70 1
a70 1
 * Structure to represent a cache block in the fileservers cache block 
d75 1
a75 1
    List_Links	cacheLinks;	/* Links to put block into list of unused 
d92 1
a92 1
    int		diskBlock;	/* The block number on disk for this block. 
d109 3
a111 3
/* 
 * Flags for a FsCacheBlock: 
 * 
d122 2
a123 2
 *   FS_WRITE_BACK_WAIT		This block is being written out by 
 *				FsCacheWriteBack which is waiting for all 
d130 1
a130 1
 *   FS_NOT_MAPPED		This cache block does not have physical memory 
d139 1
a139 1
 *				locked.	
d211 1
a211 1
extern	Boolean	fsLargeFileMode;	/* TRUE => are in mode where large 
d218 1
a218 1
extern	int	fsMaxFileSize;		/* Maximum size of a file before 
d221 1
a221 1
 * Cache routines. 
d242 1
a242 1
#endif _FSBLOCKCACHE
@


8.1
log
@Added FsCacheInfoSyncLockCleanup
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/fs/RCS/fsBlockCache.h,v 8.0 88/11/11 18:17:59 douglis Stable Locker: brent $ SPRITE (Berkeley)
d19 8
@


8.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/fs/RCS/fsBlockCache.h,v 7.0 88/11/07 14:47:05 brent Exp Locker: douglis $ SPRITE (Berkeley)
d223 1
@


7.0
log
@New version for conversion to new C library
@
text
@d10 1
a10 1
 * $Header: /sprite/src/kernel/fs/RCS/fsBlockCache.h,v 6.2 88/09/14 11:34:35 nelson Exp Locker: brent $ SPRITE (Berkeley)
@


6.2
log
@Added flag to allow cache blocks to be selectively not be written through
even though are in write-thru mode.
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 6.1 88/09/07 21:19:40 nelson Exp $ SPRITE (Berkeley)
@


6.1
log
@Put alternative writing policies into the file system.
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 6.0 88/08/11 12:14:46 brent Stable $ SPRITE (Berkeley)
d187 1
a187 1
 *    FS_BLOCK_UNNEEDED    This block is not needed anymore.  Throw it away
d189 1
d196 1
@


6.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 1.5 88/08/04 14:49:08 mlgray Exp $ SPRITE (Berkeley)
d43 2
d46 13
a58 12
#define	FS_CLOSE_IN_PROGRESS		0x01
#define	FS_CACHE_SERVER_DOWN		0x02
#define	FS_CACHE_NO_DISK_SPACE		0x04
#define FS_CACHE_DOMAIN_DOWN		0x08
#define FS_CACHE_GENERIC_ERROR		0x10
#define	FS_CACHE_SYNC_DONE		0x20
#define FS_FILE_BEING_WRITTEN		0x40
#define	FS_FILE_ON_DIRTY_LIST		0x80
#define FS_FILE_IS_WRITE_THRU		0x100
#define FS_FILE_NOT_CACHEABLE		0x200
#define	FS_LARGE_FILE_MODE		0x400
#define FS_FILE_GONE			0x800
@


1.5
log
@merging changes from fs into fs.new.
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 1.4 88/06/06 09:34:36 brent Exp $ SPRITE (Berkeley)
@


1.4
log
@Added the per-file list of blocks and indirect blocks
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 1.3 88/06/01 16:50:54 brent Exp $ SPRITE (Berkeley)
a18 1
#include "fsInt.h"
@


1.3
log
@Moved FS_FILE_GONE flag to the block cache info struct
so the delayed write/close synchronization works right.
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 1.2 88/04/11 08:25:56 brent Exp $ SPRITE (Berkeley)
d70 3
d97 2
@


1.2
log
@Added FS_BLOCK_UNNEEDED flag.
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 1.1 88/04/04 10:29:25 brent Exp $ SPRITE (Berkeley)
d42 2
d56 1
d77 1
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
 * $Header: fsBlockCache.h,v 6.0 87/12/03 11:04:46 brent Exp $ SPRITE (Berkeley)
d176 2
a177 2
 *    FS_CACHE_SCHED_WRITE_THRU	Schedule this block to be written through to
 *				disk as soon as possible.
d183 1
a183 1
#define FS_CACHE_SCHED_WRITE_THRU	0x0004
@
