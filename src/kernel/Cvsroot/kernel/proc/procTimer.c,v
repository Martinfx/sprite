head     9.4;
branch   ;
access   ;
symbols  ds3100:9.4 sun3:9.4 sprited:9.3.1 sun4nw:9.3 symm:9.3 spur:9.3 Summer89:9.0 newlib:8.0 Summer88:6.0 argString:5.0;
locks    ; strict;
comment  @ * @;


9.4
date     92.04.10.16.40.53;  author kupfer;  state Exp;
branches ;
next     9.3;

9.3
date     90.09.12.13.58.24;  author jhh;  state Exp;
branches 9.3.1.1;
next     9.2;

9.2
date     90.09.06.17.58.12;  author jhh;  state Exp;
branches ;
next     9.1;

9.1
date     90.07.29.15.48.51;  author shirriff;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.15.57;  author douglis;  state Stable;
branches ;
next     8.5;

8.5
date     89.08.22.14.57.55;  author douglis;  state Exp;
branches ;
next     8.4;

8.4
date     89.06.30.15.15.05;  author douglis;  state Exp;
branches ;
next     8.3;

8.3
date     89.06.22.17.21.07;  author douglis;  state Exp;
branches ;
next     8.2;

8.2
date     89.04.14.11.07.44;  author douglis;  state Exp;
branches ;
next     8.1;

8.1
date     89.02.19.22.08.54;  author jhh;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.32.15;  author douglis;  state Stable;
branches ;
next     6.3;

6.3
date     88.10.27.20.05.09;  author mlgray;  state Exp;
branches ;
next     6.2;

6.2
date     88.10.18.12.19.19;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.31.17.56.13;  author douglis;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.23.12;  author brent;  state Stable;
branches ;
next     5.2;

5.2
date     88.05.05.17.58.52;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     88.04.18.09.10.47;  author ouster;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.47.57;  author sprite;  state Exp;
branches ;
next     ;

9.3.1.1
date     92.03.04.14.32.02;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.4
log
@Change entry routines that lock a process to lock the process before
acquiring the monitor lock (deadlock avoidance).
@
text
@/* 
 * procTimer.c --
 *
 *	Routines to manipulate the interval timers of a process.
 *
 * Copyright 1987, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/proc/procTimer.c,v 9.3 90/09/12 13:58:24 jhh Exp $ SPRITE (Berkeley)";
#endif /* not lint */


#include <sprite.h>
#include <proc.h>
#include <procInt.h>
#include <timer.h>
#include <sys.h>
#include <sig.h>
#include <stdlib.h>
#include <sync.h>
#include <bstring.h>

/*
 * Information about the state of an interval timer for a process.
 * There are several types of interval timers and the info for all of
 * them are kept in an array pointed to by the PCB entry.
 */
typedef struct ProcIntTimerInfo {
    Timer_Ticks	expire;		/* When the timer is to expire. */
    Timer_Ticks	interval;	/* Amount of time between expirations.
				 * If zero, then the timer is not restarted 
				 * after the first expiration. */
    ClientData	token;		/* Token returned by Proc_CallFuncAbsTime. 
				 * Used by the signal-sending func to check if
				 * a timer has been cancelled. */
} ProcIntTimerInfo;


/*
 * Monitor lock to serialize access to timer callback queue elements.
 * This could be changed to a per-process monitor lock if contention is a
 * problem.  To avoid deadlock, routines that lock a PCB should lock the
 * PCB before acquiring the monitor lock.
 */
static Sync_Lock	procTimerLock = Sync_LockInitStatic("procTimerLock");
#define	LOCKPTR &procTimerLock

static ReturnStatus	GetCurrentTimer _ARGS_((Proc_ControlBlock *procPtr,
				int timerType, Proc_TimerInterval *timerBufPtr,
				Boolean userMode));
static void		SendTimerSigFunc _ARGS_((ClientData data,
				Proc_CallInfo *infoPtr));



/*
 *----------------------------------------------------------------------
 *
 * Proc_GetIntervalTimer --
 *
 *	Retrieves the current value of the interval timer. If the timer
 *	is not set, zero time values are returned.
 *	
 *
 * Results:
 *	SUCCESS			- the timer value was returned.
 *	GEN_INVALID_ARG		- unknown timer type.
 *	SYS_ARG_NOACCESS	- the timer value could not be accessed.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

ENTRY ReturnStatus
Proc_GetIntervalTimer(timerType, userTimerPtr)
    int			timerType;	/* What type of timer: one of 
					 * PROC_TIMER_REAL, PROC_TIMER_VIRTUAL,
					 * PROC_TIMER_PROFILE. */
    Proc_TimerInterval	*userTimerPtr;	/* Buffer to store the current value 
					 * of the interval timer. */
{
    ReturnStatus status;
    Proc_ControlBlock	*procPtr;

    if (timerType < 0 || timerType > PROC_MAX_TIMER) {
	return(GEN_INVALID_ARG);
    }

    if (userTimerPtr == USER_NIL) {
	return(SYS_ARG_NOACCESS);
    }

    procPtr = Proc_GetEffectiveProc();
    if (procPtr == (Proc_ControlBlock *) NIL) {
	panic("Proc_GetIntervalTime: current procPtr == NIL\n");
	/*
	 * Just in case someone tries to continue.
	 */
	return(FAILURE);
    }

    Proc_Lock(procPtr);
    LOCK_MONITOR;
    status = GetCurrentTimer(procPtr, timerType, userTimerPtr, TRUE);
    UNLOCK_MONITOR;
    Proc_Unlock(procPtr);

    return(status);
}

/*
 *----------------------------------------------------------------------
 *
 * GetCurrentTimer --
 *
 *	An internal routine to get the current value of an interval timer
 *	and copy it to the user's address space.
 *
 *	Note: this routine assumes the process's proc table entry is locked.
 *
 * Results:
 *	SUCCESS			- the timer value was returned.
 *	SYS_ARG_NOACCESS	- the timer value could not be accessed.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

static INTERNAL ReturnStatus
GetCurrentTimer(procPtr, timerType, timerBufPtr, userMode)
    Proc_ControlBlock	*procPtr;	/* Process to get the timer value 
					 * from. */
    int			timerType;	/* What type of timer: one of 
					 * PROC_TIMER_REAL, PROC_TIMER_VIRTUAL,
					 * PROC_TIMER_PROFILE. */
    Proc_TimerInterval	*timerBufPtr;	/* Buffer to store the current value 
					 * of the interval timer. */
    Boolean		userMode;	/* TRUE if timerBufPtr is in user
					 * space (normal case).  FALSE
					 * for encapsulation.
					 */
{
    register ProcIntTimerInfo	*timerPtr = (ProcIntTimerInfo *) NIL;
    Proc_TimerInterval	timer;
    Boolean exists = FALSE;

    if (procPtr->timerArray != (ProcIntTimerInfo  *) NIL) {
	timerPtr = &procPtr->timerArray[timerType];
	if (timerPtr->token != (ClientData) NIL) {
	    exists = TRUE;
	}
    }
    if (!exists) {

	/*
	 * No timer is scheduled. Just return zero values.
	 */
	timer.interval.seconds = 0;
	timer.interval.microseconds = 0;
	timer.curValue.seconds = 0;
	timer.curValue.microseconds = 0;
    } else {
	Timer_Ticks temp;

	Timer_TicksToTime(timerPtr->interval, &timer.interval);

	/*
	 * Get the amount of time remaining before the timer's expiration.
	 */
	Timer_GetCurrentTicks(&temp);
	Timer_SubtractTicks(timerPtr->expire, temp, &temp);
	Timer_TicksToTime(temp, &timer.curValue);
    }

    if (userMode) {
	if (Proc_ByteCopy(FALSE, sizeof(timer), 
			  (Address) &timer, (Address) timerBufPtr) != SUCCESS) {
	    return(SYS_ARG_NOACCESS);
	}
    } else {
	bcopy((Address) &timer, (Address) timerBufPtr, sizeof(timer));
    }

    return(SUCCESS);
}

/*
 *----------------------------------------------------------------------
 *
 * Proc_SetIntervalTimer --
 *
 *	Start or cancel an interval timer for a process.  This is the
 *	system call version, which calls a more general routine.
 *
 * Results:
 *	SUCCESS			- the timer was started or stopped.
 *	GEN_INVALID_ARG		- unknown timer type or invalid time value.
 *	SYS_ARG_NOACCESS	- a timer value could not be accessed.
 *
 * Side effects:
 *	A CallFunc process might be scheduled. The process's PCB entry
 *	is updated.
 *
 *----------------------------------------------------------------------
 */

ENTRY ReturnStatus
Proc_SetIntervalTimer(timerType, newTimerPtr, oldTimerPtr)
    int			timerType;	/* What type of timer: one of 
					 * PROC_TIMER_REAL, PROC_TIMER_VIRTUAL,
					 * PROC_TIMER_PROFILE. */
    Proc_TimerInterval	*newTimerPtr;	/* Buffer that holds a new value for
					 * the interval timer. */
    Proc_TimerInterval	*oldTimerPtr;	/* Buffer to hold the former value of
					 * the timer. */
{
    return(ProcChangeTimer(timerType, newTimerPtr, oldTimerPtr, TRUE));
}


/*
 *----------------------------------------------------------------------
 *
 * ProcChangeTimer --
 *
 *	Start or cancel an interval timer for a process.  This can
 *	be called from kernel mode as well as user mode.
 *
 * Results:
 *	SUCCESS			- the timer was started or stopped.
 *	GEN_INVALID_ARG		- unknown timer type or invalid time value.
 *	SYS_ARG_NOACCESS	- a timer value could not be accessed.
 *
 * Side effects:
 *	A CallFunc process might be scheduled. The process's PCB entry
 *	is updated.
 *
 *----------------------------------------------------------------------
 */

ENTRY ReturnStatus
ProcChangeTimer(timerType, newTimerPtr, oldTimerPtr, userMode)
    int			timerType;	/* What type of timer: one of 
					 * PROC_TIMER_REAL, PROC_TIMER_VIRTUAL,
					 * PROC_TIMER_PROFILE. */
    Proc_TimerInterval	*newTimerPtr;	/* Buffer that holds a new value for
					 * the interval timer. */
    Proc_TimerInterval	*oldTimerPtr;	/* Buffer to hold the former value of
					 * the timer. */
    Boolean		userMode;	/* TRUE if intervals are in user
					 * space (normal case).  FALSE
					 * for encapsulation.
					 */
{
    register ProcIntTimerInfo	*timerPtr;
    register Proc_ControlBlock	*procPtr;
    Proc_TimerInterval	newTimer;

    if (timerType < 0 || timerType > PROC_MAX_TIMER) {
	return(GEN_INVALID_ARG);
    }

    procPtr = Proc_GetEffectiveProc();
    if (procPtr == (Proc_ControlBlock *) NIL) {
	panic("Proc_SetIntervalTime: procPtr == NIL\n");
	return(FAILURE);
    }

    Proc_Lock(procPtr);
    LOCK_MONITOR;

    if (procPtr->timerArray == (ProcIntTimerInfo  *) NIL) {
	int j;

	/*
	 * The table hasn't been initialized yet. Allocate enough entries
	 * for all the timers. The memory won't be deallocated when the
	 * process dies so it can be reused by the next process using the
	 * PCB entry.
	 */
	procPtr->timerArray = (ProcIntTimerInfo  *)
	    malloc(sizeof(ProcIntTimerInfo) * (PROC_MAX_TIMER +1));

	for (j = 0; j <= PROC_MAX_TIMER; j++) {
	    procPtr->timerArray[j].token = (ClientData) NIL;
	}
    }
    timerPtr = &procPtr->timerArray[timerType];

    /*
     * Return the current value if the user wants it.
     */
    if (oldTimerPtr != USER_NIL) {
	if (GetCurrentTimer(procPtr, timerType, oldTimerPtr,
			    userMode) != SUCCESS) {
	    Proc_Unlock(procPtr);
	    UNLOCK_MONITOR;
	    return(SYS_ARG_NOACCESS);
	}
    }

    /*
     * Copy the new timer value from user space or a kernel buffer.
     */
    if (userMode) {
	if (Proc_ByteCopy(TRUE, sizeof(newTimer), 
		(Address) newTimerPtr, (Address) &newTimer) != SUCCESS) {
	    Proc_Unlock(procPtr);
	    UNLOCK_MONITOR;
	    return(SYS_ARG_NOACCESS);
	}
    } else {
	bcopy((Address) newTimerPtr, (Address) &newTimer, sizeof(newTimer));
    }

    if ((newTimer.curValue.seconds == 0) && 
	(newTimer.curValue.microseconds == 0)) {

	/*
	 * The user wants to cancel the timer.  Invalidate the token for
	 * the existing expiration routine, and cancel the timer.
	 */
	if (timerPtr->token != (ClientData) NIL) {
	    Proc_CancelCallFunc(timerPtr->token);
	    timerPtr->token = (ClientData) NIL;
	}
    } else {
	Timer_Ticks curTime;

	/*
	 * Make sure the times are valid and within the clock's resolution.
	 */
	if ((newTimer.curValue.seconds < 0) || 
	    (newTimer.curValue.microseconds < 0) ||
	    (newTimer.curValue.microseconds > ONE_SECOND) ||
	    (newTimer.interval.seconds < 0) || 
	    (newTimer.interval.microseconds < 0) ||
	    (newTimer.interval.microseconds > ONE_SECOND)) {

	    Proc_Unlock(procPtr);
	    UNLOCK_MONITOR;
	    return(GEN_INVALID_ARG);
	}
	if ((newTimer.curValue.seconds == 0) && 
	    (newTimer.curValue.microseconds < TIMER_CALLBACK_INTERVAL_APPROX)) {
	    newTimer.curValue.microseconds = TIMER_CALLBACK_INTERVAL_APPROX;
	}
	if ((newTimer.interval.seconds == 0) && 
	    (newTimer.interval.microseconds > 0) &&
	    (newTimer.interval.microseconds < TIMER_CALLBACK_INTERVAL_APPROX)) {
	    newTimer.interval.microseconds = TIMER_CALLBACK_INTERVAL_APPROX;
	}

	Timer_TimeToTicks(newTimer.interval, &timerPtr->interval);
	Timer_TimeToTicks(newTimer.curValue, &timerPtr->expire);

	Timer_GetCurrentTicks(&curTime);
	Timer_AddTicks(curTime, timerPtr->expire, &timerPtr->expire);

	/*
	 * Setting the token implicitly cancels a previous expiration
	 * routine's callback, but let's clear the old one to avoid
	 * putting cruft in the timer queue.
	 */
	if (timerPtr->token != (ClientData) NIL) {
	    Proc_CancelCallFunc(timerPtr->token);
	}
	timerPtr->token = Proc_CallFuncAbsTime(SendTimerSigFunc, 
			(ClientData) procPtr->processID, timerPtr->expire);
    }

    Proc_Unlock(procPtr);
    UNLOCK_MONITOR;
    return(SUCCESS);
}

/*
 *----------------------------------------------------------------------
 *
 * SendTimerSigFunc --
 *
 *	Called when one of a process's interval timers has expired. This
 *	routine sends a SIG_TIMER signal to process (the signal subcode is
 *	the timer type, as defined in user/proc.h).
 *
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	A signal is sent to the process. A call-func process may be 
 *	scheduled to send a signal in the future.
 *
 *----------------------------------------------------------------------
 */

static ENTRY void
SendTimerSigFunc(data, infoPtr)
    ClientData		data;		/* Really the ID of the process that
					 * should get the signal. */
    Proc_CallInfo	*infoPtr;	/* Used to compare the token in the
					 * PCB entry to make sure the signal
					 * is wanted. */
{
    Proc_ControlBlock	*procPtr;
    register ProcIntTimerInfo	*timerPtr;
    int i;

    /*
     * If the process has died, the procPtr will be NIL.
     */
    procPtr = Proc_LockPID((Proc_PID) data);
    if (procPtr == (Proc_ControlBlock *) NIL) {
	return;
    }

    LOCK_MONITOR;

    /*
     * Scan all the timer state info to see which timer expired.
     * If our token matches the one in the timer table entry, then
     * send the signal (the subcode is the timer type). If there's no 
     * match after scanning all the timers, then the user cancelled the
     * a timer so there's nothing to do.
     */
    for (i = 0; i <= PROC_MAX_TIMER; i++) {
	
	if (procPtr->timerArray == (ProcIntTimerInfo  *) NIL) {
	    /*
	     * This should not happen: why did we get scheduled if
	     * there aren't any timers?
	     */
	    panic("SendTimerSigFunc: null timer table!\n");
	    break;
	}
	
	timerPtr = &procPtr->timerArray[i];
	if (timerPtr->token == infoPtr->token) {
	    (void) Sig_SendProc(procPtr, SIG_TIMER, i, (Address)0);
	    
	    /*
	     * See if the signal is supposed to be repeated in the future.
	     */
	    if (Timer_TickEQ(timerPtr->interval, timer_TicksZeroSeconds)){
		/*
		 * Nope -- all done.
		 */
		timerPtr->token = (ClientData) NIL;
	    } else {
		/*
		 * A signal is wanted in "interval" seconds from now.
		 * Add the interval to the expiration time instead of
		 * the current time to prevent drift.
		 */
		
		Timer_AddTicks(timerPtr->interval, timerPtr->expire, 
			       &timerPtr->expire);
		timerPtr->token = Proc_CallFuncAbsTime(SendTimerSigFunc,
						       data, timerPtr->expire);
	    }
	    break;
	}
    }

    UNLOCK_MONITOR;
    Proc_Unlock(procPtr);
}


/*
 *----------------------------------------------------------------------
 *
 * ProcDeleteTimers --
 *
 *	Cancel all interval timers for a process.  Performed on exit.
 *	ProcPtr is assumed to be locked on entry.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	A CallFunc process might be descheduled. 
 *
 *----------------------------------------------------------------------
 */

ENTRY void
ProcDeleteTimers(procPtr)
    register Proc_ControlBlock	*procPtr;
{
    register ProcIntTimerInfo	*timerPtr;
    int j;

    LOCK_MONITOR;

    if (procPtr->timerArray == (ProcIntTimerInfo  *) NIL) {
	goto done;
    }

    for (j = 0; j <= PROC_MAX_TIMER; j++) {
	timerPtr = &procPtr->timerArray[j];
	if (timerPtr->token != (ClientData) NIL) {
	    Proc_CancelCallFunc(timerPtr->token);
	    timerPtr->token = (ClientData) NIL;
	}
    }

 done:
    UNLOCK_MONITOR;
}

@


9.3
log
@changed format of #includes to use <>
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 9.2 90/09/06 17:58:12 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d49 3
a51 2
 * This could be changed to a per-process monitor lock if contention
 * is a problem.
a94 2
    LOCK_MONITOR;
    
d96 1
a96 2
	status = GEN_INVALID_ARG;
	goto done;
d100 1
a100 2
	status = SYS_ARG_NOACCESS;
	goto done;
d109 1
a109 2
	status = FAILURE;
	goto done;
d111 1
d113 1
a113 1

d115 2
a117 3
    Proc_Unlock(procPtr);
done:
    UNLOCK_MONITOR;
a270 2
    LOCK_MONITOR;

a271 1
	UNLOCK_MONITOR;
a276 1
	UNLOCK_MONITOR;
d280 1
d282 1
d419 1
a420 1
    LOCK_MONITOR;
d422 1
a422 1
     * If the process has died, the procPtr will be NIL. 
a423 1

d425 3
a427 2
    if (procPtr != (Proc_ControlBlock *) NIL) {
	int i;
d429 1
a429 8
	/*
	 * Scan all the timer state info to see which timer expired.
	 * If our token matches the one in the timer table entry, then
	 * send the signal (the subcode is the timer type). If there's no 
	 * match after scanning all the timers, then the user cancelled the
	 * a timer so there's nothing to do.
	 */
	for (i = 0; i <= PROC_MAX_TIMER; i++) {
d431 26
a456 1
	    if (procPtr->timerArray == (ProcIntTimerInfo  *) NIL) {
d458 1
a458 2
		 * This should not happen: why did we get scheduled if
		 * there aren't any timers?
d460 2
a461 8
		panic("SendTimerSigFunc: null timer table!\n");
		break;
	    }

	    timerPtr = &procPtr->timerArray[i];
	    if (timerPtr->token == infoPtr->token) {
		(void) Sig_SendProc(procPtr, SIG_TIMER, i, (Address)0);

d463 3
a465 1
		 * See if the signal is supposed to be repeated in the future.
d467 5
a471 18
		if (Timer_TickEQ(timerPtr->interval, timer_TicksZeroSeconds)){
		    /*
		     * Nope -- all done.
		     */
		    timerPtr->token = (ClientData) NIL;
		} else {
		    /*
		     * A signal is wanted in "interval" seconds from now.
		     * Add the interval to the expiration time instead of
		     * the current time to prevent drift.
		     */

		    Timer_AddTicks(timerPtr->interval, timerPtr->expire, 
				    &timerPtr->expire);
		    timerPtr->token = Proc_CallFuncAbsTime(SendTimerSigFunc,
					data, timerPtr->expire);
		}
		break;
d473 1
a474 1
	Proc_Unlock(procPtr);
d476 1
d478 1
d519 2
a520 1
    done:
@


9.3.1.1
log
@Initial branch for Sprite server.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/proc/procTimer.c,v 9.3 90/09/12 13:58:24 jhh Exp $ SPRITE (Berkeley)";
@


9.2
log
@First pass at function prototypes
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 9.1 90/07/29 15:48:51 shirriff Exp Locker: jhh $ SPRITE (Berkeley)";
d21 9
a29 9
#include "sprite.h"
#include "proc.h"
#include "procInt.h"
#include "timer.h"
#include "sys.h"
#include "sig.h"
#include "stdlib.h"
#include "sync.h"
#include "bstring.h"
@


9.1
log
@Added address field to Sig_SendProc call.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 8.5 89/08/22 14:57:55 douglis Exp $ SPRITE (Berkeley)";
d23 1
d29 1
d55 5
a59 2
static ReturnStatus	GetCurrentTimer();
static void		SendTimerSigFunc();
d159 1
a159 1
    register ProcIntTimerInfo	*timerPtr;
@


9.0
log
@Changing version numbers.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 8.5 89/08/22 14:57:55 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d450 1
a450 1
		(void) Sig_SendProc(procPtr, SIG_TIMER, i);
@


8.5
log
@encapsulate interval timers on migration.  changed interface to allow
access to timers from kernel mode instead ofa system call
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 8.4 89/06/30 15:15:05 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
@


8.4
log
@fixed bug relating to race condition freeing old timeout
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 8.3 89/06/22 17:21:07 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d112 1
a112 1
    status = GetCurrentTimer(procPtr, timerType, userTimerPtr);
d141 1
a141 1
GetCurrentTimer(procPtr, timerType, userTimerPtr)
d147 1
a147 1
    Proc_TimerInterval	*userTimerPtr;	/* Buffer to store the current value 
d149 4
d156 1
d158 7
a164 3
    timerPtr = &procPtr->timerArray[timerType];
    if ((procPtr->timerArray == (ProcIntTimerInfo  *) NIL) ||
	(timerPtr->token == (ClientData) NIL)) {
d186 7
a192 3
    if (Proc_ByteCopy(FALSE, sizeof(timer), 
	    (Address) &timer, (Address) userTimerPtr) != SUCCESS) {
	return(SYS_ARG_NOACCESS);
d194 1
d203 2
a204 1
 *	Start or cancel an interval timer for a process.
d228 38
d307 2
a308 1
	if (GetCurrentTimer(procPtr, timerType, oldTimerPtr) != SUCCESS) {
d316 1
a316 1
     * Copy the new timer value from user space.
d318 9
a326 5
    if (Proc_ByteCopy(TRUE, sizeof(newTimer), 
	    (Address) newTimerPtr, (Address) &newTimer) != SUCCESS) {
	Proc_Unlock(procPtr);
	UNLOCK_MONITOR;
	return(SYS_ARG_NOACCESS);
d358 2
a359 2
	    (newTimer.curValue.microseconds < TIMER_CALLBACK_INTERVAL)) {
	    newTimer.curValue.microseconds = TIMER_CALLBACK_INTERVAL;
d363 2
a364 2
	    (newTimer.interval.microseconds < TIMER_CALLBACK_INTERVAL)) {
	    newTimer.interval.microseconds = TIMER_CALLBACK_INTERVAL;
d479 43
@


8.3
log
@cancel callback when setting up new one, rather than letting it go
off and ignoring it.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 8.2 89/04/14 11:07:44 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d27 1
d45 8
d78 1
a78 1
ReturnStatus
d89 2
d92 2
a93 1
	return(GEN_INVALID_ARG);
d97 2
a98 1
	return(SYS_ARG_NOACCESS);
d103 6
a108 1
	panic("Proc_GetIntervalTime: procPtr == NIL\n");
d115 2
d140 1
a140 1
static ReturnStatus
d203 1
a203 1
ReturnStatus
d217 2
d220 1
d226 1
d228 1
d256 1
d267 1
d296 1
d328 1
d352 1
a352 1
static void
d363 1
d365 1
a365 1
     * If the process has died, the procPtr will NIL. 
d419 1
@


8.2
log
@fixed bug that set interval to 20 ms rather than 0.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 8.1 89/02/19 22:08:54 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
d249 1
a249 3
	 * the existing expiration routine.  The routine, when called,
	 * will match its token against this one and it will discover the
	 * mismatch so it will do nothing.
d251 4
a254 2
	timerPtr->token = (ClientData) NIL;

d289 2
a290 1
	 * routine's callback.
d292 3
@


8.1
log
@Changes due to lock registration
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 6.3 88/10/27 20:05:09 mlgray Exp $ SPRITE (Berkeley)";
d259 1
a259 1
	 * Make sure the times are valid and withing the clock's resolution.
d276 1
@


8.0
log
@Changing version numbers.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 6.3 88/10/27 20:05:09 mlgray Exp Locker: douglis $ SPRITE (Berkeley)";
d26 1
a26 1
#include "mem.h"
@


6.3
log
@1st pass at multi-processor, conversion to new C library.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procTimer.c,v 6.2 88/10/18 12:19:19 mlgray Exp $ SPRITE (Berkeley)";
@


6.2
log
@update to new library
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: procTimer.c,v 6.1 88/08/31 17:56:13 douglis Exp $ SPRITE (Berkeley)";
d90 1
a90 1
	Sys_Panic(SYS_FATAL, "Proc_GetIntervalTime: procPtr == NIL\n");
d203 1
a203 1
	Sys_Panic(SYS_FATAL, "Proc_SetIntervalTime: procPtr == NIL\n");
d217 1
a217 1
	    Mem_Alloc(sizeof(ProcIntTimerInfo) * (PROC_MAX_TIMER +1));
d351 1
a351 1
		Sys_Panic(SYS_FATAL, "SendTimerSigFunc: null timer table!\n");
@


6.1
log
@de-linted and endif-fix'ed.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: procTimer.c,v 6.0 88/08/11 12:23:12 brent Stable $ SPRITE (Berkeley)";
a26 1
#include "devTimer.h"
d272 2
a273 2
	    (newTimer.curValue.microseconds < DEV_CALLBACK_INTERVAL)) {
	    newTimer.curValue.microseconds = DEV_CALLBACK_INTERVAL;
d276 2
a277 2
	    (newTimer.interval.microseconds < DEV_CALLBACK_INTERVAL)) {
	    newTimer.interval.microseconds = DEV_CALLBACK_INTERVAL;
@


6.0
log
@Changing version numbers.
@
text
@d17 2
a18 2
static char rcsid[] = "$Header: procTimer.c,v 5.2 88/05/05 17:58:52 nelson Exp $ SPRITE (Berkeley)";
#endif not lint
@


5.2
log
@Handles move of functionality from sys to mach.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: procTimer.c,v 5.1 88/04/18 09:10:47 ouster Exp $ SPRITE (Berkeley)";
@


5.1
log
@Lint cleanup, change copyright notices.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: procTimer.c,v 5.0 87/08/11 10:47:57 sprite Exp $ SPRITE (Berkeley)";
d89 1
a89 1
    procPtr = Proc_GetEffectiveProc(Sys_GetProcessorNumber());
d202 1
a202 1
    procPtr = Proc_GetEffectiveProc(Sys_GetProcessorNumber());
@


5.0
log
@First Sprite native copy
@
text
@d6 8
a13 2
 * Copyright 1987 Regents of the University of California
 * All rights reserved.
d17 1
a17 1
static char rcsid[] = "$Header: proto.c,v 1.8 87/04/17 16:44:45 andrew Exp $ SPRITE (Berkeley)";
d292 1
a292 1
			procPtr->processID, timerPtr->expire);
@
