head     1.8;
branch   ;
access   ;
symbols  ds3100:1.7 sun3:1.7 sun4nw:1.4 symm:1.4 spur:1.4;
locks    ; strict;
comment  @ * @;


1.8
date     92.12.13.18.13.14;  author mgbaker;  state Exp;
branches ;
next     1.7;

1.7
date     92.10.26.13.33.37;  author mgbaker;  state Exp;
branches ;
next     1.6;

1.6
date     92.08.13.15.54.04;  author secor;  state Exp;
branches ;
next     1.5;

1.5
date     92.03.20.13.48.32;  author jhh;  state Exp;
branches ;
next     1.4;

1.4
date     90.11.06.17.12.22;  author rab;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.14.18.47.15;  author mgbaker;  state Exp;
branches ;
next     1.2;

1.2
date     90.01.05.15.49.28;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     89.08.09.12.49.45;  author mendel;  state Exp;
branches ;
next     ;


desc
@Stable kernel now.
@


1.8
log
@Added more routines about client state device.
@
text
@/* 
 * devFsOpTable.c --
 *
 *	The operation tables for the file system devices on Sun-4 hosts.
 *
 * Copyright 1987, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4c.md/devFsOpTable.c,v 1.7 92/10/26 13:33:37 mgbaker Exp $ SPRITE (Berkeley)";
#endif not lint


#include <sprite.h>
#include <dev.h>
#include <devInt.h>
#include <fs.h>
#include <rawBlockDev.h>
#include <devFsOpTable.h>
#include <devTypes.h>

/*
 * Device specific include files.
 */

#include <devSyslog.h>
#include <devNull.h>
#include <devSCSIDisk.h>
#include <devSCSITape.h>
#include <devNet.h>
#include <devBlockDevice.h>
#include <devfb.h>
#include <scsiHBADevice.h>
#include <raidExt.h>
#include <tty.h>
#include <mouse.h>
#include <devSmem.h>
#include <devClientDev.h>


static ReturnStatus nullOpenProc _ARGS_ ((Fs_Device *devicePtr,
    int flags, Fs_NotifyToken notifyToken, int *flagsPtr));
static ReturnStatus noOpenProc _ARGS_ ((Fs_Device *devicePtr,
    int flags, Fs_NotifyToken notifyToken, int *flagsPtr));
static ReturnStatus nullReadProc _ARGS_ ((Fs_Device *devicePtr,
    Fs_IOParam *readPtr, Fs_IOReply *replyPtr));
static ReturnStatus nullWriteProc _ARGS_ ((Fs_Device *devicePtr,
    Fs_IOParam *writePtr, Fs_IOReply *replyPtr));
static ReturnStatus nullCloseProc _ARGS_ ((Fs_Device *devicePtr,
    int flags, int numUsers, int numWriters));
static ReturnStatus nullSelectProc _ARGS_ ((Fs_Device *devicePtr,
    int *readPtr, int *writePtr, int *exceptPtr));
static ReturnStatus nullReopenProc _ARGS_ ((Fs_Device *devicePtr,
    int numUsers, int numWriters, Fs_NotifyToken notifyToken, int *flagsPtr));
static ReturnStatus noReopenProc _ARGS_ ((Fs_Device *devicePtr,
    int numUsers, int numWriters, Fs_NotifyToken notifyToken, int *flagsPtr));
static ReturnStatus noMmapProc _ARGS_ ((Fs_Device *devicePtr,
    Address startAddr, int length, int offset, Address *newAddrPtr));


/*
 * Device type specific routine table:
 *	This is for the file-like operations as they apply to devices.
 *	DeviceOpen
 *	DeviceRead
 *	DeviceWrite
 *	DeviceIOControl
 *	DeviceClose
 *	DeviceSelect
 *	BlockDeviceAttach
 *	DeviceReopen
 *	DeviceMMap
 */


DevFsTypeOps devFsOpTable[] = {
    /*
     * Serial lines used to implement terminals.
     */
    {DEV_TERM,       DevTtyOpen, DevTtyRead, DevTtyWrite,
		     DevTtyIOControl, DevTtyClose, DevTtySelect,
		     DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * The system error log.  If this is not open then error messages go
     * to the console.
     */
    {DEV_SYSLOG,    Dev_SyslogOpen, Dev_SyslogRead, Dev_SyslogWrite,
		    Dev_SyslogIOControl, Dev_SyslogClose, Dev_SyslogSelect,
		    DEV_NO_ATTACH_PROC, Dev_SyslogReopen, noMmapProc},
    /*
     * SCSI Worm interface:  this device doesn't exist anymore.
     */
    {DEV_SCSI_WORM, noOpenProc, nullReadProc, nullWriteProc,
		    Dev_NullIOControl, nullCloseProc, nullSelectProc,
		    DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * The following device number is unused.
     */
    {DEV_PLACEHOLDER_2, noOpenProc, nullReadProc, nullWriteProc,
		    Dev_NullIOControl, nullCloseProc, nullSelectProc,
		    DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * New SCSI Disk interface.
     */
    {DEV_SCSI_DISK, DevRawBlockDevOpen, DevRawBlockDevRead,
		    DevRawBlockDevWrite, DevRawBlockDevIOControl, 
		    DevRawBlockDevClose, nullSelectProc, DevScsiDiskAttach,
		    DevRawBlockDevReopen, noMmapProc},
    /*
     * SCSI Tape interface.
     */
    {DEV_SCSI_TAPE, DevSCSITapeOpen, DevSCSITapeRead, DevSCSITapeWrite,
		    DevSCSITapeIOControl, DevSCSITapeClose, nullSelectProc,
		    DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/null
     */
    {DEV_MEMORY,    nullOpenProc, Dev_NullRead, Dev_NullWrite,
		    Dev_NullIOControl, nullCloseProc, Dev_NullSelect,
		    DEV_NO_ATTACH_PROC, nullReopenProc, noMmapProc},
    /*
     * Xylogics 450 disk controller.
     */
    {DEV_XYLOGICS, noOpenProc, nullReadProc, nullWriteProc,
		    Dev_NullIOControl, nullCloseProc, nullSelectProc,
		    DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * Network devices.  The unit number specifies the ethernet protocol number.
     */
    {DEV_NET,      DevNet_FsOpen, DevNet_FsRead, DevNet_FsWrite, 
		   DevNet_FsIOControl, DevNet_FsClose, DevNet_FsSelect, 
		   DEV_NO_ATTACH_PROC, DevNet_FsReopen, noMmapProc},
    /*
     * Raw SCSI HBA interface.
     */
    {DEV_SCSI_HBA, DevSCSIDeviceOpen, Dev_NullRead, Dev_NullWrite,
		    DevSCSIDeviceIOControl, DevSCSIDeviceClose,
		    Dev_NullSelect, DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*  
     * RAID device.
     */ 
    {DEV_RAID, DevRawBlockDevOpen, DevRawBlockDevRead,
                    DevRawBlockDevWrite, DevRawBlockDevIOControl,
                    DevRawBlockDevClose, Dev_NullSelect, DevRaidAttach,
                    DevRawBlockDevReopen, noMmapProc},
    /*  
     * Debug device. (useful for debugging RAID device)
     */ 
    {DEV_DEBUG, DevRawBlockDevOpen, DevRawBlockDevRead,
                    DevRawBlockDevWrite, DevRawBlockDevIOControl,
                    DevRawBlockDevClose, Dev_NullSelect, DevDebugAttach,
                    DevRawBlockDevReopen, noMmapProc},
    /*
     * Event devices for window systems.
     */
    {DEV_MOUSE,    DevMouseOpen, DevMouseRead, DevMouseWrite,
		   DevMouseIOControl, DevMouseClose, DevMouseSelect,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * Frame buffer device.
     */
    {DEV_GRAPHICS, DevFBOpen, nullReadProc, nullWriteProc,
		   DevFBIOControl, DevFBClose, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, DevFBMMap},
    /*
     * /dev/smem
     */
    {DEV_SMEM,     nullOpenProc, Dev_SmemRead, Dev_SmemWrite,
                   Dev_SmemIOControl, nullCloseProc, Dev_SmemSelect,
                   DEV_NO_ATTACH_PROC, nullReopenProc, noMmapProc},
    /*
     * /dev/audio
     */
    {DEV_AUDIO,    noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/vmelink
     */
    {DEV_VMELINK,  noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/stdfb
     */
    {DEV_STDFB,    noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/nothing
     */
    {DEV_PLACEHOLDER_4,noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/nothing
     */
    {DEV_PLACEHOLDER_5,noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/robot
     */
    {DEV_SCSI_ROBOT,noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/xbus
     */
    {DEV_XBUS,     noOpenProc, nullReadProc, nullWriteProc,
		   Dev_NullIOControl, nullCloseProc, nullSelectProc,
		   DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
    /*
     * /dev/clients
     */
    {DEV_CLIENT_STATE,  DevClientStateOpen, DevClientStateRead,
		   DevClientStateWrite,
		   DevClientStateIOControl, DevClientStateClose,
		   nullSelectProc, DEV_NO_ATTACH_PROC,
		   noReopenProc, noMmapProc},
};

int devNumDevices = sizeof(devFsOpTable) / sizeof(DevFsTypeOps);

static ReturnStatus
nullOpenProc _ARGS_ ((Fs_Device *devicePtr,
    int flags, Fs_NotifyToken notifyToken, int *flagsPtr))
{
    return SUCCESS;
}

static ReturnStatus
noOpenProc _ARGS_ ((Fs_Device *devicePtr,
    int flags, Fs_NotifyToken notifyToken, int *flagsPtr))
{
    return FS_INVALID_ARG;
}

static ReturnStatus
nullReadProc _ARGS_ ((Fs_Device *devicePtr,
    Fs_IOParam *readPtr, Fs_IOReply *replyPtr))
{
    return SUCCESS;
}

static ReturnStatus
nullWriteProc _ARGS_ ((Fs_Device *devicePtr,
    Fs_IOParam *readPtr, Fs_IOReply *replyPtr))
{
    return SUCCESS;
}

static ReturnStatus
nullCloseProc _ARGS_ ((Fs_Device *devicePtr,
    int flags, int numUsers, int numWriters))
{
    return SUCCESS;
}

static ReturnStatus
nullSelectProc _ARGS_ ((Fs_Device *devicePtr,
    int *readPtr, int *writePtr, int *exceptPtr))
{
    return SUCCESS;
}

static ReturnStatus
nullReopenProc _ARGS_ ((Fs_Device *devicePtr,
    int numUsers, int numWriters, Fs_NotifyToken notifyToken, int *flagsPtr))
{
    return SUCCESS;
}

static ReturnStatus
noReopenProc _ARGS_ ((Fs_Device *devicePtr,
    int numUsers, int numWriters, Fs_NotifyToken notifyToken, int *flagsPtr))
{
    return FS_INVALID_ARG;
}

static ReturnStatus
noMmapProc _ARGS_ ((Fs_Device *devicePtr,
    Address startAddr, int length, int offset, Address *newAddrPtr))
{
    return FS_INVALID_ARG;
}


@


1.7
log
@New device for monitoring network status.

@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4c.md/devFsOpTable.c,v 1.6 92/08/13 15:54:04 secor Exp $ SPRITE (Berkeley)";
d223 2
a224 1
    {DEV_CLIENT_STATE,  DevClientStateOpen, DevClientStateRead, nullWriteProc,
d226 1
a226 1
		   DevClientStateSelect, DEV_NO_ATTACH_PROC,
@


1.6
log
@Added smem device to devFsOpTable and added files with smem procedures.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4c.md/devFsOpTable.c,v 1.5 92/03/20 13:48:32 jhh Exp $ SPRITE (Berkeley)";
d21 7
a27 7
#include "sprite.h"
#include "dev.h"
#include "devInt.h"
#include "fs.h"
#include "rawBlockDev.h"
#include "devFsOpTable.h"
#include "devTypes.h"
d33 13
a45 12
#include "devSyslog.h"
#include "devNull.h"
#include "devSCSIDisk.h"
#include "devSCSITape.h"
#include "devNet.h"
#include "devBlockDevice.h"
#include "devfb.h"
#include "scsiHBADevice.h"
#include "raidExt.h"
#include "tty.h"
#include "mouse.h"
#include "devSmem.h"
d178 49
@


1.5
log
@Enabled RAID device.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/dev/sun4c.md/devFsOpTable.c,v 1.4 90/11/06 17:12:22 rab Exp $ SPRITE (Berkeley)";
d44 1
d171 6
a176 1

@


1.4
log
@Added prototypes.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun4c.md/RCS/devFsOpTable.c,v 1.3 90/08/14 18:47:15 mgbaker Exp Locker: rab $ SPRITE (Berkeley)";
d147 4
a150 3
    {DEV_RAID,  noOpenProc, nullReadProc, nullWriteProc,
		    Dev_NullIOControl, nullCloseProc, nullSelectProc,
		    DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
d154 4
a157 3
    {DEV_DEBUG, noOpenProc, nullReadProc, nullWriteProc,
		    Dev_NullIOControl, nullCloseProc, nullSelectProc,
		    DEV_NO_ATTACH_PROC, noReopenProc, noMmapProc},
@


1.3
log
@Added /dev/fb support.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev.mgb/sun4c.md/RCS/devFsOpTable.c,v 1.1 90/08/02 14:37:33 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
a44 2
static ReturnStatus NoDevice();
static ReturnStatus NullProc();
d46 19
d87 1
a87 1
		     DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d94 1
a94 1
		    DEV_NO_ATTACH_PROC, Dev_SyslogReopen, NullProc},
d98 3
a100 3
    {DEV_SCSI_WORM, NoDevice, NullProc, NullProc,
		    Dev_NullIOControl, NullProc, NullProc,
		    DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d104 3
a106 3
    {DEV_PLACEHOLDER_2, NoDevice, NullProc, NullProc,
		    Dev_NullIOControl, NullProc, NullProc,
		    DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d112 2
a113 2
		    DevRawBlockDevClose, NullProc, DevScsiDiskAttach,
		    DevRawBlockDevReopen, NullProc},
d118 2
a119 2
		    DevSCSITapeIOControl, DevSCSITapeClose, NullProc,
		    DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d123 3
a125 3
    {DEV_MEMORY,    NullProc, Dev_NullRead, Dev_NullWrite,
		    Dev_NullIOControl, NullProc, Dev_NullSelect,
		    DEV_NO_ATTACH_PROC, NullProc, NullProc},
d129 3
a131 3
    {DEV_XYLOGICS, NoDevice, NullProc, NullProc,
		    Dev_NullIOControl, NullProc, NullProc,
		    DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d137 1
a137 1
		   DEV_NO_ATTACH_PROC, DevNet_FsReopen, NullProc},
d143 1
a143 1
		    Dev_NullSelect, DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d147 3
a149 3
    {DEV_RAID,  NoDevice, NullProc, NullProc,
		    Dev_NullIOControl, NullProc, NullProc,
		    DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d153 3
a155 3
    {DEV_DEBUG, NoDevice, NullProc, NullProc,
		    Dev_NullIOControl, NullProc, NullProc,
		    DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d161 1
a161 1
		   DEV_NO_ATTACH_PROC, NoDevice, NullProc},
d165 3
a167 3
    {DEV_GRAPHICS, DevFBOpen, NullProc, NullProc,
		   DevFBIOControl, DevFBClose, NullProc,
		   DEV_NO_ATTACH_PROC, NoDevice, DevFBMMap},
d174 44
a217 1
NullProc()
d219 1
a219 1
    return(SUCCESS);
d222 6
d230 2
a231 1
NoDevice()
d233 1
a233 1
    return(FS_INVALID_ARG);
d235 2
@


1.2
log
@Use new /dev/null procs for select and IOControl.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun4c.md/RCS/devFsOpTable.c,v 1.1 89/08/09 12:49:45 mendel Exp Locker: ouster $ SPRITE (Berkeley)";
d39 1
d60 1
d70 1
a70 1
		     DEV_NO_ATTACH_PROC, NoDevice},
d77 1
a77 1
		    DEV_NO_ATTACH_PROC, Dev_SyslogReopen},
d83 1
a83 1
		    DEV_NO_ATTACH_PROC, NoDevice},
d89 1
a89 1
		    DEV_NO_ATTACH_PROC, NoDevice},
d96 1
a96 1
		    DevRawBlockDevReopen},
d102 1
a102 1
		    DEV_NO_ATTACH_PROC, NoDevice},
d108 1
a108 1
		    DEV_NO_ATTACH_PROC, NullProc},
d114 1
a114 1
		    DEV_NO_ATTACH_PROC, NoDevice},
d120 1
a120 1
		   DEV_NO_ATTACH_PROC, DevNet_FsReopen},
d126 1
a126 1
		    Dev_NullSelect, DEV_NO_ATTACH_PROC, NoDevice},
d132 1
a132 1
		    DEV_NO_ATTACH_PROC, NoDevice},
d138 1
a138 1
		    DEV_NO_ATTACH_PROC, NoDevice},
d144 7
a150 1
		   DEV_NO_ATTACH_PROC, NoDevice},
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/kernel/dev/sun4.md/RCS/devFsOpTable.c,v 1.2 89/07/22 14:06:35 eklee Exp $ SPRITE (Berkeley)";
a43 1
static ReturnStatus NullSelectProc();
d80 1
a80 1
		    NullProc, NullProc, NullProc,
d86 2
a87 1
		    NullProc, NullProc, NullProc, DEV_NO_ATTACH_PROC, NoDevice},
d105 2
a106 2
		    NullProc, NullProc, NullSelectProc, DEV_NO_ATTACH_PROC,
		    NullProc},
d111 1
a111 1
		    NullProc, NullProc, NullProc,
d123 2
a124 2
		    DevSCSIDeviceIOControl, DevSCSIDeviceClose, NullSelectProc,
		    DEV_NO_ATTACH_PROC, NoDevice},
d129 1
a129 1
		    NullProc, NullProc, NullProc,
d135 1
a135 1
		    NullProc, NullProc, NullProc,
a158 15
}

/*ARGSUSED*/
static ReturnStatus
NullSelectProc(devicePtr, readPtr, writePtr, exceptPtr)
    Fs_Device	*devicePtr;	/* Ignored. */
    int *readPtr;		/* Read bit */
    int *writePtr;		/* Write bit */
    int *exceptPtr;		/* Exception bit */
{
    /*
     * Leave the read and write bits on.  This is used with /dev/null.
     */
    *exceptPtr = 0;
    return(SUCCESS);
@
