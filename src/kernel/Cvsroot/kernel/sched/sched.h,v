head     9.6;
branch   ;
access   ;
symbols  ds3100:9.6 sun3:9.6 sun4nw:9.5 symm:9.5 spur:9.5 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.6
date     91.12.12.12.29.29;  author mgbaker;  state Exp;
branches ;
next     9.5;

9.5
date     90.12.07.15.02.44;  author mgbaker;  state Exp;
branches ;
next     9.4;

9.4
date     90.10.11.13.03.52;  author kupfer;  state Exp;
branches ;
next     9.3;

9.3
date     90.10.11.12.52.55;  author mendel;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.05.17.13.50;  author mendel;  state Exp;
branches ;
next     9.1;

9.1
date     90.06.21.17.47.31;  author mgbaker;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.19.00;  author douglis;  state Stable;
branches ;
next     8.9;

8.9
date     89.08.29.15.09.31;  author jhh;  state Exp;
branches ;
next     8.8;

8.8
date     89.08.17.17.31.15;  author jhh;  state Exp;
branches ;
next     8.7;

8.7
date     89.01.11.10.14.23;  author mendel;  state Exp;
branches ;
next     8.6;

8.6
date     89.01.05.15.43.30;  author mendel;  state Exp;
branches ;
next     8.5;

8.5
date     89.01.03.10.00.23;  author mendel;  state Exp;
branches ;
next     8.4;

8.4
date     88.12.09.08.51.46;  author mendel;  state Exp;
branches ;
next     8.3;

8.3
date     88.11.22.19.35.52;  author jhh;  state Exp;
branches ;
next     8.2;

8.2
date     88.11.18.15.27.36;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.14.12.51.47;  author douglis;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.36.54;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.30.21.06.25;  author jhh;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.26.11.22.12;  author douglis;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.26.12;  author brent;  state Stable;
branches ;
next     5.3;

5.3
date     88.05.04.17.20.53;  author nelson;  state Exp;
branches ;
next     5.2;

5.2
date     88.03.08.16.10.05;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     87.12.15.15.26.07;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.49.30;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.6
log
@Removed left-over code from SOSP trace kernel.
@
text
@/*
 * sched.h --
 *
 *	Declarations of procedures exported by the sched module.
 *
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * rcsid $Header: /sprite/src/kernel/Cvsroot/kernel/sched/sched.h,v 9.5 90/12/07 15:02:44 mgbaker Exp $ SPRITE (Berkeley)
 */

#ifndef _SCHED
#define _SCHED

#ifdef KERNEL
#include <timer.h>
#include <proc.h>
#include <mach.h>
#include <sync.h>
#else
#include <kernel/timer.h>
#include <kernel/proc.h>
#include <kernel/mach.h>
#include <kernel/sync.h>
#endif

/*
 * Flags for the schedFlags in the proc table.
 *
 *	SCHED_CONTEXT_SWITCH_PENDING	A context switch came in while context
 *					switching was disabled.
 *	SCHED_CLEAR_USAGE		Clear usage information for this
 *					process when scheduling it.  Intended
 *					to be used by kernel worker processes.
 *	SCHED_STACK_IN_USE		The stack of this process is being
 *					used by a processor.  The processor 
 *					field of the Proc_ControlBlock 
 *					specifies what processor is using it. 
 */

#define SCHED_CONTEXT_SWITCH_PENDING	0x1
#define	SCHED_CLEAR_USAGE		0x2	
#define	SCHED_STACK_IN_USE		0x4

typedef struct Sched_Instrument {
    /*
     * Per processor numbers.
     */
    struct perProcessor {
	/* 
	 * Total number of context switches. 
	 */
	int	numContextSwitches;		
    
	/* 
	 * Only those due to end of quantum. 
	 */
	int	numInvoluntarySwitches;	
    
	/* 
	 * Number of switches that cause a different process to run.
	 */
	int numFullCS;			

	/* 
	 * Amount of time w/o running process.  
	 */
	Timer_Ticks noProcessRunning;	
    
	/* 
	 * Converted value of noProcessRunning that is only computed when
	 * this struct is copied out to user space.
	 */
	Time idleTime;			
    
	/* 
	 * Free running counter that is ++'d inside the idle loop.  It is used
	 * to measure CPU utilization.
	 */
	unsigned int idleTicksLow;		
	/* 
	 * Make the counter into 64 bits 
	 */
	unsigned int idleTicksOverflow;
    	unsigned int idleTicksPerSecond;	/* Calibrated value */

#if 	(MACH_MAX_NUM_PROCESSORS != 1) 
	/*
	 * Pad the structure to insure that two structure occur in the
	 * same cache block.  This is to prevent pinging of cache blocks
	 * between processor in a multiprocessor such as SPUR while 
	 * incrementing the IdleLoop counter.
	 */
	 Mach_CacheBlockSizeType	pad;
#endif
    } processor[MACH_MAX_NUM_PROCESSORS];

    int numReadyProcesses;		/* Number of ready processes at time
					 * of call to copy information */

    Time noUserInput;			/* Time since last level-6 interrupt */
} Sched_Instrument;

typedef struct {
    Proc_ControlBlock		*procPtr;
#if 	(MACH_MAX_NUM_PROCESSORS != 1) 
   Mach_CacheBlockSizeType	pad;
#endif
} Sched_OnDeck;

extern Sched_OnDeck	sched_OnDeck[MACH_MAX_NUM_PROCESSORS];

/*
 * External declarations:
 */
    
extern Sync_Semaphore sched_Mutex;	/* Mutual exclusion in scheduler */

extern Sync_Semaphore *sched_MutexPtr;
extern Sched_Instrument sched_Instrument;   /* Counters for instrumentation. */
extern int sched_Quantum;		/* Timer interrupts per quantum. */
extern Sched_OnDeck	sched_OnDeck[MACH_MAX_NUM_PROCESSORS];

extern void Sched_MakeReady _ARGS_((register Proc_ControlBlock *procPtr));
extern void Sched_StartUserProc _ARGS_((Address pc));
extern void Sched_StartKernProc _ARGS_((void (*func)()));
extern void Sched_ContextSwitch _ARGS_((Proc_State state));
extern void Sched_ContextSwitchInt _ARGS_((register Proc_State state));
extern void Sched_ForgetUsage _ARGS_((Timer_Ticks time, ClientData clientData));
extern void Sched_GatherProcessInfo _ARGS_((unsigned int interval));
extern void Sched_Init _ARGS_((void));
extern void Sched_TimeTicks _ARGS_((void));
extern void Sched_LockAndSwitch _ARGS_((void));
extern ReturnStatus Sched_StartProcessor _ARGS_((int pnum));
extern ReturnStatus Sched_IdleProcessor _ARGS_((int pnum));
extern void Sched_InsertInQueue _ARGS_((Proc_ControlBlock *procPtr, 
					Proc_ControlBlock **runPtrPtr));
extern void Sched_PrintStat _ARGS_((void));
extern void Sched_SetClearUsageFlag _ARGS_((void));
extern void Sched_DumpReadyQueue _ARGS_((ClientData dummy));
extern void Sched_StartSchedStats _ARGS_((void));
extern void Sched_StopSchedStats _ARGS_((void));

#endif /* _SCHED */
@


9.5
log
@Added more counters.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 9.4 90/10/11 13:03:52 kupfer Exp Locker: mgbaker $ SPRITE (Berkeley)
a103 16

#ifdef SOSP91
/*
 * Overall user and system times, not just per process.  If we like having
 * this info, we should put it into Sched_Instrument.
 */
typedef struct  Sched_OverallTimes {
    Timer_Ticks kernelTime;
    Timer_Ticks userTime;
    Timer_Ticks userTimeMigrated;
} Sched_OverallTimes;

extern	Sched_OverallTimes      sched_OverallTimesPerProcessor[];

#endif SOSP91

@


9.4
log
@Sched_DumpReadyQueue should take a ClientData.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 9.3 90/10/11 12:52:55 mendel Exp Locker: kupfer $ SPRITE (Berkeley)
d104 15
@


9.3
log
@Removed lint caused by function prototypes from the timer module.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 9.2 90/10/05 17:13:50 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d142 1
a142 1
extern void Sched_DumpReadyQueue _ARGS_((void));
@


9.2
log
@Added function prototypes and fixed include files ito use <>.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 9.1 90/06/21 17:47:31 mgbaker Exp Locker: mendel $ SPRITE (Berkeley)
d131 1
a131 1
extern void Sched_ForgetUsage _ARGS_((Timer_Ticks time));
@


9.1
log
@New interface for cpu sched stats.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 9.0 89/09/12 15:19:00 douglis Stable Locker: mgbaker $ SPRITE (Berkeley)
d17 4
a20 4
#include "timer.h"
#include "proc.h"
#include "mach.h"
#include "sync.h"
d126 19
a144 20
extern void			Sched_MakeReady();
extern void			Sched_StartUserProc();
extern void			Sched_StartKernProc();
extern void 			Sched_ContextSwitch();
extern void 			Sched_ContextSwitchInt();
extern void 			Sched_ForgetUsage();
extern void 			Sched_GatherProcessInfo();
extern void 			Sched_Init();
extern void 			Sched_TimeTicks();
extern void 			Sched_LockAndSwitch();
extern void 			Sched_MakeReady();
extern void 			Sched_InsertInQueue();
extern void 			Sched_PrintStat();
extern void 			Sched_StartProcess();
extern void			Sched_SetClearUsageFlag();
extern void			Sched_DumpReadyQueue();
extern ReturnStatus		Sched_StartProcessor();
extern ReturnStatus		Sched_IdleProcessor();
extern void			Sched_StartSchedStats();
extern void			Sched_StopSchedStats();
@


9.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.9 89/08/29 15:09:31 jhh Exp Locker: douglis $ SPRITE (Berkeley)
d144 2
@


8.9
log
@added on deck circles, rewrote queue routines
@
text
@d10 1
a10 1
 * rcsid $Header: /c/src/kernel/sched.jhh/RCS/sched.h,v 8.8 89/08/17 17:31:15 jhh Exp Locker: jhh $ SPRITE (Berkeley)
@


8.8
log
@New timer interface
@
text
@d10 1
a10 1
 * rcsid $Header: /c/src/kernel/sched.jhh/RCS/sched.h,v 8.7 89/01/11 10:14:23 mendel Exp Locker: jhh $ SPRITE (Berkeley)
d65 1
a65 1
    
d105 10
d124 1
d137 1
a137 2
extern void 			Sched_MoveInQueue();
extern Proc_ControlBlock	*Sched_InsertInQueue();
@


8.7
log
@Moved idleTicksPerSecond to be per processor in Sched_Instrument, added
Sched_StartProcessor and Sched_IdleProcessor.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.6 89/01/05 15:43:30 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d113 1
@


8.6
log
@Changed sched_Instrument and STACK_IN_USE flag.  Modified to look down
ready queue when first process has STACK_IN_USE.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.5 89/01/03 10:00:23 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d86 2
a98 2
    unsigned int idleTicksPerSecond;	/* Calibrated value */

d131 2
@


8.5
log
@Changed SCHED_STACK_IN_USE to be valid even when the process is not in
the idle loop.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.4 88/12/09 08:51:46 mendel Exp $ SPRITE (Berkeley)
d47 2
a48 3

    /* 
     * Total number of context switches. 
d50 46
a95 33
    int	numContextSwitches[MACH_MAX_NUM_PROCESSORS];		

    /* 
     * Only those due to end of quantum. 
     */
    int	numInvoluntarySwitches[MACH_MAX_NUM_PROCESSORS];	

    /* 
     * Number of switches that cause a different process to run.
     */
    int numFullCS[MACH_MAX_NUM_PROCESSORS];			

    /* 
     * Amount of time w/o running process.  
     */
    Timer_Ticks noProcessRunning[MACH_MAX_NUM_PROCESSORS];	

    /* 
     * Converted value of noProcessRunning that is only computed when
     * this struct is copied out to user space.
     */
    Time idleTime[MACH_MAX_NUM_PROCESSORS];			

    /* 
     * Free running counter that is ++'d inside the idle loop.  It is used
     * to measure CPU utilization.
     */
    unsigned int idleTicksLow[MACH_MAX_NUM_PROCESSORS];		

    /* 
     * Make the counter into 64 bits 
     */
    unsigned int idleTicksOverflow[MACH_MAX_NUM_PROCESSORS];	
@


8.4
log
@Added SCHED_STACK_IN_USE flag to prevent two processors from sharing the
same kernel stack. 
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.3 88/11/22 19:35:52 jhh Exp $ SPRITE (Berkeley)
d37 3
a39 4
 *					used as a IdleLoop/interrupt stack
 *					of a processor.  The processor field
 *					of the Proc_ControlBlock specifies
 *					what processor is using it. 
@


8.3
log
@new semaphore definition
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.2 88/11/18 15:27:36 jhh Exp Locker: jhh $ SPRITE (Berkeley)
d36 5
d45 1
@


8.2
log
@deleted sched_DoContextSwitch -- it is no longer needed because 
the interrupt handler checks the specialHandling field
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.1 88/11/14 12:51:47 douglis Exp Locker: jhh $ SPRITE (Berkeley)
d20 1
d25 1
d92 1
a92 1
extern int  sched_Mutex;		/* Mutual exclusion in scheduler */
d94 1
@


8.1
log
@ifdef KERNEL around #include's.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 8.0 88/11/11 18:36:54 douglis Stable Locker: douglis $ SPRITE (Berkeley)
a90 2

extern int  sched_DoContextSwitch;	/* Flag to force a context switch. */
@


8.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 6.2 88/10/30 21:06:25 jhh Exp Locker: douglis $ SPRITE (Berkeley)
d16 1
d20 5
@


6.2
log
@multiprocessor port
@
text
@d10 1
a10 1
 * rcsid $Header: /sprite/src/kernel/sched/RCS/sched.h,v 6.1 88/08/26 11:22:12 douglis Exp Locker: jhh $ SPRITE (Berkeley)
@


6.1
log
@fixed the endif's.
@
text
@d10 1
a10 1
 * rcsid $Header: sched.h,v 6.0 88/08/11 12:26:12 brent Stable $ SPRITE (Berkeley)
d18 1
d34 38
a71 12
    int	numContextSwitches;		/* Total number of context switches. */
    int	numInvoluntarySwitches;		/* Only those due to end of quantum. */
    int numFullCS;			/* Number of switches that force the
					 * cur. process to be switched from. */
    Timer_Ticks noProcessRunning;	/* Amount of time w/o running proc.  */
    Time idleTime;			/* Converted value of noProcessRunning
					 * that is only computed when this
					 * struct is copied out to user space.*/
    unsigned int idleTicksLow;		/* Free running counter that is ++'d
					 * inside the idle loop.  It is used
					 * to measure CPU utilization */
    unsigned int idleTicksOverflow;	/* Make the counter into 64 bits */
d73 1
d76 1
d106 1
@


6.0
log
@Changing version numbers.
@
text
@d10 1
a10 1
 * rcsid $Header: sched.h,v 5.3 88/05/04 17:20:53 nelson Exp $ SPRITE (Berkeley)
d78 1
a78 1
#endif _SCHED
@


5.3
log
@Rename of Sched_StartKernProcess to Sched_StartKernProc
@
text
@d10 1
a10 1
 * rcsid $Header: sched.h,v 5.2 88/03/08 16:10:05 nelson Exp $ SPRITE (Berkeley)
@


5.2
log
@Changed some externs
(associated with scheduler tuning.)
@
text
@d10 1
a10 1
 * rcsid $Header: sched.h,v 5.1 87/12/15 15:26:07 nelson Exp $ SPRITE (Berkeley)
d63 1
@


5.1
log
@Added a procedure header.
@
text
@d10 1
a10 1
 * rcsid $Header: sched.h,v 5.0 87/08/11 10:49:30 sprite Exp $ SPRITE (Berkeley)
a60 1
extern Proc_ControlBlock 	*Sched_GetRunnableProcess();
d72 1
@


5.0
log
@First Sprite native copy
@
text
@d10 1
a10 1
 * rcsid $Header: sched.h,v 4.3 87/05/29 13:49:59 nelson Exp $ SPRITE (Berkeley)
d75 1
@
