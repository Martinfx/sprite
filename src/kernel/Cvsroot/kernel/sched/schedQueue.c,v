head     9.3;
branch   ;
access   ;
symbols  ds3100:9.3 sun3:9.3 sun4nw:9.3 symm:9.3 spur:9.3 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.3
date     90.10.05.17.14.29;  author mendel;  state Exp;
branches ;
next     9.2;

9.2
date     89.10.30.18.00.46;  author jhh;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.21.17.17.33;  author jhh;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.19.07;  author douglis;  state Stable;
branches ;
next     8.4;

8.4
date     89.08.30.10.37.45;  author jhh;  state Exp;
branches ;
next     8.3;

8.3
date     89.08.29.15.09.35;  author jhh;  state Exp;
branches ;
next     8.2;

8.2
date     88.11.22.19.35.56;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     88.11.18.15.28.47;  author jhh;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.37.01;  author douglis;  state Stable;
branches ;
next     6.4;

6.4
date     88.10.30.21.06.36;  author jhh;  state Exp;
branches ;
next     6.3;

6.3
date     88.10.17.17.04.10;  author mendel;  state Exp;
branches ;
next     6.2;

6.2
date     88.08.26.11.22.24;  author douglis;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.23.16.55.47;  author douglis;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.26.17;  author brent;  state Stable;
branches ;
next     5.4;

5.4
date     88.05.05.17.59.30;  author nelson;  state Exp;
branches ;
next     5.3;

5.3
date     88.04.13.11.28.05;  author ouster;  state Exp;
branches ;
next     5.2;

5.2
date     88.03.08.16.10.28;  author nelson;  state Exp;
branches ;
next     5.1;

5.1
date     88.02.08.13.55.04;  author nelson;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.49.40;  author sprite;  state Exp;
branches ;
next     ;


desc
@@


9.3
log
@Added function prototypes, fixed include files, and uncommented code that
looks like it was inadvertently commented out.
@
text
@/* 
 * schedQueue.c --
 *
 *	Routines for ordering processes in the run queue based on weighted
 *	usage.
 *
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 9.2 89/10/30 18:00:46 jhh Exp Locker: mendel $ SPRITE (Berkeley)";
#endif /* not lint */


#include <sprite.h>
#include <mach.h>
#include <proc.h>
#include <list.h>
#include <sync.h>
#include <sched.h>
#include <schedInt.h>

List_Links schedReadyQueueHeader;
List_Links *schedReadyQueueHdrPtr = &schedReadyQueueHeader;


Sched_OnDeck	sched_OnDeck[MACH_MAX_NUM_PROCESSORS];

int	sched_Insert;
int	sched_QueueEmpty;
int	sched_Stage;
int	sched_Preempt;


/*
 * ----------------------------------------------------------------------------
 *
 * Sched_SetClearUsageFlag --
 *
 *	Set flag in process table entry for the current process that says to
 *	clear usage info whenever is scheduled.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	schedFlags field modified for calling process.
 *
 * ----------------------------------------------------------------------------
 */
void
Sched_SetClearUsageFlag()
{
    Proc_ControlBlock	*procPtr;

    procPtr = Proc_GetCurrentProc();
    MASTER_LOCK(sched_MutexPtr);
    procPtr->schedFlags |= SCHED_CLEAR_USAGE;
    MASTER_UNLOCK(sched_MutexPtr);
}

/*
 * ----------------------------------------------------------------------------
 *
 * Sched_InsertInQueue --
 *
 *	Given a pointer to a process, move it in the run queue (or insert
 *	it if it is not already there) based on its current weighted usage.
 *	If the process is of higher priority than the current process,
 *	flag the current process as having a pending context switch.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Process is moved within or added to the run queue.  If the process
 *	is added, the global count of the number of ready processes is
 *	incremented.
 *
 * ----------------------------------------------------------------------------
 */

INTERNAL void
Sched_InsertInQueue(procPtr, runPtrPtr)
    register Proc_ControlBlock	*procPtr;	/* pointer to process to 
						   move/insert */
    Proc_ControlBlock		**runPtrPtr;	/* returns process from 
						 * front of queue.
						 */
{
    register Proc_ControlBlock 	*itemProcPtr;
    register List_Links		*queuePtr;
    Boolean			insert;
    Boolean			delete;
    Boolean			foundInsertPoint;
    List_Links			*followingItemPtr;
    int				i;
    Proc_ControlBlock		*lowestProcPtr;
    int				processor;

    sched_Insert++;
    if (procPtr->schedFlags & SCHED_CLEAR_USAGE) {
	procPtr->recentUsage = 0;
	procPtr->weightedUsage = 0;
	procPtr->unweightedUsage = 0;
    }
    processor = procPtr->processor;
    queuePtr = schedReadyQueueHdrPtr;
    if (mach_NumProcessors > 1) {
	if (sched_ProcessorStatus[processor] == 
	    SCHED_PROCESSOR_COUNTING_TICKS) {
	    if (sched_OnDeck[processor].procPtr != (Proc_ControlBlock *) NIL) {
		panic("Count of ticks screwed up.");
	    }
	    sched_OnDeck[processor].procPtr = procPtr;
	    if (runPtrPtr != (Proc_ControlBlock **) NIL) {
		*runPtrPtr = (Proc_ControlBlock *) NIL;
	    }
	    return;
	} else if (List_IsEmpty(queuePtr)) {
	    /*
	     * Special case an empty queue. If the queue is empty there may be
	     * idle processors. We optimize things by bypassing the queue and
	     * giving processes to the processors through the staging areas.
	     */

	    sched_QueueEmpty++;
	    /*
	     * If we are supposed to return a runnable process and the process
	     * we were given last ran on the current processor, then just return
	     * the process.
	     */
	    if ((runPtrPtr != (Proc_ControlBlock **) NIL) && 
		(processor == Mach_GetProcessorNumber())) {
		*runPtrPtr = procPtr;
		return;
	    }
	    /*
	     * If the last processor to run the process is idle then just give
	     * the process to that processor.
	     */
	    if ((proc_RunningProcesses[processor] == (Proc_ControlBlock *) NIL) &&
		(sched_ProcessorStatus[processor] == SCHED_PROCESSOR_ACTIVE)) {
		if (sched_OnDeck[processor].procPtr == 
		    (Proc_ControlBlock *) NIL) {
		    sched_OnDeck[processor].procPtr = procPtr;
		    procPtr =  (Proc_ControlBlock *) NIL;
		/*
		 * There is already a process on deck, but the one new one
		 * can't be run by anyone else because it's stack is in
		 * use by this processor. Switch the two processes.
		 */
		} else if (procPtr->schedFlags & SCHED_STACK_IN_USE) {
		    Proc_ControlBlock *tempPtr;
    
		    tempPtr = procPtr;
		    procPtr = sched_OnDeck[processor].procPtr;
		    sched_OnDeck[processor].procPtr = tempPtr;
		}
	    }
	    if (procPtr != (Proc_ControlBlock *) NIL && 
		!(procPtr->schedFlags & SCHED_STACK_IN_USE)) {
		/*
		 * Give the process to any idle processor. It's stack cannot
		 * be in use (it can't be run anyway so don't bother trying).
		 */
		for (i = 0; i < mach_NumProcessors; i++) {
		    if ((sched_ProcessorStatus[i] == SCHED_PROCESSOR_ACTIVE) &&
			(proc_RunningProcesses[i] ==  (Proc_ControlBlock *) NIL) &&
			(sched_OnDeck[i].procPtr == 
			(Proc_ControlBlock *) NIL)) {
			sched_OnDeck[i].procPtr = procPtr;
			procPtr =  (Proc_ControlBlock *) NIL;
			break;
		    }
		}
	    }
	    /* 
	     * If we gave the process away then we're done.
	     */
	    if (procPtr == (Proc_ControlBlock *) NIL) {
		sched_Stage++;
		if (runPtrPtr != (Proc_ControlBlock **) NIL) {
		    *runPtrPtr = (Proc_ControlBlock *) NIL;
		}
		return;
	    }
	}
    }
    /*
     * Compare the process's weighted usage to the usage of the currently
     * running processes.  If the new process has higher priority (lower
     * usage) than one of the current processes, then force the current 
     * process to context switch.  
     * The context switch will occur in one of two places. 
     * 1) If we are being called at interrupt level, and the interrupt occurred
     *    in user mode, then the context switch will occur prior to returning 
     *	  to user mode. (the CallInterruptHandler macro checks the 
     *    specialHandling flag)
     * 2) The next time the current process enters a trap handler.
     *
     */
    lowestProcPtr = (Proc_ControlBlock *) NIL;
    for (i = 0; i < mach_NumProcessors; i++) {
	itemProcPtr = proc_RunningProcesses[i];
	if (itemProcPtr == (Proc_ControlBlock *) NIL) {
	    continue;
	}
	if ((lowestProcPtr == (Proc_ControlBlock *) NIL) ||
	    (itemProcPtr->weightedUsage > lowestProcPtr->weightedUsage)) {
	    lowestProcPtr = itemProcPtr;
	}
    }
    if ((lowestProcPtr != (Proc_ControlBlock *) NIL) &&
	    (procPtr->weightedUsage < lowestProcPtr->weightedUsage)) {
	sched_Preempt++;
	lowestProcPtr->schedFlags |= SCHED_CONTEXT_SWITCH_PENDING;
	lowestProcPtr->specialHandling = 1;
    }
    if (List_IsEmpty(queuePtr)) {
	/*
	 * This is easy if the queue is empty.
	 */
	if (runPtrPtr != (Proc_ControlBlock **) NIL) {
	    *runPtrPtr = procPtr;
	    return;
	} else {
	    List_Insert((List_Links *) procPtr, LIST_ATREAR(queuePtr));
	    sched_Instrument.numReadyProcesses = 1;
	    return;
	}
    }
    /*
     * Loop through all elements in the run queue.  Search for the first
     * process with a weighted usage greater than the process being inserted.
     *
     * If a process is found that belongs after procPtr, set foundInsertPoint
     * and just look for procPtr to see whether the process is being moved
     * or inserted.  If procPtr has already been found and the insert point
     * has been determined, exit the loop.
     */
    insert = TRUE;
    delete = FALSE;
    foundInsertPoint = FALSE;
    itemProcPtr = (Proc_ControlBlock *) schedReadyQueueHdrPtr;
    followingItemPtr = (List_Links *) NIL;
    LIST_FORALL(queuePtr, (List_Links *) itemProcPtr) {
	if (itemProcPtr == procPtr) {
	    delete = TRUE;
	}
	if (foundInsertPoint && delete) {
	    break;
	}
	if (foundInsertPoint) {
	    continue;
	}
	if (procPtr->weightedUsage < itemProcPtr->weightedUsage) {
	    followingItemPtr = (List_Links *) itemProcPtr;
	    if (((List_Links *)(procPtr))->nextPtr == 
		(List_Links *) followingItemPtr && delete) {
		insert = FALSE;
		delete = FALSE;
		break;
	    }
	    foundInsertPoint = TRUE;
	}
    }
    if (foundInsertPoint) {
	itemProcPtr = (Proc_ControlBlock *)LIST_BEFORE(followingItemPtr);
    }
    /*
     * Process was already on queue in a different position so delete it.
     */
    if (delete) {
	List_Remove((List_Links *) procPtr);
	sched_Instrument.numReadyProcesses -= 1;
    }
    if (runPtrPtr != (Proc_ControlBlock **) NIL) {
	if (foundInsertPoint && (List_Links *)itemProcPtr == queuePtr) {
	    /*
	     * We are being inserted at the front
	     * of the queue so return ourselves.
	     */
	    *runPtrPtr = procPtr;
	    return;
	}
    }
    /*
     * Insert the process into the queue.
     */
    if (insert) {
	if (foundInsertPoint) {
	    List_Insert((List_Links *) procPtr, (List_Links *) itemProcPtr);
	} else {
	    List_Insert((List_Links *) procPtr, LIST_ATREAR(queuePtr));
	}
	sched_Instrument.numReadyProcesses += 1;
    }
    /*
     * If we are to return a process then delete the first process from
     * the queue.
     */
    if (runPtrPtr != (Proc_ControlBlock **) NIL) {
	Proc_ControlBlock 	*tempPtr;
	tempPtr = (Proc_ControlBlock *)List_First(queuePtr);
	List_Remove((List_Links *)tempPtr);
	*runPtrPtr = tempPtr;
	sched_Instrument.numReadyProcesses -= 1;
    }
}
@


9.2
log
@fixed lint errors
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 9.1 89/10/21 17:17:33 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d16 7
a22 7
#include "sprite.h"
#include "mach.h"
#include "proc.h"
#include "list.h"
#include "sync.h"
#include "sched.h"
#include "schedInt.h"
d133 1
d135 1
a135 1
		(processor == Mach_GetProcessorNumber()) {
d247 1
@


9.1
log
@All processors idle when counting idle ticks.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 8.4 89/08/30 10:37:45 jhh Exp $ SPRITE (Berkeley)";
d127 1
a127 2
	    int		cpu;
    
a128 1
	    cpu = Mach_GetProcessorNumber();
d292 1
a292 1
	    List_Insert((List_Links *) procPtr, itemProcPtr);
@


9.0
log
@Changing version numbers.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 8.4 89/08/30 10:37:45 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
d100 1
d108 1
a108 1

d110 10
a119 19
    /*
     * Special case an empty queue. If the queue is empty there may be
     * idle processors. We optimize things by bypassing the queue and
     * giving processes to the processors through the staging areas.
     */
    if (mach_NumProcessors > 1 && List_IsEmpty(queuePtr)) {
	int		processor;
	int		cpu;

	sched_QueueEmpty++;
	processor = procPtr->processor;
	cpu = Mach_GetProcessorNumber();
	/*
	 * If we are supposed to return a runnable process and the process
	 * we were given last ran on the current processor, then just return
	 * the process.
	if ((runPtrPtr != (Proc_ControlBlock **) NIL) && 
	    (processor == Mach_GetProcessorNumber()) {
	    *runPtrPtr = procPtr;
d121 1
a121 11
	}
	/*
	 * If the last processor to run the process is idle then just give
	 * the process to that processor.
	 */
	if ((proc_RunningProcesses[processor] == (Proc_ControlBlock *) NIL) &&
	    (sched_ProcessorStatus[processor] != SCHED_PROCESSOR_IDLE)) {
	    if (sched_OnDeck[processor].procPtr == 
		(Proc_ControlBlock *) NIL) {
		sched_OnDeck[processor].procPtr = procPtr;
		procPtr =  (Proc_ControlBlock *) NIL;
d123 3
a125 3
	     * There is already a process on deck, but the one new one
	     * can't be run by anyone else because it's stack is in
	     * use by this processor. Switch the two processes.
d127 12
a138 6
	    } else if (procPtr->schedFlags & SCHED_STACK_IN_USE) {
		Proc_ControlBlock *tempPtr;

		tempPtr = procPtr;
		procPtr = sched_OnDeck[processor].procPtr;
		sched_OnDeck[processor].procPtr = tempPtr;
a139 3
	}
	if (procPtr != (Proc_ControlBlock *) NIL && 
	    !(procPtr->schedFlags & SCHED_STACK_IN_USE)) {
d141 2
a142 2
	     * Give the process to any idle processor. It's stack cannot
	     * be in use (it can't be run anyway so don't bother trying).
d144 5
a148 6
	    for (i = 0; i < mach_NumProcessors; i++) {
		if ((sched_ProcessorStatus[i] != SCHED_PROCESSOR_IDLE) &&
		    (proc_RunningProcesses[i] ==  (Proc_ControlBlock *) NIL) &&
		    (sched_OnDeck[i].procPtr == 
		    (Proc_ControlBlock *) NIL)) {
		    sched_OnDeck[i].procPtr = procPtr;
d150 11
a160 1
		    break;
d163 26
a188 8
	}
	/* 
	 * If we gave the process away then we're done.
	 */
	if (procPtr == (Proc_ControlBlock *) NIL) {
	    sched_Stage++;
	    if (runPtrPtr != (Proc_ControlBlock **) NIL) {
		*runPtrPtr = (Proc_ControlBlock *) NIL;
a189 1
	    return;
@


8.4
log
@fixed an unneeded panic
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 8.3 89/08/29 15:09:35 jhh Exp $ SPRITE (Berkeley)";
@


8.3
log
@added on deck circles, rewrote queue routines
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /c/src/kernel/sched.jhh/RCS/schedQueue.c,v 8.2 88/11/22 19:35:56 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d153 2
a154 4
	if (procPtr != (Proc_ControlBlock *) NIL) {
	    if (procPtr->schedFlags & SCHED_STACK_IN_USE) {
		panic("Couldn't put stack_in_use process on deck.");
	    }
@


8.2
log
@new semaphore definition
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 8.1 88/11/18 15:28:47 jhh Exp Locker: jhh $ SPRITE (Berkeley)";
d27 8
a62 1

d66 1
a66 1
 * Sched_MoveInQueue --
d85 2
a86 2
Sched_MoveInQueue(procPtr)
    register	Proc_ControlBlock *procPtr;	/* pointer to process to 
d88 3
a91 1
    register Proc_ControlBlock 	*curProcPtr;
d94 3
d98 2
a99 2
    Boolean 			insert;
    Boolean 			foundInsertPoint;
d101 1
d108 75
d185 3
a187 2
     * running process.  If the new process has higher priority (lower
     * usage), then force the current process to context switch. 
d196 10
a205 5
    curProcPtr = Proc_GetCurrentProc();
    if ((curProcPtr != (Proc_ControlBlock *) NIL) &&
	    (procPtr->weightedUsage < curProcPtr->weightedUsage)) {
	curProcPtr->schedFlags |= SCHED_CONTEXT_SWITCH_PENDING;
	curProcPtr->specialHandling = 1;
d207 6
a212 2

    queuePtr = schedReadyQueueHdrPtr;
d215 1
a215 2
	 * If the list is empty then put this process into the queue and
	 * return.  No need to search an empty list.
d217 8
a224 9
	queuePtr->nextPtr = (List_Links *)procPtr;
	queuePtr->prevPtr = (List_Links *)procPtr;
	((List_Links *)(procPtr))->nextPtr = queuePtr;
	((List_Links *)(procPtr))->prevPtr = queuePtr;
	/*
	List_Insert((List_Links *) procPtr, LIST_ATREAR(queuePtr));
	*/
	sched_Instrument.numReadyProcesses = 1;
	return;
a229 5
     * While looping through the list, search for the process to see whether
     * it already is in the queue.  If so, set insert = FALSE to indicate that
     * the process should be removed from its current position before being
     * placed in its correct position.
     *
a234 1

d236 1
d238 1
d241 1
a241 1
	    insert = FALSE;
d243 1
a243 1
	if (foundInsertPoint && !insert) {
d250 1
a250 3
	    /*
	     * If no change in position, return.
	     */
d252 4
a255 2
		(List_Links *) itemProcPtr && !insert) {
		return;
a256 1
	    followingItemPtr = (List_Links *) itemProcPtr;
a259 5
    if (!insert) {
	List_Remove((List_Links *) procPtr);
    } else {
	sched_Instrument.numReadyProcesses += 1;
    }
d261 1
a261 67
	List_Insert((List_Links *) procPtr,
			     LIST_BEFORE(followingItemPtr));
    } else {
	/*
	 * Process goes at end of queue.
	 */
	List_Insert((List_Links *) procPtr, LIST_ATREAR(queuePtr));
    }
}



/*
 * ----------------------------------------------------------------------------
 *
 * Sched_InsertInQueue --
 *
 *	Given a pointer to a process, move it in the run queue (or insert
 *	it if it is not already there) based on its current weighted usage.
 *	If the process is of higher priority than the current process,
 *	flag the current process as having a pending context switch.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Process is moved within or added to the run queue.  If the process
 *	is added, the global count of the number of ready processes is
 *	incremented.
 *
 * ----------------------------------------------------------------------------
 */

INTERNAL Proc_ControlBlock *
Sched_InsertInQueue(procPtr, returnProc)
    register Proc_ControlBlock	*procPtr;	/* pointer to process to 
						   move/insert */
    Boolean			returnProc;	/* TRUE => return a runnable
						 * 	   process if there is
						 *	   one. */
{
    register Proc_ControlBlock 	*itemProcPtr;
    register List_Links		*queuePtr;

    if (procPtr->schedFlags & SCHED_CLEAR_USAGE) {
	procPtr->recentUsage = 0;
	procPtr->weightedUsage = 0;
	procPtr->unweightedUsage = 0;
    }

    /*
     * Compare the process's weighted usage to the usage of the currently
     * running process.  If the new process has higher priority (lower
     * usage), then force the current process to context switch.  
     * The context switch will occur in one of two places. 
     * 1) If we are being called at interrupt level, and the interrupt occurred
     *    in user mode, then the context switch will occur prior to returning 
     *	  to user mode. (the CallInterruptHandler macro checks the 
     *    specialHandling flag)
     * 2) The next time the current process enters a trap handler.
     *
     */
    itemProcPtr = Proc_GetCurrentProc();
    if ((itemProcPtr != (Proc_ControlBlock *) NIL) &&
	    (procPtr->weightedUsage < itemProcPtr->weightedUsage)) {
	itemProcPtr->schedFlags |= SCHED_CONTEXT_SWITCH_PENDING;
	itemProcPtr->specialHandling = 1;
a262 2

    queuePtr = schedReadyQueueHdrPtr;
d264 1
a264 2
     * Loop through all elements in the run queue.  Search for the first
     * process with a weighted usage greater than the process being inserted.
d266 3
a268 4
    LIST_FORALL(queuePtr, (List_Links *) itemProcPtr) {
	if (procPtr->weightedUsage < itemProcPtr->weightedUsage) {
	    break;
	}
d270 2
a271 6
    itemProcPtr = (Proc_ControlBlock *)LIST_BEFORE(itemProcPtr);
    if (returnProc) {
	/*
	 * We are supposed to return the next process to run.
	 */
	if (List_IsEmpty(queuePtr) || (List_Links *)itemProcPtr == queuePtr) {
d273 1
a273 1
	     * We are the only process or we are being inserted at the front
d276 10
a285 1
	    return(procPtr);
d287 1
a287 24
	    /*
	     * Insert the current process in the queue and return the first 
	     * process on the queue.
	     */
	/*
	    List_Insert((List_Links *) procPtr, itemProcPtr);
	*/
	    ((List_Links *)procPtr)->nextPtr = 
					((List_Links *)itemProcPtr)->nextPtr;
	    ((List_Links *)procPtr)->prevPtr = 
					((List_Links *)itemProcPtr);
	    ((List_Links *)itemProcPtr)->nextPtr->prevPtr = 
					((List_Links *)procPtr);
	    ((List_Links *)itemProcPtr)->nextPtr =
					((List_Links *)procPtr);
	    procPtr = (Proc_ControlBlock *)List_First(queuePtr);
	/*
	    List_Remove((List_Links *)procPtr);
	 */
	    ((List_Links *)procPtr)->prevPtr->nextPtr =
					    ((List_Links *)procPtr)->nextPtr;
	    ((List_Links *)procPtr)->nextPtr->prevPtr =
					    ((List_Links *)procPtr)->prevPtr;
	    return(procPtr);
a288 1
    } else {
d290 1
d292 9
a300 7
	List_Insert((List_Links *) procPtr, itemProcPtr);
    */
	((List_Links *)procPtr)->nextPtr = ((List_Links *)itemProcPtr)->nextPtr;
	((List_Links *)procPtr)->prevPtr = ((List_Links *)itemProcPtr);
	((List_Links *)itemProcPtr)->nextPtr->prevPtr = ((List_Links *)procPtr);
	((List_Links *)itemProcPtr)->nextPtr = ((List_Links *)procPtr);
	return((Proc_ControlBlock *)NIL);
@


8.1
log
@deleted sched_DoContextSwitch -- it is no longer needed because 
the interrupt handler checks the specialHandling field
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 8.0 88/11/11 18:37:01 douglis Stable Locker: jhh $ SPRITE (Berkeley)";
d50 1
a50 1
    MASTER_LOCK(sched_Mutex);
d52 1
a52 1
    MASTER_UNLOCK(sched_Mutex);
@


8.0
log
@Changing version numbers.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 6.4 88/10/30 21:06:36 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
d98 8
a105 9
     * usage), then force the current process to context switch.  There
     * are two cases:
     *	(1) We are being called at interrupt level, in which case if the
     *      current process was in user mode it is safe (and necessary)
     *	    to set sched_DoContextSwitch directly.  This is because
     *	    the interrupt handler doesn't deal with the schedFlags.
     *  (2) Otherwise, the best thing we can do is to make sure the
     *      current process switches the next time it comes into the
     *      trap handler.
a109 3
	if (Mach_AtInterruptLevel() && !Mach_KernelMode()) {
	    sched_DoContextSwitch = TRUE;
	} 
d228 8
a235 9
     * usage), then force the current process to context switch.  There
     * are two cases:
     *	(1) We are being called at interrupt level, in which case if the
     *      current process was in user mode it is safe (and necessary)
     *	    to set sched_DoContextSwitch directly.  This is because
     *	    the interrupt handler doesn't deal with the schedFlags.
     *  (2) Otherwise, the best thing we can do is to make sure the
     *      current process switches the next time it comes into the
     *      trap handler.
a239 3
	if (Mach_AtInterruptLevel() && !Mach_KernelMode()) {
	    sched_DoContextSwitch = TRUE;
	} 
@


6.4
log
@multiprocessor port
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: /sprite/src/kernel/sched/RCS/schedQueue.c,v 6.3 88/10/17 17:04:10 mendel Exp Locker: jhh $ SPRITE (Berkeley)";
@


6.3
log
@Change mach_KernelMode and mach_AtInterruptLevel to use macros.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 6.2 88/08/26 11:22:24 douglis Exp $ SPRITE (Berkeley)";
d165 2
a166 1
	    if (itemProcPtr == procPtr) {
a310 1

@


6.2
log
@fixed the endif's.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 6.1 88/08/23 16:55:47 douglis Exp $ SPRITE (Berkeley)";
d111 1
a111 1
	if (mach_AtInterruptLevel && !mach_KernelMode) {
d244 1
a244 1
	if (mach_AtInterruptLevel && !mach_KernelMode) {
@


6.1
log
@Got rid of some lint.
@
text
@d12 2
a13 2
static char rcsid[] = "$Header: schedQueue.c,v 6.0 88/08/11 12:26:17 brent Stable $ SPRITE (Berkeley)";
#endif not lint
@


6.0
log
@Changing version numbers.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 5.4 88/05/05 17:59:30 nelson Exp $ SPRITE (Berkeley)";
a87 1
    ReturnStatus 		status;
@


5.4
log
@Handles move of functionality from sys to mach.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 5.3 88/04/13 11:28:05 ouster Exp $ SPRITE (Berkeley)";
@


5.3
log
@Changes to make kernel calls much faster.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 5.2 88/03/08 16:10:28 nelson Exp $ SPRITE (Berkeley)";
d17 1
d49 1
a49 1
    procPtr = Proc_GetCurrentProc(Sys_GetProcessorNumber());
d109 1
a109 1
    curProcPtr = Proc_GetCurrentProc(Sys_GetProcessorNumber());
d112 1
a112 1
	if (sys_AtInterruptLevel && !sys_KernelMode) {
d242 1
a242 1
    itemProcPtr = Proc_GetCurrentProc(Sys_GetProcessorNumber());
d245 1
a245 1
	if (sys_AtInterruptLevel && !sys_KernelMode) {
@


5.2
log
@Optimized the context switch code.  Mostly inlined stuff like
the List routines.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 5.1 88/02/08 13:55:04 nelson Exp $ SPRITE (Berkeley)";
d115 1
d248 1
@


5.1
log
@Moved reseting of usage flags before makes scheduling decision.
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 5.0 87/08/11 10:49:40 sprite Exp $ SPRITE (Berkeley)";
d81 6
a86 12
    register Proc_ControlBlock 	*curProcPtr;		/* Pointer to currently
							 * running process */
    register List_Links		*followingItemPtr;	/* Pointer to item that
							 * will follow one being
						         * moved/inserted */
    register Proc_ControlBlock 	*itemProcPtr;		/* Pointer to 
							 * corresponding process
						   	 * table entry */
    Boolean 			insert = TRUE;		/* TRUE if process is 
							 * to be inserted */
    Boolean 			foundInsertPoint = FALSE;/* TRUE once we know 
							  * where to insert */
d89 4
a92 2
    if (!sched_Mutex) {
	Sys_Panic(SYS_FATAL, "Sched_MoveInQueue: master lock not held.\n");
a107 7

    if (procPtr->schedFlags & SCHED_CLEAR_USAGE) {
	procPtr->recentUsage = 0;
	procPtr->weightedUsage = 0;
	procPtr->unweightedUsage = 0;
    }

d117 16
d148 3
a150 1
    LIST_FORALL(schedReadyQueueHdrPtr, (List_Links *) itemProcPtr) {
d183 1
a183 2
	List_Insert((List_Links *) procPtr,
			     LIST_ATREAR(schedReadyQueueHdrPtr));
d187 1
d192 1
a192 1
 * Sched_GetRunnableProcess --
d194 4
a197 2
 *	Return a pointer to the process table entry for the READY process with
 *	the least weighted usage.
a198 3
 *	The queue is already sorted by weighted usage, so take the first
 *	ready process in the queue.
 *
d200 1
a200 1
 *	Pointer to runnable process.
d203 3
a205 2
 *	Process is removed from the ready queue, and the global count of the
 *	number of ready processes is decremented.
d211 6
a216 1
Sched_GetRunnableProcess()
d218 2
a219 4
    register Proc_ControlBlock	*procPtr; 	/* Pointer to corresponding 
						 * process table entry */
    register List_Links		*queuePtr;	/* Pointer to sched ready 
						 * queue. */
d221 28
d250 8
a257 2
    if (List_IsEmpty(queuePtr)) {
	return((Proc_ControlBlock *) NIL);
d259 47
a305 3
    procPtr = (Proc_ControlBlock *) List_First(queuePtr);
    if (procPtr->state != PROC_READY) {
	Sys_Panic(SYS_FATAL, "Non-ready process found in ready queue.\n");
a306 3
    List_Remove((List_Links *) procPtr);
    sched_Instrument.numReadyProcesses -= 1;
    return(procPtr);
d308 1
@


5.0
log
@First Sprite native copy
@
text
@d12 1
a12 1
static char rcsid[] = "$Header: schedQueue.c,v 4.3 87/05/29 13:50:28 nelson Exp $ SPRITE (Berkeley)";
d113 5
a125 6
    }

    if (procPtr->schedFlags & SCHED_CLEAR_USAGE) {
	procPtr->recentUsage = 0;
	procPtr->weightedUsage = 0;
	procPtr->unweightedUsage = 0;
@
