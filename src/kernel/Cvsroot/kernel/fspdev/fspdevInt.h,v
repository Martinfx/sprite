head     9.7;
branch   ;
access   ;
symbols  ds3100:9.7 sun3:9.7 sprited:9.4.1 sun4nw:9.6 symm:9.6 spur:9.6 Summer89:9.0 newlib:8.0;
locks    ; strict;
comment  @ * @;


9.7
date     92.10.26.14.05.48;  author mgbaker;  state Exp;
branches ;
next     9.6;

9.6
date     91.09.24.12.45.30;  author mgbaker;  state Exp;
branches ;
next     9.5;

9.5
date     91.09.06.15.57.35;  author mottsmth;  state Exp;
branches ;
next     9.4;

9.4
date     91.06.26.01.06.44;  author mottsmth;  state Exp;
branches 9.4.1.1;
next     9.3;

9.3
date     90.12.06.21.56.26;  author jhh;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.08.12.46.55;  author mendel;  state Exp;
branches ;
next     9.1;

9.1
date     89.10.23.09.55.08;  author brent;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.08.45;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.08.21.15.28.15;  author mendel;  state Exp;
branches ;
next     8.1;

8.1
date     89.08.15.18.43.16;  author rab;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.25.20;  author douglis;  state Stable;
branches ;
next     7.0;

7.0
date     88.11.07.14.47.53;  author brent;  state Exp;
branches ;
next     1.2;

1.2
date     88.10.14.12.19.42;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.10.10.13.16.45;  author brent;  state Exp;
branches ;
next     ;

9.4.1.1
date     91.11.15.16.29.44;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Defines FsPdevState.  Needed to avoid circularity in inclusions if
fsNameOps.h includes fsPdev.h, which includes dev/pdev.h, which
includes fsNameOps.h.
@


9.7
log
@Support for bulk reopen rpcs.
@
text
@/*
 * fspdevInt.h --
 *
 *	Declarations for pseudo-devices and pseudo-filesystems.
 *
 *	A pseudo-device is a file that acts as a communication channel
 *	between a user-level server process (hereafter called the "server"),
 *	and one or more client processes (hereafter called the "clients").
 *	Regular filesystem system calls (Fs_Read, Fs_Write, Fs_IOControl,
 *	Fs_Close) by a client process are forwarded to the server using
 *	a request-response procotol.  The server process can implement any
 *	sort of sementics for the file operations it wants to. The general
 *	format of Fs_IOControl, in particular, lets the server implement
 *	any remote procedure call it cares to define.
 *
 *	A pseudo-filesystem is a whole sub-tree of the filesystem that
 *	is controlled by a user-level server process.  The basic request
 *	response protocol is still used for communication.  In addition to
 *	file access operations, file naming operations are handled by
 *	a pseudo-filesystem server.  The pseudo-filesystem server can
 *	establish pseudo-device like connections for each pseudo-file
 *	that is opened, or it can open regular files and connect its
 *	clients to those files instead.
 *
 *	The user include file <dev/pdev.h> defines the request-response
 *	protocol as viewed by the user-level server process.
 *
 *      The handle definitions have been moved to fspdev.h   JMS
 *
 * Copyright 1987 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: /sprite/src/kernel/Cvsroot/kernel/fspdev/fspdevInt.h,v 9.6 91/09/24 12:45:30 mgbaker Exp $ SPRITE (Berkeley)
 */

#ifndef _FSPDEVINT
#define _FSPDEVINT

#include <trace.h>
#include <dev/pdev.h>
#include <dev/pfs.h>
#include <fsioLock.h>
#include <fspdev.h>

#include <stdio.h>

/*
 * Because there are corresponding control handles on the file server,
 * which records which host has the pdev server, and on the pdev server
 * itself, we need to be able to reopen the control handle on the
 * file server after it reboots.
 */
typedef struct FspdevControlReopenParams {
    Fs_FileID	fileID;		/* FileID of the control handle */
    int		serverID;	/* ServerID recorded in control handle.
				 * This may be NIL if the server closes
				 * while the file server is down. */
    int		seed;		/* Used to create unique pseudo-stream fileIDs*/
} FspdevControlReopenParams;

/*
 * The following control messages are passed internally from the
 * ServerStreamCreate routine to the FspdevControlRead routine.
 * They contain a streamPtr for a new server stream
 * that gets converted to a user-level streamID in FspdevControlRead.
 */

typedef struct FspdevNotify {
    List_Links links;
    Fs_Stream *streamPtr;
} FspdevNotify;

#define PDEV_REQUEST_PRINT(fileIDPtr, requestHdrPtr) \
    switch(requestHdrPtr->operation) {  \
        case PDEV_OPEN: \
            DBG_PRINT( ("Pdev %d,%d: Open  ", (fileIDPtr)->major, \
                                             (fileIDPtr)->minor) ); \
            break;      \
        case PDEV_READ: \
            DBG_PRINT( ("Pdev %d,%d: Read  ", (fileIDPtr)->major, \
                                             (fileIDPtr)->minor) ); \
            break;      \
        case PDEV_WRITE:        \
            DBG_PRINT( ("Pdev %d,%d: Write ", (fileIDPtr)->major, \
                                             (fileIDPtr)->minor) ); \
            break;      \
        case PDEV_CLOSE:        \
            DBG_PRINT( ("Pdev %d,%d: Close ", (fileIDPtr)->major, \
                                             (fileIDPtr)->minor) ); \
            break;      \
        case PDEV_IOCTL:        \
            DBG_PRINT( ("Pdev %d,%d: Ioctl ", (fileIDPtr)->major, \
                                             (fileIDPtr)->minor) ); \
            break;      \
        default:        \
            DBG_PRINT( ("Pdev %d,%d: ?!?   ", (fileIDPtr)->major, \
                                             (fileIDPtr)->minor) ); \
            break;      \
    }

/*
 * These are the trace macros left over from -DCLEAN.  We no longer have
 * pdev tracing, but some folks find it useful to see the macro calls in
 * the code, so we're leaving those there and thus these empty defitions
 * here.
 */
#define DBG_PRINT(fmt)

#define PDEV_TRACE(fileIDPtr, event)
#define PDEV_REQUEST(fileIDPtr, requestHdrPtr)
#define PDEV_REPLY(fileIDPtr, replyPtr)
#define PDEV_TSELECT(fileIDPtr, read, write, except)
#define PDEV_WAKEUP(fileIDPtr, waitInfoPtr, selectBits)

/*
 * Internal Pdev routines
 */
extern ReturnStatus FspdevSignalOwner _ARGS_((
		Fspdev_ControlIOHandle *ctrlHandlePtr, Fs_IOCParam *ioctlPtr));
extern Fspdev_ClientIOHandle *FspdevConnect _ARGS_((
		Fspdev_ControlIOHandle *ctrlHandlePtr, Fs_FileID *ioFileIDPtr,
		int clientID, Boolean naming));

/*
 * File server open-time routines.
 */
extern ReturnStatus FspdevNameOpen _ARGS_((Fsio_FileIOHandle *handlePtr,
		Fs_OpenArgs *openArgsPtr, Fs_OpenResults *openResultsPtr));
extern ReturnStatus FspdevRmtLinkNameOpen _ARGS_((Fsio_FileIOHandle *handlePtr,
		Fs_OpenArgs *openArgsPtr, Fs_OpenResults *openResultsPtr));
/*
 * Control Stream routines.
 */
extern Fspdev_ControlIOHandle *FspdevControlHandleInit _ARGS_((
		Fs_FileID *fileIDPtr, char *name));
extern ReturnStatus FspdevControlIoOpen _ARGS_((Fs_FileID *ioFileIDPtr, 
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
extern ReturnStatus FspdevControlSelect _ARGS_((Fs_HandleHeader *hdrPtr, 
		Sync_RemoteWaiter *waitPtr, int *readPtr, int *writePtr, 
		int *exceptPtr));
extern ReturnStatus FspdevControlRead _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOParam *readPtr, Sync_RemoteWaiter *waitPtr, 
		Fs_IOReply *replyPtr));
extern ReturnStatus FspdevControlIOControl _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOCParam *ioctlPtr, Fs_IOReply *replyPtr));
extern ReturnStatus FspdevControlGetIOAttr _ARGS_((Fs_FileID *fileIDPtr, 
		int clientID, Fs_Attributes *attrPtr));
extern ReturnStatus FspdevControlSetIOAttr _ARGS_((Fs_FileID *fileIDPtr, 
		Fs_Attributes *attrPtr, int flags));
extern Fs_HandleHeader *FspdevControlVerify _ARGS_((Fs_FileID *fileIDPtr, 
		int pdevServerHostID, int *domainTypePtr));
extern ReturnStatus FspdevControlReopen _ARGS_((Fs_HandleHeader *hdrPtr,
		int clientID, ClientData inData, int *outSizePtr, 
		ClientData *outDataPtr));
extern ReturnStatus FspdevSetupControlReopen _ARGS_((Fs_HandleHeader *hdrPtr,
		Address paramsPtr));
extern void FspdevFinishControlReopen _ARGS_((Fs_HandleHeader *hdrPtr,
		Address statePtr, ReturnStatus status));
extern ReturnStatus FspdevControlClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size,
		ClientData data));
extern void FspdevControlClientKill _ARGS_((Fs_HandleHeader *hdrPtr,
		int clientID));
extern Boolean FspdevControlScavenge _ARGS_((Fs_HandleHeader *hdrPtr));
/*
 * Pfs Control Stream routines.
 */
extern ReturnStatus FspdevPfsIoOpen _ARGS_((Fs_FileID *ioFileIDPtr,
		int *flagsPtr, int clientID, ClientData streamData,
		char *name, Fs_HandleHeader **ioHandlePtrPtr));
/*
 * Server stream routines.
 */
extern ReturnStatus FspdevServerStreamSelect _ARGS_((Fs_HandleHeader *hdrPtr,
		Sync_RemoteWaiter *waitPtr, int *readPtr, int *writePtr, 
		int *exceptPtr));
extern ReturnStatus FspdevServerStreamRead _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOParam *readPtr, Sync_RemoteWaiter *waitPtr,
		Fs_IOReply *replyPtr));
extern ReturnStatus FspdevServerStreamIOControl _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOCParam *ioctlPtr, Fs_IOReply *replyPtr));
extern ReturnStatus FspdevServerStreamClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size, 
		ClientData data));
/*
 * Pseudo-device (client-side) streams
 */
extern ReturnStatus FspdevPseudoStreamIoOpen _ARGS_(( Fs_FileID *ioFileIDPtr,
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
extern ReturnStatus FspdevPseudoStreamOpen _ARGS_((
		Fspdev_ServerIOHandle *pdevHandlePtr, int flags, int clientID, 
		Proc_PID procID, int userID));
extern ReturnStatus FspdevPseudoStreamRead _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOParam *readPtr, Sync_RemoteWaiter *waitPtr, 
		Fs_IOReply *replyPtr));
extern ReturnStatus FspdevPseudoStreamWrite _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOParam *writePtr, Sync_RemoteWaiter *waitPtr, 
		Fs_IOReply *replyPtr));
extern ReturnStatus FspdevPseudoStreamIOControl _ARGS_((Fs_Stream *streamPtr, 
		Fs_IOCParam *ioctlPtr, Fs_IOReply *replyPtr));
extern ReturnStatus FspdevPseudoStreamSelect _ARGS_((Fs_HandleHeader *hdrPtr,
		Sync_RemoteWaiter *waitPtr, int *readPtr, int *writePtr,
		int *exceptPtr));
extern ReturnStatus FspdevPseudoStreamGetIOAttr _ARGS_((Fs_FileID *fileIDPtr, 
		int clientID,   Fs_Attributes *attrPtr));
extern ReturnStatus FspdevPseudoStreamSetIOAttr _ARGS_((Fs_FileID *fileIDPtr,
		Fs_Attributes *attrPtr, int flags));
extern ReturnStatus FspdevPseudoStreamMigClose _ARGS_((Fs_HandleHeader *hdrPtr,
		int flags));
extern ReturnStatus FspdevPseudoStreamMigrate _ARGS_((Fsio_MigInfo *migInfoPtr,
		int dstClientID, int *flagsPtr, int *offsetPtr, int *sizePtr,
		Address *dataPtr));
extern ReturnStatus FspdevPseudoStreamMigOpen _ARGS_((Fsio_MigInfo *migInfoPtr,
		int size, ClientData data, Fs_HandleHeader **hdrPtrPtr));
extern ReturnStatus FspdevPseudoStreamClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size,
		ClientData data));
extern void FspdevPseudoStreamCloseInt _ARGS_((	
		Fspdev_ServerIOHandle *pdevHandlePtr));

extern Fspdev_ServerIOHandle *FspdevServerStreamCreate _ARGS_((
		Fs_FileID *ioFileIDPtr, char *name, Boolean naming));

/*
 * Remote pseudo-device streams
 */
extern ReturnStatus FspdevRmtPseudoStreamIoOpen _ARGS_((Fs_FileID *ioFileIDPtr,
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
extern Fs_HandleHeader *FspdevRmtPseudoStreamVerify _ARGS_((
		Fs_FileID *fileIDPtr, int clientID, int *domainTypePtr));
extern ReturnStatus FspdevRmtPseudoStreamMigrate _ARGS_((
		Fsio_MigInfo *migInfoPtr, int dstClientID, int *flagsPtr,
		int *offsetPtr, int *sizePtr, Address *dataPtr));
extern ReturnStatus FspdevRmtPseudoStreamClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size,
		ClientData data));
/*
 * Local and remote pseudo-device streams to pseudo-file-systems
 */
extern ReturnStatus FspdevPfsStreamIoOpen _ARGS_((Fs_FileID *ioFileIDPtr, 
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
extern ReturnStatus FspdevRmtPfsStreamIoOpen _ARGS_((Fs_FileID *ioFileIDPtr, 
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
/*
 * Naming Stream routines.
 */
extern ReturnStatus FspdevPfsExport _ARGS_((Fs_HandleHeader *hdrPtr,
		int clientID, register Fs_FileID *ioFileIDPtr, 
		int *dataSizePtr, ClientData *clientDataPtr));
extern ReturnStatus FspdevPfsNamingIoOpen _ARGS_((Fs_FileID *ioFileIDPtr,
		int *flagsPtr, int clientID, ClientData streamData, char *name,
		Fs_HandleHeader **ioHandlePtrPtr));
/*
 * Pseudo-file-system naming routines.
 */
extern ReturnStatus FspdevPfsOpen _ARGS_((Fs_HandleHeader *prefixHandle,
		char *relativeName, Address argsPtr, Address resultsPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsGetAttrPath _ARGS_((Fs_HandleHeader *prefixHandle,
		char *relativeName, Address argsPtr, Address resultsPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsSetAttrPath _ARGS_((Fs_HandleHeader *prefixHandle,
		char *relativeName, Address argsPtr, Address resultsPtr,
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsMakeDir _ARGS_((Fs_HandleHeader *prefixHandle,
		char *relativeName, Address argsPtr, Address resultsPtr,
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsMakeDevice _ARGS_((Fs_HandleHeader *prefixHandle, 
		char *relativeName, Address argsPtr, Address resultsPtr,
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsRemove _ARGS_((Fs_HandleHeader *prefixHandle,
		char *relativeName, Address argsPtr, Address resultsPtr,
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsRemoveDir _ARGS_((Fs_HandleHeader *prefixHandle,
		char *relativeName, Address argsPtr, Address resultsPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr));
extern ReturnStatus FspdevPfsRename _ARGS_((Fs_HandleHeader *prefixHandle1,
		char *relativeName1, Fs_HandleHeader *prefixHandle2,
		char *relativeName2, Fs_LookupArgs *lookupArgsPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr, Boolean *name1ErrorPtr));
extern ReturnStatus FspdevPfsHardLink _ARGS_((Fs_HandleHeader *prefixHandle1,
		char *relativeName1, Fs_HandleHeader *prefixHandle2,
		char *relativeName2, Fs_LookupArgs *lookupArgsPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr, Boolean *name1ErrorPtr));
extern ReturnStatus FspdevPfs2Path _ARGS_((Pdev_Op operation, 
		Fs_HandleHeader *prefixHandle1, char *relativeName1, 
		Fs_HandleHeader *prefixHandle2, char *relativeName2,
		Fs_LookupArgs *lookupArgsPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr, Boolean *name1ErrorPtr));
extern ReturnStatus FspdevPseudoStream2Path _ARGS_((
		Fspdev_ServerIOHandle *pdevHandlePtr, Pfs_Request *requestPtr,
		Fs_2PathData *dataPtr, Boolean *name1ErrorPtr, 
		Fs_RedirectInfo **newNameInfoPtrPtr));

extern ReturnStatus FspdevPseudoStreamLookup _ARGS_((
		Fspdev_ServerIOHandle *pdevHandlePtr, Pfs_Request *requestPtr,
		int argSize, Address argsPtr, int *resultsSizePtr, 
		Address resultsPtr, Fs_RedirectInfo **newNameInfoPtrPtr));

/*
 * Pseudo-file-system routines given an open file.
 */
extern ReturnStatus FspdevPseudoGetAttr _ARGS_((Fs_FileID *fileIDPtr, 
		int clientID, Fs_Attributes *attrPtr));
extern ReturnStatus FspdevPseudoSetAttr _ARGS_((Fs_FileID *fileIDPtr, 
		Fs_Attributes *attrPtr, Fs_UserIDs *idPtr, int flags));

extern Boolean FspdevPdevServerOK _ARGS_((Fspdev_ServerIOHandle *pdevHandlePtr));

extern ReturnStatus FspdevPassStream _ARGS_((Fs_FileID *ioFileIDPtr,
		int *flagsPtr, int clientID, ClientData streamData, 
		char *name, Fs_HandleHeader **ioHandlePtrPtr));


extern int FspdevPfsOpenConnection _ARGS_((
		Fspdev_ServerIOHandle *namingPdevHandlePtr, 
		Fs_FileID *srvrFileIDPtr, Fs_OpenResults *openResultsPtr));

#endif _FSPDEVINT
@


9.6
log
@Removed some SOSP and other tracing stuff.
@
text
@d34 1
a34 1
 * $Header: /sprite/src/kernel/fspdev/RCS/fspdevInt.h,v 9.5 91/09/06 15:57:35 mottsmth Exp Locker: mgbaker $ SPRITE (Berkeley)
d157 4
@


9.5
log
@Fix sticky segment handling for pseudo file system execution
@
text
@d34 1
a34 1
 * $Header: /sprite/src/kernel/fspdev/RCS/fspdevInt.h,v 9.4 91/06/26 01:06:44 mottsmth Exp $ SPRITE (Berkeley)
a73 76
/*
 * The following types and macros are used to take pdev traces.
 */
typedef enum { PDEVT_NIL, PDEVT_SRV_OPEN, PDEVT_CLT_OPEN, PDEVT_READ_AHEAD,
	       PDEVT_SRV_CLOSE, PDEVT_CLT_CLOSE, PDEVT_READ_WAIT, 
	       PDEVT_WAKEUP, PDEVT_REQUEST, PDEVT_REPLY,
	       PDEVT_SRV_READ, PDEVT_SRV_READ_WAIT, PDEVT_SRV_WRITE,
	       PDEVT_SRV_SELECT, PDEVT_CNTL_READ, PDEVT_WAIT_LIST,
	       PDEVT_SELECT} FspdevTraceRecType ;

typedef struct FspdevTraceRecord {
    int index;
    Fs_FileID fileID;
    union {
	Pdev_RequestHdr	requestHdr;
	Pdev_Reply	reply;
	int		selectBits;
	struct WaitTrace {
	    int		selectBits;
	    Proc_PID	procID;
	} wait;
	Fsio_UseCounts	use;
    } un;
} FspdevTraceRecord;

#ifndef CLEAN

#define PDEV_TRACE(fileIDPtr, event) \
    if (fspdevTracing) { \
	FspdevTraceRecord rec; \
	rec.index = ++fspdevTraceIndex; \
	rec.fileID = *(fileIDPtr); \
	Trace_Insert(fspdevTraceHdrPtr, event, (ClientData)&rec);	\
    }

#define PDEV_REQUEST(fileIDPtr, requestHdrPtr) \
    if (fspdevTracing) {							\
	FspdevTraceRecord rec; \
	rec.index = ++fspdevTraceIndex; \
	rec.fileID = *(fileIDPtr); \
	rec.un.requestHdr = *(requestHdrPtr); \
	Trace_Insert(fspdevTraceHdrPtr, PDEVT_REQUEST, (ClientData)&rec);\
    }

#define PDEV_REPLY(fileIDPtr, replyPtr) \
    if (fspdevTracing) {							\
	FspdevTraceRecord rec; \
	rec.index = ++fspdevTraceIndex; \
	rec.fileID = *(fileIDPtr); \
	rec.un.reply = *(replyPtr); \
	Trace_Insert(fspdevTraceHdrPtr, PDEVT_REPLY, (ClientData)&rec);\
    }

#define PDEV_TSELECT(fileIDPtr, read, write, except) \
    if (fspdevTracing) {							\
	FspdevTraceRecord rec; \
	rec.index = ++fspdevTraceIndex; \
	rec.fileID = *(fileIDPtr); \
	rec.un.selectBits = 0; \
	if (read) { rec.un.selectBits |= FS_READABLE; } \
	if (write) { rec.un.selectBits |= FS_WRITABLE; } \
	if (except) { rec.un.selectBits |= FS_EXCEPTION; } \
	Trace_Insert(fspdevTraceHdrPtr, PDEVT_SELECT, (ClientData)&rec);\
    }

#define PDEV_WAKEUP(fileIDPtr, zprocID, zselectBits) \
    if (fspdevTracing) {							\
	FspdevTraceRecord rec; \
	rec.index = ++fspdevTraceIndex; \
	rec.fileID = *(fileIDPtr); \
	rec.un.wait.selectBits = zselectBits; \
	rec.un.wait.procID = zprocID; \
	Trace_Insert(fspdevTraceHdrPtr, PDEVT_WAKEUP, (ClientData)&rec);\
    }
#define DBG_PRINT(fmt)	if (fspdev_Debug) { printf fmt ; }

d75 32
a106 30
    switch(requestHdrPtr->operation) {	\
	case PDEV_OPEN:	\
	    DBG_PRINT( ("Pdev %d,%d: Open  ", (fileIDPtr)->major, \
					     (fileIDPtr)->minor) ); \
	    break;	\
	case PDEV_READ:	\
	    DBG_PRINT( ("Pdev %d,%d: Read  ", (fileIDPtr)->major, \
					     (fileIDPtr)->minor) ); \
	    break;	\
	case PDEV_WRITE:	\
	    DBG_PRINT( ("Pdev %d,%d: Write ", (fileIDPtr)->major, \
					     (fileIDPtr)->minor) ); \
	    break;	\
	case PDEV_CLOSE:	\
	    DBG_PRINT( ("Pdev %d,%d: Close ", (fileIDPtr)->major, \
					     (fileIDPtr)->minor) ); \
	    break;	\
	case PDEV_IOCTL:	\
	    DBG_PRINT( ("Pdev %d,%d: Ioctl ", (fileIDPtr)->major, \
					     (fileIDPtr)->minor) ); \
	    break;	\
	default:	\
	    DBG_PRINT( ("Pdev %d,%d: ?!?   ", (fileIDPtr)->major, \
					     (fileIDPtr)->minor) ); \
	    break;	\
    }
#else
/*
 * Compiling with -DCLEAN will zap the if statements and procedure
 * calls defined by the above macros
a115 2
#endif not CLEAN

a125 9
 * Definitions for a trace of the request-response protocol.
 */
extern Trace_Header fspdevTraceHdr;
extern Trace_Header *fspdevTraceHdrPtr;
extern int fspdevTraceLength;
extern Boolean fspdevTracing;
extern int fspdevMaxTraceDataSize;
extern int fspdevTraceIndex;
/*
a156 5
#ifdef SOSP91
extern ReturnStatus FspdevControlClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size,
		ClientData data, int *offsetPtr, int *rwFlagsPtr));
#else
a159 1
#endif
a179 1
#ifdef SOSP91
a181 4
		ClientData data, int *offsetPtr, int *rwFlagsPtr));
#else
extern ReturnStatus FspdevServerStreamClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size, 
a182 1
#endif
a213 5
#ifdef SOSP91
extern ReturnStatus FspdevPseudoStreamClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size,
		ClientData data, int *offsetPtr, int *rwFlagsPtr));
#else
a216 1
#endif
a233 5
#ifdef SOSP91
extern ReturnStatus FspdevRmtPseudoStreamClose _ARGS_((Fs_Stream *streamPtr, 
		int clientID, Proc_PID procID, int flags, int size,
		ClientData data, int *offsetPtr, int *rwFlagsPtr));
#else
a236 1
#endif
@


9.4
log
@ Allow execution of PFS files
@
text
@d34 1
a34 1
 * $Header: /sprite/src/kernel/fspdev/RCS/fspdevInt.h,v 9.3 90/12/06 21:56:26 jhh Exp $ SPRITE (Berkeley)
d337 9
@


9.4.1.1
log
@Initial branch for Sprite server.
@
text
@d34 1
a34 1
 * $Header: /sprite/src/kernel/Cvsroot/kernel/fspdev/fspdevInt.h,v 9.4 91/06/26 01:06:44 mottsmth Exp $ SPRITE (Berkeley)
@


9.3
log
@Added sosp tracing code
@
text
@d28 2
d34 1
a34 1
 * $Header: /sprite/src/kernel/fspdev/RCS/fspdevInt.h,v 9.2 90/10/08 12:46:55 mendel Exp Locker: jhh $ SPRITE (Berkeley)
a42 2
#include <fsprefix.h>
#include <fsrmt.h>
a48 45
 * Both the pseudo-device and pseudo-filesystem implementation use a
 * control stream to note what host runs the master, and to keep a seed.
 * With pseudo-devices the control IO handle is hooked to a stream that
 * is returned to the server, and the server reads new streamIDs off
 * of this stream.  With pseudo-filesystems the server gets new streamIDs
 * via IOC_PFS_OPEN, instead, and the control stream is used to keep
 * a pointer to the prefix table entry that represents the pseudo-filesystem.
 *
 * There is a control handle kept on both on the file server and on the
 * host running the server process.  The one on the file server is used
 * by the SrvOpen routine to detect if a master exists, and the one on
 * the server's host is used for control messages, and it also is used
 * to detect if the server process is still alive (by looking at serverID).
 */
typedef struct FspdevControlIOHandle {
    Fsrmt_IOHandle rmt;	/* FSIO_CONTROL_STREAM or FSIO_PFS_CONTROL_STREAM.
				 * This is a remote I/O handle in order to do
				 * a remote close to the name server so
				 * the serverID field gets cleaned up right. */
    int serverID;		/* Host ID of server process.  If NIL it
				 * means there is no server.  This is kept */
    int	seed;			/* Used to make FileIDs for client handles */
    /*
     * These fields are used to implement reading from a pdev control stream.
     */
    List_Links	queueHdr;	/* Control message queue, pdev's only */
    List_Links readWaitList;	/* So the server can wait for control msgs */
    Fsio_LockState lock;		/* So the server can flock() the pdev file */
    /*
     * Cached I/O attributes.
     */
    int		accessTime;	/* Time of last write operation */
    int		modifyTime;	/* Time of last read operation */
    /*
     *  IOC_SET/GET_OWNER support.
     */
    Ioc_Owner	owner;		/* Owning process or family */
    /*
     * This pointer is used to clean up the prefix table entry that the
     * naming request-response stream is hooked to (pseudo-filesystems)
     */
    Fsprefix *prefixPtr;	/* Prefix of pseudo-filesystem */
} FspdevControlIOHandle;

/*
a74 88
 * Circular buffers are used for a request buffer and a read data buffer.
 * These buffers are in the address space of the server process so the
 * server can access them without system calls.  The server uses I/O controls
 * to change the pointers.
 */
typedef struct FspdevCircBuffer {
    Address data;		/* Location of the buffer in user-space */
    int firstByte;		/* Byte index of first valid data in buffer.
				 * if -1 then the buffer is empty */
    int lastByte;		/* Byte index of last valid data in buffer. */
    int size;			/* Number of bytes in the circular buffer */
} FspdevCircBuffer;

/*
 * FspdevServerIOHandle has the main state for a client-server connection.
 * The client's handle is a stub which just has a pointer to this handle.
 */
typedef struct FspdevServerIOHandle {
    Fs_HandleHeader hdr;		/* Standard header, type FSIO_LCL_PSEUDO_STREAM */
    Sync_Lock lock;		/* Used to synchronize access to this struct. */
    int flags;			/* Flags bits are defined in fsPdev.c */
    int selectBits;		/* Select state of the pseudo-stream */
    Proc_PID serverPID;		/* Server's processID needed for copy out */
    Proc_PID clientPID;		/* Client's processID needed for copy out */
    FspdevCircBuffer	requestBuf;	/* Reference to server's request buffer.
				 * The kernel fills this buffer and the
				 * server takes the requests and data out */
    Address nextRequestBuffer;	/* The address of the next request buffer in
				 * the server's address space to use.  We let
				 * the server change buffers in mid-flight. */
    int nextRequestBufSize;	/* Size of the new request buffer */
    FspdevCircBuffer readBuf;		/* This buffer contains read-ahead data for
				 * the pseudo-device.  The server process puts
				 * data here and the kernel removes it to
				 * satisfy client reads. If non-existent,
				 * the kernel asks the server explicitly for
				 * read data with PDEV_READ requests */
    Pdev_Op operation;		/* Current operation.  Checked when handling
				 * the reply. */
    Pdev_Reply reply;		/* Server's reply message */
    Address replyBuf;		/* Pointer to reply data buffer.  This is in
				 * the client's address space if the
				 * FS_USER flag is set */
    int replySize;		/* Amount of data the client expects returned */
    Sync_Condition setup;	/* This is notified after the server has set
				 * up buffer space for us.  A pseudo stream
				 * can't be used until this is done. */
    Sync_Condition access;	/* Notified after a RequestResponse to indicate
				 * that another client process can use the
				 * pseudo-stream. */
    Sync_Condition caughtUp;	/* This is notified after the server has read
				 * or set the buffer pointers.  The kernel
				 * waits for the server to catch up
				 * before safely resetting the pointers to
				 * the beginning of the buffer */
    Sync_Condition replyReady;	/* Notified after the server has replied */
    List_Links srvReadWaitList;	/* To remember the server process waiting
				 * to read new pointer values. */
    Sync_RemoteWaiter clientWait;/* Client process info for I/O waiting */
    List_Links cltReadWaitList;	/* These lists are used to remember clients */
    List_Links cltWriteWaitList;/*   waiting to read, write, or detect */
    List_Links cltExceptWaitList;/*   exceptions on the pseudo-stream. */
    FspdevControlIOHandle *ctrlHandlePtr;	/* Back pointer to control stream */
    /*
     * The following fields support pseudo-filesystems.
     */
    Fs_FileID	userLevelID;	/* User-defined FileID for connections to
				 * pseudo-filesystem servers.  This is passed
				 * as 'prefixID' of name operation arguments
				 * to represent lookup starting points. */
    struct {			/* Info needed to set up new pdev connection */
	int clientID;		/* Host ID of client doing PFS_OPEN */
	int useFlags;		/* Usage flags of the open */
	char *name;		/* Name of pseudo-file, for handle headers */
    } open;
} FspdevServerIOHandle;

/*
 * The client side stream for a pseudo-device.  This keeps a reference
 * to the server's handle with all the state.
 */
typedef struct FspdevClientIOHandle {
    Fs_HandleHeader	hdr;
    FspdevServerIOHandle	*pdevHandlePtr;
    List_Links		clientList;
} FspdevClientIOHandle;

/*
d196 3
a198 3
		FspdevControlIOHandle *ctrlHandlePtr, Fs_IOCParam *ioctlPtr));
extern FspdevClientIOHandle *FspdevConnect _ARGS_((
		FspdevControlIOHandle *ctrlHandlePtr, Fs_FileID *ioFileIDPtr,
d220 1
a220 1
extern FspdevControlIOHandle *FspdevControlHandleInit _ARGS_((
d287 1
a287 1
		FspdevServerIOHandle *pdevHandlePtr, int flags, int clientID, 
d321 1
a321 1
		FspdevServerIOHandle *pdevHandlePtr));
d323 1
a323 1
extern FspdevServerIOHandle *FspdevServerStreamCreate _ARGS_((
d393 1
a393 1
		FspdevServerIOHandle *pdevHandlePtr, Pfs_Request *requestPtr,
d398 1
a398 1
		FspdevServerIOHandle *pdevHandlePtr, Pfs_Request *requestPtr,
d410 1
a410 1
extern Boolean FspdevPdevServerOK _ARGS_((FspdevServerIOHandle *pdevHandlePtr));
d418 1
a418 1
		FspdevServerIOHandle *namingPdevHandlePtr, 
@


9.2
log
@Fixed include files to use <> rather than "">
Added function prototypes.
Fixed lint.
@
text
@d32 1
a32 1
 * $Header: /sprite/src/kernel/fs.mendel/RCS/fspdevInt.h,v 1.1 90/01/16 17:12:10 mendel Exp Locker: mendel $ SPRITE (Berkeley)
d375 1
d378 4
d383 1
d404 5
d412 1
d444 5
d452 1
@


9.1
log
@Added a replySize to the pdev state so we can
check against the amount of reply data returned
by the server.
@
text
@d2 1
a2 1
 * fspdev.h --
d32 1
a32 1
 * $Header: /sprite/src/kernel/fspdev/RCS/fspdevInt.h,v 8.2 89/08/21 15:28:15 mendel Exp $ SPRITE (Berkeley)
d38 7
a44 6
#include "trace.h"
#include "dev/pdev.h"
#include "fsprefix.h"
#include "fsrmt.h"
#include "fsioLock.h"
#include "fspdev.h"
d46 2
d228 1
a228 1
	Fsutil_UseCounts	use;
d328 5
a332 2
extern ReturnStatus	FspdevSignalOwner();
extern FspdevClientIOHandle *FspdevConnect();
d346 4
a349 2
extern ReturnStatus	FspdevNameOpen();
extern ReturnStatus	FspdevRmtLinkNameOpen();
d353 28
a380 12
extern FspdevControlIOHandle *FspdevControlHandleInit();
extern ReturnStatus	FspdevControlIoOpen();
extern ReturnStatus	FspdevControlRead();
extern ReturnStatus	FspdevControlIOControl();
extern ReturnStatus	FspdevControlSelect();
extern ReturnStatus	FspdevControlGetIOAttr();
extern ReturnStatus	FspdevControlSetIOAttr();
extern Fs_HandleHeader  *FspdevControlVerify();
extern ReturnStatus	FspdevControlReopen();
extern Boolean		FspdevControlScavenge();
extern void		FspdevControlClientKill();
extern ReturnStatus	FspdevControlClose();
d384 3
a386 2
extern ReturnStatus	FspdevPfsIoOpen();
extern Fs_HandleHeader  *FspdevPfsControlVerify();
d390 11
a400 4
extern ReturnStatus	FspdevServerStreamRead();
extern ReturnStatus	FspdevServerStreamIOControl();
extern ReturnStatus	FspdevServerStreamSelect();
extern ReturnStatus	FspdevServerStreamClose();
d404 33
a436 13
extern ReturnStatus	FspdevPseudoStreamIoOpen();
extern ReturnStatus	FspdevPseudoStreamOpen();
extern ReturnStatus	FspdevPseudoStreamRead();
extern ReturnStatus	FspdevPseudoStreamWrite();
extern ReturnStatus	FspdevPseudoStreamIOControl();
extern ReturnStatus	FspdevPseudoStreamSelect();
extern ReturnStatus	FspdevPseudoStreamGetIOAttr();
extern ReturnStatus	FspdevPseudoStreamSetIOAttr();
extern ReturnStatus	FspdevPseudoStreamMigClose();
extern ReturnStatus	FspdevPseudoStreamMigOpen();
extern ReturnStatus	FspdevPseudoStreamMigrate();
extern ReturnStatus	FspdevPseudoStreamClose();
extern void		FspdevPseudoStreamCloseInt();
d438 2
a439 1
extern FspdevServerIOHandle *FspdevServerStreamCreate();
d444 8
a451 3
extern ReturnStatus	FspdevRmtPseudoStreamIoOpen();
extern Fs_HandleHeader  *FspdevRmtPseudoStreamVerify();
extern ReturnStatus	FspdevRmtPseudoStreamMigrate();
d455 6
a460 2
extern ReturnStatus	FspdevPfsStreamIoOpen();
extern ReturnStatus	FspdevRmtPfsStreamIoOpen();
d464 6
a469 2
extern ReturnStatus	FspdevPfsExport();
extern ReturnStatus	FspdevPfsNamingIoOpen();
d473 43
a515 11
extern ReturnStatus	FspdevPfsOpen();
extern ReturnStatus	FspdevPfsGetAttrPath();
extern ReturnStatus	FspdevPfsSetAttrPath();
extern ReturnStatus	FspdevPfsMakeDir();
extern ReturnStatus	FspdevPfsMakeDevice();
extern ReturnStatus	FspdevPfsRemove();
extern ReturnStatus	FspdevPfsRemoveDir();
extern ReturnStatus	FspdevPfsRename();
extern ReturnStatus	FspdevPfsHardLink();
extern ReturnStatus FspdevPseudoStream2Path();
extern ReturnStatus FspdevPseudoStreamLookup();
d520 4
a523 4
extern ReturnStatus	FspdevPseudoGetAttr();
extern ReturnStatus	FspdevPseudoSetAttr();

extern Boolean		FspdevPdevServerOK();
d525 5
a529 1
extern ReturnStatus FspdevPassStream();
a530 1
extern int FspdevPfsOpenConnection();
d532 3
@


9.0
log
@Changing version numbers.
@
text
@d32 1
a32 1
 * $Header: /sprite/src/kernel/fspdev/RCS/fspdevInt.h,v 8.2 89/08/21 15:28:15 mendel Exp Locker: douglis $ SPRITE (Berkeley)
d160 1
@


8.2
log
@Break up fs into many modules.    
@
text
@d32 1
a32 1
 * $Header: /sprite/src/kernel/fs/RCS/fsPdev.h,v 8.7 89/06/02 13:41:25 brent Exp $ SPRITE (Berkeley)
@


8.1
log
@Commented #endif labels.
@
text
@d2 1
a2 1
 * fsPdev.h --
d4 1
a4 6
 *	Declaration of FsPdevState.  This is passed back from the name server
 *	as the generic streamData of a open.  It gets passed into the
 *	pseudo-device client open routine.  This is in a separate header
 *	to avoid a circularity inclusions caused if fsNameOps.h includes
 *	the main fsPdev.h header file, which includes dev/pdev.h, which
 *	includes fsNameOps.h, which...
d6 22
d32 63
a94 1
 * $Header: /sprite/src/kernel/fs/RCS/fsPdevState.h,v 8.0 88/11/11 18:25:20 douglis Stable Locker: rab $ SPRITE (Berkeley)
d96 7
d104 17
a120 11
#ifndef _FSPDEVSTATE
#define _FSPDEVSTATE

#include "fs.h"
#include "proc.h"

/*
 * FsPdevState is returned from the SrvOpen routine to the CltOpen routine.
 * It is also sent via RPC from the remoteCltOpen routine to the localCltOpen
 * routine.  In this second case, the processID and uid of the remote client
 * is initialized.
d122 57
a178 2
typedef struct FsPdevState {
    Fs_FileID	ctrlFileID;	/* Control stream FileID */
d180 1
a180 2
     * The following fields are used when the client process is remote
     * from the server host.
d182 248
a429 5
    Proc_PID	procID;		/* Process ID of remote client */
    int		uid;		/* User ID of remote client */
    Fs_FileID	streamID;	/* Client's stream ID used to set up a
				 * matching stream here on the server */
} FsPdevState;
d431 1
a431 1
#endif /* _FSPDEVSTATE */
@


8.0
log
@Changing version numbers.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/fs/RCS/fsPdevState.h,v 7.0 88/11/07 14:47:53 brent Exp Locker: douglis $ SPRITE (Berkeley)
d42 1
a42 1
#endif _FSPDEVSTATE
@


7.0
log
@New version for conversion to new C library
@
text
@d15 1
a15 1
 * $Header: /sprite/src/kernel/fs/RCS/fsPdevState.h,v 1.2 88/10/14 12:19:42 brent Exp Locker: brent $ SPRITE (Berkeley)
@


1.2
log
@FsFileID FsUserID change
@
text
@d15 1
a15 1
 * $Header: fsPdevState.h,v 1.1 88/10/10 13:16:45 brent Exp $ SPRITE (Berkeley)
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
 * $Header: fsPdev.h,v 6.1 88/08/26 17:49:28 brent Exp $ SPRITE (Berkeley)
d31 1
a31 1
    FsFileID	ctrlFileID;	/* Control stream FileID */
d38 1
a38 1
    FsFileID	streamID;	/* Client's stream ID used to set up a
@
