head     9.7;
branch   ;
access   ;
symbols  ds3100:9.7 sun3:9.7 sun4nw:9.6 symm:9.6 spur:9.6 sprited:9.4.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.7
date     91.12.11.16.30.39;  author kupfer;  state Exp;
branches ;
next     9.6;

9.6
date     91.09.24.21.29.10;  author shirriff;  state Exp;
branches ;
next     9.5;

9.5
date     91.09.10.18.43.03;  author rab;  state Exp;
branches ;
next     9.4;

9.4
date     91.05.17.10.43.09;  author kupfer;  state Exp;
branches 9.4.1.1;
next     9.3;

9.3
date     90.10.18.13.58.53;  author kupfer;  state Exp;
branches ;
next     9.2;

9.2
date     90.10.02.16.30.35;  author mgbaker;  state Exp;
branches ;
next     9.1;

9.1
date     90.03.29.12.46.44;  author mgbaker;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.18.44;  author douglis;  state Stable;
branches ;
next     8.2;

8.2
date     89.08.17.17.30.18;  author jhh;  state Exp;
branches ;
next     8.1;

8.1
date     88.12.04.15.29.52;  author ouster;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.36.29;  author douglis;  state Stable;
branches ;
next     6.2;

6.2
date     88.10.28.19.24.49;  author mlgray;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.26.18.27.15;  author mlgray;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.25.59;  author brent;  state Stable;
branches ;
next     5.5;

5.5
date     88.05.10.14.06.38;  author brent;  state Exp;
branches ;
next     5.4;

5.4
date     88.03.03.11.24.03;  author brent;  state Exp;
branches ;
next     5.3;

5.3
date     88.02.29.12.04.45;  author brent;  state Exp;
branches ;
next     5.2;

5.2
date     87.09.16.12.10.36;  author brent;  state Exp;
branches ;
next     5.1;

5.1
date     87.08.28.13.03.50;  author brent;  state Exp;
branches ;
next     5.0;

5.0
date     87.08.11.10.49.26;  author sprite;  state Exp;
branches ;
next     ;

9.4.1.1
date     91.10.22.15.47.13;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.7
log
@If tracing is turned off, Rpc_PrintTrace will turn it on, inform the
user, and return immediately.
@
text
@/*
 * rpcTrace.c --
 *
 *	The tracing routines for the Rpc system.  As messages are moved
 *	through the RPC system time-stamped trace records can be taken
 *	to see where the system spends its time.  The circular buffer
 *	of trace records can be dumped to a file or printed to the console.
 *
 * Copyright (C) 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/Cvsroot/kernel/rpc/rpcTrace.c,v 9.6 91/09/24 21:29:10 shirriff Exp $ SPRITE (Berkeley)";
#endif /* not lint */


#include <sprite.h>
#include <stdio.h>
#include <bstring.h>
#include <rpc.h>
#include <rpcInt.h>
#include <rpcTrace.h>
#include <rpcServer.h>
#include <net.h>
#include <status.h>
#include <dbg.h>
#include <fs.h>
#include <timer.h>
#include <string.h>
#include <dump.h>

/*
 * The circular buffer of trace records.
 */
Boolean		rpc_Tracing = FALSE;	/* flag to turn on tracing */

Trace_Header	rpcTraceHdr;		/* Trace header info */
Trace_Header	*rpcTraceHdrPtr = &rpcTraceHdr;
/*
 * The results of some standard benchmarks are cached so they
 * get printed out with the trace records.
 */
Time rpcDeltaTime;		/* Average time per RPC */
Time rpcEmptyStampTime;		/* The time to take a trace record without
				 * copying the packet header */
Time rpcFullStampTime;		/* The time to take a trace record that
				 * includes copying the packet header */

/*
 *----------------------------------------------------------------------
 *
 * Rpc_PrintTrace --
 *
 *	Print out the last few trace records.  Can be called from
 *	the debugger or via the Test_Stat system call or from an L1 
 *	console command.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Print out the trace records on the console.
 *
 *----------------------------------------------------------------------
 */
void
Rpc_PrintTrace(clientData)
    ClientData clientData; /* The number (of most recent) records to print */
{
#ifndef CLEAN
    int numRecords = (int)clientData;
    register int i;	/* Index into trace table */
    int stopIndex;	/* copy of rpcTraceIndex */
    Time baseTime, deltaTime;	/* Times for print out */
    Trace_Record *recordPtr;
    RpcHdr	*rpcHdrPtr;
    int c;		/* Used to identify record types in output */
    char flagString[8];	/* Used to format rpc header flags */
    int stringIndex;
    int linesPrinted = 0;

    /* 
     * Provide a quick way to turn RPC tracing on.  Otherwise, somebody has 
     * to log in and invoke rpccmd, which can be slow or even impossible if 
     * the load is high enough.
     */
    if (!rpc_Tracing) {
	rpc_Tracing = TRUE;
	printf("RPC tracing has now been enabled.  Please try again.\n");
	return;
    }

    rpcTraceHdrPtr->flags |= TRACE_INHIBIT;
    if (numRecords > rpcTraceHdrPtr->numRecords) {
	numRecords = rpcTraceHdrPtr->numRecords;
    }
    /*
     * Start the print numRecords before rpcTraceIndex.
     * We make a copy of rpcTraceIndex in case in gets incremented
     * during our set of print statements.
     */
    i = (rpcTraceHdrPtr->currentRecord + RPC_TRACE_LEN - numRecords)
		% RPC_TRACE_LEN;
    stopIndex = rpcTraceHdrPtr->currentRecord;

    printf("\n");
#define PRINT_HEADER() \
    printf("%s%s\n%s%s\n","    ID type  time       srvr   clnt     cmd",\
	"    psize dsize doff #frags delay", \
	"                   flags    hint   chan",\
	"                            fragmask")

    baseTime.seconds = 0;
    baseTime.microseconds = 0;
    do {
	if (linesPrinted % DUMP_LINES_PER_SCREEN == 0) {
	    PRINT_HEADER();
	}
	recordPtr = &rpcTraceHdrPtr->recordArray[i];
	Time_Subtract(recordPtr->time, baseTime, &deltaTime);

	rpcHdrPtr = (RpcHdr *)recordPtr->traceData;
	printf("%6x ", rpcHdrPtr->ID);

	switch(recordPtr->event) {
	    default:
		printf("{%d}", recordPtr->event);
		break;
	    case RPC_INPUT:
		printf("in ");
		break;
	    case RPC_ETHER_OUT:
		printf("out");
		break;
	    case RPC_OUTPUT:
		printf("out");
		break;
	    case RPC_CLIENT_a:		/* Client interrupt time stamps */
	    case RPC_CLIENT_b:
	    case RPC_CLIENT_c:
	    case RPC_CLIENT_d:
	    case RPC_CLIENT_e:
	    case RPC_CLIENT_f:
		c = recordPtr->event - RPC_CLIENT_a + 'a';
		printf("Ci%c", c);
		break;
	    case RPC_CLIENT_A:		/* Client process level time stamps */
	    case RPC_CLIENT_B:
	    case RPC_CLIENT_C:
	    case RPC_CLIENT_D:
	    case RPC_CLIENT_E:
	    case RPC_CLIENT_F:
		c = recordPtr->event - RPC_CLIENT_A + 'A';
		printf("Cp%c", c);
		break;
	    case RPC_SERVER_a:		/* Server interrupt time stamps */
	    case RPC_SERVER_b:
	    case RPC_SERVER_c:
	    case RPC_SERVER_d:
	    case RPC_SERVER_e:
	    case RPC_SERVER_f:
		c = recordPtr->event - RPC_SERVER_a + 'a';
		printf("Si%c", c);
		break;
	    case RPC_SERVER_A:		/* Server process level time stamps */
	    case RPC_SERVER_B:
	    case RPC_SERVER_C:
	    case RPC_SERVER_D:
	    case RPC_SERVER_E:
	    case RPC_SERVER_F:
		c = recordPtr->event - RPC_SERVER_A + 'A';
		printf("Sp%c", c);
		break;
	    case RPC_CLIENT_OUT:
		printf("Cx ");
		break;
	    case RPC_SERVER_OUT:
		printf("Sx ");
		break;
	}

	printf(" %3d.%04d",
			   deltaTime.seconds,
			   deltaTime.microseconds / 100);
	baseTime = recordPtr->time;
	switch(rpcHdrPtr->flags & RPC_TYPE) {
	    case RPC_REQUEST:
		flagString[0] = 'Q';
		break;
	    case RPC_REPLY:
		flagString[0] = 'R';
		break;
	    case RPC_NACK:
		flagString[0] = 'N';
		break;
	    case RPC_ACK:
		flagString[0] = 'A';
		break;
	    default:
		flagString[0] = '-';
	}
	stringIndex = 1;
	if (rpcHdrPtr->flags & RPC_PLSACK) {
	    flagString[stringIndex++] = 'p';
	}
	if (rpcHdrPtr->flags & RPC_LASTFRAG) {
	    flagString[stringIndex++] = 'f';
	}
	if (rpcHdrPtr->flags & RPC_CLOSE) {
	    flagString[stringIndex++] = 'c';
	}
	if (rpcHdrPtr->flags & RPC_ERROR) {
	    flagString[stringIndex++] = 'e';
	}
	flagString[stringIndex] = '\0';
	printf(" %2s", flagString);
	printf(" %3d %d %3d %d ",
			   rpcHdrPtr->serverID, rpcHdrPtr->serverHint,
			   rpcHdrPtr->clientID, rpcHdrPtr->channel);
	if (((rpcHdrPtr->flags & RPC_ERROR) == 0) &&
	    rpcHdrPtr->command >= 0 && rpcHdrPtr->command <= RPC_LAST_COMMAND) {
	    printf("%-8s", rpcService[rpcHdrPtr->command].name);
	} else {
	    printf("%8x", rpcHdrPtr->command);
	}
	printf(" %5d %5d %5d %2d %2x %5d",
			   rpcHdrPtr->paramSize,
			   rpcHdrPtr->dataSize,
			   rpcHdrPtr->dataOffset,
			   rpcHdrPtr->numFrags,
			   rpcHdrPtr->fragMask,
			   rpcHdrPtr->delay);
	printf("\n");
	++linesPrinted;

	i = (i + 1) % RPC_TRACE_LEN;
    } while (i != stopIndex);
    PRINT_HEADER();
    printf("Delta time = %6d.%06d\n", rpcDeltaTime.seconds,
			  rpcDeltaTime.microseconds);
    rpcTraceHdrPtr->flags &= ~TRACE_INHIBIT;
#endif /* not CLEAN */
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_DumpTrace --
 *
 *	Dump out trace records to a file.  Can be called from
 *	 the debugger or via the Test_Stat system call.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Dump out the trace records to the file.
 *
 *----------------------------------------------------------------------
 */
ReturnStatus
Rpc_DumpTrace(firstRec, lastRec, fileName)
    int firstRec;	/* The index of the first record to print.  The
			 * numbering is relative to the oldest record with
			 * the oldest record = 1 and the newest record =
			 * RPC_TRACE_LEN */
    int lastRec;	/* The index of the last record to print. */
    char *fileName;	/* Name of the file to which to write */
{
#ifndef CLEAN
    register int i;		/* Index into trace table */
    int stopIndex;		/* copy of rpcTraceIndex */
    int offset;			/* file offset */
    Fs_Stream *streamPtr;	/* File to write to */
    ReturnStatus status;	/* Return code */
    Rpc_TraceFileHdr rpcFileHdr;/* Trace file header */
    Rpc_Trace	traceRecord;	/* Trace record for output file */
    Trace_Record	*recordPtr;
    int writeLen;

    rpcTraceHdrPtr->flags |= TRACE_INHIBIT;

    status = Fs_Open(fileName, FS_CREATE|FS_WRITE, FS_FILE, 0666, &streamPtr);
    if (status != SUCCESS) {
	goto exit;
    }
    /*
     * Set up the header.
     */
    rpcFileHdr.version = rpc_NativeVersion;
    rpcFileHdr.numRecords = lastRec - firstRec + 1;
    rpcFileHdr.rpcDeltaTime = rpcDeltaTime;
    rpcFileHdr.emptyStampMicroseconds = rpcEmptyStampTime.microseconds;
    rpcFileHdr.fullStampMicroseconds = rpcFullStampTime.microseconds;

    offset = 0;
    writeLen = sizeof(Rpc_TraceFileHdr);
    status = Fs_Write(streamPtr, (Address)&rpcTraceHdr, offset, &writeLen);
    if (status != SUCCESS) {
	(void)Fs_Close(streamPtr);
	goto exit;
    }
    offset += writeLen;
    
    /*
     * rpcTraceIndex points to record #1.  Map from record number to index.
     */
    i = (rpcTraceHdrPtr->currentRecord + firstRec - 1) % RPC_TRACE_LEN;
    stopIndex = (rpcTraceHdrPtr->currentRecord + lastRec) % RPC_TRACE_LEN;

    do {
	writeLen = sizeof(Rpc_Trace);
	recordPtr = &rpcTraceHdrPtr->recordArray[i];
	traceRecord.time = recordPtr->time;
	traceRecord.type = recordPtr->event;
	bcopy((Address)recordPtr->traceData, (Address)&traceRecord.rpcHdr,
		sizeof(RpcHdr));
	status = Fs_Write(streamPtr, (Address)&traceRecord,
				     streamPtr->offset, &writeLen);
	if (status != SUCCESS) {
	    (void)Fs_Close(streamPtr);
	    goto exit;
	}
	i = (i + 1) % RPC_TRACE_LEN;
    } while (i != stopIndex);

    (void)Fs_Close(streamPtr);
    status = SUCCESS;
exit:
    rpcTraceHdrPtr->flags &= ~TRACE_INHIBIT;
    return(status);
#endif /* not CLEAN */
}

/*
 *----------------------------------------------------------------------
 *
 * Rpc_StampTest --
 *
 *	This does a calibration timing of the RpcTrace routine.
 *	A numer of calls are made to this routine and the time per
 *	call is computed and printed onto the console.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
void
Rpc_StampTest()
{
#ifndef CLEAN
    int i;
    Timer_Ticks startTime;
    Timer_Ticks endTime;
    Time diff;
    RpcHdr junkRpcHdr;

#define NUMTIMES	1000

/*   printf("RpcTrace timing:  "); */
    junkRpcHdr.flags = 0;

    Timer_GetCurrentTicks(&startTime);
     for (i=0 ; i<NUMTIMES ; i++) {
	RpcTrace((RpcHdr *)NIL, RPC_SERVER_OUT, "empty");
     }
    Timer_GetCurrentTicks(&endTime);

    Timer_SubtractTicks(endTime, startTime, &endTime);
    Timer_TicksToTime(endTime, &diff);
    Time_Divide(diff, NUMTIMES, &diff);
/*   printf("empty = %d, ", diff.microseconds); */
    rpcEmptyStampTime = diff;


    Timer_GetCurrentTicks(&startTime);
     for (i=0 ; i<NUMTIMES ; i++) {
	RpcTrace(&junkRpcHdr, RPC_CLIENT_OUT, "full");
     }
    Timer_GetCurrentTicks(&endTime);

    Timer_SubtractTicks(endTime, startTime, &endTime);
    Timer_TicksToTime(endTime, &diff);
    Time_Divide(diff, NUMTIMES, &diff);
/*    printf("full = %d usecs\n", diff.microseconds); */
    rpcFullStampTime = diff;

    for (i=0 ; i<4 ; i++) {
	RpcTrace(&junkRpcHdr, RPC_SERVER_OUT, "full");
	RpcTrace((RpcHdr *)NIL, RPC_CLIENT_OUT, "empty");
    }
#endif /* not CLEAN */
}
@


9.6
log
@Changed the heading for the RPC trace because I could never figure out
what the fields are.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 9.4 91/05/17 10:43:09 kupfer Exp Locker: rab $ SPRITE (Berkeley)";
d82 11
@


9.5
log
@Fixed lint errors and removed tracing.
@
text
@d98 4
a101 3
    printf("%6s %4s %6s %5s %4s %4s %10s %5s %5s %5s %8s\n", \
	"ID", "type", "time", "flags", "srvr", "clnt", "cmd   ", \
	"psize", "dsize", "doff", "fragInfo")
@


9.4
log
@Reprint the header line for every screen of output.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 9.3 90/10/18 13:58:53 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d36 1
a36 5
#ifdef CLEAN
Boolean		rpc_Tracing = FALSE;	/* No tracing in clean version  */
#else
Boolean		rpc_Tracing = TRUE;	/* flag to turn on tracing */
#endif /* not CLEAN */
@


9.4.1.1
log
@Initial branch for Sprite server.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 9.4 91/05/17 10:43:09 kupfer Exp $ SPRITE (Berkeley)";
@


9.3
log
@Rpc_PrintTrace takes a ClientData.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 9.2 90/10/02 16:30:35 mgbaker Exp Locker: kupfer $ SPRITE (Berkeley)";
d31 1
d85 1
a104 1
    PRINT_HEADER();
d109 3
d227 1
@


9.2
log
@More prototyping garbage.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 9.1 90/03/29 12:46:44 mgbaker Exp Locker: mgbaker $ SPRITE (Berkeley)";
d59 2
a60 1
 *	 the debugger or via the Test_Stat system call.
d63 1
a63 1
 *	Print out the trace records on the console.
d66 1
a66 1
 *	None.
d71 2
a72 2
Rpc_PrintTrace(numRecords)
    int numRecords;	/* The number (of most recent) records to print */
d75 1
@


9.1
log
@New negative ack stuff.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 9.0 89/09/12 15:18:44 douglis Stable Locker: mgbaker $ SPRITE (Berkeley)";
d18 13
a30 11
#include "sprite.h"
#include "rpc.h"
#include "rpcInt.h"
#include "rpcTrace.h"
#include "rpcServer.h"
#include "net.h"
#include "status.h"
#include "dbg.h"
#include "fs.h"
#include "timer.h"
#include "string.h"
@


9.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 8.2 89/08/17 17:30:18 jhh Exp Locker: douglis $ SPRITE (Berkeley)";
d177 3
@


8.2
log
@made version number a variable
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 8.1 88/12/04 15:29:52 ouster Exp Locker: jhh $ SPRITE (Berkeley)";
@


8.1
log
@Stop using obsolete header files.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 8.0 88/11/11 18:36:29 douglis Stable Locker: ouster $ SPRITE (Berkeley)";
d271 1
a271 1
    rpcFileHdr.version = RPC_TRACE_VERSION;
@


8.0
log
@Changing version numbers.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 6.2 88/10/28 19:24:49 mlgray Exp Locker: douglis $ SPRITE (Berkeley)";
a27 1
#include "byte.h"
@


6.2
log
@Conversion to new C library.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: /sprite/src/kernel/rpc/RCS/rpcTrace.c,v 6.1 88/08/26 18:27:15 mlgray Exp Locker: mlgray $ SPRITE (Berkeley)";
@


6.1
log
@Fixed some lint errors.
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 6.0 88/08/11 12:25:59 brent Stable $ SPRITE (Berkeley)";
d95 1
a95 1
    Sys_Printf("\n");
d97 1
a97 1
    Sys_Printf("%6s %4s %6s %5s %4s %4s %10s %5s %5s %5s %8s\n", \
d109 1
a109 1
	Sys_Printf("%6x ", rpcHdrPtr->ID);
d113 1
a113 1
		Sys_Printf("{%d}", recordPtr->event);
d116 1
a116 1
		Sys_Printf("in ");
d119 1
a119 1
		Sys_Printf("out");
d122 1
a122 1
		Sys_Printf("out");
d131 1
a131 1
		Sys_Printf("Ci%c", c);
d140 1
a140 1
		Sys_Printf("Cp%c", c);
d149 1
a149 1
		Sys_Printf("Si%c", c);
d158 1
a158 1
		Sys_Printf("Sp%c", c);
d161 1
a161 1
		Sys_Printf("Cx ");
d164 1
a164 1
		Sys_Printf("Sx ");
d168 1
a168 1
	Sys_Printf(" %3d.%04d",
d199 2
a200 2
	Sys_Printf(" %2s", flagString);
	Sys_Printf(" %3d %d %3d %d ",
d205 1
a205 1
	    Sys_Printf("%-8s", rpcService[rpcHdrPtr->command].name);
d207 1
a207 1
	    Sys_Printf("%8x", rpcHdrPtr->command);
d209 1
a209 1
	Sys_Printf(" %5d %5d %5d %2d %2x %5d",
d216 1
a216 1
	Sys_Printf("\n");
d221 1
a221 1
    Sys_Printf("Delta time = %6d.%06d\n", rpcDeltaTime.seconds,
d298 2
a299 2
	Byte_Copy(sizeof(RpcHdr), (Address)recordPtr->traceData,
				  (Address)&traceRecord.rpcHdr);
d346 1
a346 1
/*   Sys_Printf("RpcTrace timing:  "); */
d358 1
a358 1
/*   Sys_Printf("empty = %d, ", diff.microseconds); */
d371 1
a371 1
/*    Sys_Printf("full = %d usecs\n", diff.microseconds); */
@


6.0
log
@Changing version numbers.
@
text
@d1 1
a1 1
/* 
d14 2
a15 2
static char rcsid[] = "$Header: rpcTrace.c,v 5.5 88/05/10 14:06:38 brent Exp $ SPRITE (Berkeley)";
#endif not lint
d38 1
a38 1
#endif not CLEAN
d112 1
a112 1
	    default: 
d224 1
a224 1
#endif not CLEAN
d314 1
a314 1
#endif not CLEAN
d378 1
a378 1
#endif not CLEAN
@


5.5
log
@Took out machine.h
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 5.4 88/03/03 11:24:03 brent Exp $ SPRITE (Berkeley)";
@


5.4
log
@Added ifdef CLEAN to inhibit tracing code
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 5.3 88/02/29 12:04:45 brent Exp $ SPRITE (Berkeley)";
a25 1
#include "machine.h"
@


5.3
log
@Setup things to be compiled with -DCLEAN
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 5.2 87/09/16 12:10:36 brent Exp $ SPRITE (Berkeley)";
d36 1
a36 3

Boolean		rpc_Tracing = FLASE;	/* No tracing in clean version  */

d38 2
a40 1
Boolean		rpc_Tracing = TRUE;	/* flag to turn on tracing */
a51 1
#endif not CLEAN
@


5.2
log
@Fiddled with trace format
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 5.1 87/08/28 13:03:50 brent Exp $ SPRITE (Berkeley)";
d35 6
a40 1
#ifndef CLEAN
a41 3
#else
Boolean		rpc_Tracing = FALSE;	/* No tracing in clean version */
#endif not CLEAN
d53 1
d75 1
d227 1
d255 1
d317 1
d340 1
d381 1
@


5.1
log
@UPdated for new trace interface
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 5.0 87/08/11 10:49:26 sprite Exp $ SPRITE (Berkeley)";
d96 1
a96 1
    Sys_Printf("%8s %4s %9s %5s %4s %4s %10s %5s %5s %5s %8s\n", \
d108 1
a108 1
	Sys_Printf("%8x ", rpcHdrPtr->ID);
d115 1
a115 1
		Sys_Printf("  <");
d118 1
a118 1
		Sys_Printf(">  ");
d121 1
a121 1
		Sys_Printf(" > ");
d167 1
a167 1
	Sys_Printf(" %2d.%06d",
d169 1
a169 1
			   deltaTime.microseconds);
d198 7
a204 6
	Sys_Printf(" %5s", flagString);
	Sys_Printf(" %4d %4d ",
			   rpcHdrPtr->serverID,
			   rpcHdrPtr->clientID);
	if (rpcHdrPtr->command >= 0 && rpcHdrPtr->command <= RPC_LAST_COMMAND) {
	    Sys_Printf("%10s", rpcService[rpcHdrPtr->command].name);
d206 1
a206 1
	    Sys_Printf("%10d", rpcHdrPtr->command);
d341 1
a341 1
    Sys_Printf("RpcTrace timing:  ");
d353 1
a353 1
    Sys_Printf("empty = %d, ", diff.microseconds);
d366 1
a366 1
    Sys_Printf("full = %d usecs\n", diff.microseconds);
@


5.0
log
@First Sprite native copy
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: rpcTrace.c,v 3.7 86/12/10 20:24:44 brent Exp $ SPRITE (Berkeley)";
d81 1
a81 1
    rpcTraceHdrPtr->inhibitTracing = TRUE;
d221 1
a221 1
    rpcTraceHdrPtr->inhibitTracing = FALSE;
d259 1
a259 1
    rpcTraceHdrPtr->inhibitTracing = TRUE;
d308 1
a308 1
    rpcTraceHdrPtr->inhibitTracing = FALSE;
@
