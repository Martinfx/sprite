head     8.0;
branch   ;
access   ;
symbols  sun4nw:8.0 symm:8.0 spur:8.0 newlib:8.0;
locks    ; strict;
comment  @ * @;


8.0
date     88.11.11.18.40.40;  author douglis;  state Stable;
branches ;
next     1.4;

1.4
date     88.10.27.13.26.17;  author mendel;  state Exp;
branches ;
next     1.3;

1.3
date     88.08.24.19.50.07;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.27.10.39.20;  author mendel;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.08.10.20.24;  author mendel;  state Exp;
branches ;
next     ;


desc
@Timer tick declarations for SPUR.
@


8.0
log
@Changing version numbers.
@
text
@/*
 * timerTick.h --
 *
 *      Declarations for the Spur machine dependent clock timer.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * rcsid: $Header: /sprite/src/kernel/timer/spur.md/RCS/timerTick.h,v 1.4 88/10/27 13:26:17 mendel Exp Locker: douglis $ SPRITE (Berkeley) 
 */

#ifndef _TIMERTICK
#define _TIMERTICK

#include <spriteTime.h>

/* DATA STRUCTURES: */

/*
 *  Definition of Timer_Ticks: a hardware-dependent 64-bit time value 
 *  	whose format is based on the free-running counter: 
 *  For the SPUR, Timer_Ticks is the same type as read from the counter.
 *
 * See timer.h  for more details.
 */

/*
 * The free running counter on the SPUR is T0, a 64 bit integer.  DevCounter
 * is the lower 32-bits (low) and the upper 32-bits (high) of the counter.
 * Any changes to this structure will require changes to timerSpurT0.s
 */
     
typedef struct Spur64bitCounterStruct {
	unsigned	int	low;
	unsigned	int	high;
} Timer_Ticks;

/*
 * Definitions for useful intervals and clock values. 
 * See timer.h for more details.
 */
 
 extern unsigned int 	timer_IntZeroSeconds; 
 extern unsigned int 	timer_IntOneMillisecond;   
 extern unsigned int 	timer_IntOneSecond;
 extern unsigned int 	timer_IntOneMinute;
 extern unsigned int 	timer_IntOneHour; 
 extern Timer_Ticks	timer_TicksZeroSeconds;
 extern Time 		timer_MaxIntervalTime; 



/* PROCEDURES */

extern void Timer_AddTicks();
extern void Timer_SubtractTicks();
extern void Timer_TicksToTime();
extern void Timer_TimeToTicks();
extern void Timer_AddIntervalToTicks();
extern void Timer_GetCurrentTicks();


/*
 *----------------------------------------------------------------------
 *
 * Tick Comparisons --
 *
 *	Timer_TickLT:	tick1  <   tick2
 *	Timer_TickLE:	tick1  <=  tick2
 *	Timer_TickEQ:	tick1  ==  tick2
 *	Timer_TickGE:	tick1  >=  tick2
 *	Timer_TickGT:	tick1  >   tick2
 *
 * Results:
 *     TRUE	- the relation holds for the 2 values.
 *     FALSE	- the relation does not hold.
 *
 * Side effects:
 *     None.
 *
 *----------------------------------------------------------------------
 */


#define Timer_TickLT(tick1, tick2) \
		(((tick1).high     <  (tick2).high) ||  \
		 (((tick1).high    == (tick2).high) &&  \
		  ((tick1).low <  (tick2).low)))

#define Timer_TickLE(tick1, tick2) \
		(((tick1).high     <  (tick2).high) ||  \
		 (((tick1).high    == (tick2).high) &&  \
		  ((tick1).low <= (tick2).low)))

#define Timer_TickEQ(tick1, tick2) \
		(((tick1).high == (tick2).high) &&  \
		 ((tick1).low == (tick2).low))

#define Timer_TickGE(tick1, tick2) \
		(((tick1).high     >  (tick2).high) ||  \
		 (((tick1).high    == (tick2).high) &&  \
		  ((tick1).low >= (tick2).low)))

#define Timer_TickGT(tick1, tick2) \
		(((tick1).high     >  (tick2).high) ||  \
		 (((tick1).high    == (tick2).high) &&  \
		 ((tick1).low >  (tick2).low)))


#endif _TIMERTICK
@


1.4
log
@Intergated devTimer into timer module.
@
text
@d15 1
a15 1
 * rcsid: $Header: timerTick.h,v 1.3 88/08/24 19:50:07 nelson Exp $ SPRITE (Berkeley) 
@


1.3
log
@Made useable by users.
@
text
@d15 1
a15 1
 * rcsid: $Header: timerTick.h,v 1.2 88/06/27 10:39:20 mendel Exp $ SPRITE (Berkeley) 
a20 4
#ifdef KERNEL
#include "time.h"
#include "devTimer.h"
#else
a21 2
#include <kernel/devTimer.h>
#endif
d30 1
a30 1
 * See timer.h and devTimer.h for more details.
d33 10
a42 1
typedef  DevCounter	Timer_Ticks;
@


1.2
log
@Updated Copyright notice.
@
text
@d15 1
a15 1
 * rcsid: $Header: timerTick.h,v 1.1 88/06/08 10:20:24 mendel Exp $ SPRITE (Berkeley) 
d21 1
d24 4
@


1.1
log
@Initial revision
@
text
@d6 8
a13 2
 * Copyright 1985 Regents of the University of California
 * All rights reserved.
d15 1
a15 1
 * rcsid: $Header: timerTick.h,v 1.2 88/05/27 16:30:28 mendel Exp $ SPRITE (Berkeley) 
@
