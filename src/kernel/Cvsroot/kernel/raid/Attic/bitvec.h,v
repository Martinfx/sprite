head     1.4;
branch   ;
access   ;
symbols  sun4nw:1.4 symm:1.4 spur:1.4;
locks    ; strict;
comment  @ * @;


1.4
date     90.10.12.14.01.19;  author eklee;  state Exp;
branches ;
next     1.3;

1.3
date     90.09.19.14.54.14;  author eklee;  state Exp;
branches ;
next     1.2;

1.2
date     90.09.05.12.39.47;  author eklee;  state Exp;
branches ;
next     1.1;

1.1
date     90.06.22.13.38.25;  author eklee;  state Exp;
branches ;
next     ;


desc
@Implements bitvector routines for use as bitmaps etc...
@


1.4
log
@Added Raid_ prefix to external names and cleaned up warning messages.
@
text
@/*
 *
 */

#ifndef _BITVEC
#define _BITVEC

#define BIT_VEC_SIZE 4

typedef int *BitVec;

#define VecIndex(w, b)	(((w) << 5) | b)
#define WordIndex(i)	((i) >> 5)
#define BitIndex(i)	((i) & 0x1F)
#define VecSize(n)	(((n)/32 + 1) * sizeof(int))

#define SetBit(bitVec, i) ( (bitVec)[WordIndex(i)] |= 1 << BitIndex(i) )
#define ClrBit(bitVec, i) ( (bitVec)[WordIndex(i)] &= ~(1 << BitIndex(i)) )
#define IsSet(bitVec, i) ( (bitVec)[WordIndex(i)] >> BitIndex(i) & 1 )

#define FOR_ALL_VEC(bitVec, i, n)	\
    for ((i) = -1; ((i) = GetBitIndex((bitVec), (i), (n))) != -1;)

extern BitVec MakeBitVec _ARGS_((int n));
extern void ClearBitVec _ARGS_((BitVec bitVec, int n));
extern int GetBitIndex _ARGS_((BitVec bitVec, int i, int n));

#endif /* _BITVEC */
@


1.3
log
@Added prototypes.
@
text
@d5 2
a6 2
#ifndef BITVEC_H
#define BITVEC_H
d24 5
a28 1
#endif BITVEC_H
@


1.2
log
@Added VecSize macro.
@
text
@@


1.1
log
@Initial revision
@
text
@d15 1
a22 2

extern BitVec MakeBitVec();
@
