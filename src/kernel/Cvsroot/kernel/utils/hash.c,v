head     9.2;
branch   ;
access   ;
symbols  ds3100:9.2 sun3:9.2 sun4nw:9.2 symm:9.2 spur:9.2 sprited:9.2.1 Summer89:9.0 newlib:8.0 Summer88:6.0;
locks    ; strict;
comment  @ * @;


9.2
date     90.09.11.14.11.36;  author kupfer;  state Exp;
branches 9.2.1.1;
next     9.1;

9.1
date     89.10.26.15.24.35;  author douglis;  state Exp;
branches ;
next     9.0;

9.0
date     89.09.12.15.22.02;  author douglis;  state Stable;
branches ;
next     8.1;

8.1
date     88.12.04.15.42.49;  author ouster;  state Exp;
branches ;
next     8.0;

8.0
date     88.11.11.18.41.15;  author douglis;  state Stable;
branches ;
next     6.3;

6.3
date     88.11.08.11.37.41;  author brent;  state Exp;
branches ;
next     6.2;

6.2
date     88.10.30.20.58.01;  author jhh;  state Exp;
branches ;
next     6.1;

6.1
date     88.08.23.15.53.50;  author rab;  state Exp;
branches ;
next     6.0;

6.0
date     88.08.11.12.28.46;  author brent;  state Stable;
branches ;
next     5.0;

5.0
date     87.08.11.10.51.56;  author sprite;  state Exp;
branches ;
next     ;

9.2.1.1
date     91.09.09.22.32.31;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


9.2
log
@Use function prototypes. Lint.
@
text
@/* hash.c --
 *
 * 	This module contains routines to manipulate a hash table.
 * 	See hash.h for a definition of the structure of the hash
 * 	table.  Hash tables grow automatically as the amount of
 * 	information increases.
 *
 *	None of the routines in this module do any sort of mutual exclusion
 *	of accesses to the hash tables.
 *
 * Copyright (C) 1983 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 9.1 89/10/26 15:24:35 douglis Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif  not lint

#include "sprite.h"
#include "hash.h"
#include "stdlib.h"
#include "string.h"
#include "list.h"
#include "sys.h"
#include "bstring.h"
#include <stdio.h>

/* 
 * Forward declarations:
 */

static Hash_Entry *ChainSearch _ARGS_((Hash_Table *table, Address key,
					     List_Links *hashList));
static int Hash _ARGS_((Hash_Table *table, char *key));
static void RebuildTable _ARGS_((Hash_Table *table));

/* 
 * The following defines the ratio of # entries to # buckets
 * at which we rebuild the table to make it larger.
 */

static rebuildLimit = 3;


/*
 *---------------------------------------------------------
 * 
 * Hash_Init --
 *
 *	This routine just sets up the hash table.
 *
 * Results:	
 *	None.
 *
 * Side Effects:
 *	Memory is allocated for the initial bucket area.
 *
 *---------------------------------------------------------
 */

void
Hash_Init(table, numBuckets, ptrKeys)
    register Hash_Table	*table;
    int			numBuckets;	/* How many buckets to create for 
					 * starters. This number is rounded up 
					 * to a power of two. */
    int 	        ptrKeys;	/* 0 means that key values passed to 
					 * HashFind will be strings, passed via
					 * a (char *) pointer.  1 means that 
					 * key values will be any one-word 
					 * value passed as Address.  > 1 means 
					 * that key values will be multi-word 
					 * values whose address is passed as 
					 * Address.  In this last case, ptrKeys 
					 * is the number of words in the key, 
					 * not the number of bytes. */
{
    register	int 		i;
    register	Hash_Bucket 	*tablePtr;

    /* 
     * Round up the size to a power of two. 
     */

    if (numBuckets < 0) {
	numBuckets = -numBuckets;
    }
    table->numEntries = 0;
    table->version = 0;
    table->ptrKeys = ptrKeys;
    table->size = 2;
    table->mask = 1;
    table->downShift = 29;
    while (table->size < numBuckets) {
	table->size <<= 1;
	table->mask = (table->mask << 1) + 1;
	table->downShift--;
    }

    table->table = (Hash_Bucket *) malloc(sizeof(Hash_Bucket) * table->size);
    for (i=0, tablePtr = table->table; i < table->size; i++, tablePtr++) {
	List_Init(&(tablePtr->list));
	tablePtr->version = 0;
    }
}


/*
 *---------------------------------------------------------
 *
 * Hash --
 *	This is a local procedure to compute a hash table
 *	bucket address based on a string value.
 *
 * Results:
 *	The return value is an integer between 0 and size - 1.
 *
 * Side Effects:	
 *	None.
 *
 * Design:
 *	It is expected that most keys are decimal numbers,
 *	so the algorithm behaves accordingly.  The randomizing
 *	code is stolen straight from the rand library routine.
 *
 *---------------------------------------------------------
 */

static int
Hash(table, key)
    register Hash_Table *table;
    register char 	*key;
{
    register int 	i = 0;
    register int 	j;
    register unsigned 	*intPtr;

    switch (table->ptrKeys) {
	case 0:
	    while (*key != 0) {
		i = (i * 10) + (*key++ - '0');
	    }
	    break;
	case 1:
	    i = (int) key;
	    break;
	case 2:
	    i = ((unsigned *) key)[0] + ((unsigned *) key)[1];
	    break;
	default:
	    j = table->ptrKeys;
	    intPtr = (unsigned *) key;
	    do { 
		i += *intPtr++; 
		j--;
	    } while (j > 0);
	    break;
    }


    return(((i*1103515245 + 12345) >> table->downShift) & table->mask);
}


/*
 *---------------------------------------------------------
 *
 * ChainSearch --
 *
 * 	Search the hash table for the entry in the hash chain.
 *
 * Results:
 *	Pointer to entry in hash chain, NIL if none found.
 *
 * Side Effects:
 *	None.
 *
 *---------------------------------------------------------
 */

static Hash_Entry *
ChainSearch(table, key, hashList)
    Hash_Table 		*table;	/* Hash table to search. */
    register Address	key;	/* A hash key. */
    register List_Links *hashList;
{
    register Hash_Entry *hashEntryPtr;
    register unsigned 	*hashKeyPtr;
    unsigned 		*keyPtr;
    register int	numKeys;

    numKeys = table->ptrKeys;
    LIST_FORALL(hashList, (List_Links *) hashEntryPtr) {
	switch (numKeys) {
	    case 0:
		if (strcmp(hashEntryPtr->key.name, key) == 0) {
		    return(hashEntryPtr);
		}
		break;
	    case 1:
		if (hashEntryPtr->key.ptr == key) {
		    return(hashEntryPtr);
		}
		break;
	    case 2:
		hashKeyPtr = hashEntryPtr->key.words;
		keyPtr = (unsigned *) key;
		if (hashKeyPtr[0] == keyPtr[0] && hashKeyPtr[1] == keyPtr[1]) {
		    return(hashEntryPtr);
		}
		break;
	    default:
		if (bcmp((Address) hashEntryPtr->key.words,
			 (Address) key,
			 numKeys * sizeof(int)) == 0) {
		    return(hashEntryPtr);
		}
		break;
	}
    }

    /* 
     * The desired entry isn't there 
     */

    return ((Hash_Entry *) NIL);
}



/*
 *---------------------------------------------------------
 *
 * Hash_LookOnly --
 *
 * 	Searches a hash table for an entry corresponding to string.
 *
 * Results:
 *	The return value is a pointer to the entry for string,
 *	if string was present in the table.  If string was not
 *	present, NIL is returned.
 *
 * Side Effects:
 *	None.
 *
 *---------------------------------------------------------
 */

Hash_Entry *
Hash_LookOnly(table, key)
    register Hash_Table *table;	/* Hash table to search. */
    Address 		key;	/* A hash key. */
{
    return(ChainSearch(table, key, &(table->table[Hash(table, key)].list)));
}


/*
 *---------------------------------------------------------
 *
 * Hash_Find --
 *
 *	Searches a hash table for an entry corresponding to
 *	key.  If no entry is found, then one is created.
 *
 * Results:
 *	The return value is a pointer to the entry for string.
 *	If the entry is a new one, then the pointer field is
 *	zero.
 *
 *	Side Effects:
 *	Memory is allocated, and the hash buckets may be modified.
 *---------------------------------------------------------
 */

Hash_Entry *
Hash_Find(table, key)
    register	Hash_Table *table;	/* Hash table to search. */
    Address 		   key;		/* A hash key. */
{
    register 	unsigned 	*hashKeyPtr;
    register 	unsigned 	*keyPtr;
    register 	Hash_Bucket 	*bucketPtr;
    Hash_Entry			*hashEntryPtr;

    keyPtr = (unsigned *) key;

    bucketPtr = &(table->table[Hash(table, (Address) keyPtr)]);
    hashEntryPtr = ChainSearch(table, (Address) keyPtr, &(bucketPtr->list));

    if (hashEntryPtr != (Hash_Entry *) NIL) {
	return(hashEntryPtr);
    }

    /* 
     * The desired entry isn't there.  Before allocating a new entry,
     * see if we're overloading the buckets.  If so, then make a
     * bigger table.
     */

    if (table->numEntries >= rebuildLimit * table->size) {
	RebuildTable(table);
	bucketPtr = &(table->table[Hash(table, (Address) keyPtr)]);
    }
    table->numEntries += 1;

    /*
     * Not there, we have to allocate.  If the string is longer
     * than 3 bytes, then we have to allocate extra space in the
     * entry.
     */

    switch (table->ptrKeys) {
	case 0:
	    hashEntryPtr = (Hash_Entry *) malloc((sizeof(Hash_Entry) +
						  strlen((Address) keyPtr) - 3));
	    (void)strcpy((char *) hashEntryPtr->key.name, (char *) keyPtr);
	    break;
	case 1:
	    hashEntryPtr = (Hash_Entry *) malloc(sizeof(Hash_Entry));
	    hashEntryPtr->key.ptr = (Address) keyPtr;
	    break;
	case 2:
	    hashEntryPtr = 
		(Hash_Entry *) malloc(sizeof(Hash_Entry)
			+ sizeof(unsigned));
	    hashKeyPtr = hashEntryPtr->key.words;
	    *hashKeyPtr++ = *keyPtr++;
	    *hashKeyPtr = *keyPtr;
	    break;
	default: {
	    register 	n;

	    n = table->ptrKeys;
	    hashEntryPtr = (Hash_Entry *) 
		    malloc((sizeof(Hash_Entry)
			    + (n - 1) * sizeof(unsigned)));
	    hashKeyPtr = hashEntryPtr->key.words;
	    do { 
		*hashKeyPtr++ = *keyPtr++; 
	    } while (--n);
	    break;
	}
    }

    hashEntryPtr->value = (Address) NIL;
    hashEntryPtr->bucketPtr = bucketPtr;
    List_Insert((List_Links *) hashEntryPtr, LIST_ATFRONT(&(bucketPtr->list)));
    bucketPtr->version++;

    return(hashEntryPtr);
}



/*
 *---------------------------------------------------------
 *
 * Hash_Delete --
 *
 * 	Delete the given hash table entry and free memory associated with
 *	it.
 *
 * Results:
 *	None.
 *
 * Side Effects:
 *	Hash chain that entry lives in is modified and memory is freed.
 *
 *---------------------------------------------------------
 */

void
Hash_Delete(table, hashEntryPtr)
    Hash_Table			*table;
    register	Hash_Entry	*hashEntryPtr;
{
    if (hashEntryPtr != (Hash_Entry *) NIL) {
	List_Remove((List_Links *) hashEntryPtr);
	hashEntryPtr->bucketPtr->version++;
	free((char *) hashEntryPtr);
	table->numEntries--;
    }
}


/*
 *---------------------------------------------------------
 *
 * RebuildTable --
 *	This local routine makes a new hash table that
 *	is larger than the old one.
 *
 * Results:	
 * 	None.
 *
 * Side Effects:
 *	The entire hash table is moved, so any bucket numbers
 *	from the old table are invalid.
 *
 *---------------------------------------------------------
 */

static
void
RebuildTable(table)
    register	Hash_Table 	*table;		/* Table to be enlarged. */
{
    register	Hash_Bucket	*oldTable;
    register	Hash_Entry  	*hashEntryPtr;
    register	int 		oldSize;
    int 		 	bucket;
    Hash_Bucket		 	*saveTable;
    Hash_Bucket		 	*bucketPtr;
    int			 	version;

    saveTable = table->table;
    oldSize = table->size;
    version = table->version + 1;

    /* 
     * Build a new table 4 times as large as the old one. 
     */

    Hash_Init(table, table->size * 4, table->ptrKeys);
    table->version = version;

    for (oldTable = saveTable; oldSize > 0; oldSize--, oldTable++) {
	while (!List_IsEmpty(&(oldTable->list))) {
	    hashEntryPtr = (Hash_Entry *) List_First(&(oldTable->list));
	    List_Remove((List_Links *) hashEntryPtr);
	    switch (table->ptrKeys) {
		case 0:
		    bucket = Hash(table, (Address) hashEntryPtr->key.name);
		    break;
		case 1:
		    bucket = Hash(table, (Address) hashEntryPtr->key.ptr);
		    break;
		default:
		    bucket = Hash(table, (Address) hashEntryPtr->key.words);
		    break;
	    }
	    bucketPtr = &(table->table[bucket]);
	    List_Insert((List_Links *) hashEntryPtr, 
		LIST_ATFRONT(&(bucketPtr->list)));
	    hashEntryPtr->bucketPtr = bucketPtr;
	    table->numEntries++;
	}
    }

    free((char *) saveTable);
}


/*
 *---------------------------------------------------------
 *
 * HashStats --
 *	This routine merely prints statistics about the
 *	current bucket situation.
 *
 * Results:	
 *	None.
 *
 * Side Effects:	
 *	Junk gets printed.
 *
 *---------------------------------------------------------
 */

void
Hash_Stats(table)
    Hash_Table *table;
{
    int count[10], overflow, i, j;
    Hash_Entry 	*hashEntryPtr;
    List_Links	*hashList;

    for (i=0; i<10; i++) {
	count[i] = 0;
    }
    overflow = 0;
    for (i = 0; i < table->size; i++) {
	j = 0;
	hashList = &(table->table[i].list);
	LIST_FORALL(hashList, (List_Links *) hashEntryPtr) {
	    j++;
	}
	if (j < 10) {
	    count[j]++;
	} else {
	    overflow++;
	}
    }

    printf("Entries in table %d number of buckets %d\n", 
		table->numEntries, table->size);
    for (i = 0;  i < 10; i++) {
	printf("Number of buckets with %d entries: %d.\n", i, count[i]);
    }
    printf("Number of buckets with > 9 entries: %d.\n", overflow);
}


/*
 *---------------------------------------------------------
 *
 * Hash_StartSearch --
 *
 *	This procedure sets things up for a complete search
 *	of all entries recorded in the hash table.
 *
 * Results:	
 *	None.
 *
 * Side Effects:
 *	The version number of the table is set to -1 so that the structure
 *	will be initialized in the first Hash_Next.
 *
 *---------------------------------------------------------
 */

void
Hash_StartSearch(hashSearchPtr)
    register Hash_Search *hashSearchPtr; /* Area in which to keep state 
					    about search.*/
{
    hashSearchPtr->tableVersion = -1;
}

/*
 *---------------------------------------------------------
 *
 * Hash_Next --
 *
 *    This procedure returns successive entries in the hash table.
 *
 * Results:
 *    The return value is a pointer to the next HashEntry
 *    in the table, or NIL when the end of the table is
 *    reached.
 *
 * Side Effects:
 *    The information in hashSearchPtr is modified to advance to the
 *    next entry.
 *
 *---------------------------------------------------------
 */

Hash_Entry *
Hash_Next(table, hashSearchPtr)
    register Hash_Table  *table;	 /* Table to be searched. */
    register Hash_Search *hashSearchPtr; /* Area used to keep state about 
					    search. */
{
    register List_Links *hashList;
    register Hash_Entry *hashEntryPtr;
    Hash_Bucket		*bucketPtr;

    /*
     * Check version number of the hash table.
     */
    if (hashSearchPtr->tableVersion < table->version) {
	hashSearchPtr->nextIndex = 0;
	hashSearchPtr->hashEntryPtr = (Hash_Entry *) NIL;
	hashSearchPtr->tableVersion = table->version;
    }
    hashEntryPtr = hashSearchPtr->hashEntryPtr;

    /* 
     * Now check version number of the hash bucket.
     */
    if (hashEntryPtr != (Hash_Entry *) NIL &&
	!List_IsAtEnd(hashSearchPtr->hashList, (List_Links *) hashEntryPtr) &&
	hashEntryPtr->bucketPtr->version > hashSearchPtr->bucketVersion) {
	hashEntryPtr = (Hash_Entry *) NIL;
	hashSearchPtr->nextIndex--;
    }

    while (hashEntryPtr == (Hash_Entry *) NIL ||
	   List_IsAtEnd(hashSearchPtr->hashList, (List_Links *) hashEntryPtr)) {
	if (hashSearchPtr->nextIndex >= table->size) {
	    return((Hash_Entry *) NIL);
	}
	bucketPtr = &(table->table[hashSearchPtr->nextIndex]);
	hashList = &(bucketPtr->list);
	hashSearchPtr->bucketVersion = bucketPtr->version;
	hashSearchPtr->nextIndex++;
	if (!List_IsEmpty(hashList)) {
	    hashEntryPtr = (Hash_Entry *) List_First(hashList);
	    hashSearchPtr->hashList = hashList;
	    break;
	}
    }

    hashSearchPtr->hashEntryPtr = 
		(Hash_Entry *) List_Next((List_Links *) hashEntryPtr);

    return(hashEntryPtr);
}


/*
 *---------------------------------------------------------
 *
 * Hash_Kill --
 *
 *	This routine removes everything from a hash table
 *	and frees up the memory space it occupied.
 *
 * Results:	
 *	None.
 *
 * Side Effects:
 *	Lots of memory is freed up.
 *
 *---------------------------------------------------------
 */

void
Hash_Kill(table)
    Hash_Table *table;	/* Hash table whose space is to be freed */
{
    register	Hash_Bucket	*hashTableEnd;
    register	Hash_Entry	*hashEntryPtr;
    register	Hash_Bucket	*tablePtr;

    tablePtr = table->table;
    hashTableEnd = &(tablePtr[table->size]);
    for (; tablePtr < hashTableEnd; tablePtr++) {
	while (!List_IsEmpty(&(tablePtr->list))) {
	    hashEntryPtr = (Hash_Entry *) List_First(&(tablePtr->list));
	    List_Remove((List_Links *) hashEntryPtr);
	    free((char *) hashEntryPtr);
	}
    }
    free((char *) table->table);

    /*
     * Set up the hash table to cause memory faults on any future
     * access attempts until re-initialization.
     */

    table->table = (Hash_Bucket *) NIL;
}
@


9.2.1.1
log
@Initial branch for Sprite server.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 9.2 90/09/11 14:11:36 kupfer Exp $ SPRITE (Berkeley)";
@


9.1
log
@removed some lint
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 9.0 89/09/12 15:22:02 douglis Stable Locker: douglis $ SPRITE (Berkeley)";
d25 2
d28 8
a35 1
void RebuildTable();
d404 1
@


9.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 8.1 88/12/04 15:42:49 ouster Exp Locker: douglis $ SPRITE (Berkeley)";
d306 2
a307 2
	    hashEntryPtr = (Hash_Entry *) malloc((unsigned)
		    (sizeof(Hash_Entry) + strlen((Address) keyPtr) - 3));
d316 2
a317 2
		(Hash_Entry *) malloc((unsigned) (sizeof(Hash_Entry)
			+ sizeof(unsigned)));
d327 1
a327 1
		    malloc((unsigned) (sizeof(Hash_Entry)
d370 1
a370 1
	List_Remove(hashEntryPtr);
@


8.1
log
@Stop using obsolete header files.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 8.0 88/11/11 18:41:15 douglis Stable Locker: ouster $ SPRITE (Berkeley)";
@


8.0
log
@Changing version numbers.
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 6.3 88/11/08 11:37:41 brent Exp Locker: douglis $ SPRITE (Berkeley)";
d21 1
a21 1
#include "mem.h"
a22 1
#include "byte.h"
d91 1
a91 1
    table->table = (Hash_Bucket *) Mem_Alloc(sizeof(Hash_Bucket) * table->size);
d306 2
a307 2
	    hashEntryPtr = (Hash_Entry *) Mem_Alloc(sizeof(Hash_Entry) + 
				strlen((Address) keyPtr) - 3);
d311 1
a311 1
	    hashEntryPtr = (Hash_Entry *) Mem_Alloc(sizeof(Hash_Entry));
d316 2
a317 1
		(Hash_Entry *) Mem_Alloc(sizeof(Hash_Entry) + sizeof(unsigned));
d327 2
a328 1
		    Mem_Alloc(sizeof(Hash_Entry) + (n - 1) * sizeof(unsigned));
d372 1
a372 1
	Mem_Free(hashEntryPtr);
d441 1
a441 1
    Mem_Free((Address) saveTable);
d624 1
a624 1
	    Mem_Free((Address) hashEntryPtr);
d627 1
a627 1
    Mem_Free((Address) table->table);
@


6.3
log
@Nuked use of String_ functions
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: /sprite/src/kernel/utils/RCS/hash.c,v 6.2 88/10/30 20:58:01 jhh Exp Locker: brent $ SPRITE (Berkeley)";
@


6.2
log
@multiprocessor port
@
text
@d16 1
a16 1
static char rcsid[] = "$Header: hash.c,v 6.1 88/08/23 15:53:50 rab Exp $ SPRITE (Berkeley)";
d308 2
a309 2
				String_Length((Address) keyPtr) - 3);
	    (void)String_Copy((char *) keyPtr, (char *) hashEntryPtr->key.name);
@


6.1
log
@Cleaned everything up so it would lint with fewer complaints.
@
text
@d8 3
d16 1
a16 1
static char rcsid[] = "$Header: hash.c,v 6.0 88/08/11 12:28:46 brent Stable $ SPRITE (Berkeley)";
d188 1
a188 1
		if (String_Compare(hashEntryPtr->key.name, key) == 0) {
d205 3
a207 3
		if (Byte_Compare(numKeys * sizeof(int), 
			    (Address) hashEntryPtr->key.words,
			    (Address) key)) {
d485 1
a485 1
    Sys_Printf("Entries in table %d number of buckets %d\n", 
d488 1
a488 1
	Sys_Printf("Number of buckets with %d entries: %d.\n", i, count[i]);
d490 1
a490 1
    Sys_Printf("Number of buckets with > 9 entries: %d.\n", overflow);
@


6.0
log
@Changing version numbers.
@
text
@d13 1
a13 1
static char rcsid[] = "$Header: hash.c,v 5.0 87/08/11 10:51:56 sprite Exp $ SPRITE (Berkeley)";
d197 1
a197 1
		if (*hashKeyPtr++ == *keyPtr++ && *hashKeyPtr == *keyPtr) {
d306 1
a306 1
	    String_Copy((char *) keyPtr, (char *) hashEntryPtr->key.name);
@


5.0
log
@First Sprite native copy
@
text
@d13 1
a13 1
static char rcsid[] = "$Header: hash.c,v 3.1 86/11/18 11:57:39 nelson Exp $ SPRITE (Berkeley)";
@
