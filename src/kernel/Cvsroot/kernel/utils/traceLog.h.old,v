head     1.7;
branch   ;
access   ;
symbols  ds3100:1.7 sun3:1.7 sun4nw:1.7 symm:1.7 spur:1.7;
locks    ; strict;
comment  @ * @;


1.7
date     91.07.24.22.13.17;  author kupfer;  state Exp;
branches ;
next     1.6;

1.6
date     91.06.27.12.16.32;  author shirriff;  state Exp;
branches ;
next     1.5;

1.5
date     91.01.09.13.14.11;  author mgbaker;  state Exp;
branches ;
next     1.4;

1.4
date     91.01.08.16.28.40;  author shirriff;  state Exp;
branches ;
next     1.3;

1.3
date     90.12.06.17.34.28;  author shirriff;  state Exp;
branches ;
next     1.2;

1.2
date     90.11.30.17.43.59;  author shirriff;  state Exp;
branches ;
next     1.1;

1.1
date     90.11.25.18.42.18;  author shirriff;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@INUSE, DONE, UNUSED -> TRACELOG_INUSE, TRACELOG_DONE, TRACELOG_UNUSED
(avoid name conflicts).
@
text
@/*
 * traceLog.h --
 *
 *	Definitions for the generalized tracing facility.
 *
 *	These routines are for the SOSP91 paper.
 *
 * Copyright 1991 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that this copyright
 * notice appears in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/kernel/utils/RCS/traceLog.h,v 1.6 91/06/27 12:16:32 shirriff Exp Locker: kupfer $ SPRITE (Berkeley)
 */

#ifndef _TRACELOG
#define _TRACELOG

#include "sysStats.h"
#include "spriteTime.h"

/*
 * Information applicable to an entire circular buffer.
 */

typedef struct TraceLog_Header {
    int numBuffers;		/* The number of buffers */
    int	firstNewBuffer;		/* The first buffer with new data */
    int	currentBuffer;		/* The number of the current buffer */
    int	currentOffset;		/* Our offset in the buffer */
    int flags;			/* TRACE_INHIBIT, TRACE_NO_TIMES */
    int dataSize;		/* The size of each buffer */
    int	lostRecords;		/* Records lost due to overflow. */
    int	blocked;		/* Set if we're blocked on buffer full. */
    int totalNumRecords;	/* Total records given to record. */
    int totalLostRecords;	/* Total records lost. */
    Sys_TracelogHeaderKern hdr;	/* The header for the user. */
    struct TraceLog_Buffer *buffers;  /* pointer to array of buffers */
} TraceLog_Header;

/*
 * Trace Header Flags:
 *
 *	TRACELOG_INHIBIT		- Don't do traces.
 *	TRACELOG_NO_TIMES		- Don't take time stamps, faster.
 *	TRACELOG_NO_BUF			- Return records immediately.
 */

#define TRACELOG_INHIBIT		0x0100
#define TRACELOG_NO_TIMES		0x0200
#define TRACELOG_NO_BUF			0x0400

/*
 * Information stored per-record.
 */

typedef struct TraceLog_Buffer {
    int size;			/* Size in bytes of the actual data. */
				/* Top byte = flags. */
    int numRecords;		/* Number of records. */
    int	lostRecords;		/* Records lost here due to overflow. */
    int	mode;			/* Inuse, done, unused (for consistency) */
    Address data;		/* Pointer to the data */
} TraceLog_Buffer;

#define TRACELOG_INUSE	1
#define TRACELOG_DONE	2
#define TRACELOG_UNUSED	3

extern void		TraceLog_Init _ARGS_((TraceLog_Header *tracerPtr,
					   int numBuffers, int size,
					   int flags, int version));
extern void		TraceLog_Insert _ARGS_((TraceLog_Header *traceHdrPtr,
					     Address dataPtr, int size,
					     int flags));
extern ReturnStatus	TraceLog_Dump _ARGS_((TraceLog_Header *traceHdrPtr,
				       Address  dataAddr, Address hdrAddr));
extern void		TraceLog_Reset _ARGS_((TraceLog_Header *traceHdrPtr));
extern void		TraceLog_Finish _ARGS_((TraceLog_Header *traceHdrPtr));

#endif /* _TRACELOG */
@


1.6
log
@Added copyright.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/kernel/utils/RCS/traceLog.h,v 1.5 91/01/09 13:14:11 mgbaker Exp Locker: shirriff $ SPRITE (Berkeley)
d70 3
a72 3
#define INUSE 1
#define DONE 2
#define UNUSED 3
@


1.5
log
@Fixed prototype
@
text
@d8 10
a17 1
 * $Header: /sprite/src/kernel/utils/RCS/traceLog.h,v 1.4 91/01/08 16:28:40 shirriff Exp Locker: mgbaker $ SPRITE (Berkeley)
@


1.4
log
@Added version letter recording.
@
text
@d8 1
a8 1
 * $Header: /sprite/src/kernel/utils/RCS/traceLog.h,v 1.3 90/12/06 17:34:28 shirriff Exp $ SPRITE (Berkeley)
d65 1
a65 1
extern void		TraceLog_Init _ARGS_((TraceLog_Header *traceLogHdrPtr,
d67 1
a67 1
					   int flags, char version));
@


1.3
log
@Changed to use Sys_TracelogHeaderKern.
@
text
@d8 1
a8 1
 * $Header: /sprite/src/kernel/utils/RCS/traceLog.h,v 1.2 90/11/30 17:43:59 shirriff Exp $ SPRITE (Berkeley)
d67 1
a67 1
					   int flags));
@


1.2
log
@Added record counts for verification, and also state tracking to make
sure the buffers all get handled properly.
@
text
@d8 1
a8 1
 * $Header: /sprite/src/kernel/utils/RCS/traceLog.h,v 1.1 90/11/25 18:42:18 shirriff Exp Locker: shirriff $ SPRITE (Berkeley)
d32 1
a32 1
    Sys_TracelogHeader hdr;	/* The header for the user. */
d41 1
d46 1
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
 * $Header: /sprite/src/kernel/utils/RCS/trace.h,v 9.1 90/09/11 14:11:33 kupfer Exp $ SPRITE (Berkeley)
d30 2
d55 1
d58 4
@
