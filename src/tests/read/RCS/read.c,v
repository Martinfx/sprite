head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     89.06.16.08.45.24;  author brent;  state Exp;
branches ;
next     1.5;

1.5
date     88.03.10.16.10.28;  author brent;  state Exp;
branches ;
next     1.4;

1.4
date     88.03.02.13.10.32;  author brent;  state Exp;
branches ;
next     1.3;

1.3
date     88.03.02.08.42.39;  author brent;  state Exp;
branches ;
next     1.2;

1.2
date     88.02.06.17.30.47;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     87.12.17.21.25.24;  author nelson;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@Partially converted this to the standard C library.
The error tests still need to be converted.
@
text
@#include "sprite.h"
#include "time.h"
#include "fs.h"
#include "stdio.h"
#include "option.h"

static char *buffer;

int	repeats = 1;
int	blockSize = 16384;
int	msToPause = -1;
int	loops = -1;
Boolean errorTest = FALSE;

Option optionArray[] = {
    {OPT_INT, "r", (Address) &repeats,
     "\tNumber of times to repeat read (Default 1)."},
    {OPT_INT, "b", (Address) &blockSize, 
     "\tBlock size to use for reading (Default 16384)."},
    {OPT_INT, "p", (Address)&msToPause,
     "\tMilliseconds to pause between reads of each block. "},
    {OPT_INT, "l", (Address)&loops,
     "\tNumber of times to loop between reads of each block. "},
    {OPT_TRUE, "e", (Address)&errorTest,
     "\tTest error cases. "},
};
int numOptions = sizeof(optionArray) / sizeof(Option);

int Handler();
int gotSig = FALSE;

main(argc, argv)
int argc;
char **argv;
{
    int 		cnt, total;
    double 		rate, tmp;
    Time 		before, after;
    int			newOffset;
    int		status;
    Time		pauseTime;
    Sig_Action		newAction, oldAction;
    register	int	i;

    argc = Opt_Parse(argc, argv, optionArray, numOptions, 0);

    /*
     * Set up signal handling, trap interrupts in order to test
     * the GEN_INTERRUPTED_BY_SIGNAL return code.
     */
    newAction.action = SIG_HANDLE_ACTION;
    newAction.handler = Handler;
    newAction.sigHoldMask = 0;
    Sig_SetAction(SIG_INTERRUPT, &newAction, &oldAction);

    buffer = (char *)malloc(blockSize);
    total = 0;
    if (msToPause > 0) {
	pauseTime.seconds = 0;
	pauseTime.microseconds = msToPause * 1000;
    }

    if (errorTest) {
	int numErrors = 0;
	printf("Read Error Tests NOT IMPLEMENTED\n"); 

#ifdef notdef
	Fs_Write(1, 3, "? ", &cnt);
	status = Fs_Read(-2, 0, 0, &cnt);
	if (status == SUCCESS) {
	    printf("ERROR: Fs_Read(-2) worked!\n");
	    numErrors++;
	} else {
	    Stat_PrintMsg(status, "Fs_Read(-2)");
	}

	Fs_Write(1, 3, "? ", &cnt);
	status = Fs_Read(0, 10, -1, &cnt);
	if (status == SUCCESS) {
	    printf("ERROR: Fs_Read{buffer = -1} worked!\n");
	    numErrors++;
	} else {
	    Stat_PrintMsg(status, "Fs_Read{buffer = -1}");
	}

	Fs_Write(1, 3, "? ", &cnt);
	status = Fs_Read(0, -1, buffer, &cnt);
	if (status == SUCCESS) {
	    printf("ERROR: Fs_Read{count < 0} worked!\n");
	    numErrors++;
	} else {
	    Stat_PrintMsg(status, "Fs_Read{count < 0}");
	}

	/*
	 * This uses Fs_RawRead because the library routine Fs_Read
	 * dies on a bad amountReadPtr.
	 */
	Fs_Write(1, 3, "? ", &cnt);
	status = Fs_RawRead(0, 10, buffer, 0);
	if (status == SUCCESS) {
	    printf("ERROR: Fs_RawRead{&cnt = 0} worked!\n");
	    numErrors++;
	} else {
	    Stat_PrintMsg(status, "Fs_RawRead{&cnt = 0}");
	}

	{
	    int outFD2;
	    status = Fs_Open("/dev/null", FS_WRITE, 0,&outFD2);
	    if (status != SUCCESS) {
		fprintf(stderr, "Could not open %s for writing, status %x\n",
			       "/dev/null", status);
	    } else {
		status = Fs_Read(outFD2, 10, buffer, &cnt);
		if (status == SUCCESS) {
		    printf("ERROR: Fs_Read{writeonly stream} worked!\n");
		    numErrors++;
		} else {
		    Stat_PrintMsg(status, "Fs_Read{writeonly stream}");
		}
	    }
	}

	{
	    char *newBuf = (char *)malloc(100 * 1024);
	    printf("Starting 100K read... "); Io_Flush(io_StdOut);
	    status = Fs_RawRead(0, 100 * 1024, newBuf, &cnt);
	    if (gotSig) {
		printf("Got Signal, "); Io_Flush(io_StdOut);
	    }
	    if (status == SUCCESS) {
		printf("Read %d bytes\n", cnt);
	    } else {
		Stat_PrintMsg(status, "read");
	    }
	}

	Fs_Close(0);
	Fs_Write(1, 3, "? ", &cnt);
	status = Fs_Read(0, 10, buffer, &cnt);
	if (status == SUCCESS) {
	    printf("ERROR: Fs_Read{closed stream} worked!\n");
	    numErrors++;
	} else {
	    Stat_PrintMsg(status, "Fs_Read{closed stream}");
	}
	if (numErrors) {
	    printf("Read Test had %d errors\n", numErrors);
	} else {
	    printf("No errors\n");
	}
#endif
	exit(numErrors);
    } else {
	Sys_GetTimeOfDay(&before, NULL, NULL);
	for ( ; repeats > 0; repeats--) {
	    lseek(0, 0, 0);
	    while (1) {
		if (loops > 0) {
		    for (i = loops; i > 0; i --) {
		    }
		}
		cnt = read(0, buffer, blockSize, buffer);
		total += cnt;
		if (cnt < blockSize) break;
	    }
	}
	Sys_GetTimeOfDay(&after, NULL, NULL);
	rate = after.seconds - before.seconds;
	rate += (after.microseconds - before.microseconds)*.000001;
	rate = total/rate;
	printf("%d bytes read at %.0f bytes/sec.\n", total, rate);
    }
}

int
Handler()
{
    gotSig = TRUE;
}
@


1.5
log
@Updated error testing suite
@
text
@d4 1
a4 1
#include "io.h"
d16 1
a16 1
    {OPT_INT, 'r', (Address) &repeats,
d18 1
a18 1
    {OPT_INT, 'b', (Address) &blockSize, 
d20 1
a20 1
    {OPT_INT, 'p', (Address)&msToPause,
d22 1
a22 1
    {OPT_INT, 'l', (Address)&loops,
d24 1
a24 1
    {OPT_TRUE, 'e', (Address)&errorTest,
a38 1
    Ioc_RepositionArgs	seek;
d40 1
a40 1
    ReturnStatus	status;
d45 1
a45 1
    (void)Opt_Parse(&argc, argv, numOptions, optionArray);
d56 1
a56 1
    buffer = (char *)Mem_Alloc(blockSize);
d65 1
a65 1
	Io_Print("Read Error Tests\n"); Io_Flush(io_StdOut);
d67 1
d71 1
a71 1
	    Io_Print("ERROR: Fs_Read(-2) worked!\n");
d80 1
a80 1
	    Io_Print("ERROR: Fs_Read{buffer = -1} worked!\n");
d89 1
a89 1
	    Io_Print("ERROR: Fs_Read{count < 0} worked!\n");
d102 1
a102 1
	    Io_Print("ERROR: Fs_RawRead{&cnt = 0} worked!\n");
d112 1
a112 1
		Io_PrintStream(io_StdErr, "Could not open %s for writing, status %x\n",
d117 1
a117 1
		    Io_Print("ERROR: Fs_Read{writeonly stream} worked!\n");
d126 2
a127 2
	    char *newBuf = (char *)Mem_Alloc(100 * 1024);
	    Io_Print("Starting 100K read... "); Io_Flush(io_StdOut);
d130 1
a130 1
		Io_Print("Got Signal, "); Io_Flush(io_StdOut);
d133 1
a133 1
		Io_Print("Read %d bytes\n", cnt);
d143 1
a143 1
	    Io_Print("ERROR: Fs_Read{closed stream} worked!\n");
d149 1
a149 1
	    Io_Print("Read Test had %d errors\n", numErrors);
d151 1
a151 1
	    Io_Print("No errors\n");
d153 2
a154 1
	Proc_Exit(numErrors);
d158 1
a158 1
	    Ioc_Reposition(0, IOC_BASE_ZERO, 0, &newOffset);
a159 3
		if (msToPause > 0) {
		    Sync_WaitTime(pauseTime);
		}
d164 1
a164 1
		status = Fs_Read(0, blockSize, buffer, &cnt);
d166 1
a166 1
		if (cnt < blockSize || status != SUCCESS) break;
d173 1
a173 1
	Io_Print("%d bytes read at %.0f bytes/sec.\n", total, rate);
@


1.4
log
@Updated it to exit with a status equal to the number of
errors it found.
@
text
@d108 15
a122 7
	Fs_Write(1, 3, "? ", &cnt);
	status = Fs_Read(1, 10, buffer, &cnt);
	if (status == SUCCESS) {
	    Io_Print("ERROR: Fs_Read{stdOut} worked!\n");
	    numErrors++;
	} else {
	    Stat_PrintMsg(status, "Fs_Read{stdOut}");
d147 5
@


1.3
log
@Added error case testing.
@
text
@d65 1
d72 1
d81 1
d90 1
d103 1
d112 1
d136 1
d140 1
a140 1

@


1.2
log
@Added looping and sleeping optoins.
@
text
@d13 1
d24 2
d29 3
d43 1
d47 10
d64 53
a116 6
    Sys_GetTimeOfDay(&before, NULL, NULL);
    for ( ; repeats > 0; repeats--) {
	Ioc_Reposition(0, IOC_BASE_ZERO, 0, &newOffset);
	while (1) {
	    if (msToPause > 0) {
		Sync_WaitTime(pauseTime);
d118 23
a140 2
	    if (loops > 0) {
		for (i = loops; i > 0; i --) {
d142 7
a149 3
	    status = Fs_Read(0, blockSize, buffer, &cnt);
	    total += cnt;
	    if (cnt < blockSize || status != SUCCESS) break;
d151 5
d157 6
a162 5
    Sys_GetTimeOfDay(&after, NULL, NULL);
    rate = after.seconds - before.seconds;
    rate += (after.microseconds - before.microseconds)*.000001;
    rate = total/rate;
    Io_Print("%d bytes read at %.0f bytes/sec.\n", total, rate);
@


1.1
log
@Initial revision
@
text
@d11 2
d19 4
d30 8
a37 6
    int cnt, total;
    double rate, tmp;
    Time before, after;
    Ioc_RepositionArgs seek;
    int oldOffset;
    ReturnStatus status;
a40 2
    seek.base = IOC_BASE_ZERO;
    seek.offset = 0;
d42 5
d49 1
a49 1
	Ioc_Reposition(0, &seek, &oldOffset);
d51 7
@
