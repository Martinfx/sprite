head     1.3;
branch   ;
access   ;
symbols  ;
locks    jhh:1.3; strict;
comment  @ * @;


1.3
date     89.10.22.22.03.13;  author jhh;  state Exp;
branches ;
next     1.2;

1.2
date     88.08.26.16.24.30;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.16.12.27.57;  author brent;  state Exp;
branches ;
next     ;


desc
@Top level routine for pseudo-device benchmark
@


1.3
log
@checking in Brent's changes
@
text
@/*
 * Test driver for the pseudo-device implementation.
 *
 * The programs output goes to standard out, while the
 * statistics taken go to error output or another file.
 */

#include <sprite.h>
#include <status.h>
#include <stdio.h>
#include <fs.h>
#include <fsCmd.h>
#include <sysStats.h>
#include <rpc.h>
#include <proc.h>
#include <vm.h>
#include <kernel/sched.h>
#include <kernel/fsStat.h>
#include <kernel/vm.h>
#include <option.h>
#include "pdevInt.h"

Boolean clean = FALSE;
Boolean histogram = FALSE;
Boolean useSelect = FALSE;
Boolean copy = FALSE;
Boolean readP = FALSE;
Boolean writeP = FALSE;
Boolean ioctlP = FALSE;
Boolean selectP = FALSE;
Boolean switchBuf = FALSE;
Boolean writeBehind = FALSE;
int size = 128;
int reps = 100;
int numClients = -1;			/* For multi-program synchronization,
					 * this is the number of slaves with
					 * which to synchronize */
int delay = 0;				/* Delay loop for server to eat CPU */
Boolean slave = FALSE;
char outFileDefault[] = "pdevtest.out";
char *outFile = outFileDefault;

Option optionArray[] = {
	{OPT_INT, "M", (Address)&numClients,
		"Master for -M (int) clients"},
	{OPT_TRUE, "S", (Address)&slave,
		"Slave bench program\nTests:"},
	{OPT_STRING, "o", (Address)&outFile,
		"Output file name"},
	{OPT_STRING, "p", (Address)&pdev,
		"Name of the master pseudo device"},
	{OPT_TRUE, "i", (Address)&ioctlP,
		"IOControl test"},
	{OPT_TRUE, "r", (Address)&readP,
		"Read test"},
	{OPT_TRUE, "w", (Address)&writeP,
		"Write test"},
	{OPT_TRUE, "W", (Address)&writeBehind,
		"Enable write behind (with -M)"},
	{OPT_TRUE, "s", (Address)&selectP,
		"Select, makes master block client"},
	{OPT_TRUE, "c", (Address)&copy,
		"Copy stream test, the slave forks"},
	{OPT_INT, "n", (Address)&reps,
		"Number of repetitions"},
	{OPT_INT, "d", (Address)&size,
		"Amount of data to transfer"},
	{OPT_INT, "P", (Address)&delay,
		"Loop for -P <int> cylces before replying"},
	{OPT_TRUE, "z", (Address)&useSelect,
		"Force Master to use select with 1 client"},
	{OPT_TRUE, "b", (Address)&switchBuf,
		"Test switching request buffers (use with -i)\nTracing:"},
	{OPT_TRUE, "x", (Address)&clean,
		"Turn off all tracing"},
	{OPT_TRUE, "h", (Address)&histogram,
		"Leave histograms on (ok with -x)"},
};
int numOptions = sizeof(optionArray) / sizeof(Option);

FsStats fsStartStats, fsEndStats;
Vm_Stat	vmStartStats, vmEndStats;
Time startTime, endTime;
Sched_Instrument startSchedStats, endSchedStats;

main(argc, argv)
    int argc;
    char *argv[];
{
    register ReturnStatus status = SUCCESS;
    Proc_PID child;
    Proc_ResUsage usage;
    FILE * outStream;
    register int i;
    ClientData serverData, clientData;

    argc = Opt_Parse(argc, argv, optionArray, numOptions, OPT_ALLOW_CLUSTERING);
    if (!slave && (numClients < 0)) {
	fprintf(stderr, "Master: %s [-xfpoh] -M numSlaves\n",
			    argv[0]);
	fprintf(stderr, "Slave: %s [-xfpoh] -S\n", argv[0]);
	Opt_PrintUsage(argv[0], optionArray, numOptions);
	exit(1);
    }
    if (size > MAX_SIZE) {
	size = MAX_SIZE;
    }
    if (clean) {
	int newValue;
	newValue = 0;
	Fs_Command(FS_SET_CACHE_DEBUG, sizeof(int), &newValue);
	newValue = 0;
	Fs_Command(FS_SET_TRACING, sizeof(int), &newValue);
	newValue = 0;
	Fs_Command(FS_SET_RPC_DEBUG, sizeof(int), &newValue);
	newValue = 0;
	Fs_Command(FS_SET_RPC_TRACING, sizeof(int), &newValue);
	if (!histogram) {
	    newValue = 0;
	    (void) Fs_Command(FS_SET_RPC_SERVER_HIST, sizeof(int), &newValue);
	    newValue = 0;
	    (void) Fs_Command(FS_SET_RPC_CLIENT_HIST, sizeof(int), &newValue);
	}
    }
    outStream = fopen(outFile, "w+");
    if (outStream == (FILE *)NULL) {
	perror(outFile);
	exit(status);
    }
    /*
     * Copy command line to output file.
     */
    fprintf(outStream, "%s ", argv[0]);
    if (clean) {
	fprintf(outStream, "-x ");
    }
    if (histogram) {
	fprintf(outStream, "-h ");
    }
    if (clean) {
	fprintf(outStream, "-x ");
    }
    for (i=1 ; i<argc ; i++) {
	fprintf(outStream, "%s ", argv[i]);
    }
    fprintf(outStream, "\n");
    /*
     * Check for multi-program master/slave setup.
     */
    if (numClients > 0) {
	ServerSetup(numClients, &serverData);
	slave = FALSE;
    }
    if (slave) {
	ClientSetup(&clientData);
    }
    /*
     * Get first sample of filesystem stats, vm stats, time, and idle ticks.
     */
    status = Fs_Command(FS_RETURN_STATS, sizeof(FsStats), &fsStartStats);
    if (status != SUCCESS) {
	Stat_PrintMsg(status, "Error getting FS stats");
	exit(status);
    }
    status = Vm_Cmd(VM_GET_STATS, &vmStartStats);
    if (status != SUCCESS) {
	Stat_PrintMsg(status, "Error getting VM stats");
	exit(status);
    }
    status = Sys_Stats(SYS_SCHED_STATS, 0, &startSchedStats);
    if (status != SUCCESS) {
	Stat_PrintMsg(status, "Error in Sys_Stats");
	exit(status);
    }

    status = Sys_GetTimeOfDay(&startTime, NULL, NULL);
    if (status != SUCCESS) {
	Stat_PrintMsg(status, "Error in Sys_GetTimeOfDay");
	exit(status);
    }
    if (slave) {
	if (copy) {
	    child = fork();
	}
	if (readP) {
	    ClientRead(clientData, size, reps);
	}
	if (writeP) {
	    ClientWrite(clientData, size, reps);
	}
	if (ioctlP) {
	    ClientIOControl(clientData, size, reps);
	}
	if (copy) {
	    if (child != 0) {
		(void)wait(0);
	    } else {
		exit(0);
	    }
	}
	/*
	 * Take ending statistics and print user, system, and elapsed times.
	 */
	Sys_GetTimeOfDay(&endTime, NULL, NULL);
	Sys_Stats(SYS_SCHED_STATS, 0, &endSchedStats);
	Time_Subtract(endTime, startTime, &endTime);
	printf("Slave: ");
	PrintTimes(stdout, &usage, &endTime);

	Sys_Shutdown(0);	/* sync cache */
	ClientDone(clientData);

	Fs_Command(FS_RETURN_STATS, sizeof(FsStats), &fsEndStats);
	Vm_Cmd(VM_GET_STATS, &vmEndStats);
	/*
	 * Print FS statistics.
	 */
	fprintf(outStream, "C: ");
	PrintIdleTime(outStream, &startSchedStats, &endSchedStats, &endTime);
	PrintFsStats(outStream, &fsStartStats, &fsEndStats);
	/*
	 * Print VM statistics.
	 */
	PrintVmStats(outStream, &vmStartStats, &vmEndStats);
    } else {
	/*
	 * Drop into the top level service loop.  ServeOne is a faster
	 * version that doesn't use select because there is only
	 * one client.
	 */
	if (numClients > 1 || useSelect) {
	    Serve(serverData);
	} else {
	    ServeOne(serverData);
	}
	/*
	 * Take ending statistics and print user, system, and elapsed times.
	 */
	Sys_GetTimeOfDay(&endTime, NULL, NULL);
	Sys_Stats(SYS_SCHED_STATS, 0, &endSchedStats);
	Time_Subtract(endTime, startTime, &endTime);
	printf("Master: ");
	PrintTimes(stdout, &usage, &endTime);

	Sys_Shutdown(0);	/* sync cache */
	Fs_Command(FS_RETURN_STATS, sizeof(FsStats), &fsEndStats);
	Vm_Cmd(VM_GET_STATS, &vmEndStats);
	/*
	 * Print FS statistics.
	 */
	fprintf(outStream, "S: ");
	PrintIdleTime(outStream, &startSchedStats, &endSchedStats, &endTime);
	PrintFsStats(outStream, &fsStartStats, &fsEndStats);
	/*
	 * Print VM statitistics.
	 */
	PrintVmStats(outStream, &vmStartStats, &vmEndStats);

	if (delay > 0) {
	    int cnt;
	    Sys_GetTimeOfDay(&startTime, NULL, NULL);
	    for (cnt=0 ; cnt<50 ; cnt++) {
		for (i=delay<<1 ; i>0 ; i--) ;
	    }
	    Sys_GetTimeOfDay(&endTime, NULL, NULL);
	    Time_Subtract(endTime, startTime, &endTime);
	    Time_Divide(endTime, 50, &endTime);
	    printf("%d.%06d seconds service delay\n",
		endTime.seconds, endTime.microseconds);
	}
    }
    exit(status);
}
@


1.2
log
@Added service delay
@
text
@d2 1
a2 1
 * Driver for the new (Dec 87) pseudo-device implementation.
d8 14
a21 13
#include "sprite.h"
#include "status.h"
#include "io.h"
#include "fs.h"
#include "fsCmd.h"
#include "sysStats.h"
#include "rpc.h"
#include "proc.h"
#include "vm.h"
#include "kernel/sched.h"
#include "kernel/fsStat.h"
#include "kernel/vm.h"
#include "option.h"
a22 1
Boolean flushCache = FALSE;
d27 4
a30 4
Boolean read = FALSE;
Boolean write = FALSE;
Boolean ioctl = FALSE;
Boolean select = FALSE;
d34 1
a34 1
int reps = 10;
d40 2
a41 2
char *outFile = "pdevtest.out";
extern char *pdev;
d44 1
a44 1
	{OPT_INT, 'M', (Address)&numClients,
d46 1
a46 1
	{OPT_TRUE, 'S', (Address)&slave,
d48 7
a54 9
	{OPT_INT, 'n', (Address)&reps,
		"Number of repetitions"},
	{OPT_INT, 'd', (Address)&size,
		"Amount of data to transfer"},
	{OPT_TRUE, 's', (Address)&select,
		"Select, makes master block client"},
	{OPT_TRUE, 'c', (Address)&copy,
		"Copy stream test, the slave forks"},
	{OPT_TRUE, 'r', (Address)&read,
d56 1
a56 1
	{OPT_TRUE, 'w', (Address)&write,
d58 1
a58 1
	{OPT_TRUE, 'W', (Address)&writeBehind,
d60 9
a68 3
	{OPT_TRUE, 'i', (Address)&ioctl,
		"IOControl test"},
	{OPT_INT, 'P', (Address)&delay,
d70 5
a74 9
	{OPT_TRUE, 'b', (Address)&switchBuf,
		"Test switching request buffers (use with -i)"},
	{OPT_STRING, 'o', (Address)&outFile,
		"Output file name\n"},
	{OPT_STRING, 'p', (Address)&pdev,
		"Name of the master pseudo device\nTracing:"},
	{OPT_TRUE, 'f', (Address)&flushCache,
		"Flush cache before benchmark"},
	{OPT_TRUE, 'x', (Address)&clean,
d76 1
a76 1
	{OPT_TRUE, 'h', (Address)&histogram,
a77 2
	{OPT_TRUE, 'z', (Address)&useSelect,
		"Make Master use select with 1 client"},
d93 1
a93 1
    Io_Stream outStream;
d97 1
a97 1
    Opt_Parse(&argc, argv, numOptions, optionArray);
d99 1
a99 1
	Io_PrintStream(io_StdErr, "Master: %s [-xfpoh] -M numSlaves\n",
d101 3
a103 3
	Io_PrintStream(io_StdErr, "Slave: %s [-xfpoh] -S\n", argv[0]);
	Opt_PrintUsage(argv[0], numOptions, optionArray);
	Proc_Exit(1);
d105 3
d125 4
a128 13
    if (flushCache) {
	int numLockedBlocks = 0;
	Fs_Command(FS_EMPTY_CACHE, sizeof(int), &numLockedBlocks);
        if (numLockedBlocks > 0) {
            Io_PrintStream(io_StdErr, "Flush found %d locked blocks left\n",
                                      numLockedBlocks);
        }
    }
    outStream = Io_Open(outFile, "w+");
    if (outStream == (Io_Stream)NULL) {
	Io_PrintStream(io_StdErr, "\"%s\": ", outFile);
	Stat_PrintMsg(status, "Can't open");
	Proc_Exit(status);
d133 1
a133 1
    Io_PrintStream(outStream, "%s ", argv[0]);
d135 1
a135 1
	Io_PrintStream(outStream, "-x ");
d138 1
a138 4
	Io_PrintStream(outStream, "-h ");
    }
    if (flushCache) {
	Io_PrintStream(outStream, "-f ");
d141 1
a141 1
	Io_PrintStream(outStream, "-x ");
d144 1
a144 1
	Io_PrintStream(outStream, "%s ", argv[i]);
d146 1
a146 1
    Io_PrintStream(outStream, "\n");
d163 1
a163 1
	Proc_Exit(status);
d168 1
a168 1
	Proc_Exit(status);
d173 1
a173 1
	Proc_Exit(status);
d179 1
a179 1
	Proc_Exit(status);
d183 1
a183 5
	    status = Proc_Fork(TRUE, &child);
	    if (status != PROC_CHILD_PROC && status != SUCCESS) {
		Stat_PrintMsg(status, "Fork failed");
		Proc_Exit(status);
	    }
d185 1
a185 1
	if (read) {
d188 1
a188 1
	if (write) {
d191 1
a191 1
	if (ioctl) {
d195 2
a196 2
	    if (status != PROC_CHILD_PROC) {
		status = Proc_Wait(0, NULL, TRUE, NULL, NULL, NULL, NULL, &usage);
d198 1
a198 1
		Proc_Exit(SUCCESS);
d207 2
a208 2
	Io_PrintStream(io_StdOut, "Slave: ");
	PrintTimes(io_StdOut, &usage, &endTime);
d218 1
a218 1
	Io_PrintStream(outStream, "C: ");
d242 2
a243 2
	Io_PrintStream(io_StdOut, "Master: ");
	PrintTimes(io_StdOut, &usage, &endTime);
d251 1
a251 1
	Io_PrintStream(outStream, "S: ");
d268 1
a268 1
	    Io_PrintStream(io_StdOut, "%d.%06d seconds service delay\n",
d272 1
a272 2
    Io_Flush(outStream);
    Proc_Exit(status);
@


1.1
log
@Initial revision
@
text
@d38 1
d64 2
d96 1
a96 1
    int i;
d273 13
@
