#!/bin/sh
# This is a shell archive.  Remove anything before this line,
# then unpack it by saving it in a file and typing "sh file".
#
# Wrapped by jhh on Fri Mar 16 12:41:08 PST 1990
# Contents:  mkscsidev mkscsidev.man
 
echo x - mkscsidev
sed 's/^@//' > "mkscsidev" <<'@//E*O*F mkscsidev//'
#! /sprite/cmds/csh -f
#
# User friendly front end for fsmakedev.
#
# $Header: /sprite/src/cmds/mkscsidev/RCS/mkscsidev,v 1.3 90/01/17 17:44:21 jhh Exp $ SPRITE (Berkeley)
#
# Copyright 1989 Regents of the University of California
# Permission to use, copy, modify, and distribute this
# software and its documentation for any purpose and without
# fee is hereby granted, provided that the above copyright
# notice appear in all copies.  The University of California
# makes no representations about the suitability of this
# software for any purpose.  It is provided "as is" without
# express or implied warranty.
#

set devType=4
set hba=0
set hbaType=0
set target=0
set lun=0
set server=-1
set specific=0
set raw=0
set devTypeCount=0
set serverOption
set type
set unit

while ($#argv)
    switch ($1)
	case "-devType":
	    shift
	    if ($#argv == 0) then
		echo "-devType option requires an argument"
	    else
		set devType = $1
		shift
	    endif
	    breaksw
	case "-hbaType":
	    shift
	    if ($#argv == 0) then
		echo "-hbaType option requires an argument"
	    else
		set hbaType = $1
		shift
	    endif
	    breaksw
	case "-server":
	    shift
	    if ($#argv == 0) then
		echo "-server option requires an argument"
	    else
		set server = $1
		shift
	    endif
	    breaksw
	case "-hba"
	    shift
	    if ($#argv == 0) then
		echo "-hba option requires an argument"
	    else
		set hba = $1
		shift
	    endif
	    breaksw
	case "-target"
	    shift
	    if ($#argv == 0) then
		echo "-target option requires an argument"
	    else
		set target = $1
		shift
	    endif
	    breaksw
	case "-lun"
	    shift
	    if ($#argv == 0) then
		echo "-lun option requires an argument"
	    else
		set lun = $1
		shift
	    endif
	    breaksw
	case "-disk"
	    shift
	    set diskFlag
	    set devType=4
	    @ devTypeCount++
	    breaksw
	case "-rawDisk"
	    shift
	    set rawDiskFlag
	    set devType=4
	    @ devTypeCount++
	    breaksw
	case "-tape"
	    shift
	    set tapeFlag
	    set devType=5
	    @ devTypeCount++
	    breaksw
	case "-rawScsi"
	    shift
	    set rawScsiFlag
	    set devType=9
	    @ devTypeCount++
	    breaksw
	case "-specific"
	    shift
	    if ($#argv == 0) then
		echo "-specific option requires an argument"
	    else
		set specific = $1
		shift
	    endif
	    set specificFlag
	    breaksw
	case "-h"
	case "-help"
	    shift
	    goto usage
	    breaksw
	default:
	    if ($1 !~ "-*") then
		set name = $1
		shift
		breaksw
	    endif
	    echo "Invalid option" $1 "to $0"
	    shift
	    goto usage
	    breaksw
    endsw
end

if (! $?name) then
    goto usage
endif

if ($devTypeCount > 1) then
    echo "You can only use one of -disk, -rawDisk, -tape or -rawScsi"
    goto usage
endif

if ($?rawDiskFlag) then
    set raw=8
    set diskFlag
endif 

if ($specific < 0 || $specific > 15) then
    echo "Argument to -specific must be 0-15"
    goto usage
endif

if ($server != -1) then
    set serverOption="-s $server"
endif

@@ type = ($hbaType << 8 | $devType)

if ($?diskFlag || $?rawDiskFlag) then

    set partitions = (a b c d e f g h)
    
    set i=0
    foreach part ($partitions) 
	@ unit = ($hba << 10 | $lun << 7 | $target << 4 | $i | $raw)
	fsmakedev $serverOption -d $type -u $unit $name$part
	set returnstatus = $status
	if ($returnstatus != 0) then
	    echo "Fsmakedev returned with <$returnstatus>"
	    echo -n "Full command was: "
	    echo "fsmakedev $serverOption -d $type -u $unit $name$part"
	    exit
	endif
	@ i++
    end
else
    @ unit = ($hba << 10 | $lun << 7 | $target << 4 | $specific)
    fsmakedev $serverOption -d $type -u $unit $name
    set returnstatus = $status
    if ($returnstatus != 0) then
	echo "Fsmakedev returned with <$returnstatus>"
	echo -n "Full command was: "
	echo "fsmakedev $serverOption -d $type -u $unit $name"
	exit
    endif
endif


exit

usage:
    echo "Usage: $0 "
    echo "       [-server serverID (local host)] "
    echo "       [-devType deviceType (4)] "
    echo "       [-hbaType hbaType (0)] "
    echo "       [-hba hba (0)] "
    echo "       [-target target (0)] "
    echo "       [-lun lun (0)] "
    echo "       [[-disk] OR "
    echo "       [[-rawDisk] OR "
    echo "       [[-tape] OR "
    echo "       [[-rawScsi]] "
    echo "       [-specific specific] "
    echo "       deviceName"
    echo "Examples: $0 -hba 2 -target 1 -disk /dev/rsd21"
    echo "          $0 -target 5 -tape /dev/exabyte"
    echo "SCSI hba types: "
    echo "	SCSI3		0 "
    echo "	DecStation 3100 0 "
    echo "	SCSI0		1 "
    echo "	JAGUAR		2 "
    exit

@//E*O*F mkscsidev//
chmod u=rx,g=rx,o=rx mkscsidev
 
echo x - mkscsidev.man
sed 's/^@//' > "mkscsidev.man" <<'@//E*O*F mkscsidev.man//'
'\" Copyright 1989 Regents of the University of California
'\" Permission to use, copy, modify, and distribute this
'\" documentation for any purpose and without fee is hereby
'\" granted, provided that this notice appears in all copies.
'\" The University of California makes no representations about
'\" the suitability of this material for any purpose.  It is
'\" provided "as is" without express or implied warranty.
'\" 
'\" $Header: /sprite/src/cmds/mkscsidev/RCS/mkscsidev.man,v 1.2 90/01/11 15:10:03 jhh Exp $ SPRITE (Berkeley)
'/" 
@.so \*(]ltmac.sprite
@.HS MKSCSIDEV cmds
@.BS
'\" Note:  do not modify the .SH NAME line immediately below!
@.SH NAME
mkscsidev \- Create scsi devices.
@.SH SYNOPSIS
\fBmkscsidev\fR [\fIoptions\fR] \fIdeviceName\fR
@.SH OPTIONS
@.IP "\fB\-server \fIserverID\fR" 15
\fIServerID\fR is the Sprite ID of the server for the device.
The default is to set up the device to use the local host.

@.IP "\fB\-hbaType \fIhbaType\fR" 15
\fIHbaType\fR is the numeric identifier for the type of HBA associated
with the device. The default is 0. 
The following are valid hba types: SCSI3 = 0; DecStation 3100 = 0; SCSI0 = 1;
JAGUAR = 2.

@.IP "\fB\-devType \fIdeviceType\fR" 15
\fIDevType\fR is the numeric identifier for the type of device.
The default is 4 (SCSI disk).

@.IP "\fB\-hba \fIhba\fR" 15
\fIHba\fR is the id of the hba controller that the scsi device is connected to.
The default is 0.

@.IP "\fB\-target \fItarget\fR" 15
\fITarget\fR is the scsi target id of the scsi device.
The default is 0.

@.IP "\fB\-lun \fIlun\fR" 15
\fILun\fR is the scsi logical unit number of the scsi device.
The default is 0.

@.IP "\fB\-disk\fR" 15
The \fB\-disk\fR option is used to create all the partitions for a scsi
disk.  In this case the \fIdeviceName\fR is treated as a prefix, and
8 devices are made by appending the letters 'a' through 'h' to the prefix.

@.IP "\fB\-rawDisk\fR" 15
The \fB\-rawDisk\fR option is used to create all the partitions for a raw scsi
disk.  
A raw disk is accessed without referencing the disk label.
In this case the \fIdeviceName\fR is treated as a prefix, and
8 devices are made by appending the letters 'a' through 'h' to the prefix.
@.IP "\fB\-tape\fR" 15
The \fB\-tape\fR option is used to create a device file for a SCSI tape.
@.IP "\fB\-rawScsi\fR" 15
The \fB\-rawScsi\fR option is used to create a device file for a raw 
SCSI device.
@.IP "\fB\-specific \fIvalue\fR" 15
4 bits of the device unit number are device specific. 
The \fB\-specific\fR option can be used to set those bits.
option.
@.IP "\fB\-help\fR" 15
Print a summary of the command-line options.
@.BE

@.SH DESCRIPTION
@.PP
\fBMkscsidev\fR is used to create SCSI devices.
It is a user-friendly front end for the \fBfsmakedev\fR
program.
The \fB\-disk\fR option is probably the most useful. 
It treats the \fIdeviceName\fR as a prefix and creates devices for all
partitions of the disk.
@.SH EXAMPLES
\fBmkscsidev \-hba 2 \-target 1 \-disk /dev/rsd21\fR creates the devices:
@.br
/dev/rsd21a, /dev/rsd21b, /dev/rsd21c, /dev/rsd21d, /dev/rsd21e, /dev/rsd21f,
/dev/rsd21g, and /dev/rsd21h,
@.br
using the following calls to \fBfsmakedev\fR:
@.br
fsmakedev -d 4 -u 2064 /dev/rsd21a
@.br
fsmakedev -d 4 -u 2065 /dev/rsd21b
@.br
fsmakedev -d 4 -u 2066 /dev/rsd21c
@.br
fsmakedev -d 4 -u 2067 /dev/rsd21d
@.br
fsmakedev -d 4 -u 2068 /dev/rsd21e
@.br
fsmakedev -d 4 -u 2069 /dev/rsd21f
@.br
fsmakedev -d 4 -u 2070 /dev/rsd21g
@.br
fsmakedev -d 4 -u 2071 /dev/rsd21h
@.sp
\fBmkscsidev \-server 10 \-devType 5 \-lun 1 \-specific 10 /dev/foo\fR produces the device /dev/foo using the following call to \fBfsmakedev\fR:
@.br
fsmakedev -s 10 -d 5 -u 138 /dev/foo
@.SH KEYWORDS
scsi, disk, partitions, fsmakedev, device

@//E*O*F mkscsidev.man//
chmod u=r,g=r,o=r mkscsidev.man
 
echo Inspecting for damage in transit...
temp=/tmp/shar$$; dtemp=/tmp/.shar$$
trap "rm -f $temp $dtemp; exit" 0 1 2 3 15
cat > $temp <<\!!!
     217     673    4564 mkscsidev
     107     592    3702 mkscsidev.man
     324    1265    8266 total
!!!
wc  mkscsidev mkscsidev.man | sed 's=[^ ]*/==' | diff -b $temp - >$dtemp
if [ -s $dtemp ]
then echo "Ouch [diff of wc output]:" ; cat $dtemp
else echo "No problems found."
fi
exit 0
