head     1.18;
branch   ;
access   ;
symbols  ;
locks    rab:1.18; strict;
comment  @ * @;


1.18
date     91.09.12.15.40.39;  author rab;  state Exp;
branches ;
next     1.17;

1.17
date     91.09.12.15.37.11;  author rab;  state Exp;
branches ;
next     1.16;

1.16
date     90.11.05.07.06.04;  author rab;  state Exp;
branches ;
next     1.15;

1.15
date     90.09.09.03.32.01;  author rab;  state Exp;
branches ;
next     1.14;

1.14
date     90.06.28.15.31.15;  author rab;  state Exp;
branches ;
next     1.13;

1.13
date     90.04.09.08.45.24;  author rab;  state Exp;
branches ;
next     1.12;

1.12
date     90.02.06.21.38.50;  author rab;  state Exp;
branches ;
next     1.11;

1.11
date     90.01.12.09.40.36;  author rab;  state Exp;
branches ;
next     1.10;

1.10
date     89.12.14.17.49.05;  author rab;  state Exp;
branches ;
next     1.9;

1.9
date     89.10.25.21.33.16;  author rab;  state Exp;
branches ;
next     1.8;

1.8
date     89.10.23.21.23.53;  author rab;  state Exp;
branches ;
next     1.7;

1.7
date     89.10.13.10.24.11;  author rab;  state Exp;
branches ;
next     1.6;

1.6
date     89.07.19.10.50.38;  author ouster;  state Exp;
branches ;
next     1.5;

1.5
date     89.06.15.14.56.05;  author rab;  state Exp;
branches ;
next     1.4;

1.4
date     89.05.09.23.17.14;  author rab;  state Exp;
branches ;
next     1.3;

1.3
date     89.05.09.21.30.11;  author rab;  state Exp;
branches ;
next     1.2;

1.2
date     89.03.12.21.02.38;  author rab;  state Exp;
branches ;
next     1.1;

1.1
date     89.02.24.15.56.48;  author rab;  state Exp;
branches ;
next     ;


desc
@@


1.18
log
@Recognize sun4c2 as alias for sun4.
@
text
@/*
 * specs.h --
 *
 *	This file is included by gcc.c, and defines the compilation
 *	and linking specs for each of the target machines for which
 *	gcc can currently generate code.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.17 91/09/12 15:37:11 rab Exp Locker: rab $ SPRITE (Berkeley)
 */

#ifndef _SPECS
#define _SPECS

/* This structure says how to run one compiler, and when to do so.  */

struct compiler
{
  char *suffix;			/* Use this compiler for input files
				   whose names end in this suffix.  */
  char *spec;			/* To use this compiler, pass this spec
				   to do_spec.  */
};

/*
 * One of the following structures exists for each machine for
 * which gcc can generate code.  It gives all the spec-related
 * information for compiling for tha target.
 */

typedef struct
{
    char *name;				/* Official name of this target
					 * machine (many -m switches may
					 * map to the same entry). */
    struct compiler *base_specs;	/* List of specs to use when compiling
					 * for this target machine.  Last
					 * compiler must be all zeros to
					 * indicate end of list. */
    struct compiler *cplusplus_specs;   /* List of specs to use when invoked					           as a c++ compiler */
    char *link_base_spec;		/* Basic spec to use to link for this
					 * target. */
    char *cpp_predefines;		/* Spec to substitute for %p. */
    char *cpp_spec;			/* Spec to substitute for %C. */
    char *cc1_spec;                     /* Spec to substitute for %1. */
    char *cplus1_spec;                  /* Spec to substitute for %+  */
    char *asm_spec;			/* Spec to substitute for %a. */
    char *link_spec;			/* Spec to substitute for %l. */
    char *lib_spec;			/* Spec to substitute for %L. */
    char *startfile_spec;		/* Spec to substitute for %S. */
    char *signed_char_spec;             /* Spec to substitute for %c. */
} target_specs;

static char default_assembler_string[] = 
     "%{!E:%{!S:%a %{R} %{j} %{J} %{h} %{d2}\
	%i %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}\
      %{E:%C %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} -m%m %{M*} %{T} \
        -undef -D__GNUC__ %{ansi: -$ -D__STRICT_ANSI__}\
	%{!ansi:%p -Dunix -Dsprite}\
        %{O:-D__OPTIMIZE__} %{traditional} %{pedantic}\
	%{Wcomment} %{Wtrigraphs} %{Wall}\
        %i %{o*} %{M*:%{o*}}}\n";

static char default_c_string[] =
     "%C %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} -m%m %{M*} %{T} \
        -undef -D__GNUC__ %{ansi: -$ -D__STRICT_ANSI__}\
	%{!ansi:%p -Dunix -Dsprite}\
	%{msoft-float:-D__SOFT_FLOAT__}\
        %{O:-D__OPTIMIZE__} %{traditional} %{pedantic}\
	%{Wcomment} %{Wtrigraphs} %{Wall}\
        %i %{!M*:%{!E:%g.cpp}}%{E:%{o*}}%{M*:%{o*}}\n\
     %{!M*:%{!E:%1 %g.cpp %{!Q:-quiet} -dumpbase %i %{Y*} %{d*} %{m*} %{f*}\
	%{a} %{g} %{O} %{W*} %{w} %{pedantic} %{ansi} %{traditional}\
	%{v:-version} %{gg:-symout %g.sym} %{pg:-p} %{p}\
        %{S:%{o*}%{!o*:-o %b.s}}%{!S:-o %g.s}\n\
     %{!S:%a %{R} %{j} %{J} %{h} %{d2} %{gg:-G %g.sym}\
	%g.s %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}}";

static char default_cplusplus_string[] = 
    "%C -+ %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} \
       -I/sprite/lib/include/g++ -m%m %{M*} %{T} \
       -undef -D__GNUC__ -D__GNUG__ -D__cplusplus %p -Dsprite %P\
       %c %{O:-D__OPTIMIZE__} %{traditional} %{pedantic}\
       %{Wcomment*} %{Wtrigraphs} %{Wall}\
       %i %{!M*:%{!E:%g.cpp}}%{E:%{o*}}%{M*:%{o*}}\n\
     %{!M*:%{!E:%+ %g.cpp %{!Q:-quiet} -dumpbase %i %{Y*} %{d*} %{m*} %{f*}\
	%{+e*} %{a} %{g} %{g0} %{O} %{W*} %{w} %{pedantic} %{traditional}\
	%{v:-version} %{gg:-symout %g.sym} %{pg:-p} %{p}\
        %{S:%{o*}%{!o*:-o %b.s}}%{!S:-o %g.s}\n\
     %{!S:%a %{R} %{j} %{J} %{h} %{d2} %{gg:-G %g.sym}\
	%g.s %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}}";

/*
 * Spec information for individual machines:
 */

static struct compiler default_compilers[] =
{
    {".c", default_c_string },
    {".cc", default_cplusplus_string },
    {".s", default_assembler_string },
    /* Mark end of table. */
    {0, 0}
};

static struct compiler default_cplusplus[] =
{
    {".c", default_cplusplus_string },
    {".cc", default_cplusplus_string },
    {".s", default_assembler_string },
    /* Mark end of table. */
    {0, 0},
};

#if 0
static struct compiler sun3_compilers[] =
{
    {".c",
     "%C %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} -m%m %{M*} %{T} \
        -undef -D__GNUC__ %{ansi: -$ -D__STRICT_ANSI__}\
	%{!ansi:%p -Dunix -Dsprite}\
	%{!m68881:-D__SOFT_FLOAT__}\
        %{O:-D__OPTIMIZE__} %{traditional} %{pedantic}\
	%{Wcomment} %{Wtrigraphs} %{Wall}\
        %i %{!M*:%{!E:%g.cpp}}%{E:%{o*}}%{M*:%{o*}}\n\
     %{!M*:%{!E:%1 %g.cpp %{!Q:-quiet} -dumpbase %i %{Y*} %{d*} %{m*} %{f*}\
	%{a} %{g} %{O} %{W*} %{w} %{pedantic} %{ansi} %{traditional}\
	%{v:-version} %{gg:-symout %g.sym} %{pg:-p} %{p}\
	%{!m68881:-msoft-float}\
        %{S:%{o*}%{!o*:-o %b.s}}%{!S:-o %g.s}\n\
     %{!S:%a %{R} %{j} %{J} %{h} %{d2} %{gg:-G %g.sym}\
	%g.s %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}}"},
    {".s",
     "%{!E:%{!S:%a %{R} %{j} %{J} %{h} %{d2}\
	%i %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}\
      %{E:%C %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} -m%m %{M*} %{T} \
        -undef -D__GNUC__ %{ansi: -$ -D__STRICT_ANSI__}\
	%{!ansi:%p -Dunix -Dsprite}\
        %{O:-D__OPTIMIZE__} %{traditional} %{pedantic}\
	%{Wcomment} %{Wtrigraphs} %{Wall}\
        %i %{o*} %{M*:%{o*}}}\n"},
    /* Mark end of table. */
    {0, 0}
};
#endif

static char default_link_spec[] =
    "%{!c:%{!M*:%{!E:%{!S:%l %{o*}\
    %{A} %{d} %{e*} %{N} %{n} %{r} %{s} %{S} %{T*} %{t} %{u*} %{X} %{x} %{z}\
    %{y*} %{!nostdlib:%S} %{L*} -L/sprite/lib/%m.md \
    %o %{!nostdlib:%L}\n }}}}";


static target_specs m68000_target =
{
    "sun2",					/* name */
    default_compilers,				/* base_specs */
    default_cplusplus,                          /* c++ specs */
    default_link_spec,				/* link_base_spec */
    "-Dmc68000 -Dsun2",				/* cpp_predefines */
    "cpp",                                      /* cpp_spec */
    "cc1.68k -msoft-float -m68000",		/* cc1_spec */
    "g++1.68k -m68000",                   /* cplus1_spec */
    "as.sun3 -m68010",				/* asm_spec */
    "ld.sun3 -X -m68010 %{!e:-e start}",	/* link_spec */
    "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}",	/* lib_spec */
    "",						/* start_file_spec */
    "%{funsigned-char: -D__CHAR_UNSIGNED__}",   /* signed_char_spec */
};

static target_specs m68020_target =
{
    "sun3",					/* name */
    default_compilers,				/* base_specs */
    default_cplusplus,                          /* c++ specs */
    default_link_spec,				/* link_base_spec */
    "-Dmc68000 -Dsun3",				/* cpp_predefines */
    "cpp",                                      /* cpp_spec */
    "cc1.68k -m68020",                          /* cc1_spec */
    "g++1.68k -m68020",                          /* cplus1_spec */
    "as.sun3 -m68020",				/* asm_spec */
    "ld.sun3 -X %{!e:%{!pg:-e start}%{pg:-e gstart}}",
						/* link_spec */	
    "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}",	/* lib_spec */
    "",						/* start_file_spec */
    "%{funsigned-char: -D__CHAR_UNSIGNED__}",   /* signed_char spec */
};

static target_specs spur_target =
{
    "spur",					/* name */
    default_compilers,				/* base_specs */
    default_cplusplus,                          /* c++ specs */
    default_link_spec,				/* link_base_spec */
    "-Dspur",					/* cpp_predefines */
    "cpp",                                      /* cpp_spec */
    "cc1.spur -msoft-float",			/* cc1_spec */
    "g++1.spur -msoft-float",                    /* cplus1_spec */
    "sas",					/* asm_spec */
    "sld -X -p %{!e:-e start}",			/* link_spec */
    "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}",	/* lib_spec */
    "",						/* start_file_spec */
    "%{funsigned-char: -D__CHAR_UNSIGNED__}",   /* signed_char spec */
};

static target_specs sparc_target =
{
    "sun4",					/* name */
    default_compilers,				/* base_specs */
    default_cplusplus,                          /* c++ specs */
    default_link_spec,				/* link_base_spec */
    "-Dsparc -Dsun4",				/* cpp_predefines */
    "cpp",                                      /* cpp_spec */
    "cc1.sparc",                		/* cc1_spec */
    "g++1.sparc",                                /* cplus1_spec */
    "as.sun4",		         		/* asm_spec */
    "ld.sun4 -X %{!e:%{!pg:-e start}%{pg:-e gstart}}",
						/* link_spec */
    "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}",	/* lib_spec */
    "",						/* start_file_spec */
    "%{funsigned-char: -D__CHAR_UNSIGNED__}",   /* signed_char spec */
};


static target_specs mips_target =
{
    "ds3100",					/* name */
    default_compilers,				/* base_specs */
    default_cplusplus,                          /* c++ specs */
    default_link_spec,				/* link_base_spec */
    "-Dmips -Dds3100",				/* cpp_predefines */
    "cpp",                                      /* cpp_spec */
    "cc1.mips",                 		/* cc1_spec */
    "g++1.mips",                                 /* cplus1_spec */
#if 0
    "as.ds3100",				/* asm_spec */
    "ld.ds3100 -X %{!e:%{!pg:-e start}%{pg:-e gstart}}",
						/* link_spec */
#else
    /* 
     *    For now we have to use the Ultrix assembler and linker.
     *	These will fail on a sun.
     */
#ifdef ds3100
    "/sprite/cmds.ds3100/as",
    "/sprite/cmds.ds3100/ld -B1.31 /usr/lib/crt0.o1.31",
#else
    "echo YOU CANT ASSEMBLE FOR THE DS3100 ON THIS MACHINE",
    "echo YOU CANT LINK FOR THE DS3100 ON THIS MACHINE",
#endif
#endif
    "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}",	/* lib_spec */
    "",						/* start_file_spec */
    "%{funsigned-char: -D__CHAR_UNSIGNED__}",   /* signed_char spec */
};


static target_specs symm_target =
{
    "symm",					/* name */
    default_compilers,				/* base_specs */
    default_cplusplus,                          /* c++ specs */
    default_link_spec,				/* link_base_spec */
    "-Di386 -Dsymm -Dsequent",			/* cpp_predefines */
    "cpp",                                      /* cpp_spec */
    "cc1.symm",                    		/* cc1_spec */
    "g++1.symm",                                /* cplus1_spec */
    "as.symm",		         		/* asm_spec */
    "ld.symm -Tdata 400000 %{!e:%{!pg:-e __start}%{pg:-e __gstart}}",
						/* link_spec */
    "%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}",	/* lib_spec */
    "",						/* start_file_spec */
    "%{funsigned-char: -D__CHAR_UNSIGNED__}",   /* signed_char spec */
};


/*
 * Top-level table used to look up information for a particular target
 * machine.  The first entry will be used as the default target if
 * a target isn't specified in a command-line switch or environment
 * variable.
 */

typedef struct
{
    char *name;			/* Name of target machine (as it
				 * appears in "-m" switch. */
    target_specs *info;		/* Information about target machine. */
} target_machine;

static target_machine target_machines[] = {
    {"sun3",	&m68020_target},
    {"68000",	&m68000_target},
    {"68010",	&m68000_target},
    {"sun2",	&m68000_target},
    {"68020",	&m68020_target},
    {"spur",	&spur_target},
    {"sun4",    &sparc_target},
    {"sun4c",   &sparc_target},
    {"sun4c2",  &sparc_target},
    {"sparc",   &sparc_target},
    {"ds3100",  &mips_target},
    {"mips",    &mips_target},
    {"sym",     &symm_target},
    {"symm",    &symm_target},
    {"sequent", &symm_target},
    {"i386",    &symm_target},
    {0, 0}				/* Zeroes mark end of list. */
};

static char *target_name;		/* Name of selected target. */
static target_specs *target;		/* Info for selected target. */

/*
 *  Put temporary files in /tmp
 */
#define P_tmpdir    "/tmp"

#endif /* _SPECS */

@


1.17
log
@Added .cc extension for C++ programs.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.16 90/11/05 07:06:04 rab Exp Locker: rab $ SPRITE (Berkeley)
d308 1
@


1.16
log
@Fixed floating point flag so that __SOFT_FLOAT__ is defined when -msoft-float
is specifed, instead of when it isn't.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.15 90/09/09 03:32:01 rab Exp Locker: rab $ SPRITE (Berkeley)
d117 1
@


1.15
log
@Added symmetry stuff.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.14 90/06/28 15:31:15 rab Exp Locker: rab $ SPRITE (Berkeley)
d76 1
a76 1
	%{!msoft-float:-D__SOFT_FLOAT__}\
@


1.14
log
@Added support for g++.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.13 90/04/09 08:45:24 rab Exp Locker: rab $ SPRITE (Berkeley)
d264 20
d299 1
a299 1
    {"sun3",	&m68020_target},	/* This is the default target. */
d310 4
@


1.13
log
@Added sun4c as a machine type.  It is a synonym for sun4.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.12 90/02/06 21:38:50 rab Exp Locker: rab $ SPRITE (Berkeley)
d48 1
d54 1
d62 9
a70 3
/*
 * Spec information for individual machines:
 */
d72 1
a72 3
struct compiler default_compilers[] =
{
    {".c",
d76 1
d85 25
a109 10
	%g.s %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}}"},
    {".s",
     "%{!E:%{!S:%a %{R} %{j} %{J} %{h} %{d2}\
	%i %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }}\
      %{E:%C %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} -m%m %{M*} %{T} \
        -undef -D__GNUC__ %{ansi: -$ -D__STRICT_ANSI__}\
	%{!ansi:%p -Dunix -Dsprite}\
        %{O:-D__OPTIMIZE__} %{traditional} %{pedantic}\
	%{Wcomment} %{Wtrigraphs} %{Wall}\
        %i %{o*} %{M*:%{o*}}}\n"},
d114 10
a123 1
struct compiler sun3_compilers[] =
d152 1
d154 1
a154 1
char default_link_spec[] =
d161 1
a161 1
target_specs m68000_target =
d165 1
d170 1
d178 1
a178 1
target_specs m68020_target =
d181 2
a182 1
    sun3_compilers,				/* base_specs */
d187 1
d196 1
a196 1
target_specs spur_target =
d200 1
d205 1
d213 1
a213 1
target_specs sparc_target =
d217 1
d222 2
a223 1
    "as.sun4",				/* asm_spec */
d232 1
a232 1
target_specs mips_target =
d236 1
d241 1
d278 1
a278 1
target_machine target_machines[] = {
d293 2
a294 2
char *target_name;			/* Name of selected target. */
target_specs *target;			/* Info for selected target. */
@


1.12
log
@Changes for new organization of compiler.  Backends are now in /sprite/lib/gcc.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.11 90/01/12 09:40:36 rab Exp Locker: rab $ SPRITE (Berkeley)
d244 1
@


1.11
log
@Add ds3100 cross-compile stuff.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.10 89/12/14 17:49:05 rab Exp Locker: rab $ SPRITE (Berkeley)
d137 2
a138 2
    "as -m68010",				/* asm_spec */
    "ld -X -msun2 %{!e:-e start}",		/* link_spec */
d152 2
a153 3
#ifdef ds3100
    "gas -m68020",				/* asm_spec */
    "gld -X -msun3 %{!e:%{!pg:-e start}%{pg:-e gstart}}",
a154 5
#else
    "as -m68020",				/* asm_spec */
    "ld -X -msun3 %{!e:%{!pg:-e start}%{pg:-e gstart}}",
						/* link_spec */	
#endif
d183 2
a184 7
#ifdef ds3100
    "gas -msparc",				/* asm_spec */
    "gld -X -msun4 %{!e:%{!pg:-e start}%{pg:-e gstart}}",
						/* link_spec */
#else
    "as -msparc",				/* asm_spec */
    "ld -X -msun4 %{!e:%{!pg:-e start}%{pg:-e gstart}}",
a185 1
#endif
d201 2
a202 2
    "as -mmips",				/* asm_spec */
    "ld -X -mmips %{!e:%{!pg:-e start}%{pg:-e gstart}}",
@


1.10
log
@*** empty log message ***
@
text
@d17 1
a17 1
 * $Header: /sprite/src/cmds/cc/sprite/RCS/specs.h,v 1.9 89/10/25 21:33:16 rab Exp Locker: rab $ SPRITE (Berkeley)
d152 5
d158 3
a160 2
    "ld -X %{!e:%{!pg:-e start}%{pg:-e gstart}}",
						/* link_spec */
d189 5
d197 1
@


1.9
log
@Put temporary files in /tmp instead of /usr/tmp
Delete -T flag to cpp (doesn't exist in 1.36).
@
text
@d17 1
a17 1
 * $Header: /user2/rab/gcc/sprite/RCS/specs.h,v 1.8 89/10/23 21:23:53 rab Exp Locker: rab $ SPRITE (Berkeley)
d70 28
d105 1
d147 1
a147 1
    default_compilers,				/* base_specs */
d151 1
a151 1
    "cc1.68k -msoft-float -m68020",             /* cc1_spec */
@


1.8
log
@Added preliminary support for ds3100.
@
text
@d17 1
a17 1
 * $Header: /user2/rab/gcc/sprite/RCS/specs.h,v 1.7 89/10/13 10:24:11 rab Exp Locker: rab $ SPRITE (Berkeley)
d68 1
a68 1
        -undef -D__GNUC__ %{ansi:-T -$ -D__STRICT_ANSI__}\
d84 1
a84 1
        -undef -D__GNUC__ %{ansi:-T -$ -D__STRICT_ANSI__}\
d223 5
@


1.7
log
@made software floating point the default for the sun3.
@
text
@d17 1
a17 1
 * $Header: /a/newcmds/cc/sprite/RCS/specs.h,v 1.6 89/07/19 10:50:38 ouster Exp Locker: rab $ SPRITE (Berkeley)
d127 1
a127 1
    ""						/* start_file_spec */
d153 1
a153 1
    "cc1.sparc -msparc",        		/* cc1_spec */
d158 1
a158 1
    ""						/* start_file_spec */
d163 29
d216 2
@


1.6
log
@Specify -msun2 to linker for 68010's;  otherwise get 68020 binaries.
@
text
@d17 1
a17 1
 * $Header: /a/newcmds/cc/sprite/RCS/specs.h,v 1.5 89/06/15 14:56:05 rab Exp Locker: rab $ SPRITE (Berkeley)
d70 1
d122 1
a122 1
    "cc1.68k -msoft-float -m68020",		/* cc1_spec */
@


1.5
log
@*** empty log message ***
@
text
@d17 1
a17 1
 * $Header: /a/newcmds/cc/sprite/RCS/specs.h,v 1.4 89/05/09 23:17:14 rab Exp Locker: rab $ SPRITE (Berkeley)
d108 1
a108 1
    "ld -X %{!e:-e start}",			/* link_spec */
@


1.4
log
@Changed default_compilers string so -E flag works correctly
with assembly files.
@
text
@d17 1
a17 1
 * $Header: /a/newcmds/cc/sprite/RCS/specs.h,v 1.3 89/05/09 21:30:11 rab Exp Locker: rab $ SPRITE (Berkeley)
d154 1
a154 1
    "ld -X %{!e:%{!pg:-e start}%{pg:-e gstart}}",
@


1.3
log
@added sun4 stuff
@
text
@d17 1
a17 1
 * $Header: /a/newcmds/cc/sprite/RCS/specs.h,v 1.2 89/03/12 21:02:38 rab Exp $ SPRITE (Berkeley)
d80 8
a87 2
     "%{!S:%a %{R} %{j} %{J} %{h} %{d2}\
	%i %{c:%{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\n }"},
@


1.2
log
@*** empty log message ***
@
text
@d17 1
a17 1
 * $Header: /a/newcmds/cc/sprite/RCS/specs.h,v 1.14 89/02/22 17:42:38 rab Exp $ SPRITE (Berkeley)
d139 18
d178 2
@


1.1
log
@Initial revision
@
text
@d51 2
a52 1
    char *compile_spec;			/* Spec to substitute for %C. */
d57 1
d67 1
a67 1
     "cpp %{nostdinc} %{C} %{v} %{D*} %{U*} %{I*} -m%m %{M*} %{T} \
d73 2
a74 2
     %{!M*:%{!E:%C %g.cpp %{!Q:-quiet} -dumpbase %i %{Y*} %{d*} %{m*} %{f*}\
	%{g} %{O} %{W*} %{w} %{pedantic} %{ansi} %{traditional}\
d98 3
a100 3
    "-Dmc68000 -Dsun2 %{funsigned-char: -D__CHAR_UNSIGNED__}",
						/* cpp_predefines */
    "cc1.68k -msoft-float -m68000",		/* compile_spec */
d102 1
a102 2
    "ld -X %{!e:-e start}",
						/* link_spec */
d104 2
a105 1
    ""						/* start_file_spec */
d113 3
a115 3
    "-Dmc68000 -Dsun3 %{funsigned-char: -D__CHAR_UNSIGNED__}",
						/* cpp_predefines */
    "cc1.68k -msoft-float -m68020",		/* compile_spec */
d121 1
d129 3
a131 3
    "-Dspur %{funsigned-char: -D__CHAR_UNSIGNED__}",
						/* cpp_predefines */
    "cc1.spur -msoft-float",			/* compile_spec */
d135 2
a136 1
    ""						/* start_file_spec */
d166 2
a167 1
#endif _SPECS
@
