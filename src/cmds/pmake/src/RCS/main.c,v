head     1.10;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.10
date     92.05.18.18.07.49;  author kupfer;  state Exp;
branches ;
next     1.9;

1.9
date     92.01.04.17.05.41;  author kupfer;  state Exp;
branches ;
next     1.8;

1.8
date     91.12.01.17.30.32;  author kupfer;  state Exp;
branches ;
next     1.7;

1.7
date     90.08.02.14.05.34;  author douglis;  state Exp;
branches ;
next     1.6;

1.6
date     90.06.28.22.33.35;  author douglis;  state Exp;
branches ;
next     1.5;

1.5
date     90.06.26.23.30.40;  author douglis;  state Exp;
branches ;
next     1.4;

1.4
date     90.03.19.17.35.21;  author douglis;  state Exp;
branches ;
next     1.3;

1.3
date     90.03.08.21.53.50;  author douglis;  state Exp;
branches ;
next     1.2;

1.2
date     90.02.28.10.40.41;  author douglis;  state Exp;
branches ;
next     1.1;

1.1
date     90.02.14.18.29.35;  author douglis;  state Exp;
branches ;
next     ;


desc
@The main file for this entire program. Exit routines etc
reside here.
@


1.10
log
@Lint.
@
text
@/*-
 * main.c --
 *	The main file for this entire program. Exit routines etc
 *	reside here.
 *
 * Copyright (c) 1988, 1989 by the Regents of the University of California
 * Copyright (c) 1988, 1989 by Adam de Boor
 * Copyright (c) 1989 by Berkeley Softworks
 *
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any non-commercial purpose
 * and without fee is hereby granted, provided that the above copyright
 * notice appears in all copies.  The University of California,
 * Berkeley Softworks and Adam de Boor make no representations about
 * the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * Utility functions defined in this file:
 *	Main_ParseArgLine   	Takes a line of arguments, breaks them and
 *	    	  	    	treats them as if they were given when first
 *	    	  	    	invoked. Used by the parse module to implement
 *	    	  	    	the .MFLAGS target.
 *
 *	Error	  	    	Print a tagged error message. The global
 *	    	  	    	MAKE variable must have been defined. This
 *	    	  	    	takes a format string and two optional
 *	    	  	    	arguments for it.
 *
 *	Fatal	  	    	Print an error message and exit. Also takes
 *	    	  	    	a format string and two arguments.
 *
 *	Punt	  	    	Aborts all jobs and exits with a message. Also
 *	    	  	    	takes a format string and two arguments.
 *
 *	Finish	  	    	Finish things up by printing the number of
 *	    	  	    	errors which occured, as passed to it, and
 *	    	  	    	exiting.
 */
#ifndef lint
static char     *rcsid = "$Id: main.c,v 1.9 92/01/04 17:05:41 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif lint

#include    <stdio.h>
#include    <stdlib.h>
#ifdef sprite
#include    <sprite.h>
#endif /* sprite */
#include    <sys/types.h>
#include    <sys/signal.h>
#include    <sys/stat.h>
#include    <fcntl.h>
#include    <sys/errno.h>
#include    <option.h>
#include    <ctype.h>
#include    <string.h>
#include    "make.h"

extern int errno;


#ifndef DEFMAXLOCAL
#define DEFMAXLOCAL DEFMAXJOBS
#endif  DEFMAXLOCAL

#define MAKEFLAGS  	".MAKEFLAGS"

/* 
 * Some systems let a program register functions to be called when it 
 * exits.  In that case ATEXIT is the name of the function.  If the system
 * doesn't provide that functionality, we'll provide our own version of
 * exit() to do cleanup, and ATEXIT will be undefined.
 */
#ifdef sprite
#define ATEXIT(proc)	atexit(proc)
#else
#ifdef sun
#define ATEXIT(proc)	on_exit(proc)
#endif
#endif

static char 	  	*progName;  	/* Our invocation name */
static Boolean	  	lockSet;    	/* TRUE if we set the lock file */
Lst			create;	    	/* Targets to be made */
time_t			now;	    	/* Time at start of make */
int			homeHost;	/* host ID for home machine */
GNode			*DEFAULT;   	/* .DEFAULT node */
Boolean	    	    	allPrecious;	/* .PRECIOUS given on line by itself */

static int              printGraph;	/* -p flag */
static Boolean          noBuiltins;	/* -r flag */
static Boolean	  	noLocking;      /* -l flag */
static Lst  	    	makefiles;  	/* List of makefiles to read (in
					 * order) */
int		    	maxJobs;	/* -J argument */
static int  	  	maxLocal;  	/* -L argument */
Boolean	    	  	debug;	    	/* -d flag */
Boolean	  	  	amMake; 	/* -M flag */
Boolean	    	  	noWarnings; 	/* -W flag */
static Boolean	      	noCompat;   	/* -C flag */
Boolean	    	    	noExecute;  	/* -n flag */
Boolean	    	    	keepgoing;  	/* -k flag */
Boolean			queryFlag;  	/* -q flag */
Boolean			touchFlag;  	/* -t flag */
Boolean			usePipes;   	/* !-P flag */
Boolean			backwards;  	/* -B flag */
Boolean			ignoreErrors;	/* -i flag */
Boolean			beSilent;   	/* -s flag */
Boolean			verboseRemigrates; /* -R flag */
Boolean	    	    	sysVmake;   	/* -v flag */
Boolean			oldVars;    	/* -V flag */
Boolean	    	    	checkEnvFirst;	/* -e flag */
static Boolean	  	XFlag=FALSE;   	/* -X flag given */
Boolean	    	  	noExport;   	/* Set TRUE if shouldn't export */
Boolean	    	  	background;   	/* Set TRUE if all jobs should run
					   at low priority */
Boolean 	  	runLocalFirst; 	/* -x flag given */
static Boolean	  	jobsRunning;	/* TRUE if the jobs might be running */

static int	  	MainDefineVar(),
			MainAddInclude(),
			MainAddMakefile(),
			MainDebug();

static Boolean	    	ReadMakefile();

static Option	  args[] = {
{	OPT_TRUE, 	"B",	(char *)&backwards,
	"Be as backwards-compatible with make as possible without being make"},
{	OPT_TRUE, 	"C",	(char *)&noCompat,
 	"Ignore any other indications of compatibility and be PMake"},
{	OPT_FUNC, 	"D",	(char *)MainDefineVar,
 	"Define a variable with an empty value"},
{	OPT_FUNC, 	"I",	(char *)MainAddInclude,
	"Specify directory to search for included makefiles"},
{	OPT_INT,  	"J",	(char *)&maxJobs,
 	"Specify maximum overall concurrency"},
{	OPT_INT,  	"L",	(char *)&maxLocal,
 	"Specify maximum local concurrency"},
{	OPT_TRUE, 	"M",	(char *)&amMake,
 	"Be Make"},
{	OPT_FALSE,	"P",	(char *)&usePipes,
 	"Don't use pipes to catch the output of jobs, use files"},
#ifndef POSIX
{	OPT_TRUE, 	"V",	(char *)&oldVars,
 	"Use old-style variable substitution"},
#endif
{	OPT_TRUE, 	"W",	(char *)&noWarnings,
 	"Don't print warning messages when reading the makefile"},
{	OPT_TRUE, 	"X",	(char *)&XFlag,
	"Don't export any jobs"},
{	OPT_TRUE, 	"x",	(char *)&runLocalFirst,
	"Run the first job locally, then export any more"},
{	OPT_FUNC, 	"d",	(char *)MainDebug,
 	"Turn on debugging output"},
{	OPT_TRUE, 	"e",	(char *)&checkEnvFirst,
 	"Give environment variables precedence over those in the\nmakefile(s)."},
{	OPT_FUNC, 	"f",	(char *)MainAddMakefile,
	 "Specify a(nother) makefile to read"},
{	OPT_TRUE, 	"i",	(char *)&ignoreErrors,
 	"Ignore any errors from executed commands"},
{	OPT_TRUE, 	"k",	(char *)&keepgoing,
 	"Keep working on unaffected targets on an error"},
#ifdef DONT_LOCK
{	OPT_FALSE, 	"l",	(char *)&noLocking,
 	"Turn on locking of the current directory."},
#else
{	OPT_TRUE, 	"l",	(char *)&noLocking,
 	"Turn off locking of the current directory."},
#endif
{	OPT_TRUE, 	"n",	(char *)&noExecute,
 	"Don't execute commands to create targets, just print them"},
{	OPT_INT,  	"p",	(char *)&printGraph,
 	"Tell when to print the input graph: 1, 2 or 3."},
{	OPT_TRUE, 	"q",	(char *)&queryFlag,
	"Just see if something would be done and exit non-zero if so"},
{	OPT_TRUE, 	"r",	(char *)&noBuiltins,
 	"Do not read the system makefile for pre-defined rules"},
{	OPT_TRUE, 	"R",	(char *)&verboseRemigrates,
 	"Mention when processes remigrate"},
{	OPT_TRUE, 	"s",	(char *)&beSilent,
 	"Don't print anything except error messages when creating targets"},
{	OPT_TRUE, 	"t",	(char *)&touchFlag,
 	"Only touch out-of-date targets, don't try and make them"},
{	OPT_TRUE, 	"b",	(char *)&background,
 	"Treat all jobs as background (low-priority)"},
{	OPT_DOC,  	"h",	(char *)NULL,
 	"System Configuration Information:"},
{	OPT_DOC,  	"\0",	(char *)NULL,
 	SYSPATHDOC},
{	OPT_DOC,  	"\0",	(char *)NULL,
	SHELLDOC},
{	OPT_DOC,  	"\0",	(char *)NULL,
	SYSMKDOC},
};


/*-
 *----------------------------------------------------------------------
 * MainParseArgs --
 *	Parse a given argument vector. Called from main() and from
 *	Main_ParseArgLine() when the .MAKEFLAGS target is used.
 *
 *	XXX: Deal with command line overriding .MAKEFLAGS in makefile
 *
 * Results:
 *	None
 *
 * Side Effects:
 *	Various global and local flags will be set depending on the flags
 *	given
 *----------------------------------------------------------------------
 */
static void
MainParseArgs (argc, argv)
    int		  argc;	      /* Number of arguments in argv */
    char	  **argv;     /* The arguments themselves */
{
    register int  i;

    argc = Opt_Parse (argc, argv, args, Opt_Number(args),
	    OPT_ALLOW_CLUSTERING);

    if (amMake) {
	backwards = TRUE;
    }

    if (backwards) {
	oldVars = TRUE;
    }

    if (noCompat) {
	amMake = backwards = oldVars = FALSE;
    }
    

    /*
     * See if the rest of the arguments are variable assignments and perform
     * them if so. Else take them to be targets and stuff them on the end
     * of the "create" list.
     */
    for (i = 1; i < argc; i++) {
	if (Parse_IsVar (argv[i])) {
	    Parse_DoVar(argv[i], VAR_CMD);
	} else {
	    if (argv[i][0] == 0) {
		Punt("Bogus argument in MainParseArgs");
	    }
	    (void)Lst_AtEnd (create, (ClientData)argv[i]);
	}
    }
}

/*-
 *----------------------------------------------------------------------
 * Main_ParseArgLine --
 *  	Used by the parse module when a .MFLAGS or .MAKEFLAGS target
 *	is encountered and by main() when reading the .MAKEFLAGS envariable.
 *	Takes a line of arguments and breaks it into its
 * 	component words and passes those words and the number of them to the
 *	MainParseArgs function.
 *	The line should have all its leading whitespace removed.
 *
 * Results:
 *	None
 *
 * Side Effects:
 *	Only those that come from the various arguments.
 *-----------------------------------------------------------------------
 */
void
Main_ParseArgLine (line)
    char    	  *line;      /* Line to fracture */
{
    char    	  **argv;     /* Manufactured argument vector */
    int     	  argc;	      /* Number of arguments in argv */

    if (line == NULL) return;
    while (*line == ' ') line++;

    argv = Str_BreakString (line, " \t", "\n", &argc);

    MainParseArgs(argc, argv);

    Str_FreeVec(argc, argv);
}

/*-
 *-----------------------------------------------------------------------
 * MainUnlock --
 *	Unlock the current directory. Called as an ExitHandler.
 *
 * Results:
 *	None.
 *
 * Side Effects:
 *	The locking file LOCKFILE is removed.
 *
 *-----------------------------------------------------------------------
 */
static void
MainUnlock ()
{
    (void)unlink (LOCKFILE);
}

/*-
 *-----------------------------------------------------------------------
 * MainAddInclude --
 *	Note a new directory for included makefiles.
 *
 * Results:
 *	1 if a directory was specified, 0 otherwise.
 *
 * Side Effects:
 *	The -I flag is added to the MAKEFLAGS variable and the directory
 *	is given to the parse module.
 *
 *-----------------------------------------------------------------------
 */
/*ARGSUSED*/
static int
MainAddInclude (optKey, dir)
    char    	  *optKey;  	/* Option key that invoked this function */
    char    	  *dir;	    	/* Directory to add */
{
    char    	  *Iarg;

    if (dir == (char *)NULL) {
	fprintf(stderr, "Warning: -I needs an argument\n");
	return(0);
    } else {
	Parse_AddIncludeDir (dir);
    
	Iarg = (char *)malloc (strlen (dir) + 4);
	sprintf (Iarg, "-I %s", dir);
	Var_Append (MAKEFLAGS, Iarg, VAR_GLOBAL);
	free (Iarg);
	return (1);
    }
}

/*-
 *-----------------------------------------------------------------------
 * MainAddMakefile --
 *	Note a new makefile name.
 *
 * Results:
 *	1 if a file was specified, 0 otherwise.
 *
 * Side Effects:
 *	The -f flag is added to the makefiles list.
 *
 *-----------------------------------------------------------------------
 */
/*ARGSUSED*/
static int
MainAddMakefile (optKey, name)
    char    	  *optKey;  	/* Option key that invoked this function */
    char    	  *name;	    	/* Name of file to add */
{
    if (name == (char *)NULL) {
	fprintf(stderr, "Warning: -I needs an argument\n");
	return(0);
    } else {
	(void)Lst_AtEnd(makefiles, (ClientData)name);
	return (1);
    }
}

/*-
 *-----------------------------------------------------------------------
 * MainDefineVar --
 *	Define a variable in the global space with an empty value.
 *
 * Results:
 *	TRUE, if a variable was specified.
 *
 * Side Effects:
 *	The variable is defined.
 *
 *-----------------------------------------------------------------------
 */
/*ARGSUSED*/
static int
MainDefineVar (optKey, var)
    char    	  *optKey;
    char    	  *var;
{
    char    	  *Darg;

    if (var == (char *)NULL) {
	fprintf(stderr, "Warning: -D needs an argument\n");
	return(0);
    } else {
	Var_Set (var, "", VAR_GLOBAL);
	
	Darg = (char *)malloc (strlen (var) + 4);
	sprintf (Darg, "-D %s", var);
	Var_Append (MAKEFLAGS, Darg, VAR_GLOBAL);
	free (Darg);
	return (1);
    }
}

/*-
 *-----------------------------------------------------------------------
 * MainDebug --
 *	Turn on debugging for one or more modules.
 *
 * Results:
 *	1 if a module string was given, 0 otherwise.
 *
 * Side Effects:
 *	bits in 'debug' are altered.
 *
 *-----------------------------------------------------------------------
 */
/* ARGSUSED */
static int
MainDebug(key, modules)
    char    	  *key;		/* unused */
    char    	  *modules;
{
    if ((modules != (char *)NULL) && (*modules != '-')) {
	while (*modules) {
	    switch (*modules) {
		case 's':
		    debug |= DEBUG_SUFF;
		    break;
		case 'm':
		    debug |= DEBUG_MAKE;
		    break;
		case 'j':
		    debug |= DEBUG_JOB;
		    break;
		case 't':
		    debug |= DEBUG_TARG;
		    break;
		case 'd':
		    debug |= DEBUG_DIR;
		    break;
		case 'v':
		    debug |= DEBUG_VAR;
		    break;
		case 'c':
		    debug |= DEBUG_COND;
		    break;
		case 'p':
		    debug |= DEBUG_PARSE;
		    break;
		case 'r':
		    debug |= DEBUG_RMT;
		    break;
		case 'a':
		    debug |= DEBUG_ARCH;
		    break;
	    }
	    modules++;
	}
	return(1);
    } else {
	debug = ~0;
	return(0);
    }
}

/*-
 *----------------------------------------------------------------------
 * main --
 *	The main function, for obvious reasons. Initializes variables
 *	and a few modules, then parses the arguments give it in the
 *	environment and on the command line. Reads the system makefile
 *	followed by either Makefile, makefile or the file given by the
 *	-f argument. Sets the .MAKEFLAGS PMake variable based on all the
 *	flags it has received by then uses either the Make or the Compat
 *	module to create the initial list of targets.
 *
 * Results:
 *	If -q was given, exits -1 if anything was out-of-date. Else it exits
 *	0.
 *
 * Side Effects:
 *	The program exits when done. Targets are created. etc. etc. etc.
 *
 *----------------------------------------------------------------------
 */
main (argc, argv)
    int           argc;
    char          **argv;
{
    Lst             targs;     	/* list of target nodes to create. Passed to
				 * Make_Init */
    Boolean         outOfDate; 	/* FALSE if all targets up to date */
    char    	    *cp;
    extern int	    optind;
#ifdef sprite
    ReturnStatus    status;
#endif

    create = Lst_Init (FALSE);
    makefiles = Lst_Init(FALSE);

    beSilent = FALSE;	      	/* Print commands as executed */
    ignoreErrors = FALSE;     	/* Pay attention to non-zero returns */
    noExecute = FALSE;	      	/* Execute all commands */
    keepgoing = FALSE;	      	/* Stop on error */
    allPrecious = FALSE;      	/* Remove targets when interrupted */
    queryFlag = FALSE;	      	/* This is not just a check-run */
    noBuiltins = FALSE;	      	/* Read the built-in rules */
    touchFlag = FALSE;	      	/* Actually update targets */
    usePipes = TRUE;	      	/* Catch child output in pipes */
    verboseRemigrates = FALSE;   /* Be verbose about remigrating processes */
    background = FALSE;   	/* Treat all jobs as long-running */
#ifndef DONT_LOCK
    noLocking = FALSE;	      	/* Lock the current directory against other
				 * pmakes */
#else
    noLocking = TRUE;
#endif /* DONT_LOCK */
    debug = 0;	      	    	/* No debug verbosity, please. */
    noCompat = FALSE;	    	/* Allow compatibility */
    noWarnings = FALSE;	    	/* Print warning messages */
    sysVmake = FALSE;	    	/* Don't be System V compatible */

    jobsRunning = FALSE;

    maxJobs = DEFMAXJOBS;     	/* Set the default maximum concurrency */
    maxLocal = DEFMAXLOCAL;   	/* Set the default local max concurrency */
    runLocalFirst = DEFLOCALFIRST;  /* Set the default local/remote choice */
    
    /*
     * See what the user calls us. If s/he calls us (yuck) "make", then
     * act like it. Otherwise act like our normal, cheerful self.
     */
    cp = rindex (argv[0], '/');
    if (cp != (char *)NULL) {
	cp += 1;
    } else {
	cp = argv[0];
    }
    progName = cp;

    if (strcmp (cp, "make") == 0) {
	amMake = TRUE;	      	/* Be like make */
	backwards = TRUE;     	/* Do things the old-fashioned way */
	oldVars = TRUE;	      	/* Same with variables */
    } else if (strcmp(cp, "smake") == 0 || strcmp(cp, "vmake") == 0) {
	sysVmake = oldVars = backwards = noLocking = TRUE;
    } else {
	amMake = FALSE;
	backwards = FALSE;    	/* Do things MY way, not MAKE's */
#ifdef DEF_OLD_VARS
	oldVars = TRUE;
#else
	oldVars = FALSE;      	/* don't substitute for undefined variables */
#endif
    }

    /*
     * Initialize the parsing, directory and variable modules to prepare
     * for the reading of inclusion paths and variable settings on the
     * command line 
     */
    Dir_Init ();		/* Initialize directory structures so -I flags
				 * can be processed correctly */
    Parse_Init ();		/* Need to initialize the paths of #include
				 * directories */
    Var_Init ();		/* As well as the lists of variables for
				 * parsing arguments */

    /*
     * Initialize various variables.
     *	.PMAKE gets how we were executed.
     *	MAKE also gets this name, for compatibility
     *	.MAKEFLAGS gets set to the empty string just in case.
     *  MFLAGS also gets initialized empty, for compatibility.
     */
    Var_Set (".PMAKE", argv[0], VAR_GLOBAL);
    Var_Set ("MAKE", argv[0], VAR_GLOBAL);
    Var_Set (MAKEFLAGS, "", VAR_GLOBAL);
    Var_Set ("MFLAGS", "", VAR_GLOBAL);

    /*
     * First snag any flags out of the PMAKE environment variable.
     * (Note this is *not* MAKEFLAGS since /bin/make uses that and it's in
     * a different format).
     */
#ifdef POSIX
    Main_ParseArgLine(getenv("MAKEFLAGS"));
#else
    Main_ParseArgLine (getenv("PMAKE"));
#endif
    
    MainParseArgs (argc, argv);

    /*
     * If the user didn't tell us not to lock the directory, attempt to create
     * the lock file. Complain if we can't, otherwise set up an exit handler
     * to remove the lock file...
     */
    if (!noLocking) {
	int	  	oldMask;    /* Previous signal mask */
	int	  	lockID;     /* Stream ID of opened lock file */
	
#ifndef SYSV
	oldMask = sigblock(sigmask(SIGINT));
#else
	oldMask = sighold(SIGINT);
#endif
	
	lockID = open (LOCKFILE, O_CREAT | O_EXCL, 0666);
	if (lockID < 0 && errno == EEXIST) {
	    /*
	     * Find out who owns the file. If the user who called us
	     * owns it, then we ignore the lock file. Note that we also
	     * do not install an exit handler to remove the file -- if the
	     * lockfile is there from a previous make, it'll still be there
	     * when we leave.
	     */
	    struct stat   fsa;    /* Attributes of the lock file */

	    (void) stat (LOCKFILE,  &fsa);
	    if (fsa.st_uid == getuid()) {
		Error ("Lockfile owned by you -- ignoring it");
		lockSet = FALSE;
	    } else {
		char  	lsCmd[40];
		(void)sprintf (lsCmd, "ls -l %s", LOCKFILE);
		(void)system(lsCmd);
		Fatal ("This directory is already locked (%s exists)",
		       LOCKFILE);
	    }
	} else if (lockID < 0) {
	    Fatal ("Could not create lock file %s", LOCKFILE);
	} else {
	    lockSet = TRUE;
#ifdef ATEXIT
	    ATEXIT(MainUnlock);
#endif
	    /* (void) Proc_SetExitHandler (MainUnlock, (ClientData)0); */
	    signal(SIGINT, exit);
	    (void)close (lockID);
	}
	
#ifndef SYSV
	(void) sigsetmask(oldMask);
#else 
	(void) sigrelse(SIGINT);
#endif
    }

    /*
     * Initialize archive, target and suffix modules in preparation for
     * parsing the makefile(s) 
     */
    Arch_Init ();
    Targ_Init ();
    Suff_Init ();

    DEFAULT = NILGNODE;

    now = time(0);

    /* 
     * Get the host ID for the home machine.  This is needed so that we can
     * look at the right process table even if we've been migrated (e.g.,
     * by a recursive "make").
     */
#ifdef sprite
    status = Proc_GetHostIDs(&homeHost, (int *)NULL);
    if (status != SUCCESS) {
	Fatal("Couldn't get home host ID: %s\n", Stat_GetMsg(status));
    }
#endif /* sprite */

    /*
     * Set up the .TARGETS variable to contain the list of targets to be
     * created. If none specified, make the variable empty -- the parser
     * will fill the thing in with the default or .MAIN target.
     */
    if (!Lst_IsEmpty(create)) {
	LstNode	ln;

	for (ln = Lst_First(create); ln != NILLNODE; ln = Lst_Succ(ln)) {
	    char    *name = (char *)Lst_Datum(ln);

	    Var_Append(".TARGETS", name, VAR_GLOBAL);
	}
    } else {
	Var_Set(".TARGETS", "", VAR_GLOBAL);
    }

    /*
     * Read in the built-in rules first, followed by the specified makefile,
     * if it was (makefile != (char *) NULL), or the default Makefile and
     * makefile, in that order, if it wasn't. 
     */
    if (!noBuiltins && !ReadMakefile (DEFSYSMK)) {
	Fatal ("Could not open system rules (%s)", DEFSYSMK);
    }

    if (!Lst_IsEmpty(makefiles)) {
	LstNode	ln = Lst_Find(makefiles, (ClientData)NULL, ReadMakefile);

	if (ln != NILLNODE) {
	    Fatal ("Cannot open %s", (char *)Lst_Datum(ln));
	}
    } else {
#ifdef POSIX
	if (!ReadMakefile("makefile")) {
	    (void)ReadMakefile("Makefile");
	}
#else
	if (!ReadMakefile ((amMake || sysVmake) ? "makefile" : "Makefile")) {
	    (void) ReadMakefile ((amMake||sysVmake) ? "Makefile" : "makefile");
	}
#endif
    }

    /*
     * Setup the MAKEFLAGS variable from the way our flag variables are
     * initialized. -I and -D flags have already been done.
     */

    if (amMake) {
	Var_Append (MAKEFLAGS, "-M", VAR_GLOBAL);
    } 
    noExport = XFlag;
    
    if (backwards && !amMake) {
	Var_Append (MAKEFLAGS, "-B", VAR_GLOBAL);
    }
    if (maxJobs != DEFMAXJOBS) {
	char Jarg[10];

	sprintf (Jarg, "-J %d", maxJobs);
	Var_Append (MAKEFLAGS, Jarg, VAR_GLOBAL);
    }
    if (maxLocal != DEFMAXLOCAL) {
	char Larg[10];

	sprintf (Larg, "-L %d", maxLocal);
	Var_Append (MAKEFLAGS, Larg, VAR_GLOBAL);
    }
    if (!usePipes) {
	Var_Append (MAKEFLAGS, "-P", VAR_GLOBAL);
    }
    if (oldVars && !amMake && !backwards) {
	Var_Append (MAKEFLAGS, "-V", VAR_GLOBAL);
    }
    if (noWarnings) {
	Var_Append (MAKEFLAGS, "-W", VAR_GLOBAL);
    }
    if (XFlag) {
	Var_Append (MAKEFLAGS, "-X", VAR_GLOBAL);
    }
    if (runLocalFirst) {
	Var_Append (MAKEFLAGS, "-x", VAR_GLOBAL);
    }
    if (checkEnvFirst) {
	Var_Append (MAKEFLAGS, "-e", VAR_GLOBAL);
    }
    if (debug) {
	char	  modules[20];

	cp = modules;
	if (DEBUG(SUFF)) {
	    *cp++ = 's';
	}
	if (DEBUG(MAKE)) {
	    *cp++ = 'm';
	}
	if (DEBUG(JOB)) {
	    *cp++ = 'j';
	}
	if (DEBUG(TARG)) {
	    *cp++ = 't';
	}
	if (DEBUG(DIR)) {
	    *cp++ = 'd';
	}
	if (DEBUG(VAR)) {
	    *cp++ = 'v';
	}
	if (DEBUG(COND)) {
	    *cp++ = 'c';
	}
	if (DEBUG(PARSE)) {
	    *cp++ = 'p';
	}
	if (DEBUG(RMT)) {
	    *cp++ = 'r';
	}
	if (DEBUG(ARCH)) {
	    *cp++ = 'a';
	}
	*cp = '\0';
	Var_Append (MAKEFLAGS,
		    Str_Concat("-d", modules, STR_ADDSPACE),
		    VAR_GLOBAL);
    }
    if (ignoreErrors) {
	Var_Append (MAKEFLAGS, "-i", VAR_GLOBAL);
    }
    if (keepgoing) {
	Var_Append (MAKEFLAGS, "-k", VAR_GLOBAL);
    }
#ifdef DONT_LOCK
    if (!noLocking) {
	Var_Append (MAKEFLAGS, "-l", VAR_GLOBAL);
    }
#else /* DONT_LOCK */
    if (noLocking) {
	Var_Append (MAKEFLAGS, "-l", VAR_GLOBAL);
    }
#endif /* DONT_LOCK */
    if (noExecute) {
	Var_Append (MAKEFLAGS, "-n", VAR_GLOBAL);
    }
    if (printGraph) {
	char parg[10];

	sprintf (parg, "-p %d", printGraph);
	Var_Append (MAKEFLAGS, parg, VAR_GLOBAL);
    }
    if (noBuiltins) {
	Var_Append (MAKEFLAGS, "-r", VAR_GLOBAL);
    }
    if (verboseRemigrates) {
	Var_Append (MAKEFLAGS, "-R", VAR_GLOBAL);
    }
    if (background) {
	Var_Append (MAKEFLAGS, "-b", VAR_GLOBAL);
    }
    if (beSilent) {
	Var_Append (MAKEFLAGS, "-s", VAR_GLOBAL);
    }
    if (touchFlag) {
	Var_Append (MAKEFLAGS, "-t", VAR_GLOBAL);
    }
    Var_Append ("MFLAGS", Var_Value(MAKEFLAGS, VAR_GLOBAL), VAR_GLOBAL);

    /*
     * Install all the flags into the PMAKE envariable.
     */
#ifdef POSIX
    setenv("MAKEFLAGS", Var_Value(MAKEFLAGS, VAR_GLOBAL));
#else
    setenv("PMAKE", Var_Value(MAKEFLAGS, VAR_GLOBAL));
#endif

    /*
     * For compatibility, look at the directories in the VPATH variable
     * and add them to the search path, if the variable is defined. The
     * variable's value is in the same format as the PATH envariable, i.e.
     * <directory>:<directory>:<directory>...
     */
    if (Var_Exists ("VPATH", VAR_CMD)) {
	char	  *vpath;
	char	  *path;
	char  	  *cp;
	char  	  savec;
	static char VPATH[] = "${VPATH}";   /* GCC stores string constants in
					     * read-only memory, but Var_Subst
					     * will want to write this thing,
					     * so store it in an array */
	
	vpath = Var_Subst (VPATH, VAR_CMD, FALSE);

	path = vpath;
	do {
	    /*
	     * Skip to end of directory
	     */
	    for (cp = path; *cp != ':' && *cp != '\0'; cp++) {
		continue;
	    }
	    /*
	     * Save terminator character to figure out when to stop
	     */
	    savec = *cp;
	    *cp = '\0';
	    /*
	     * Add directory to search path
	     */
	    Dir_AddDir (dirSearchPath, path);
	    *cp = savec;
	    path = cp + 1;
	} while (savec == ':');
	free((Address)vpath);
    }
	    
    /*
     * Now that all search paths have been read for suffixes et al, it's
     * time to add the default search path to their lists...
     */
    Suff_DoPaths();

    /*
     * Print the initial graph, if the user requested it
     */
    if (printGraph & 1) {
	Targ_PrintGraph (1);
    }

    Rmt_Init();

    /*
     * Have now read the entire graph and need to make a list of targets to
     * create. If none was given on the command line, we consult the parsing
     * module to find the main target(s) to create.
     */
    if (Lst_IsEmpty (create)) {
	targs = Parse_MainName ();
    } else {
	targs = Targ_FindList (create, TARG_CREATE);
    }

    if (!amMake) {
	/*
	 * Initialize job module before traversing the graph, now that any
	 * .BEGIN and .END targets have been read. This is done only if the
	 * -q flag wasn't given (to prevent the .BEGIN from being executed
	 * should it exist).
	 */
	if (!queryFlag) {
	    if (maxLocal == -1) {
		maxLocal = maxJobs;
	    }
	    Job_Init (maxJobs, maxLocal);
	    jobsRunning = TRUE;
	}
	
	/*
	 * Traverse the graph, checking on all the targets 
	 */
	outOfDate = Make_Run (targs);
    } else {
	/*
	 * Compat_Init will take care of creating all the targets as well
	 * as initializing the module.
	 */
	Compat_Run(targs);
    }
    
    /*
     * Print the graph now it's been processed if the user requested it
     */
    if (printGraph & 2) {
	Targ_PrintGraph (2);
    }

    if (queryFlag && outOfDate) {
	exit (1);
    } else {
	exit (0);
    }
}

/*-
 *-----------------------------------------------------------------------
 * ReadMakefile  --
 *	Open and parse the given makefile.
 *
 * Results:
 *	TRUE if ok. FALSE if couldn't open file.
 *
 * Side Effects:
 *	lots
 *-----------------------------------------------------------------------
 */
static Boolean
ReadMakefile (fname)
    char          *fname;     /* makefile to read */
{
    if (strcmp (fname, "-") == 0) {
	Parse_File ("(stdin)", stdin);
	Var_Set("MAKEFILE", "", VAR_GLOBAL);
	return (TRUE);
    } else {
	FILE *	  stream;
	extern Lst parseIncPath, sysIncPath;
	
	stream = fopen (fname, "r");
    
	if (stream == (FILE *) NULL) {
	    /*
	     * Look in -I directories...
	     */
	    char    *name = Dir_FindFile(fname, parseIncPath);

	    if (name == NULL) {
		/*
		 * Last-ditch: look in system include directories.
		 */
		name = Dir_FindFile(fname, sysIncPath);
		if (name == NULL) {
		    return (FALSE);
		}
	    }
	    stream = fopen(name, "r");
	    if (stream == (FILE *)NULL) {
		/* Better safe than sorry... */
		return(FALSE);
	    }
	    fname = name;
	}
	/*
	 * Set the MAKEFILE variable desired by System V fans -- the placement
	 * of the setting here means it gets set to the last makefile
	 * specified, as it is set by SysV make...
	 */
	Var_Set("MAKEFILE", fname, VAR_GLOBAL);
	Parse_File (fname, stream);
	fclose (stream);
	return (TRUE);
    }
}

/*-
 *-----------------------------------------------------------------------
 * Error --
 *	Print an error message given its format and 0, 1, 2 or 3 arguments.
 *
 * Results:
 *	None.
 *
 * Side Effects:
 *	The message is printed.
 *
 *-----------------------------------------------------------------------
 */
/*VARARGS1*/
void
Error (fmt, arg1, arg2, arg3)
    char    	  *fmt;	    	    /* Format string */
    int	    	  arg1,	    	    /* First optional argument */
		  arg2,	    	    /* Second optional argument */
		  arg3;	    	    /* Third optional argument */
{
    static char   estr[BSIZE];	    /* output string */

    sprintf (estr, "%s: ", Var_Value(".PMAKE", VAR_GLOBAL));
    sprintf (&estr[strlen (estr)], fmt, arg1, arg2, arg3);
    (void) strcat (estr, "\n");

    fputs (estr, stderr);
    fflush (stderr);
}

/*-
 *-----------------------------------------------------------------------
 * Fatal --
 *	Produce a Fatal error message. If jobs are running, waits for them
 *	to finish.
 *
 * Results:
 *	None
 *
 * Side Effects:
 *	The program exits
 *-----------------------------------------------------------------------
 */
/* VARARGS1 */
void
Fatal (fmt, arg1, arg2)
    char          *fmt;	      	  /* format string */
    int           arg1;	      	  /* first optional argument */
    int           arg2;	      	  /* second optional argument */
{
    if (jobsRunning) {
	Job_Wait();
    }
    
    Error (fmt, arg1, arg2);

    if (printGraph & 2) {
	Targ_PrintGraph(2);
    }
    exit (2);			/* Not 1 so -q can distinguish error */
}

/*
 *-----------------------------------------------------------------------
 * Punt --
 *	Major exception once jobs are being created. Kills all jobs, prints
 *	a message and exits.
 *
 * Results:
 *	None 
 *
 * Side Effects:
 *	All children are killed indiscriminately and the program Lib_Exits
 *-----------------------------------------------------------------------
 */
/* VARARGS1 */
void
Punt (fmt, arg1, arg2)
    char          *fmt;	/* format string */
    int           arg1;	/* optional argument */
    int	    	  arg2;	/* optional second argument */
{
    Error (fmt, arg1, arg2);

    DieHorribly();
}

/*-
 *-----------------------------------------------------------------------
 * DieHorribly --
 *	Exit without giving a message.
 *
 * Results:
 *	None
 *
 * Side Effects:
 *	A big one...
 *-----------------------------------------------------------------------
 */
void
DieHorribly()
{
    if (jobsRunning) {
	Job_AbortAll ();
    }
    if (printGraph & 2) {
	Targ_PrintGraph(2);
    }
    
    exit (2);			/* Not 1, so -q can distinguish error */
}

/*
 *-----------------------------------------------------------------------
 * Finish --
 *	Called when aborting due to errors in child shell to signal
 *	abnormal exit. 
 *
 * Results:
 *	None 
 *
 * Side Effects:
 *	The program exits
 * -----------------------------------------------------------------------
 */
void
Finish (errors)
    int             errors;	/* number of errors encountered in Make_Make */
{
    Fatal ("%d error%s", errors, errors == 1 ? "" : "s");
}

#ifndef ATEXIT
void
exit(status)
{
    if (lockSet) {
	MainUnlock();
    }
    _cleanup();
    _exit(status);
}
#endif /* !ATEXIT */
@


1.9
log
@Get process information from the home host, even if migrated.
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.8 91/12/01 17:30:32 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d44 1
a45 1
#include    <stdlib.h>
a218 2
    register char *cp;
    char    	c;
d418 1
d421 1
a421 1
    char    	  *key;
a499 1

a635 2
	    extern exit();

d1154 1
@


1.8
log
@Cleaner handling of exit()/atexit().
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.7 90/08/02 14:05:34 douglis Exp Locker: kupfer $ SPRITE (Berkeley)";
d46 1
d85 1
d497 3
d667 12
@


1.7
log
@toggled meaning of versboseRemigrates flag (default now off).
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.6 90/06/28 22:33:35 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d66 14
d636 2
a637 6
#ifdef sprite
	    atexit(MainUnlock);
#else
#ifdef sun
	    on_exit(MainUnlock);
#endif
d1140 1
a1140 2
#if defined(SYSV) || !defined(sun)

d1149 1
a1149 1
#endif /* System V || !sun */
@


1.6
log
@s/longrunning/background/g
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.5 90/06/26 23:30:40 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d162 2
a163 2
{	OPT_FALSE, 	"R",	(char *)&verboseRemigrates,
 	"Do not mention when processes remigrate"},
d495 1
a495 1
    verboseRemigrates = TRUE;   /* Be verbose about remigrating processes */
d806 1
a806 1
    if (!verboseRemigrates) {
@


1.5
log
@added some new flags relating to migration (verboseRemigrates, longRunning).
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.4 90/03/19 17:35:21 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d54 1
d98 1
a98 1
Boolean	    	  	longRunning;   	/* Set TRUE if all jobs should run
d168 1
a168 1
{	OPT_TRUE, 	"b",	(char *)&longRunning,
d496 1
a496 1
    longRunning = FALSE;   	/* Treat all jobs as long-running */
d809 1
a809 1
    if (longRunning) {
@


1.4
log
@applied adam's patch, and deleted extra xFlag decl.
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.3 90/03/08 21:53:50 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d44 1
a44 1
#ifdef Sprite
d46 1
a46 1
#endif /* Sprite */
d91 1
d97 2
d161 2
d167 2
d494 2
d804 6
@


1.3
log
@reinstated -x flag.
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.2 90/02/28 10:40:41 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
a94 1
static Boolean	  	xFlag=FALSE;	/* -x flag given */
d1114 1
a1114 1
#if defined(SYSV) || defined(is68k) && !defined(PROF)
d1124 1
a1124 1
#endif /* System V */
@


1.2
log
@converted back to Opt_Parse because getopt failed on FOO=BAR syntax.  also,
in sprite, make -X always disable migration and have it enabled by
default even in backward compat mode.
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.1 90/02/14 18:29:35 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
d97 1
d132 2
d503 1
d724 3
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
static char     *rcsid = "$Id: main.c,v 1.67 89/11/14 13:44:02 adam Exp $ SPRITE (Berkeley)";
d52 1
d82 1
d99 5
d106 17
a122 24
/*
 * Initial value for optind when parsing args. Different getopts start it
 * differently...
 */
static int  	initOptInd;

#ifdef CAN_EXPORT
#define OPTSTR "BCD:I:J:L:MPSVWXd:ef:iklnp:qrstvxh"
#else
#define OPTSTR "BCD:I:J:L:MPSVWd:ef:iklnp:qrstvh"
#endif

static char 	    *help[] = {
"-B	    	Be as backwards-compatible with make as possible without\n\
		being make.",
"-C	    	Cancel any current indications of compatibility.",
"-D<var>	Define the variable <var> with value 1.",
"-I<dir>	Specify another directory in which to search for included\n\
		makefiles.",
"-J<num>	Specify maximum overall concurrency.",
"-L<num>	Specify maximum local concurrency.",
"-M		Be Make as closely as possible.",
"-P		Don't use pipes to catch the output of jobs, use files.",
"-S	    	Turn off the -k flag (see below).",
d124 2
a125 1
"-V		Use old-style variable substitution.",
d127 14
a140 11
"-W		Don't print warning messages.",
#ifdef CAN_EXPORT
"-X		Turn off exporting of commands.",
#endif
"-d<flags>  	Turn on debugging output.",
"-e		Give environment variables precedence over those in the\n\
		makefile(s).",
"-f<file>	Specify a(nother) makefile to read",
"-i		Ignore errors from executed commands.",
"-k		On error, continue working on targets that do not depend on\n\
		the one for which an error was detected.",
d142 2
a143 1
"-l	    	Turn on locking of the current directory.",
d145 23
a167 18
"-l	    	Turn off locking of the current directory.",
#endif
"-n	    	Don't execute commands, just print them.",
"-p<num>    	Tell when to print the input graph: 1 (before processing),\n\
		2 (after processing), or 3 (both).",
"-q	    	See if anything needs to be done. Exits 1 if so.",
"-r	    	Do not read the system makefile for pre-defined rules.",
"-s	    	Don't print commands as they are executed.",
"-t	    	Update targets by \"touching\" them (see touch(1)).",
"-v	    	Be compatible with System V make. Implies -B, -V and no\n\
		directory locking.",
#ifdef CAN_EXPORT
"-x	    	Allow exportation of commands.",
#endif
"System configuration information:",
SYSPATHDOC,
SHELLDOC,
SYSMKDOC,
a193 2
    extern int	optind;
    extern char	*optarg;
d196 2
a197 166
    optind = initOptInd;

    while((c = getopt(argc, argv, OPTSTR)) != -1) {
	switch(c) {
	    case 'B':
		backwards = oldVars = TRUE;
		Var_Append(MAKEFLAGS, "-B", VAR_GLOBAL);
		break;
	    case 'C':
		oldVars = backwards = sysVmake = amMake = FALSE;
		Var_Append(MAKEFLAGS, "-C", VAR_GLOBAL);
		break;
	    case 'D':
		Var_Set(optarg, "1", VAR_GLOBAL);
		Var_Append(MAKEFLAGS, "-D", VAR_GLOBAL);
		Var_Append(MAKEFLAGS, optarg, VAR_GLOBAL);
		break;
	    case 'I':
		Parse_AddIncludeDir(optarg);
		Var_Append(MAKEFLAGS, "-I", VAR_GLOBAL);
		Var_Append(MAKEFLAGS, optarg, VAR_GLOBAL);
		break;
	    case 'J':
		maxJobs = atoi(optarg);
		Var_Append(MAKEFLAGS, "-J", VAR_GLOBAL);
		Var_Append(MAKEFLAGS, optarg, VAR_GLOBAL);
		break;
	    case 'L':
		maxLocal = atoi(optarg);
		Var_Append(MAKEFLAGS, "-L", VAR_GLOBAL);
		Var_Append(MAKEFLAGS, optarg, VAR_GLOBAL);
		break;
	    case 'M':
		amMake = TRUE;
		Var_Append(MAKEFLAGS, "-M", VAR_GLOBAL);
		break;
	    case 'P':
		usePipes = FALSE;
		Var_Append(MAKEFLAGS, "-P", VAR_GLOBAL);
		break;
	    case 'S':
		keepgoing = FALSE;
		Var_Append(MAKEFLAGS, "-S", VAR_GLOBAL);
		break;
	    case 'V':
		oldVars = TRUE;
		Var_Append(MAKEFLAGS, "-V", VAR_GLOBAL);
		break;
	    case 'W':
		noWarnings = TRUE;
		Var_Append(MAKEFLAGS, "-W", VAR_GLOBAL);
		break;
	    case 'X':
		XFlag = TRUE;
		Var_Append(MAKEFLAGS, "-X", VAR_GLOBAL);
		break;
	    case 'd':
	    {
		char	*modules = optarg;

		while (*modules) {
		    switch (*modules) {
			case 's':
			    debug |= DEBUG_SUFF;
			    break;
			case 'm':
			    debug |= DEBUG_MAKE;
			    break;
			case 'j':
			    debug |= DEBUG_JOB;
			    break;
			case 't':
			    debug |= DEBUG_TARG;
			    break;
			case 'd':
			    debug |= DEBUG_DIR;
			    break;
			case 'v':
			    debug |= DEBUG_VAR;
			    break;
			case 'c':
			    debug |= DEBUG_COND;
			    break;
			case 'p':
			    debug |= DEBUG_PARSE;
			    break;
			case 'r':
			    debug |= DEBUG_RMT;
			    break;
			case 'a':
			    debug |= DEBUG_ARCH;
			    break;
			case '*':
			    debug = ~0;
			    break;
		    }
		    modules++;
		}
		Var_Append(MAKEFLAGS, "-d", VAR_GLOBAL);
		Var_Append(MAKEFLAGS, optarg, VAR_GLOBAL);
		break;
	    }
	    case 'e':
		checkEnvFirst = TRUE;
		Var_Append(MAKEFLAGS, "-e", VAR_GLOBAL);
		break;
	    case 'f':
		(void)Lst_AtEnd(makefiles, (ClientData)optarg);
		break;
	    case 'i':
		ignoreErrors = TRUE;
		Var_Append(MAKEFLAGS, "-i", VAR_GLOBAL);
		break;
	    case 'k':
		keepgoing = TRUE;
		Var_Append(MAKEFLAGS, "-k", VAR_GLOBAL);
		break;
	    case 'l':
#ifdef DONT_LOCK
		noLocking = FALSE;
#else
		noLocking = TRUE;
#endif
		Var_Append(MAKEFLAGS, "-l", VAR_GLOBAL);
		break;
	    case 'n':
		noExecute = TRUE;
		Var_Append(MAKEFLAGS, "-n", VAR_GLOBAL);
		break;
	    case 'p':
		printGraph = atoi(optarg);
		break;
	    case 'q':
		queryFlag = TRUE;
		Var_Append(MAKEFLAGS, "-q", VAR_GLOBAL); /* Kind of
							  * nonsensical, wot?
							  */
		break;
	    case 'r':
		noBuiltins = TRUE;
		Var_Append(MAKEFLAGS, "-r", VAR_GLOBAL);
		break;
	    case 's':
		beSilent = TRUE;
		Var_Append(MAKEFLAGS, "-s", VAR_GLOBAL);
		break;
	    case 't':
		touchFlag = TRUE;
		Var_Append(MAKEFLAGS, "-t", VAR_GLOBAL);
		break;
	    case 'v':
		sysVmake = oldVars = backwards = noLocking = TRUE;
		Var_Append(MAKEFLAGS, "-v", VAR_GLOBAL);
		break;
	    case 'h':
	    case '?':
	    {
		int 	i;

		for (i = 0; i < sizeof(help)/sizeof(help[0]); i++) {
		    printf("%s\n", help[i]);
		}
		exit(c == '?' ? -1 : 0);
	    }
	}
    }
a198 3
    /*
     * Take care of encompassing compatibility levels...
     */
d202 1
d207 5
d217 1
a217 1
    for (i = optind; i < argc; i++) {
d283 160
d492 1
a501 7
     * Deal with disagreement between different getopt's as to what
     * the initial value of optind should be by simply saving the
     * damn thing.
     */
    initOptInd = optind;
    
    /*
d609 3
d615 1
d685 2
a686 6
     * Figure "noExport" out based on the current mode. Since exporting each
     * command in make mode is rather inefficient, we only export if the -x
     * flag was given. In regular mode though, we only refuse to export if
     * -X was given. In case the operative flag was given in the environment,
     * however, the opposite one may be given on the command line and cancel
     * the action.
d688 1
d690 105
a794 3
	noExport = !xFlag || XFlag;
    } else {
	noExport = XFlag && !xFlag;
a795 1
    
@
