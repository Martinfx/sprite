@c ------------------------------START TEXT FROM ../targets.c
@section Targets
Each port of BFD to a different machine requries the creation of a
target back end. All the back end provides to the root part of BFD is
a structure containing pointers to functions which perform certain low
level operations on files. BFD translates the applications's requests
through a pointer into calls to the back end routines.

When a file is opened with @code{bfd_openr}, its format and target are
unknown. BFD uses various mechanisms to determine how to interpret the
file. The operatios performed are:
@itemize @bullet
@item
First a BFD is created by calling the internal routine
@code{new_bfd}, then @code{bfd_find_target} is called with the target
string supplied to @code{bfd_openr} and the new BFD pointer. 
@item
If a null target string was provided to
@code{bfd_find_target}, it looks up the environment variable
@code{GNUTARGET} and uses that as the target string. 
@item
If the target string is still NULL, or the target string
is @code{default}, then the first item in the target vector is used as
the target type. @xref{bfd_target}.
@item
Otherwise, the elements in the target vector are
inspected one by one, until a match on target name is found. When
found, that is used.
@item 
Otherwise the error @code{invalid_target} is returned to
@code{bfd_openr}.
@item 
@code{bfd_openr} attempts to open the file using
@code{bfd_open_file}, and returns the BFD.
@end itemize
Once the BFD has been opened and the target selected, the file format
may be determined. This is done by calling @code{bfd_check_format} on
the BFD with a suggested format. The routine returns @code{true} when
the application guesses right.

@findex bfd_target
@subsubsection @code{bfd_target}
@node bfd_target
@subsection bfd_target
This structure contains everything that BFD knows about a target.
It includes things like its byte order, name, what routines to call
to do various operations, etc.   

Every BFD points to a target structure with its "xvec" member. 


Shortcut for declaring fields which are prototyped function pointers,
while avoiding anguish on compilers that don't support protos.

@example
#define SDEF(ret, name, arglist) \
                PROTO(ret,(*name),arglist)
#define SDEF_FMT(ret, name, arglist) \
                PROTO(ret,(*name[bfd_type_end]),arglist)
@end example

These macros are used to dispatch to functions through the bfd_target
vector. They are used in a number of macros further down in @file{bfd.h}, and
are also used when calling various routines by hand inside the BFD
implementation.  The "arglist" argument must be parenthesized; it
contains all the arguments to the called function.

@example
#define BFD_SEND(bfd, message, arglist) \
               ((*((bfd)->xvec->message)) arglist)
@end example

For operations which index on the BFD format 

@example
#define BFD_SEND_FMT(bfd, message, arglist) \
            (((bfd)->xvec->message[(int)((bfd)->format)]) arglist)
@end example

This is the struct which defines the type of BFD this is.  The
"xvec" member of the struct @code{bfd} itself points here.  Each module
that implements access to a different target under BFD, defines
one of these.

FIXME, these names should be rationalised with the names of the
entry points which call them. Too bad we can't have one macro to
define them both! 


@example
typedef struct bfd_target
@{
@end example

@i{identifies the kind of target, eg SunOS4, Ultrix, etc }

@example
  char *name;
@end example

@i{The "flavour" of a back end is a general indication about the contents}
@i{of a file.}

@example
  enum target_flavour_enum @{
    bfd_target_aout_flavour_enum,
    bfd_target_coff_flavour_enum,
    bfd_target_ieee_flavour_enum,
    bfd_target_oasys_flavour_enum,
    bfd_target_srec_flavour_enum@} flavour;
@end example

@i{The order of bytes within the data area of a file.}

@example
  boolean byteorder_big_p;
@end example

@i{The order of bytes within the header parts of a file.}

@example
  boolean header_byteorder_big_p;
@end example

@i{This is a mask of all the flags which an executable may have set -}
@i{from the set @code{NO_FLAGS}, @code{HAS_RELOC}, ...@code{D_PAGED}.}

@example
  flagword object_flags;       
@end example

@i{This is a mask of all the flags which a section may have set - from}
@i{the set @code{SEC_NO_FLAGS}, @code{SEC_ALLOC}, ...@code{SET_NEVER_LOAD}.}

@example
  flagword section_flags;
@end example

@i{The pad character for filenames within an archive header.}

@example
  char ar_pad_char;            
@end example

@i{The maximum number of characters in an archive header.}

@example
 unsigned short ar_max_namelen;
@end example

@i{The minimum alignment restriction for any section.}

@example
  unsigned int align_power_min;
@end example

@i{Entries for byte swapping for data. These are different to the other}
@i{entry points, since they don't take BFD as first arg.  Certain other handlers}
@i{could do the same.}

@example
  SDEF (bfd_vma,      bfd_getx64, (bfd_byte *));
  SDEF (void,         bfd_putx64, (bfd_vma, bfd_byte *));
  SDEF (bfd_vma, bfd_getx32, (bfd_byte *));
  SDEF (void,         bfd_putx32, (bfd_vma, bfd_byte *));
  SDEF (bfd_vma, bfd_getx16, (bfd_byte *));
  SDEF (void,         bfd_putx16, (bfd_vma, bfd_byte *));
@end example

@i{Byte swapping for the headers}

@example
  SDEF (bfd_vma,   bfd_h_getx64, (bfd_byte *));
  SDEF (void,          bfd_h_putx64, (bfd_vma, bfd_byte *));
  SDEF (bfd_vma,  bfd_h_getx32, (bfd_byte *));
  SDEF (void,          bfd_h_putx32, (bfd_vma, bfd_byte *));
  SDEF (bfd_vma,  bfd_h_getx16, (bfd_byte *));
  SDEF (void,          bfd_h_putx16, (bfd_vma, bfd_byte *));
@end example

@i{Format dependent routines, these turn into vectors of entry points}
@i{within the target vector structure; one for each format to check.}

@i{Check the format of a file being read.  Return bfd_target * or zero. }

@example
  SDEF_FMT (struct bfd_target *, _bfd_check_format, (bfd *));
@end example

@i{Set the format of a file being written.  }

@example
  SDEF_FMT (boolean,            _bfd_set_format, (bfd *));
@end example

@i{Write cached information into a file being written, at bfd_close. }

@example
  SDEF_FMT (boolean,            _bfd_write_contents, (bfd *));
@end example

@i{The following functions are defined in @code{JUMP_TABLE}. The idea is}
@i{that the back end writer of @code{foo} names all the routines}
@i{@code{foo_}@var{entry_point}, @code{JUMP_TABLE} will built the entries}
@i{in this structure in the right order.}

@i{Core file entry points}

@example
  SDEF (char *, _core_file_failing_command, (bfd *));
  SDEF (int,    _core_file_failing_signal, (bfd *));
  SDEF (boolean, _core_file_matches_executable_p, (bfd *, bfd *));
@end example

@i{Archive entry points}

@example
 SDEF (boolean, _bfd_slurp_armap, (bfd *));
 SDEF (boolean, _bfd_slurp_extended_name_table, (bfd *));
 SDEF (void,   _bfd_truncate_arname, (bfd *, CONST char *, char *));
 SDEF (boolean, write_armap, (bfd *arch, 
                              unsigned int elength,
                              struct orl *map,
                              int orl_count, 
                              int stridx));
@end example

@i{Standard stuff.}

@example
  SDEF (boolean, _close_and_cleanup, (bfd *));
  SDEF (boolean, _bfd_set_section_contents, (bfd *, sec_ptr, PTR,
                                            file_ptr, bfd_size_type));
  SDEF (boolean, _bfd_get_section_contents, (bfd *, sec_ptr, PTR, 
                                            file_ptr, bfd_size_type));
  SDEF (boolean, _new_section_hook, (bfd *, sec_ptr));
@end example

@i{Symbols and reloctions}

@example
 SDEF (unsigned int, _get_symtab_upper_bound, (bfd *));
  SDEF (unsigned int, _bfd_canonicalize_symtab,
           (bfd *, struct symbol_cache_entry **));
  SDEF (unsigned int, _get_reloc_upper_bound, (bfd *, sec_ptr));
  SDEF (unsigned int, _bfd_canonicalize_reloc, (bfd *, sec_ptr, arelent **,
                                               struct symbol_cache_entry**));
  SDEF (struct symbol_cache_entry  *, _bfd_make_empty_symbol, (bfd *));
  SDEF (void,     _bfd_print_symbol, (bfd *, PTR, struct symbol_cache_entry  *,
                                      bfd_print_symbol_enum_type));
#define bfd_print_symbol(b,p,s,e) BFD_SEND(b, _bfd_print_symbol, (b,p,s,e))
  SDEF (alent *,   _get_lineno, (bfd *, struct symbol_cache_entry  *));

  SDEF (boolean,   _bfd_set_arch_mach, (bfd *, enum bfd_architecture,
                                       unsigned long));

  SDEF (bfd *,  openr_next_archived_file, (bfd *arch, bfd *prev));
  SDEF (boolean, _bfd_find_nearest_line,
        (bfd *abfd, struct sec  *section,
         struct symbol_cache_entry  **symbols,bfd_vma offset,
        CONST char **file, CONST char **func, unsigned int *line));
  SDEF (int,    _bfd_stat_arch_elt, (bfd *, struct stat *));

  SDEF (int,    _bfd_sizeof_headers, (bfd *, boolean));

  SDEF (void, _bfd_debug_info_start, (bfd *));
  SDEF (void, _bfd_debug_info_end, (bfd *));
  SDEF (void, _bfd_debug_info_accumulate, (bfd *, struct sec  *));
@end example

@i{Special entry points for gdb to swap in coff symbol table parts}

@example
  SDEF(void, _bfd_coff_swap_aux_in,(
       bfd            *abfd ,
       PTR             ext,
       int             type,
       int             class ,
       PTR             in));

  SDEF(void, _bfd_coff_swap_sym_in,(
       bfd            *abfd ,
       PTR             ext,
       PTR             in));

  SDEF(void, _bfd_coff_swap_lineno_in,  (
       bfd            *abfd,
       PTR            ext,
       PTR             in));

@} bfd_target;
@end example




@findex bfd_find_target
@subsubsection @code{bfd_find_target}
Returns a pointer to the transfer vector for the object target
named target_name.  If target_name is NULL, chooses the one in the
environment variable GNUTARGET; if that is null or not defined then
the first entry in the target list is chosen.  Passing in the
string "default" or setting the environment variable to "default"
will cause the first entry in the target list to be returned,
and "target_defaulted" will be set in the BFD.  This causes
@code{bfd_check_format} to loop over all the targets to find the one
that matches the file being read.  
@example
bfd_target * bfd_find_target(CONST char *, bfd *);
@end example


@findex bfd_target_list
@subsubsection @code{bfd_target_list}
This function returns a freshly malloced NULL-terminated vector of the
names of all the valid BFD targets. Do not modify the names 
@example
CONST char ** bfd_target_list();
@end example



@c ------------------------------END TEXT FROM ../targets.c
