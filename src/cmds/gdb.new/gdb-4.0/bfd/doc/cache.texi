@c ------------------------------START TEXT FROM ../cache.c
@section File Caching
The file caching mechanism is embedded within BFD and allows the application to open as many
BFDs as it wants without regard to the underlying operating system's
file descriptor limit (often as low as 20 open files).

The module in @code{cache.c} maintains a least recently used list of
@code{BFD_CACHE_MAX_OPEN} files, and exports the name
@code{bfd_cache_lookup} which runs around and makes sure that the
required BFD is open. If not, then it chooses a file to close, closes
it and opens the one wanted, returning its file handle.


@findex BFD_CACHE_MAX_OPEN
@subsubsection @code{BFD_CACHE_MAX_OPEN}
The maxiumum number of files which the cache will keep open at one
time.
@lisp
@c @cartouche
#define BFD_CACHE_MAX_OPEN 10
@c @end cartouche
@end lisp



@findex bfd_last_cache
@subsubsection @code{bfd_last_cache}
Zero, or a pointer to the topmost BFD on the chain.  This is used by
the @code{bfd_cache_lookup} macro in @file{libbfd.h} to determine when
it can avoid a function call.
@lisp
@c @cartouche
extern bfd *bfd_last_cache;
@c @end cartouche
@end lisp



@findex bfd_cache_lookup
@subsubsection @code{bfd_cache_lookup}
Checks to see if the required BFD is the same as the last one looked
up. If so then it can use the iostream in the BFD with impunity, since
it can't have changed since the last lookup, otherwise it has to
perform the complicated lookup function
@lisp
@c @cartouche
#define bfd_cache_lookup(x) \
     ((x)==bfd_last_cache
 \
        (FILE*)(bfd_last_cache->iostream): \
         bfd_cache_lookup_worker(x))

@c @end cartouche
@end lisp



@findex bfd_cache_init
@subsubsection @code{bfd_cache_init}
Initialize a BFD by putting it on the cache LRU.
@example
void bfd_cache_init(bfd *);
@end example


@findex bfd_cache_close
@subsubsection @code{bfd_cache_close}
Remove the BFD from the cache. If the attached file is open, then close it too.
@example
void bfd_cache_close(bfd *);
@end example


@findex bfd_open_file
@subsubsection @code{bfd_open_file}
Call the OS to open a file for this BFD.  Returns the FILE *
(possibly null) that results from this operation.  Sets up the
BFD so that future accesses know the file is open. If the FILE *
returned is null, then there is won't have been put in the cache, so
it won't have to be removed from it.
@example
FILE * bfd_open_file(bfd *);
@end example


@findex bfd_cache_lookup_worker
@subsubsection @code{bfd_cache_lookup_worker}
Called when the macro @code{bfd_cache_lookup} fails to find a quick
answer. Finds a file descriptor for this BFD.  If necessary, it open it.
If there are already more than BFD_CACHE_MAX_OPEN files open, it trys to close
one first, to avoid running out of file descriptors. 
@example
FILE * bfd_cache_lookup_worker(bfd *);
@end example



@c ------------------------------END TEXT FROM ../cache.c
