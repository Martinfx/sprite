@c ------------------------------START TEXT FROM ../reloc.c
@section Relocations

BFD maintains relocations in much the same was as it maintains
symbols; they are left alone until required, then read in en-mass and
traslated into an internal form. There is a common routine
@code{bfd_perform_relocation} which acts upon the canonical form to to
the actual fixup.

Note that relocations are maintained on a per section basis, whilst
symbols are maintained on a per BFD basis.

All a back end has to do to fit the BFD interface is to create as many
@code{struct reloc_cache_entry} as there are relocations in a
particuar section, and fill in the right bits:

@menu
* typedef arelent::
* reloc handling functions::
@end menu


@findex bfd_perform_relocation
@subsubsection @code{bfd_perform_relocation}
The relocation routine returns as a status an enumerated type:


@example
typedef enum bfd_reloc_status @{
@end example
@i{No errors detected}

@example
  bfd_reloc_ok,
@end example

@i{The relocation was performed, but there was an overflow.}

@example
  bfd_reloc_overflow,
@end example

@i{The address to relocate was not within the section supplied}

@example
  bfd_reloc_outofrange,
@end example

@i{Used by special functions}

@example
  bfd_reloc_continue,
@end example

@i{Unused }

@example
  bfd_reloc_notsupported,
@end example

@i{Unsupported relocation size requested. }

@example
  bfd_reloc_other,
@end example

@i{The symbol to relocate against was undefined.}

@example
  bfd_reloc_undefined,
@end example

@i{The relocation was performed, but may not be ok - presently generated}
@i{only when linking i960 coff files with i960 b.out symbols.}

@example
  bfd_reloc_dangerous
   @}
 bfd_reloc_status_enum_type;
@end example






@example
typedef struct reloc_cache_entry 
@{
@end example

@i{A pointer into the canonical table of pointers }

@example
  struct symbol_cache_entry **sym_ptr_ptr;
@end example

@i{offset in section                 }

@example
  rawdata_offset address;
@end example

@i{addend for relocation value        }

@example
  bfd_vma addend;    
@end example

@i{if sym is null this is the section }

@example
  struct sec *section;
@end example

@i{Pointer to how to perform the required relocation}

@example
  CONST struct reloc_howto_struct *howto;
@} arelent;
@end example




@table @code
@item sym_ptr_ptr
The symbol table pointer points to a pointer to the symbol ascociated with the
relocation request. This would naturaly be the pointer into the table
returned by the back end's get_symtab action. @xref{Symbols}. The
symbol is referenced through a pointer to a pointer so that tools like
the linker can fixup all the symbols of the same name by modifying
only one pointer. The relocation routine looks in the symbol and uses
the base of the section the symbol is attached to and the value of
the symbol as the initial relocation offset. If the symbol pointer is
zero, then the section provided is looked up.
@item address
The address field gives the offset in bytes from the base of the
section data which owns the relocation record to the first byte of
relocatable information. The actual data relocated will be relative to
this point - for example, a relocation type which modifies the bottom
two bytes of a four byte word would not touch the first byte pointed
to in a big endian world.
@item addend
The addend is a value provided by the back end to be added (!) to the
relocation offset. It's interpretation is dependent upon the howto.
For example, on the 68k the code:

@lisp
@c @cartouche
        char foo[];
        main()
                @{
                return foo[0x12345678];
                @}
@c @end cartouche
@end lisp

Could be compiled into:

@lisp
@c @cartouche
        linkw fp,#-4
        moveb @@#12345678,d0
        extbl d0
        unlk fp
        rts
@c @end cartouche
@end lisp


This could create a reloc pointing to foo, but leave the offset in the data
(something like)

@lisp
@c @cartouche
RELOCATION RECORDS FOR [.text]:
OFFSET   TYPE      VALUE 
00000006 32        _foo

00000000 4e56 fffc          ; linkw fp,#-4
00000004 1039 1234 5678     ; moveb @@#12345678,d0
0000000a 49c0               ; extbl d0
0000000c 4e5e               ; unlk fp
0000000e 4e75               ; rts
@c @end cartouche
@end lisp

Using coff and an 88k, some instructions don't have enough space in them to
represent the full address range, and pointers have to be loaded in
two parts. So you'd get something like:

@lisp
@c @cartouche
        or.u     r13,r0,hi16(_foo+0x12345678)
        ld.b     r2,r13,lo16(_foo+0x12345678)
        jmp      r1
@c @end cartouche
@end lisp

This whould create two relocs, both pointing to _foo, and with 0x12340000
in their addend field. The data would consist of:

@lisp
@c @cartouche

RELOCATION RECORDS FOR [.text]:
OFFSET   TYPE      VALUE 
00000002 HVRT16    _foo+0x12340000
00000006 LVRT16    _foo+0x12340000

00000000 5da05678           ; or.u r13,r0,0x5678
00000004 1c4d5678           ; ld.b r2,r13,0x5678
00000008 f400c001           ; jmp r1
@c @end cartouche
@end lisp

The relocation routine digs out the value from the data, adds it to
the addend to get the original offset and then adds the value of _foo.
Note that all 32 bits have to be kept around somewhere, to cope with
carry from bit 15 to bit 16.

On further example is the sparc and the a.out format. The sparc has a
similar problem to the 88k, in that some instructions don't have
room for an entire offset, but on the sparc the parts are created odd
sized lumps. The designers of the a.out format chose not to use the
data within the section for storing part of the offset; all the offset
is kept within the reloc. Any thing in the data should be ignored.

@lisp
@c @cartouche
        save %sp,-112,%sp
        sethi %hi(_foo+0x12345678),%g2
        ldsb [%g2+%lo(_foo+0x12345678)],%i0
        ret
        restore
@c @end cartouche
@end lisp

Both relocs contains a pointer to foo, and the offsets would contain junk.

@lisp
@c @cartouche
RELOCATION RECORDS FOR [.text]:
OFFSET   TYPE      VALUE 
00000004 HI22      _foo+0x12345678
00000008 LO10      _foo+0x12345678

00000000 9de3bf90     ; save %sp,-112,%sp
00000004 05000000     ; sethi %hi(_foo+0),%g2
00000008 f048a000     ; ldsb [%g2+%lo(_foo+0)],%i0
0000000c 81c7e008     ; ret
00000010 81e80000     ; restore
@c @end cartouche
@end lisp

@item section  
The section field is only used when the symbol pointer field is null.
It supplies the section into which the data should be relocated. The
field's main use comes from assemblers which do most of the symbol fixups
themselves; an assembler may take an internal reference to a label,
but since it knows where the label is, it can turn the relocation
request from a symbol lookup into a section relative relocation - the
relocation emitted has no symbol, just a section to relocate against.

I'm not sure what it means when both a symbol pointer an a section
pointer are present. Some formats use this sort of mechanism to
describe PIC relocations, but BFD can't to that sort of thing yet.
@item howto
The howto field can be imagined as a relocation instruction. It is a
pointer to a struct which contains information on what to do with all
the other information in the reloc record and data section. A back end
would normally have a relocation instruction set and turn relocations
into pointers to the correct structure on input - but it would be
possible to create each howto field on demand.
@end table

@findex reloc_howto_type
@subsubsection @code{reloc_howto_type}
The @code{reloc_howto_type} is a structure which contains all the
information that BFD needs to know to tie up a back end's data.


@example
typedef CONST struct reloc_howto_struct 
@{ 
@end example
@i{The type field has mainly a documetary use - the back end can to what}
@i{it wants with it, though the normally the back end's external idea of}
@i{what a reloc number would be would be stored in this field. For}
@i{example, the a PC relative word relocation in a coff environment would}
@i{have the type 023 - because that's what the outside world calls a}
@i{R_PCRWORD reloc.}

@example
  unsigned int type;
@end example

@i{The value the final relocation is shifted right by. This drops}
@i{unwanted data from the relocation. }

@example
  unsigned int rightshift;
@end example

@i{The size of the item to be relocated - 0, is one byte, 1 is 2 bytes, 3}
@i{is four bytes.}

@example
  unsigned int size;
@end example

@i{Now obsolete}

@example
  unsigned int bitsize;
@end example

@i{Notes that the relocation is relative to the location in the data}
@i{section of the addend. The relocation function will subtract from the}
@i{relocation value the address of the location being relocated.}

@example
  boolean pc_relative;
@end example

@i{Now obsolete}

@example
  unsigned int bitpos;
@end example

@i{Now obsolete}

@example
  boolean absolute;
@end example

@i{Causes the relocation routine to return an error if overflow is}
@i{detected when relocating.}

@example
  boolean complain_on_overflow;
@end example

@i{If this field is non null, then the supplied function is called rather}
@i{than the normal function. This allows really strange relocation}
@i{methods to be accomodated (eg, i960 callj instructions).}

@example
  bfd_reloc_status_enum_type (*special_function)();
@end example

@i{The textual name of the relocation type.}

@example
  char *name;
@end example

@i{When performing a partial link, some formats must modify the}
@i{relocations rather than the data - this flag signals this.}

@example
  boolean partial_inplace;
@end example

@i{The src_mask is used to select what parts of the read in data are to}
@i{be used in the relocation sum. Eg, if this was an 8 bit bit of data}
@i{which we read and relocated, this would be 0x000000ff. When we have}
@i{relocs which have an addend, such as sun4 extended relocs, the value}
@i{in the offset part of a relocating field is garbage so we never use}
@i{it. In this case the mask would be 0x00000000.}

@example
  bfd_word src_mask;
@end example
@i{The dst_mask is what parts of the instruction are replaced into the}
@i{instruction. In most cases src_mask == dst_mask, except in the above}
@i{special case, where dst_mask would be 0x000000ff, and src_mask would}
@i{be 0x00000000.}

@example
  bfd_word dst_mask;           
@end example

@i{When some formats create PC relative instructions, they leave the}
@i{value of the pc of the place being relocated in the offset slot of the}
@i{instruction, so that a PC relative relocation can be made just by}
@i{adding in an ordinary offset (eg sun3 a.out). Some formats leave the}
@i{displacement part of an instruction empty (eg m88k bcs), this flag}
@i{signals the fact.}

@example
  boolean pcrel_offset;
@} reloc_howto_type;
@end example



@findex HOWTO
@subsubsection @code{HOWTO}
The HOWTO define is horrible and will go away.
@lisp
@c @cartouche
#define HOWTO(C, R,S,B, P, BI, ABS, O, SF, NAME, INPLACE, MASKSRC, MASKDST, PC) \
  @{(unsigned)C,R,S,B, P, BI, ABS,O,SF,NAME,INPLACE,MASKSRC,MASKDST,PC@}
@c @end cartouche
@end lisp



@findex reloc_chain
@subsubsection @code{reloc_chain}
@lisp
@c @cartouche
typedef unsigned char bfd_byte;

typedef struct relent_chain @{
  arelent relent;
  struct   relent_chain *next;
@} arelent_chain;

@c @end cartouche
@end lisp



If an output_bfd is supplied to this function the generated image
will be relocatable, the relocations are copied to the output file
after they have been changed to reflect the new state of the world.
There are two ways of reflecting the results of partial linkage in an
output file; by modifying the output data in place, and by modifying
the relocation record. Some native formats (eg basic a.out and basic
coff) have no way of specifying an addend in the relocation type, so
the addend has to go in the output data.  This is no big deal since in
these formats the output data slot will always be big enough for the
addend. Complex reloc types with addends were invented to solve just
this problem.
@example
bfd_reloc_status_enum_type bfd_perform_relocation(bfd * abfd,
                        arelent *reloc_entry,
                        PTR data,
                        asection *input_section,
                        bfd *output_bfd);
@end example


@c ------------------------------END TEXT FROM ../reloc.c
