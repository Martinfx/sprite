@c ------------------------------START TEXT FROM ../section.c
@section Sections
Sections are supported in BFD in @code{section.c}.

The raw data contained within a BFD is maintained through the section
abstraction.  A single BFD may have any number of sections, and keeps
hold of them by pointing to the first, each one points to the next in
the list.

@menu
* Section Input::
* Section Output::
* typedef asection::
* section prototypes::
@end menu

@node Section Input, Section Output,,Sections
@comment  node-name,  next,  previous,  up
@subsection Section Input
When a BFD is opened for reading, the section structures are created
and attached to the BFD.

Each section has a name which describes the section in the outside
world - for example, @code{a.out} would contain at least three
sections, called @code{.text}, @code{.data} and @code{.bss}. 

Sometimes a BFD will contain more than the 'natural' number of
sections. A back end may attach other sections containing constructor
data, or an application may add a section (using bfd_make_section) to
the sections attached to an already open BFD. For example, the linker
creates a supernumary section @code{COMMON} for each input file's BFD
to hold information about common storage.

The raw data is not necessarily read in at the same time as the
section descriptor is created. Some targets may leave the data in
place until a @code{bfd_get_section_contents} call is made. Other back
ends may read in all the data at once - For example; an S-record file
has to be read once to determine the size of the data. An IEEE-695
file doesn't contain raw data in sections, but data and relocation
expressions intermixed, so the data area has to be parsed to get out
the data and relocations.

@node Section Output,typedef asection,Section Input,Sections
@subsection Section Output
To write a new object style BFD, the various sections to be written
have to be created. They are attached to the BFD in the same way as
input sections, data is written to the sections using
@code{bfd_set_section_contents}. 

The linker uses the fields @code{output_section} and
@code{output_offset} to create an output file.

The data to be written comes from input sections attached to the
output sections.  The output section structure can be considered a
filter for the input section, the output section determines the vma of
the output data and the name, but the input section determines the
offset into the output section of the data to be written.

Eg to create a section "O", starting at 0x100, 0x123 long, containing two
subsections, "A" at offset 0x0 (ie at vma 0x100) and "B" at offset
0x20 (ie at vma 0x120) the structures would look like:

@lisp
@c @cartouche

   section name          "A"
     output_offset   0x00
     size            0x20
     output_section ----------->  section name    "O"
                             |    vma             0x100
   section name          "B" |    size            0x123
     output_offset   0x20    |
     size            0x103   |
     output_section  --------|

@c @end cartouche
@end lisp



@node typedef asection,section prototypes,Section Output,Sections
@subsection typedef asection

The shape of a section struct:


@example
typedef struct sec @{
@end example

@i{The name of the section, the name isn't a copy, the pointer is}
@i{the same as that passed to bfd_make_section.}

@example
    CONST char *name;
@end example

@i{The next section in the list belonging to the BFD, or NULL.}

@example
    struct sec *next;
@end example

@i{The field flags contains attributes of the section. Some of these}
@i{flags are read in from the object file, and some are synthesized from}
@i{other information. }

@example
flagword flags;
@end example


@example
#define SEC_NO_FLAGS   0x000
@end example

@i{Tells the OS to allocate space for this section when loaded.}
@i{This would clear for a section containing debug information only.}

@example
#define SEC_ALLOC      0x001
@end example

@i{Tells the OS to load the section from the file when loading.}
@i{This would be clear for a .bss section }

@example
#define SEC_LOAD       0x002
@end example

@i{The section contains data still to be relocated, so there will be some}
@i{relocation information too.}

@example
#define SEC_RELOC      0x004
@end example

@i{Obsolete 
 }

@example
#define SEC_BALIGN     0x008
@end example

@i{A signal to the OS that the section contains read only data.}

@example
#define SEC_READONLY   0x010
@end example

@i{The section contains code only.}

@example
#define SEC_CODE       0x020
@end example

@i{The section contains data only.}

@example
#define SEC_DATA        0x040
@end example

@i{The section will reside in ROM.}

@example
#define SEC_ROM        0x080
@end example

@i{The section contains constructor information. This section type is}
@i{used by the linker to create lists of constructors and destructors}
@i{used by @code{g++}. When a back end sees a symbol which should be used}
@i{in a constructor list, it creates a new section for the type of name}
@i{(eg @code{__CTOR_LIST__}), attaches the symbol to it and builds a}
@i{relocation. To build the lists of constructors, all the linker has to}
@i{to is catenate all the sections called @code{__CTOR_LIST__} and}
@i{relocte the data contained within - exactly the operations it would}
@i{peform on standard data.}

@example
#define SEC_CONSTRUCTOR 0x100
@end example

@i{The section is a constuctor, and should be placed at the end of the ..}

@example
#define SEC_CONSTRUCTOR_TEXT 0x1100
@end example

@example
#define SEC_CONSTRUCTOR_DATA 0x2100
@end example

@example
#define SEC_CONSTRUCTOR_BSS  0x3100
@end example


@i{The section has contents - a bss section could be}
@i{@code{SEC_ALLOC} | @code{SEC_HAS_CONTENTS}, a debug section could be}
@i{@code{SEC_HAS_CONTENTS}}

@example
#define SEC_HAS_CONTENTS 0x200
@end example

@i{An instruction to the linker not to output sections containing}
@i{this flag even if they have information which would normally be written.}

@example
#define SEC_NEVER_LOAD 0x400
@end example


@i{The base address of the section in the address space of the target.}

@example
   bfd_vma vma;
@end example

@i{The size of the section in bytes of the loaded section. This contains}
@i{a value even if the section has no contents (eg, the size of @code{.bss}).}

@example
   bfd_size_type size;    
@end example

@i{If this section is going to be output, then this value is the}
@i{offset into the output section of the first byte in the input}
@i{section. Eg, if this was going to start at the 100th byte in the}
@i{output section, this value would be 100. }

@example
   bfd_vma output_offset;
@end example

@i{The output section through which to map on output.}

@example
   struct sec *output_section;
@end example

@i{The alignment requirement of the section, as an exponent - eg 3}
@i{aligns to 2^3 (or 8) }

@example
   unsigned int alignment_power;
@end example

@i{If an input section, a pointer to a vector of relocation records for}
@i{the data in this section.}

@example
   struct reloc_cache_entry *relocation;
@end example

@i{If an output section, a pointer to a vector of pointers to}
@i{relocation records for the data in this section.}

@example
   struct reloc_cache_entry **orelocation;
@end example

@i{The number of relocation records in one of the above }

@example
   unsigned reloc_count;
@end example

@i{Which section is it 0..nth     }

@example
   int index;                      
@end example

@i{Information below is back end specific - and not always used or}
@i{updated }

@i{File position of section data   }

@example
   file_ptr filepos;      
@end example
@i{File position of relocation info        }

@example
   file_ptr rel_filepos;
@end example

@i{File position of line data              }

@example
   file_ptr line_filepos;
@end example

@i{Pointer to data for applications        }

@example
   PTR userdata;
@end example

@example
   struct lang_output_section *otheruserdata;
@end example

@i{Attached line number information        }

@example
   alent *lineno;
@end example
@i{Number of line number records   }

@example
   unsigned int lineno_count;
@end example

@i{When a section is being output, this value changes as more}
@i{linenumbers are written out }

@example
   file_ptr moving_line_filepos;
@end example

@i{what the section number is in the target world }

@example
   unsigned int target_index;
@end example

@example
   PTR used_by_bfd;
@end example

@i{If this is a constructor section then here is a list of the}
@i{relocations created to relocate items within it.}

@example
   struct relent_chain *constructor_chain;
@end example

@i{The BFD which owns the section.}

@example
   bfd *owner;
@end example

@example
@} asection ;
@end example




@node section prototypes,Section,typedef section,Sections
@subsection section prototypes


@findex bfd_get_section_by_name
@subsubsection @code{bfd_get_section_by_name}
Runs through the provided @var{abfd} and returns the @code{asection}
who's name matches that provided, otherwise NULL. @xref{Sections}, for more information.

@example
asection * bfd_get_section_by_name(bfd *abfd, CONST char *name);
@end example


@findex bfd_make_section
@subsubsection @code{bfd_make_section}
This function creates a new empty section called @var{name} and attaches it
to the end of the chain of sections for the BFD supplied. An attempt to
create a section with a name which is already in use, returns the old
section by that name instead.

Possible errors are:
@table @code
@item invalid_operation
If output has already started for this BFD.
@item no_memory
If obstack alloc fails.
@end table

@example
asection * bfd_make_section(bfd *, CONST char *name);
@end example


@findex bfd_set_section_flags
@subsubsection @code{bfd_set_section_flags}
Attempts to set the attributes of the section named in the BFD
supplied to the value. Returns true on success, false on error.
Possible error returns are:
@table @code
@item invalid operation
The section cannot have one or more of the attributes requested. For
example, a .bss section in @code{a.out} may not have the
@code{SEC_HAS_CONTENTS} field set.
@end table

@example
boolean bfd_set_section_flags(bfd *, asection *, flagword);
@end example


@findex bfd_map_over_sections
@subsubsection @code{bfd_map_over_sections}
Calls the provided function @var{func} for each section attached to
the BFD @var{abfd}, passing @var{obj} as an argument. The function
will be called as if by 

@example
  func(abfd, the_section, obj);
@end example


@example
void bfd_map_over_sections(bfd *abfd, void (*func)(), PTR obj);
@end example


This is the prefered method for iterating over sections, an
alternative would be to use a loop:

@example
   section *p;
   for (p = abfd->sections; p != NULL; p = p->next)
      func(abfd, p, ...)
@end example

@findex bfd_set_section_size
@subsubsection @code{bfd_set_section_size}
Sets @var{section} to the size @var{val}. If the operation is ok, then
@code{true} is returned, else @code{false}. 

Possible error returns:
@table @code
@item invalid_operation
Writing has started to the BFD, so setting the size is invalid
@end table 

@example
boolean bfd_set_section_size(bfd *, asection *, bfd_size_type val);
@end example


@findex bfd_set_section_contents
@subsubsection @code{bfd_set_section_contents}
Sets the contents of the section @var{section} in BFD @var{abfd} to
the data starting in memory at @var{data}. The data is written to the
output section starting at offset @var{offset} for @var{count} bytes.

Normally @code{true} is returned, else @code{false}. Possible error
returns are:
@table @code
@item no_contents
The output section does not have the @code{SEC_HAS_CONTENTS}
attribute, so nothing can be written to it.
@item and some more too
@end table
This routine is front end to the back end function @code{_bfd_set_section_contents}.

@example
boolean bfd_set_section_contents(bfd *abfd,        
         asection *section,
         PTR data,
         file_ptr offset,
         bfd_size_type count);
@end example



@findex bfd_get_section_contents
@subsubsection @code{bfd_get_section_contents}
This function reads data from @var{section} in BFD @var{abfd} into
memory starting at @var{location}. The data is read at an offset of
@var{offset} from the start of the input section, and is read for
@var{count} bytes.

If the contents of a constuctor with the @code{SEC_CONSTUCTOR} flag
set are requested, then the @var{location} is filled with zeroes.

If no errors occur, @code{true} is returned, else @code{false}.
Possible errors are:

@table @code
@item unknown yet
@end table

@example
boolean bfd_get_section_contents(bfd *abfd, asection *section, PTR location,
         file_ptr offset, bfd_size_type count);
@end example




@c ------------------------------END TEXT FROM ../section.c
