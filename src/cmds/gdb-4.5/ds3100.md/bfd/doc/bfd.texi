@section @code{typedef bfd}
A BFD is has type @code{bfd}; objects of this type are the
cornerstone of any application using @code{libbfd}. References
though the BFD and to data in the BFD give the entire BFD
functionality.
Here is the struct used to define the type @code{bfd}.  This
contains he major data about the file, and contains pointers
to the rest of the data.
@*
.
@example
struct _bfd 
@{
    	/* The filename the application opened the BFD with.  */
    CONST char *filename;                

    	/* A pointer to the target jump table.             */
    struct bfd_target *xvec;

    	/* To avoid dragging too many header files into every file that
       includes `<<bfd.h>>', IOSTREAM has been declared as a "char
       *", and MTIME as a "long".  Their correct types, to which they
       are cast when used, are "FILE *" and "time_t".    The iostream
       is the result of an fopen on the filename. */
    char *iostream;

    	/* Is the file being cached */

    boolean cacheable;

    	/* Marks whether there was a default target specified when the
       BFD was opened. This is used to select what matching algorithm
       to use to chose the back end. */

    boolean target_defaulted;

    	/* The caching routines use these to maintain a
       least-recently-used list of BFDs */

    struct _bfd *lru_prev, *lru_next;

    	/* When a file is closed by the caching routines, BFD retains
       state information on the file here: 
     */

    file_ptr where;              

    	/* and here:*/

    boolean opened_once;

    	/* Set if we have a locally maintained mtime value, rather than
       getting it from the file each time: */

    boolean mtime_set;

    	/* File modified time, if mtime_set is true: */

    long mtime;          

    	/* Reserved for an unimplemented file locking extension.*/

    int ifd;

    	/* The format which belongs to the BFD.*/

    bfd_format format;

    	/* The direction the BFD was opened with*/

    enum bfd_direction @{no_direction = 0,
                        read_direction = 1,
                        write_direction = 2,
                        both_direction = 3@} direction;

    	/* Format_specific flags*/

    flagword flags;              

    	/* Currently my_archive is tested before adding origin to
       anything. I believe that this can become always an add of
       origin, with origin set to 0 for non archive files.   */

    file_ptr origin;             

    	/* Remember when output has begun, to stop strange things
       happening. */
    boolean output_has_begun;

    	/* Pointer to linked list of sections*/
    struct sec  *sections;

    	/* The number of sections */
    unsigned int section_count;

    	/* Stuff only useful for object files: 
       The start address. */
    bfd_vma start_address;

    	/* Used for input and output*/
    unsigned int symcount;

    	/* Symbol table for output BFD*/
    struct symbol_cache_entry  **outsymbols;             

    	/* Pointer to structure which contains architecture information*/
    struct bfd_arch_info *arch_info;

    	/* Stuff only useful for archives:*/
    PTR arelt_data;              
    struct _bfd *my_archive;     
    struct _bfd *next;           
    struct _bfd *archive_head;   
    boolean has_armap;           

    	/* Used by the back end to hold private data. */

    union 
      @{
      struct aout_data_struct *aout_data;
      struct artdata *aout_ar_data;
      struct _oasys_data *oasys_obj_data;
      struct _oasys_ar_data *oasys_ar_data;
      struct coff_tdata *coff_obj_data;
      struct ieee_data_struct *ieee_data;
      struct ieee_ar_data_struct *ieee_ar_data;
      struct srec_data_struct *srec_data;
      struct elf_obj_tdata_struct *elf_obj_data;
      struct elf_core_tdata_struct *elf_core_data;
      struct bout_data_struct *bout_data;
      struct sun_core_struct *sun_core_data;
      struct trad_core_struct *trad_core_data;
      PTR any;
      @} tdata;
  
    	/* Used by the application to hold private data*/
    PTR usrdata;

    	/* Where all the allocated stuff under this BFD goes */
    struct obstack memory;

    asymbol **ld_symbols;
@};

@end example
@findex bfd_get_reloc_upper_bound
@subsubsection @code{bfd_get_reloc_upper_bound}
@strong{Synopsis}
@example
unsigned int bfd_get_reloc_upper_bound(bfd *abfd, asection *sect);
@end example
@strong{Description}@*
This function return the number of bytes required to store the
relocation information associated with section @code{sect}
attached to bfd @code{abfd}
@*
@findex bfd_canonicalize_reloc
@subsubsection @code{bfd_canonicalize_reloc}
@strong{Synopsis}
@example
unsigned int bfd_canonicalize_reloc
   (bfd *abfd,
    asection *sec,
    arelent **loc,
    asymbol	**syms);
@end example
@strong{Description}@*
This function calls the back end associated with the open
@code{abfd} and translates the external form of the relocation
information attached to @code{sec} into the internal canonical
form.  The table is placed into memory at @code{loc}, which has
been preallocated, usually by a call to
@code{bfd_get_reloc_upper_bound}.
The @code{syms} table is also needed for horrible internal magic
reasons.
@*
@findex bfd_set_file_flags
@subsubsection @code{bfd_set_file_flags}
@strong{Synopsis}
@example
boolean bfd_set_file_flags(bfd *abfd, flagword flags);
@end example
@strong{Description}@*
This function attempts to set the flag word in the referenced
BFD structure to the value supplied.
Possible errors are:
@itemize @bullet
@item wrong_format - The target bfd was not of object format.@item invalid_operation - The target bfd was open for reading.@item invalid_operation -
The flag word contained a bit which was not applicable to the
type of file. eg, an attempt was made to set the D_PAGED bit
on a bfd format which does not support demand paging
@end itemize
@*
@findex bfd_set_reloc
@subsubsection @code{bfd_set_reloc}
@strong{Synopsis}
@example
void bfd_set_reloc
   (bfd *abfd, asection *sec, arelent **rel, unsigned int count)
@end example
@strong{Description}@*
This function sets the relocation pointer and count within a
section to the supplied values.
@*
@findex bfd_set_start_address
@subsubsection @code{bfd_set_start_address}
@strong{Description}@*
Marks the entry point of an output BFD.
@*
@strong{Returns}@*
Returns @code{true} on success, @code{false} otherwise.
@*
@strong{Synopsis}
@example
boolean bfd_set_start_address(bfd *, bfd_vma);
@end example
@findex The bfd_get_mtime function
@subsubsection @code{The bfd_get_mtime function}
@strong{Synopsis}
@example
long bfd_get_mtime(bfd *);
@end example
@strong{Description}@*
Return file modification time (as read from file system, or
from archive header for archive members).
@*
@findex stuff
@subsubsection @code{stuff}
@strong{Description}@*
stuff which should be documented
@example
#define bfd_sizeof_headers(abfd, reloc) \
     BFD_SEND (abfd, _bfd_sizeof_headers, (abfd, reloc))

#define bfd_find_nearest_line(abfd, sec, syms, off, file, func, line) \
     BFD_SEND (abfd, _bfd_find_nearest_line,  (abfd, sec, syms, off, file, func, line))

#define bfd_debug_info_start(abfd) \
        BFD_SEND (abfd, _bfd_debug_info_start, (abfd))

#define bfd_debug_info_end(abfd) \
        BFD_SEND (abfd, _bfd_debug_info_end, (abfd))

#define bfd_debug_info_accumulate(abfd, section) \
        BFD_SEND (abfd, _bfd_debug_info_accumulate, (abfd, section))

#define bfd_stat_arch_elt(abfd, stat) \
        BFD_SEND (abfd, _bfd_stat_arch_elt,(abfd, stat))

#define bfd_coff_swap_aux_in(a,e,t,c,i) \
        BFD_SEND (a, _bfd_coff_swap_aux_in, (a,e,t,c,i))

#define bfd_coff_swap_sym_in(a,e,i) \
        BFD_SEND (a, _bfd_coff_swap_sym_in, (a,e,i))

#define bfd_coff_swap_lineno_in(a,e,i) \
        BFD_SEND ( a, _bfd_coff_swap_lineno_in, (a,e,i))

#define bfd_set_arch_mach(abfd, arch, mach)\
        BFD_SEND ( abfd, _bfd_set_arch_mach, (abfd, arch, mach))

#define bfd_coff_swap_reloc_out(abfd, i, o) \
        BFD_SEND (abfd, _bfd_coff_swap_reloc_out, (abfd, i, o))

#define bfd_coff_swap_lineno_out(abfd, i, o) \
        BFD_SEND (abfd, _bfd_coff_swap_lineno_out, (abfd, i, o))

#define bfd_coff_swap_aux_out(abfd, i, t,c,o) \
        BFD_SEND (abfd, _bfd_coff_swap_aux_out, (abfd, i,t,c, o))

#define bfd_coff_swap_sym_out(abfd, i,o) \
        BFD_SEND (abfd, _bfd_coff_swap_sym_out, (abfd, i, o))

#define bfd_coff_swap_scnhdr_out(abfd, i,o) \
        BFD_SEND (abfd, _bfd_coff_swap_scnhdr_out, (abfd, i, o))

#define bfd_coff_swap_filehdr_out(abfd, i,o) \
        BFD_SEND (abfd, _bfd_coff_swap_filehdr_out, (abfd, i, o))

#define bfd_coff_swap_aouthdr_out(abfd, i,o) \
        BFD_SEND (abfd, _bfd_coff_swap_aouthdr_out, (abfd, i, o))

#define bfd_get_relocated_section_contents(abfd, seclet) \
	BFD_SEND (abfd, _bfd_get_relocated_section_contents, (abfd, seclet))

#define bfd_relax_section(abfd, section, symbols) \
       BFD_SEND (abfd, _bfd_relax_section, (abfd, section, symbols))
@end example
@*
