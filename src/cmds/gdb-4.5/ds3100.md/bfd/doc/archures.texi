@section Architectures
BFD's idea of an architecture is implimented in
@code{archures.c}. BFD keeps one atom in a BFD describing the
architecture of the data attached to the BFD;  a pointer to a
@code{bfd_arch_info_type}.  
Pointers to structures can be requested independently of a bfd
so that an architecture's information can be interrogated
without access to an open bfd.
The arch information is provided by each architecture package.
The set of default architectures is selected by the #define
@code{SELECT_ARCHITECTURES}.  This is normally set up in the
@code{config\/h\-} file of your choice.  If the name is not
defined, then all the architectures supported are included. 
When BFD starts up, all the architectures are called with an
initialize method.  It is up to the architecture back end to
insert as many items into the list of arches as it wants to,
generally this would be one for each machine and one for the
default case (an item with a machine field of 0).
@*
@subsection bfd_architecture

@*
@strong{Description}@*
This enum gives the object file's CPU architecture, in a
global sense. E.g. what processor family does it belong to?
There is another field, which indicates what processor within
the family is in use.  The machine gives a number which
distingushes different versions of the architecture,
containing for example 2 and 3 for Intel i960 KA and i960 KB,
and 68020 and 68030 for Motorola 68020 and 68030. 
@example
enum bfd_architecture 
@{
  bfd_arch_unknown,    /* File arch not known */
  bfd_arch_obscure,    /* Arch known, not one of these */
  bfd_arch_m68k,       /* Motorola 68xxx */
  bfd_arch_vax,        /* DEC Vax */   
  bfd_arch_i960,       /* Intel 960 */
     /* The order of the following is important.
       lower number indicates a machine type that 
       only accepts a subset of the instructions
       available to machines with higher numbers.
       The exception is the "ca", which is
       incompatible with all other machines except 
       "core". */

#define bfd_mach_i960_core      1
#define bfd_mach_i960_ka_sa     2
#define bfd_mach_i960_kb_sb     3
#define bfd_mach_i960_mc        4
#define bfd_mach_i960_xa        5
#define bfd_mach_i960_ca        6

  bfd_arch_a29k,       /* AMD 29000 */
  bfd_arch_sparc,      /* SPARC */
  bfd_arch_mips,       /* MIPS Rxxxx */
  bfd_arch_i386,       /* Intel 386 */
  bfd_arch_ns32k,      /* National Semiconductor 32xxx */
  bfd_arch_tahoe,      /* CCI/Harris Tahoe */
  bfd_arch_i860,       /* Intel 860 */
  bfd_arch_romp,       /* IBM ROMP PC/RT */
  bfd_arch_alliant,    /* Alliant */
  bfd_arch_convex,     /* Convex */
  bfd_arch_m88k,       /* Motorola 88xxx */
  bfd_arch_pyramid,    /* Pyramid Technology */
  bfd_arch_h8300,      /* Hitachi H8/300 */
  bfd_arch_rs6000,     /* IBM RS/6000 */
  bfd_arch_last
  @};
@end example
@*
@subsection bfd_arch_info

@*
@strong{Description}@*
This structure contains information on architectures for use
within BFD.
@example
typedef int bfd_reloc_code_type;

typedef struct bfd_arch_info 
@{
  int bits_per_word;
  int bits_per_address;
  int bits_per_byte;
  enum bfd_architecture arch;
  long mach;
  char *arch_name;
  CONST  char *printable_name;
  /* true if this is the default machine for the architecture */
 unsigned int section_align_power;
  boolean the_default;	
  CONST struct bfd_arch_info * EXFUN((*compatible),
	(CONST struct bfd_arch_info *a,
	 CONST struct bfd_arch_info *b));

  boolean EXFUN((*scan),(CONST struct bfd_arch_info *,CONST char *));
  unsigned int EXFUN((*disassemble),(bfd_vma addr, CONST char *data,
				     PTR stream));
  CONST struct reloc_howto_struct *EXFUN((*reloc_type_lookup),
    (CONST struct bfd_arch_info *,
    bfd_reloc_code_type  code));

  struct bfd_arch_info *next;

@} bfd_arch_info_type;
@end example
@*
@findex bfd_printable_name
@subsubsection @code{bfd_printable_name}
@strong{Synopsis}
@example
CONST char *bfd_printable_name(bfd *abfd);
@end example
@strong{Description}@*
Return a printable string representing the architecture and machine
from the pointer to the arch info structure
@*
@findex bfd_scan_arch
@subsubsection @code{bfd_scan_arch}
@strong{Synopsis}
@example
bfd_arch_info_type *bfd_scan_arch(CONST char *);
@end example
@strong{Description}@*
This routine is provided with a string and tries to work out
if bfd supports any cpu which could be described with the name
provided.  The routine returns a pointer to an arch_info
structure if a machine is found, otherwise NULL.
@*
@findex bfd_arch_get_compatible
@subsubsection @code{bfd_arch_get_compatible}
@strong{Synopsis}
@example
CONST bfd_arch_info_type *bfd_arch_get_compatible(
    CONST bfd *abfd,
    CONST bfd *bbfd);
@end example
@strong{Description}@*
This routine is used to determine whether two BFDs'
architectures and achine types are compatible.  It calculates
the lowest common denominator between the two architectures
and machine types implied by the BFDs and returns a pointer to
an arch_info structure describing the compatible machine.
@*
@findex bfd_default_arch_struct
@subsubsection @code{bfd_default_arch_struct}
@strong{Description}@*
The @code{bfd_default_arch_struct} is an item of
@code{bfd_arch_info_type} which has been initialized to a fairly
generic state.  A BFD starts life by pointing to this
structure, until the correct back end has determined the real
architecture of the file.
@example
extern bfd_arch_info_type bfd_default_arch_struct;
@end example
@*
@findex bfd_set_arch_info
@subsubsection @code{bfd_set_arch_info}
@strong{Synopsis}
@example
void bfd_set_arch_info(bfd *, bfd_arch_info_type *);
@end example
@findex bfd_default_set_arch_mach
@subsubsection @code{bfd_default_set_arch_mach}
@strong{Synopsis}
@example
boolean bfd_default_set_arch_mach(bfd *abfd,
    enum bfd_architecture arch,
    unsigned long mach);
@end example
@strong{Description}@*
Set the architecture and machine type in a bfd. This finds the
correct pointer to structure and inserts it into the arch_info
pointer.
@*
@findex bfd_get_arch
@subsubsection @code{bfd_get_arch}
@strong{Synopsis}
@example
enum bfd_architecture bfd_get_arch(bfd *abfd);
@end example
@strong{Description}@*
Returns the enumerated type which describes the supplied bfd's
architecture
@*
@findex bfd_get_mach
@subsubsection @code{bfd_get_mach}
@strong{Synopsis}
@example
unsigned long bfd_get_mach(bfd *abfd);
@end example
@strong{Description}@*
Returns the long type which describes the supplied bfd's
machine
@*
@findex bfd_arch_bits_per_byte
@subsubsection @code{bfd_arch_bits_per_byte}
@strong{Synopsis}
@example
unsigned int bfd_arch_bits_per_byte(bfd *abfd);
@end example
@strong{Description}@*
Returns the number of bits in one of the architectures bytes
@*
@findex bfd_arch_bits_per_address
@subsubsection @code{bfd_arch_bits_per_address}
@strong{Synopsis}
@example
unsigned int bfd_arch_bits_per_address(bfd *abfd);
@end example
@strong{Description}@*
Returns the number of bits in one of the architectures addresses
@*
@findex bfd_arch_init
@subsubsection @code{bfd_arch_init}
@strong{Synopsis}
@example
void  bfd_arch_init(void);
@end example
@strong{Description}@*
This routine initializes the architecture dispatch table by
calling all installed architecture packages and getting them
to poke around.
@*
@findex bfd_arch_linkin
@subsubsection @code{bfd_arch_linkin}
@strong{Synopsis}
@example
void bfd_arch_linkin(bfd_arch_info_type *);
@end example
@strong{Description}@*
Link the provided arch info structure into the list
@*
@findex bfd_default_compatible
@subsubsection @code{bfd_default_compatible}
@strong{Synopsis}
@example
CONST bfd_arch_info_type *bfd_default_compatible
   (CONST bfd_arch_info_type *a,
    CONST bfd_arch_info_type *b);
@end example
@strong{Description}@*
The default function for testing for compatibility.
@*
@findex bfd_default_scan
@subsubsection @code{bfd_default_scan}
@strong{Synopsis}
@example
boolean bfd_default_scan(CONST struct bfd_arch_info *, CONST char *);
@end example
@strong{Description}@*
The default function for working out whether this is an
architecture hit and a machine hit.
@*
@findex bfd_get_arch_info
@subsubsection @code{bfd_get_arch_info}
@strong{Synopsis}
@example
bfd_arch_info_type * bfd_get_arch_info(bfd *);
@end example
@findex bfd_lookup_arch
@subsubsection @code{bfd_lookup_arch}
@strong{Synopsis}
@example
bfd_arch_info_type *bfd_lookup_arch
   (enum bfd_architecture
    arch,
    long machine);
@end example
@strong{Description}@*
Look for the architecure info struct which matches the
arguments given. A machine of 0 will match the
machine/architecture structure which marks itself as the
default.
@*
@findex bfd_printable_arch_mach
@subsubsection @code{bfd_printable_arch_mach}
@strong{Synopsis}
@example
CONST char * bfd_printable_arch_mach
   (enum bfd_architecture arch, unsigned long machine);
@end example
@strong{Description}@*
Return a printable string representing the architecture and
machine type. 
NB. The use of this routine is depreciated.
@*
