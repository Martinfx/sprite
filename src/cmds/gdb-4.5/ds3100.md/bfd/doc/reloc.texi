@section Relocations
BFD maintains relocations in much the same was as it maintains
symbols; they are left alone until required, then read in
en-mass and traslated into an internal form. There is a common
routine @code{bfd_perform_relocation} which acts upon the
canonical form to to the actual fixup.
Note that relocations are maintained on a per section basis,
whilst symbols are maintained on a per BFD basis.
All a back end has to do to fit the BFD interface is to create
as many @code{struct reloc_cache_entry} as there are relocations
in a particuar section, and fill in the right bits:

@menu
* typedef arelent::
* howto manager::
@end menu
@*
@node typedef arelent, howto manager, Relocations, Relocations
@subsection typedef arelent
This is the structure of a relocation entry:
@*
.
@example
typedef enum bfd_reloc_status 
@{
       	/* No errors detected */
  bfd_reloc_ok,

       	/* The relocation was performed, but there was an overflow. */
  bfd_reloc_overflow,

       	/* The address to relocate was not within the section supplied*/
  bfd_reloc_outofrange,

       	/* Used by special functions */
  bfd_reloc_continue,

       	/* Unused */
  bfd_reloc_notsupported,

       	/* Unsupported relocation size requested.  */
  bfd_reloc_other,

       	/* The symbol to relocate against was undefined.*/
  bfd_reloc_undefined,

       	/* The relocation was performed, but may not be ok - presently
          generated only when linking i960 coff files with i960 b.out
          symbols. */
  bfd_reloc_dangerous
 @}
 bfd_reloc_status_type;


typedef struct reloc_cache_entry 
@{
       	/* A pointer into the canonical table of pointers  */
  struct symbol_cache_entry **sym_ptr_ptr;

       	/* offset in section */
  rawdata_offset address;

       	/* addend for relocation value */
  bfd_vma addend;    

       	/* Pointer to how to perform the required relocation */
  CONST struct reloc_howto_struct *howto;

@} arelent;
@end example
@strong{Description}@*
Here is a description of each of the fields within a relent:

@itemize @bullet
@item sym_ptr_ptr

The symbol table pointer points to a pointer to the symbol
associated with the relocation request. This would naturally
be the pointer into the table returned by the back end's
get_symtab action. @xref{Symbols}. The symbol is referenced
through a pointer to a pointer so that tools like the linker
can fix up all the symbols of the same name by modifying only
one pointer. The relocation routine looks in the symbol and
uses the base of the section the symbol is attached to and the
value of the symbol as the initial relocation offset. If the
symbol pointer is zero, then the section provided is looked up.@item address
The address field gives the offset in bytes from the base of
the section data which owns the relocation record to the first
byte of relocatable information. The actual data relocated
will be relative to this point - for example, a relocation
type which modifies the bottom two bytes of a four byte word
would not touch the first byte pointed to in a big endian
world. @item addend The addend is a value provided by the back
end to be added (!) to the relocation offset. Its
interpretation is dependent upon the howto. For example, on
the 68k the code:
@example
        char foo[];
        main()
                @{
                return foo[0x12345678];
                @}
@end example

Could be compiled into:

@example
        linkw fp,#-4
        moveb @@#12345678,d0
        extbl d0
        unlk fp
        rts
@end example

This could create a reloc pointing to foo, but leave the
offset in the data (something like)

@example
RELOCATION RECORDS FOR [.text]:
offset   type      value 
00000006 32        _foo

00000000 4e56 fffc          ; linkw fp,#-4
00000004 1039 1234 5678     ; moveb @@#12345678,d0
0000000a 49c0               ; extbl d0
0000000c 4e5e               ; unlk fp
0000000e 4e75               ; rts
@end example

Using coff and an 88k, some instructions don't have enough
space in them to represent the full address range, and
pointers have to be loaded in two parts. So you'd get something like:
@example
        or.u     r13,r0,hi16(_foo+0x12345678)
        ld.b     r2,r13,lo16(_foo+0x12345678)
        jmp      r1
@end example
This whould create two relocs, both pointing to _foo, and with
0x12340000 in their addend field. The data would consist of:
@example
RELOCATION RECORDS FOR [.text]:
offset   type      value 
00000002 HVRT16    _foo+0x12340000
00000006 LVRT16    _foo+0x12340000
@end example

@example
00000000 5da05678           ; or.u r13,r0,0x5678
00000004 1c4d5678           ; ld.b r2,r13,0x5678
00000008 f400c001           ; jmp r1
@end example
The relocation routine digs out the value from the data, adds
it to the addend to get the original offset and then adds the
value of _foo. Note that all 32 bits have to be kept around
somewhere, to cope with carry from bit 15 to bit 16.
On further example is the sparc and the a.out format. The
sparc has a similar problem to the 88k, in that some
instructions don't have room for an entire offset, but on the
sparc the parts are created odd sized lumps. The designers of
the a.out format chose not to use the data within the section
for storing part of the offset; all the offset is kept within
the reloc. Any thing in the data should be ignored. 
@example
        save %sp,-112,%sp
        sethi %hi(_foo+0x12345678),%g2
        ldsb [%g2+%lo(_foo+0x12345678)],%i0
        ret
        restore
@end example

Both relocs contains a pointer to foo, and the offsets would
contain junk.
@example
RELOCATION RECORDS FOR [.text]:
offset   type      value 
00000004 HI22      _foo+0x12345678
00000008 LO10      _foo+0x12345678
@end example

@example
00000000 9de3bf90     ; save %sp,-112,%sp
00000004 05000000     ; sethi %hi(_foo+0),%g2
00000008 f048a000     ; ldsb [%g2+%lo(_foo+0)],%i0
0000000c 81c7e008     ; ret
00000010 81e80000     ; restore
@end example
@item howto 

The howto field can be imagined as a
relocation instruction. It is a pointer to a struct which
contains information on what to do with all the other
information in the reloc record and data section. A back end
would normally have a relocation instruction set and turn
relocations into pointers to the correct structure on input -
but it would be possible to create each howto field on demand.
@end itemize
@*
@subsubsection @code{reloc_howto_type}
The @code{reloc_howto_type} is a structure which contains all the
information that BFD needs to know to tie up a back end's data.
@*
.struct symbol_cache_entry;			/* Forward declaration */
@example

typedef CONST struct reloc_howto_struct 
@{ 
       	/*  The type field has mainly a documetary use - the back end can
           to what it wants with it, though the normally the back end's
           external idea of what a reloc number would be would be stored
           in this field. For example, the a PC relative word relocation
           in a coff environment would have the type 023 - because that's
           what the outside world calls a R_PCRWORD reloc. */
  unsigned int type;

       	/*  The value the final relocation is shifted right by. This drops
           unwanted data from the relocation.  */
  unsigned int rightshift;

       	/*  The size of the item to be relocated - 0, is one byte, 1 is 2
           bytes, 3 is four bytes. */
  unsigned int size;

       	/*  Now obsolete */
  unsigned int bitsize;

       	/*  Notes that the relocation is relative to the location in the
           data section of the addend. The relocation function will
           subtract from the relocation value the address of the location
           being relocated. */
  boolean pc_relative;

       	/*  Now obsolete */
  unsigned int bitpos;

       	/*  Now obsolete */
  boolean absolute;

       	/* Causes the relocation routine to return an error if overflow
          is detected when relocating. */
  boolean complain_on_overflow;

       	/* If this field is non null, then the supplied function is
          called rather than the normal function. This allows really
          strange relocation methods to be accomodated (eg, i960 callj
          instructions). */
  bfd_reloc_status_type EXFUN ((*special_function), 
					    (bfd *abfd,
					     arelent *reloc_entry,
                                            struct symbol_cache_entry *symbol,
                                            PTR data,
                                            asection *input_section));

       	/* The textual name of the relocation type. */
  char *name;

       	/* When performing a partial link, some formats must modify the
          relocations rather than the data - this flag signals this.*/
  boolean partial_inplace;

       	/* The src_mask is used to select what parts of the read in data
          are to be used in the relocation sum. Eg, if this was an 8 bit
          bit of data which we read and relocated, this would be
          0x000000ff. When we have relocs which have an addend, such as
          sun4 extended relocs, the value in the offset part of a
          relocating field is garbage so we never use it. In this case
          the mask would be 0x00000000. */
  bfd_word src_mask;

       	/* The dst_mask is what parts of the instruction are replaced
          into the instruction. In most cases src_mask == dst_mask,
          except in the above special case, where dst_mask would be
          0x000000ff, and src_mask would be 0x00000000.   */
  bfd_word dst_mask;           

       	/* When some formats create PC relative instructions, they leave
          the value of the pc of the place being relocated in the offset
          slot of the instruction, so that a PC relative relocation can
          be made just by adding in an ordinary offset (eg sun3 a.out).
          Some formats leave the displacement part of an instruction
          empty (eg m88k bcs), this flag signals the fact.*/
  boolean pcrel_offset;

@} reloc_howto_type;
@end example
@findex the HOWTO macro
@subsubsection @code{the HOWTO macro}
@strong{Description}@*
The HOWTO define is horrible and will go away.
@example
#define HOWTO(C, R,S,B, P, BI, ABS, O, SF, NAME, INPLACE, MASKSRC, MASKDST, PC) \
  @{(unsigned)C,R,S,B, P, BI, ABS,O,SF,NAME,INPLACE,MASKSRC,MASKDST,PC@}
@end example
@*
@strong{Description}@*
And will be replaced with the totally magic way. But for the
moment, we are compatible, so do it this way..
@example
#define NEWHOWTO( FUNCTION, NAME,SIZE,REL,IN) HOWTO(0,0,SIZE,0,REL,0,false,false,FUNCTION, NAME,false,0,0,IN)

@end example
@*
@strong{Description}@*
Helper routine to turn a symbol into a relocation value.
@example
#define HOWTO_PREPARE(relocation, symbol)      \
  @{                                            \
  if (symbol != (asymbol *)NULL) @{             \
    if (symbol->section == &bfd_com_section) @{ \
      relocation = 0;                          \
    @}                                          \
    else @{                                     \
      relocation = symbol->value;              \
    @}                                          \
  @}                                            \
@}
@end example
@*
@findex reloc_chain
@subsubsection @code{reloc_chain}
@strong{Description}@*
How relocs are tied together
@example
typedef unsigned char bfd_byte;

typedef struct relent_chain @{
  arelent relent;
  struct   relent_chain *next;
@} arelent_chain;
@end example
@*
@findex bfd_perform_relocation
@subsubsection @code{bfd_perform_relocation}
@strong{Synopsis}
@example
bfd_reloc_status_type
bfd_perform_relocation
   (bfd * abfd,
    arelent *reloc_entry,
    PTR data,
    asection *input_section,
    bfd *output_bfd);
@end example
@strong{Description}@*
If an output_bfd is supplied to this function the generated
image will be relocatable, the relocations are copied to the
output file after they have been changed to reflect the new
state of the world. There are two ways of reflecting the
results of partial linkage in an output file; by modifying the
output data in place, and by modifying the relocation record.
Some native formats (eg basic a.out and basic coff) have no
way of specifying an addend in the relocation type, so the
addend has to go in the output data.  This is no big deal
since in these formats the output data slot will always be big
enough for the addend. Complex reloc types with addends were
invented to solve just this problem.
@*
@node howto manager,  , typedef arelent, Relocations
@section The howto manager 
When an application wants to create a relocation, but doesn't
know what the target machine might call it, it can find out by
using this bit of code.
@*
@findex bfd_reloc_code_type
@subsubsection @code{bfd_reloc_code_type}
@strong{Description}@*
The insides of a reloc code
@*
.
@example
typedef enum bfd_reloc_code_real 
@{
       	/* 16 bits wide, simple reloc */
  BFD_RELOC_16,        

       	/* 8 bits wide, but used to form an address like 0xffnn */
  BFD_RELOC_8_FFnn,

       	/* 8 bits wide, simple */
  BFD_RELOC_8,

       	/* 8 bits wide, pc relative */
  BFD_RELOC_8_PCREL,

       	/* The type of reloc used to build a contructor table - at the
          moment probably a 32 bit wide abs address, but the cpu can
          choose. */

  BFD_RELOC_CTOR
 @} bfd_reloc_code_real_type;
@end example
@section bfd_reloc_type_lookup

@*
@strong{Synopsis}
@example
CONST struct reloc_howto_struct *
bfd_reloc_type_lookup
   (CONST bfd_arch_info_type *arch, bfd_reloc_code_type code);
@end example
@strong{Description}@*
This routine returns a pointer to a howto struct which when
invoked, will perform the supplied relocation on data from the
architecture noted.
@*
@findex bfd_default_reloc_type_lookup
@subsubsection @code{bfd_default_reloc_type_lookup}
@strong{Synopsis}
@example
CONST struct reloc_howto_struct *bfd_default_reloc_type_lookup
   (CONST struct bfd_arch_info *,
    bfd_reloc_code_type  code);
@end example
@strong{Description}@*
Provides a default relocation lookuperer for any architectue
@*
@findex bfd_generic_relax_section
@subsubsection @code{bfd_generic_relax_section}
@strong{Synopsis}
@example
boolean bfd_generic_relax_section
   (bfd *abfd,
    asection *section,
    asymbol **symbols);
@end example
@strong{Description}@*
Provides default handling for relaxing for back ends which
don't do relaxing - ie does nothing
@*
@findex bfd_generic_get_relocated_section_contents
@subsubsection @code{bfd_generic_get_relocated_section_contents}
@strong{Synopsis}
@example
bfd_byte *
bfd_generic_get_relocated_section_contents(bfd *abfd,
    struct bfd_seclet_struct  *seclet)
@end example
@strong{Description}@*
Provides default handling of relocation effort for back ends
which can't be bothered to do it efficiently.
@*
