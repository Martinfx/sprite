head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     89.08.15.19.55.46;  author rab;  state Exp;
branches ;
next     1.5;

1.5
date     89.03.23.09.07.02;  author brent;  state Exp;
branches ;
next     1.4;

1.4
date     89.02.21.10.05.31;  author brent;  state Exp;
branches ;
next     1.3;

1.3
date     88.08.16.11.22.11;  author mendel;  state Exp;
branches ;
next     1.2;

1.2
date     88.04.27.09.16.05;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     88.04.27.09.01.58;  author brent;  state Exp;
branches ;
next     ;


desc
@TCP Protocol defs
@


1.6
log
@Commented #endif labels.
@
text
@/*
 * tcp.h --
 *
 *	Declarations of external TCP-related routines.
 *
 * Copyright 1987 Regents of the University of California
 * All rights reserved.
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 *
 * $Header: /sprite/src/daemons/ipServer/RCS/tcp.h,v 1.5 89/03/23 09:07:02 brent Exp Locker: rab $ SPRITE (Berkeley)
 */

#ifndef _IPS_TCP
#define _IPS_TCP

#include "sprite.h"

/*
 * TCP_BUF_SIZE is the size for the send and recieve socket buffers for
 * a TCP connection.  This size is used in turn to define
 * TCP_REQUEST_BUF_SIZE which is the size of the pseudo-device request
 * buffer.  This size means that if the client writes more that TCP_BUF_SIZE
 * to the pseudo-device the kernel will block it until the first TCP_BUF_SIZE
 * bytes have been removed from the request buffer.  If the request buffer
 * were larger then large writes would only be partially serviced by TCP,
 * and the extra bytes would just have to be re-written by the kernel.
 */
#define TCP_BUF_SIZE		4096
#define TCP_REQUEST_BUF_SIZE	(TCP_BUF_SIZE)

extern void		TCP_Init();
extern ReturnStatus	TCP_SocketOpen();
extern ReturnStatus	TCP_SocketClose();
extern ReturnStatus	TCP_SocketRead();
extern ReturnStatus	TCP_SocketWrite();
extern int		TCP_SocketSelect();
extern ReturnStatus	TCP_SocketBind();
extern ReturnStatus	TCP_SocketConnect();
extern ReturnStatus	TCP_SocketListen();
extern ReturnStatus	TCP_SocketAccept();
extern ReturnStatus	TCP_SocketClone();
extern ReturnStatus	TCP_SocketShutdown();
extern ReturnStatus	TCP_SocketGetOpt();
extern ReturnStatus	TCP_SocketSetOpt();
extern void		TCP_SocketDestroy();
extern void		TCP_PrintInfo();

#endif /* _IPS_TCP */
@


1.5
log
@Eliminated sizeof(Pdev_Request) from buffer sizes.  That extra
amount is handled in main.c so these are not so knowledgable
about the pseudo-device interface.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/daemons/ipServer/RCS/tcp.h,v 1.4 89/02/21 10:05:31 brent Exp $ SPRITE (Berkeley)
d55 1
a55 1
#endif _IPS_TCP
@


1.4
log
@Added constants used for the pseudo-device request buffer
@
text
@d17 1
a17 1
 * $Header: /sprite/src/daemons/ipServer/RCS/tcp.h,v 1.3 88/08/16 11:22:11 mendel Exp Locker: brent $ SPRITE (Berkeley)
d36 1
a36 1
#define TCP_REQUEST_BUF_SIZE	(TCP_BUF_SIZE + sizeof(Pdev_Request))
@


1.3
log
@Converted to new lib.a.
@
text
@d17 1
a17 1
 * $Header: tcp.h,v 1.2 88/04/27 09:16:05 brent Exp $ SPRITE (Berkeley)
d25 12
@


1.2
log
@New version with Jacobson enhancements
@
text
@d17 1
a17 1
 * $Header: tcp.h,v 6.2 88/04/24 23:12:12 andrew Exp $ SPRITE (Berkeley)
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
 * $Header: tcp.h,v 6.0 87/09/08 15:58:05 andrew Stable $ SPRITE (Berkeley)
d38 2
@
