head     1.14;
branch   ;
access   ;
symbols  srv030:1.14 srv028:1.14 srv027:1.14 srv026:1.14 srv024:1.14 srv022:1.14 srv021:1.14 srv019:1.14 srv018:1.14 srv016:1.14 srv015:1.14 srv014:1.14 srv012:1.14 srv011:1.14 srv010:1.14 srv008:1.14 srv007:1.13 srv006:1.13 srv005:1.13 srv004:1.13 srv003:1.12 srv002:1.11 srv001:1.11;
locks    ; strict;
comment  @ * @;


1.14
date     92.06.02.15.00.43;  author kupfer;  state Exp;
branches ;
next     1.13;

1.13
date     92.05.08.15.06.03;  author kupfer;  state Exp;
branches ;
next     1.12;

1.12
date     92.04.29.21.53.48;  author kupfer;  state Exp;
branches ;
next     1.11;

1.11
date     92.04.02.21.09.14;  author kupfer;  state Exp;
branches ;
next     1.10;

1.10
date     92.02.27.16.28.43;  author kupfer;  state Exp;
branches ;
next     1.9;

1.9
date     91.12.01.21.59.21;  author kupfer;  state Exp;
branches ;
next     1.8;

1.8
date     91.11.14.10.02.20;  author kupfer;  state Exp;
branches ;
next     1.7;

1.7
date     91.10.18.17.59.43;  author kupfer;  state Exp;
branches ;
next     1.6;

1.6
date     91.10.04.11.37.24;  author kupfer;  state Exp;
branches ;
next     1.5;

1.5
date     91.09.23.14.19.45;  author kupfer;  state Exp;
branches ;
next     1.4;

1.4
date     91.09.02.22.53.53;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     91.08.19.12.17.08;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.08.15.14.42.54;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.07.19.15.27.24;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Declarations for process management.
@


1.14
log
@Add Proc_ServerProcTimes and Proc_ZeroServerProcTimes.
@
text
@/*
 * proc.h --
 *
 *	External declarations for process management.
 *
 * Copyright 1986, 1988, 1991 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that this copyright
 * notice appears in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /user5/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.13 92/05/08 15:06:03 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
 */

#ifndef _PROC
#define _PROC

#include <mach.h>

#ifdef SPRITED
#include <procTypes.h>
#else
#include <sprited/procTypes.h>
#endif

/*
 *  proc_PCBTable is the array of all valid PCB's in the system.
 *  It is initialized by Proc_Init at boot time to the appropriate size,
 *  which depends on the workstation configuration.
 */

extern Proc_ControlBlock **proc_PCBTable;


/*
 *   Keep track of the maximum number of processes at any given time.
 */

extern int proc_MaxNumProcesses;

/*
 *  Macros to manipulate process IDs.
 */

#define Proc_ComparePIDs(p1, p2) ((p1) == (p2))

#define Proc_GetPCB(pid) (proc_PCBTable[(pid) & PROC_INDEX_MASK])

#define Proc_ValidatePID(pid) \
    ((((pid) & PROC_INDEX_MASK) < proc_MaxNumProcesses) && \
     (((pid) == proc_PCBTable[(pid) & PROC_INDEX_MASK]->processID)))

#define PROC_GET_VALID_PCB(pid, procPtr) \
    if (((pid) & PROC_INDEX_MASK) >= proc_MaxNumProcesses) { \
	procPtr = (Proc_ControlBlock *) NIL; \
    } else { \
	procPtr = proc_PCBTable[(pid) & PROC_INDEX_MASK]; \
	if ((pid) != (procPtr)->processID) { \
	    procPtr = (Proc_ControlBlock *) NIL; \
	} \
    }

#define	Proc_GetHostID(pid) (((pid) & PROC_ID_NUM_MASK) >> PROC_ID_NUM_SHIFT)

/* Alias for compatibility with old code */
#define	Proc_GetActualProc() Proc_GetCurrentProc()

/*
 * Various routines use Proc_UseRpcBuffer to decide whether to copy 
 * to/from user address space or kernel address space.  A common 
 * example of using a kernel (RPC) buffer is when a migrated process 
 * invokes a system call that is forwarded home.
 */

#ifndef SPRITED_MIGRATION
#define	Proc_UseRpcBuffer() (FALSE)
#else
#define Proc_UseRpcBuffer() \
    (Proc_GetCurrentProc()->rpcClientProcess != \
		((Proc_ControlBlock *) NIL))
#endif

/*
 * Used to get the lock at the top of the lock stack without popping it off.
 */
#define Proc_GetCurrentLock(pcbPtr, typePtr, lockPtrPtr) \
    { \
	if ((pcbPtr)->lockStackSize <= 0) { \
	    *(typePtr) = -1; \
	    *(lockPtrPtr) = (Address) NIL; \
	} else { \
	    *(typePtr) = (pcbPtr)->lockStack[(pcbPtr)->lockStackSize-1].type; \
	    *(lockPtrPtr) = \
		(pcbPtr)->lockStack[(pcbPtr)->lockStackSize-1].lockPtr; \
	} \
    }

/* 
 * Set the process's state, with an optional debugging check.
 */
#ifdef CLEAN
#define Proc_SetState(procPtr, newState)	(procPtr)->state = (newState)
#else
extern void		Proc_SetState _ARGS_((Proc_ControlBlock *procPtr,
					     Proc_State newState));
#endif


/*
 *----------------------------------------------------------------------
 *
 * Proc_AssertLocked --
 *
 *	Assert that the given handle points to a locked PCB.  It is 
 *	expected that the programmer will verify by inspection that the 
 *	given pcb is in fact locked.  If we get really paranoid we could 
 *	add a test to verify that the entry is in fact locked.
 *
 * Results:
 *	Returns the given handle, cast appropriately.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
    
#define Proc_AssertLocked(procPtr)	((Proc_LockedPCB *)(procPtr))


/* 
 * External procedures.
 */

extern ReturnStatus 	Proc_ByteCopy _ARGS_((Boolean copyIn, int numBytes,
				Address sourcePtr, Address destPtr));
extern void		Proc_CallFunc _ARGS_((void (*func)(
						   ClientData clientData, 
						   Proc_CallInfo *callInfoPtr),
				ClientData clientData, Time interval));
extern ClientData 	Proc_CallFuncAbsTime _ARGS_((void (*func)(
						   ClientData clientData, 
						   Proc_CallInfo *callInfoPtr),
				ClientData clientData, Timer_Ticks time));
extern void 		Proc_CancelCallFunc _ARGS_((ClientData token));
extern void		Proc_ContextSwitch _ARGS_((Proc_State newState));
extern	ReturnStatus	Proc_DoForEveryProc _ARGS_((Boolean (*booleanFuncPtr)
						(Proc_ControlBlock *pcbPtr),
				ReturnStatus (*actionFuncPtr)(Proc_PID pid), 
				Boolean ignoreStatus, int *numMatchedPtr));
extern	ReturnStatus	Proc_EvictForeignProcs _ARGS_((void));
extern Proc_ControlBlock *Proc_ExceptionToPCB _ARGS_((mach_port_t port));
extern	int		Proc_Exec _ARGS_((char *fileName, 
				char **argsPtrArray, char **envPtrArray,
				Boolean debugMe, int host));
extern int 		Proc_ExecEnv _ARGS_((char *fileName, 
				char **argPtrArray, char **envPtrArray, 
				Boolean debugMe));
extern void 		Proc_Exit _ARGS_((int status));
extern void 		Proc_ExitInt _ARGS_((int reason, int status, int code));
extern	int		Proc_Fork _ARGS_((Boolean shareHeap, Proc_PID *pidPtr));
extern Proc_ControlBlock *Proc_GetCurrentProc _ARGS_((void));
#ifdef SPRITED_MIGRATION
extern	Proc_ControlBlock *Proc_GetEffectiveProc _ARGS_((void));
#else
#define Proc_GetEffectiveProc()	Proc_GetCurrentProc()
#endif
extern	ReturnStatus	Proc_GetFamilyID _ARGS_((Proc_PID pid,
				Proc_PID *familyIDPtr));
extern	ReturnStatus	Proc_GetGroupIDs _ARGS_((int numGIDs, int *gidArrayPtr,
				int *trueNumGIDsPtr));
extern	ReturnStatus	Proc_GetHostIDs _ARGS_((int *virtualHostPtr, 
				int *physicalHostPtr));
extern	ReturnStatus	Proc_GetIDs _ARGS_((Proc_PID *procIDPtr,
				Proc_PID *parentIDPtr, int *userIDPtr,
				int *effUserIDPtr));
extern	ReturnStatus	Proc_GetIntervalTimer _ARGS_((int timerType,
				Proc_TimerInterval *userTimerPtr));
extern	Boolean		Proc_HasPermission _ARGS_((int userID));
extern void 		Proc_InformParent _ARGS_((register 
				Proc_LockedPCB *procPtr, int childStatus));
extern void		Proc_Init _ARGS_((void));
extern	void		Proc_InitMainEnviron _ARGS_((
				Proc_ControlBlock *procPtr));
extern void 		Proc_InitMainProc _ARGS_((void));
extern ReturnStatus	Proc_KernExec _ARGS_((Proc_ControlBlock *procPtr,
				char *execPath, char **argPtrArray));
extern void		Proc_Kill _ARGS_((Proc_LockedPCB *procPtr,
				int reason, int status));
extern	int		Proc_KillAllProcesses _ARGS_((Boolean userProcsOnly));
extern void		Proc_Lock _ARGS_((Proc_ControlBlock *procPtr));
extern ReturnStatus 	Proc_LockFamily _ARGS_((int familyID, 
				List_Links **familyListPtr, int *userIDPtr));
extern Proc_LockedPCB	*Proc_LockPID _ARGS_((Proc_PID pid));
extern void		Proc_MakeReady _ARGS_((Proc_LockedPCB *procPtr));
extern ReturnStatus 	Proc_MakeStringAccessible _ARGS_((int maxLength,
				char **stringPtrPtr, int *accessLengthPtr,
				int *newLengthPtr));
extern void 		Proc_MakeUnaccessible _ARGS_((Address addr, 
				int numBytes));
extern	ReturnStatus	Proc_MigGetStats _ARGS_((Address addr));
#ifdef SPRITED_MIGRATION
extern ReturnStatus	Proc_MigUpdateInfo _ARGS_((Proc_ControlBlock *procPtr));
#else
#define			Proc_MigUpdateInfo(p)	(FAILURE)
#endif
extern ReturnStatus	Proc_NewProc _ARGS_((Address startPC,
				Address stateAddr, int procType,
				Boolean shareHeap, Proc_PID *pidPtr,
				char *procName));
extern	void		Proc_PushLockStack _ARGS_((Proc_ControlBlock *pcbPtr,
				int type, Address lockPtr));
extern void 		Proc_Reaper _ARGS_((void));
extern	void		Proc_RemoveFromLockStack _ARGS_((
				Proc_ControlBlock *pcbPtr, Address lockPtr));
extern void		Proc_ResumeProcess _ARGS_((Proc_LockedPCB *procPtr,
				Boolean killingProc));
#ifdef SPRITED_MIGRATION
extern	ReturnStatus	Proc_RpcGetPCB _ARGS_((ClientData srvToken,
				int clientID, int command,
				Rpc_Storage *storagePtr));
extern	ReturnStatus	Proc_RpcMigCommand _ARGS_((ClientData srvToken,
				int hostID, int command, 
				Rpc_Storage *storagePtr));
extern	ReturnStatus	Proc_RpcRemoteCall _ARGS_((ClientData srvToken,
				int clientID, int command, 
				Rpc_Storage *storagePtr));
extern ReturnStatus 	Proc_RpcRemoteWait _ARGS_((ClientData srvToken,
				int clientID, int command, 
				Rpc_Storage *storagePtr));
#else /* SPRITED_MIGRATION */
#define			Proc_RpcGetPCB		Rpc_NotImplemented
#define			Proc_RpcMigCommand	Rpc_NotImplemented
#define			Proc_RpcRemoteCall	Rpc_NotImplemented
#define			Proc_RpcRemoteWait	Rpc_NotImplemented
#endif /* SPRITED_MIGRATION */
extern void 		Proc_ServerInit _ARGS_((void));
extern void 		Proc_ServerProc _ARGS_((void));
extern void		Proc_ServerProcTimes _ARGS_((void));
extern void		Proc_SetCurrentProc 
				_ARGS_((Proc_ControlBlock *procPtr));
extern	ReturnStatus	Proc_SetFamilyID _ARGS_((Proc_PID pid, 
				Proc_PID familyID));
extern	ReturnStatus	Proc_SetGroupIDs _ARGS_((int numGIDs, 
				int *gidArrayPtr));
extern	ReturnStatus	Proc_SetIDs _ARGS_((int userID, int effUserID));
extern	ReturnStatus	Proc_SetIntervalTimer _ARGS_((int timerType,
				Proc_TimerInterval *newTimerPtr,
				Proc_TimerInterval *oldTimerPtr));
extern	void		Proc_SetupEnviron _ARGS_((Proc_ControlBlock *procPtr));
extern ReturnStatus 	Proc_Start _ARGS_((Proc_ControlBlock *procPtr));
extern char 		*Proc_StateName _ARGS_((Proc_State state));
extern	ReturnStatus	Proc_StringNCopy _ARGS_((int numBytes, char *srcStr,
				char *destStr, int *strLengthPtr));
extern	void		Proc_SuspendProcess _ARGS_((
				Proc_LockedPCB *procPtr, Boolean debug,
				int termReason, int termStatus, 
				int termCode));
extern Proc_ControlBlock *Proc_SyscallToPCB _ARGS_((mach_port_t port));
extern void 		Proc_Unlock _ARGS_((Proc_LockedPCB *procPtr));
extern void		Proc_UnlockAndSwitch _ARGS_((Proc_LockedPCB *procPtr,
				Proc_State state));
extern void 		Proc_UnlockFamily _ARGS_((int familyID));
extern	ReturnStatus	Proc_Wait _ARGS_((int numPids, Proc_PID pidArray[],
				int flags, Proc_PID *procIDPtr, 
				int *reasonPtr, int *statusPtr, 
				int *subStatusPtr, Proc_ResUsage *usagePtr));
extern	ReturnStatus	Proc_WaitForHost _ARGS_((int hostID));
extern	void		Proc_WakeupAllProcesses _ARGS_((void));
extern	void		Proc_ZeroServerProcTimes _ARGS_((void));
extern	unsigned int	proc_NumServers;

#endif /* _PROC */
@


1.13
log
@Don't keep PCB locked so long during Proc_NewProc, and don't lock the
parent at all.
@
text
@d15 1
a15 1
 * $Header: /user5/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.12 92/04/29 21:53:48 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d242 1
d273 1
@


1.12
log
@Add Proc_MigGetStats.
@
text
@d15 1
a15 1
 * $Header: /user5/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.11 92/04/02 21:09:14 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d189 1
a189 1
extern ReturnStatus	Proc_KernExec _ARGS_((Proc_LockedPCB *procPtr,
@


1.11
log
@Fix so can be included by user programs.
@
text
@d15 1
a15 1
 * $Header: /user5/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.10 92/02/27 16:28:43 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d204 1
@


1.10
log
@Snapshot.  Can kill, suspend, and resume processes.
@
text
@d15 1
a15 1
 * $Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.9 91/12/01 21:59:21 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d22 2
d25 3
@


1.9
log
@Snapshot.  FS appears to work.
@
text
@d15 1
a15 1
 * $Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.8 91/11/14 10:02:20 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d179 1
a179 1
				Proc_ControlBlock *procPtr, int childStatus));
d186 2
a187 1
extern void		Proc_Kill _ARGS_((Proc_LockedPCB *procPtr));
d213 2
d252 1
a252 1
				Proc_ControlBlock *procPtr, Boolean debug,
d257 2
@


1.8
log
@Snapshot. net, rpc, recov modules added.
@
text
@d15 1
a15 1
 * $Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.7 91/10/18 17:59:43 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d65 15
@


1.7
log
@Remove the (unused) declaration for proc_RefuseMigrations.
@
text
@d15 1
a15 1
 * $Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.6 91/10/04 11:37:24 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d123 1
a123 1
				ClientData clientData, unsigned int interval));
d186 1
a186 1
#define Proc_MigUpdateInfo(p)	(FAILURE)
d197 19
d246 1
a246 1
extern	int		proc_NumServers;
@


1.6
log
@Snapshot.  fork/exec work.
@
text
@d15 1
a15 1
 * $Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.5 91/09/23 14:19:45 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
a37 5

/*
 * set to TRUE to disallow all migrations to this machine.
 */
extern Boolean proc_RefuseMigrations;
@


1.5
log
@Snapshot.  Server is multithreaded internally.
@
text
@d15 1
a15 1
 * $Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.4 91/09/02 22:53:53 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d193 4
a196 3
extern ReturnStatus	Proc_NewProc _ARGS_((Proc_ProcessRoot startProc,
				int procType, Boolean shareHeap, 
				Proc_PID *pidPtr, char *procName));
@


1.4
log
@Changes for module-based source organization.
@
text
@d6 1
a6 1
 * Copyright 1991 Regents of the University of California
d15 1
a15 1
 * $Header: /user6/kupfer/spriteserver/src/sprited/proc/RCS/proc.h,v 1.3 91/08/19 12:17:08 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d24 43
a66 1
extern Proc_ControlBlock proc_InitialProc; /* initial user process info */
d68 54
a121 1
#define Proc_GetCurrentProc()	(&proc_InitialProc) /* XXX */
d123 17
d141 81
a221 8
extern void Proc_Init _ARGS_((void));
extern ReturnStatus Proc_Kill _ARGS_((Proc_ControlBlock *procPtr));
extern ReturnStatus Proc_Load _ARGS_((Proc_ControlBlock *procPtr,
		char *execPath, char **progArgs));
extern void Proc_Lock _ARGS_((Proc_ControlBlock *procPtr));
extern ReturnStatus Proc_NewProc _ARGS_((Address pc, int procType,
		Boolean shareHeap, Proc_ControlBlock **procPtrPtr,
		char *procName));
d223 9
a231 3
extern ReturnStatus Proc_Start _ARGS_((Proc_ControlBlock *procPtr));
extern char *Proc_StateName _ARGS_((Proc_State state));
extern void Proc_Unlock _ARGS_((Proc_ControlBlock *procPtr));
@


1.3
log
@Snapshot: Code reorg. and locking for processes & segments.
@
text
@d15 1
a15 1
 * $Header: /user6/kupfer/spriteserver/src/printfd/RCS/proc.h,v 1.2 91/08/15 14:42:54 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d22 1
a22 1
#include "procTypes.h"
@


1.2
log
@Snapshot.  Read-write mapped files work.
@
text
@d15 1
a15 1
 * $Header: /user6/kupfer/spriteserver/src/printfd/RCS/proc.h,v 1.1 91/07/19 15:27:24 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d22 1
a22 1
#include "vmTypes.h"
d24 1
a24 42
/* 
 * Process attributes flags:
 *
 *  PROC_KERNEL   	        - The process is a kernel process.
 *  PROC_USER     	        - The process is a user process.
 */

#define PROC_KERNEL			0x00001
#define PROC_USER			0x00002

/* 
 * Process control block.  Shared-memory processes are handled by 
 * having multiple threads in a single task, so the per-task 
 * information is in a separate struct.
 * 
 * Mach lets us rename ports to arbitrary values, which means we can 
 * equate a port name with the address of a corresponding data 
 * structure.  For processes we have two different ports that we want 
 * to associate with the PCB: one is the system call request port, and 
 * the other is the thread control port.  The system call request port 
 * we rename to the PCB for the process.  The thread control port we 
 * rename to the back pointer.
 */

typedef struct {
    int		refCount;
    mach_port_t	task;		/* Mach task; null if server process */
    Vm_TaskInfo	vmInfo;		/* VM information for the task */
} ProcTaskInfo;

typedef struct Proc_ControlBlock {
    int magic;			/* magic number to verify is pcb */
    struct Proc_ControlBlock *backPtr; /* "name" for thread port */
    mach_port_t	thread;		/* Mach thread; null if server process */
    ProcTaskInfo *taskInfoPtr;	/* information for the (possibly 
				 * shared) task */
} Proc_ControlBlock;

#define PROC_PCB_MAGIC_NUMBER	0x143a0891


extern Proc_ControlBlock initialProc;	/* initial user process info */
d26 1
d28 2
d32 1
a32 1
				      char *execPath, char **progArgs));
d34 4
a37 3
extern ReturnStatus 
  Proc_NewProc _ARGS_((Address pc, int procType, Boolean shareHeap,
		       Proc_ControlBlock *procPtr, char *procName));
d39 1
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
 * $Header: /sprite/lib/forms/RCS/proto.h,v 1.7 91/02/09 13:24:52 ouster Exp $ SPRITE (Berkeley)
d22 1
d35 11
a45 1
 * Quick and dirty process control block.
d48 6
d55 5
a59 2
    mach_port_t	task;		/* Mach task */
    mach_port_t	thread;		/* Mach thread */
d62 6
a68 4
extern ReturnStatus 
Proc_NewProc _ARGS_((Address pc, int procType,
		     Boolean shareHeap, Proc_ControlBlock *procPtr,
		     char *procName));
d71 4
d76 1
@
