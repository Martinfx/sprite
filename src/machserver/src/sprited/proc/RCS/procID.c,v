head     1.9;
branch   ;
access   ;
symbols  srv030:1.9 srv028:1.8 srv027:1.8 srv026:1.8 srv024:1.8 srv022:1.8 srv021:1.8 srv019:1.8 srv018:1.8 srv016:1.8 srv015:1.8 srv014:1.8 srv012:1.8 srv011:1.8 srv010:1.8 srv008:1.8 srv007:1.8 srv006:1.8 srv005:1.8 srv004:1.8 srv003:1.8 srv002:1.8 srv001:1.8;
locks    ; strict;
comment  @ * @;


1.9
date     92.07.16.18.06.54;  author kupfer;  state Exp;
branches ;
next     1.8;

1.8
date     92.02.27.16.28.59;  author kupfer;  state Exp;
branches ;
next     1.7;

1.7
date     91.12.18.23.20.57;  author kupfer;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.01.21.59.33;  author kupfer;  state Exp;
branches ;
next     1.5;

1.5
date     91.11.14.10.02.34;  author kupfer;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.18.18.00.30;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.04.11.37.41;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.09.23.14.19.55;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.09.22.22.20.08;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.9
log
@Split spriteSrv.h into user and server versions.
@
text
@/*
 *  procID.c --
 *
 *	Routines to get and set the various identifiers of a process.
 *	The routines implement the system calls of the same name. 
 *	Synchronization to process table entries is done by locking the
 *	process's PCB.
 *
 * Copyright (C) 1986, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.8 92/02/27 16:28:59 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif /* not lint */

#include <bstring.h>
#include <ckalloc.h>
#include <mach.h>
#include <sprite.h>
#include <status.h>

#include <fs.h>
#include <proc.h>
#include <sig.h>
#include <spriteSrvServer.h>
#include <sync.h>
#include <vm.h>

/*
 * Define a macro to get the minimum of two values.  Note: it is *not*
 * side-effect free.  If "a" or "b" is a function call, the function will
 * be called twice.  Of course, there shouldn't be side-effects in
 * conditional expressions.
 */

#define Min(a,b) ((a) < (b) ? (a) : (b))


/*
 *----------------------------------------------------------------------
 *
 * Proc_GetIDsStub --
 *
 *	Returns the process ID, user ID and effective user ID of the current
 *	process.
 *
 * Results:
 *	Returns KERN_SUCCESS.  Fills in the "pending signals" flag.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

kern_return_t
Proc_GetIDsStub(serverPort, procIDPtr, parentIDPtr, userIDPtr,
		effUserIDPtr, sigPendingPtr)
    mach_port_t serverPort;	/* request port */
    Proc_PID 	*procIDPtr;	/* Where to return pid. */
    Proc_PID 	*parentIDPtr;	/* Where to return parent's pid */
    int 	*userIDPtr;	/* Where to return real user id. */
    int 	*effUserIDPtr;	/* Where to return effective user id. */
    boolean_t	*sigPendingPtr;	/* OUT: is there a signal pending */
{
    register Proc_ControlBlock 	*procPtr;
    Proc_PID myPID;

#ifdef lint
    serverPort = serverPort;
#endif
    procPtr = Proc_GetEffectiveProc();

    /*
     *  Copy the information to the out parameters.  Unlike native Sprite, 
     *  none of the pointers is allowed to be nil.
     */
    
    /*
     * Return the process ID this process thinks it is, not necessarily
     * the one in the PCB.
     */
    if (procPtr->genFlags & PROC_FOREIGN) {
	myPID = procPtr->peerProcessID;
    } else {
	myPID = procPtr->processID;
    }
    *procIDPtr = myPID;

    *parentIDPtr = procPtr->parentID;
    *userIDPtr = procPtr->userID;
    *effUserIDPtr = procPtr->effectiveUserID;

    *sigPendingPtr = Sig_Pending(Proc_GetCurrentProc());
    return KERN_SUCCESS;
}


/*
 *----------------------------------------------------------------------
 *
 * Proc_SetIDs --
 *
 *	Changes the user ID or current user ID for the current process.
 *  	If an argument is USER_NIL, the corresponding value in
 *	the PCB structure is not changed.
 *
 * Results:
 *	SYS_ARG_NOACCESS - 	the arguments were not accessible.
 *	PROC_INVALID_PID -	the pid argument was illegal.
 *
 * Side effects:
 *	The user ID and/or effective user ID for a process may change.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Proc_SetIDs(userID, effUserID)
    int 	userID;
    int 	effUserID;
{
    register	Proc_ControlBlock 	*procPtr;

    procPtr = Proc_GetEffectiveProc();

    if (userID == PROC_NO_ID) {
	userID = procPtr->userID;;
    }
    if (effUserID == PROC_NO_ID) {
	effUserID = procPtr->effectiveUserID;
    }
    if (userID != procPtr->userID && userID != procPtr->effectiveUserID &&
	procPtr->effectiveUserID != PROC_SUPER_USER_ID) {
       return(PROC_UID_MISMATCH);
    }
    if (effUserID != procPtr->userID && effUserID != procPtr->effectiveUserID &&
	procPtr->effectiveUserID != PROC_SUPER_USER_ID) {
       return(PROC_UID_MISMATCH);
    }
    procPtr->userID = userID;
    procPtr->effectiveUserID = effUserID;

#ifdef SPRITED_MIGRATION
    if (procPtr->state == PROC_MIGRATED) {
	return(Proc_MigUpdateInfo(procPtr));
    }
#endif
    return(SUCCESS);
}


/*
 *----------------------------------------------------------------------
 *
 * Proc_GetGroupIDs --
 *
 *	Returns all the group IDs of a process if the gidArrayPtr
 *	argument is not USER_NIL. Also returns the actual number of
 *	groups IDs in the process's PCB structure if trueNumGidsPtr
 *	is not USER_NIL.
 *
 *	TODO: Move me to fs.
 *
 * Results:
 *	SYS_ARG_NOACCESS - 	the arguments were not accessible.
 *	SYS_INVALID_ARG - 	the argument was was invalid.
 *	PROC_INVALID_PID -	the pid argument was illegal.
 *	The group IDs are returned.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Proc_GetGroupIDs(numGIDs, gidArrayPtr, trueNumGIDsPtr)
    int		numGIDs;		/* Number of group ids in gidArrayPtr.*/
    int		*gidArrayPtr;		/* Array of group ids (user addr) */
    int		*trueNumGIDsPtr;	/* Number of group ids the process 
					 * has */
{
    register	Fs_ProcessState 	*fsPtr;
    int 				trueNumGIDs;

    fsPtr = (Proc_GetEffectiveProc())->fsPtr;

    if (numGIDs < 0) {
	return(SYS_INVALID_ARG);
    }
    trueNumGIDs = Min(numGIDs, fsPtr->numGroupIDs);
    if (trueNumGIDs > 0 && gidArrayPtr != USER_NIL) {
	if (Proc_ByteCopy(FALSE, trueNumGIDs * sizeof(int),
			  (Address) fsPtr->groupIDs,
			  (Address) gidArrayPtr) != SUCCESS) {
	    return(SYS_ARG_NOACCESS);
	}
    }

    *trueNumGIDsPtr = fsPtr->numGroupIDs;
    return(SUCCESS);
}


/*
 *----------------------------------------------------------------------
 *
 * Proc_SetGroupIDs --
 *
 *	Changes all the group IDs for a process.
 *
 * Results:
 *	SYS_ARG_NOACCESS - 	the argument was not accessible.
 *	SYS_INVALID_ARG - 	the argument was was invalid.
 *	PROC_INVALID_PID -	the pid argument was illegal.
 *
 * Side effects:
 *	The process's group IDs are changed.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Proc_SetGroupIDs(numGIDs, gidArrayPtr)
    int		numGIDs;	/* Number of group ids in gidArrayPtr. */
    int		*gidArrayPtr;	/* Array of group ids (user address) */
{
    register	Proc_ControlBlock	*procPtr;
    register	Fs_ProcessState		*fsPtr;
    int 				*newGidArrayPtr;
    int 				size;
    int					i;

    /*
     * See if there's anything to do before we validate the
     * other arguments.
     */

    if ((numGIDs <= 0)  ||  (numGIDs > 128) || (gidArrayPtr == USER_NIL)) {
	return(SYS_INVALID_ARG);
    }

    /*
     * Need to protect against abritrary group setting.
     */
    procPtr = Proc_GetEffectiveProc();
    if (procPtr->effectiveUserID != 0) {
	return(GEN_NO_PERMISSION);
    }

    Vm_MakeAccessible(VM_READONLY_ACCESS,
		    numGIDs * sizeof(int), (Address) gidArrayPtr,
		    &size, (Address *) &newGidArrayPtr);
    if (size != (numGIDs * sizeof(int))) {
	return(SYS_ARG_NOACCESS);
    }

    /*
     *  If the current group ID table is too small, allocate space
     *	for a larger one.
     */

    fsPtr = procPtr->fsPtr;
    if (fsPtr->numGroupIDs < numGIDs) {
	ckfree((Address) fsPtr->groupIDs);
	fsPtr->groupIDs = (int *) ckalloc(numGIDs * sizeof(int));
    }

    for (i=0; i < numGIDs; i++) {
	fsPtr->groupIDs[i] = newGidArrayPtr[i];
    }
    fsPtr->numGroupIDs = numGIDs;

    Vm_MakeUnaccessible((Address) newGidArrayPtr, size);

    return(SUCCESS);
}


/*
 *----------------------------------------------------------------------
 *
 * ProcAddToGroupList --
 *
 *	Add the given group ID to the given processes list of groups.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	A new group is added to the process's group if not already there.
 *
 *----------------------------------------------------------------------
 */
void
ProcAddToGroupList(procPtr, gid)
    Proc_LockedPCB	*procPtr;
    int			gid;
{
    register	Fs_ProcessState *fsPtr = procPtr->pcb.fsPtr;
    int 	*newGidArrayPtr;
    int		i;

    /*
     * See if this gid is already in the list.
     */
    for (i = 0; i < fsPtr->numGroupIDs; i++) {
	if (gid == fsPtr->groupIDs[i]) {
	    return;
	}
    }

    /*
     * Have to add the new group ID to the list.
     */
    newGidArrayPtr = (int *)ckalloc((fsPtr->numGroupIDs + 1) * sizeof(int));
    bcopy((Address)fsPtr->groupIDs, (Address)newGidArrayPtr,
	    sizeof (int) * fsPtr->numGroupIDs);
    ckfree((Address)fsPtr->groupIDs);
    fsPtr->groupIDs = newGidArrayPtr;
    fsPtr->groupIDs[fsPtr->numGroupIDs] = gid;
    fsPtr->numGroupIDs++;
}
@


1.8
log
@Snapshot.  Can kill, suspend, and resume processes.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.7 91/12/18 23:20:57 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d32 1
a32 1
#include <spriteSrv.h>
@


1.7
log
@Re-enable Proc_GetGroupIDs & Proc_SegGroupIDs, with changes for use in
sprited. 
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.6 91/12/01 21:59:33 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d31 1
d55 1
a55 1
 *	Should return success.
d64 2
a65 1
Proc_GetIDsStub(serverPort, procIDPtr, parentIDPtr, userIDPtr, effUserIDPtr)
d71 1
d101 1
@


1.6
log
@Snapshot.  FS appears to work.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.5 91/11/14 10:02:34 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
a155 1
#if 0
d183 3
a185 3
    int		*gidArrayPtr;		/* Array of group ids. */
    int		*trueNumGIDsPtr;	/* Number of group ids actually 
					 * returned. */
d204 1
a204 6
    if (trueNumGIDsPtr != USER_NIL) {
	if (Proc_ByteCopy(FALSE, sizeof(int), (Address) &fsPtr->numGroupIDs,
		      (Address) trueNumGIDsPtr) != SUCCESS) {
	    return(SYS_ARG_NOACCESS);
	}
    }
a206 1
#endif /* 0 */
a208 1
#if 0
d230 1
a230 1
    int		*gidArrayPtr;	/* Array of group ids. */
a281 1
#endif /* 0 */
@


1.5
log
@Snapshot. net, rpc, recov modules added.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.4 91/10/18 18:00:30 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d29 1
d313 1
a313 5
#ifndef SPRITED_REALFS
    procPtr = procPtr;		/* lint */
    gid = gid;			/* lint */
#else
    register	Fs_ProcessState *fsPtr = procPtr->fsPtr;
a335 1
#endif /* SPRITED_REALFS */
@


1.4
log
@Use ckalloc/ckfree rather than malloc/free.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.3 91/10/04 11:37:41 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d72 3
d312 4
a315 1
#ifdef SPRITED_REALFS
@


1.3
log
@Snapshot.  fork/exec work.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.2 91/09/23 14:19:55 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d24 1
d273 2
a274 2
	free((Address) fsPtr->groupIDs);
	fsPtr->groupIDs = (int *) malloc(numGIDs * sizeof(int));
d326 1
a326 1
    newGidArrayPtr = (int *)malloc((fsPtr->numGroupIDs + 1) * sizeof(int));
d329 1
a329 1
    free((Address)fsPtr->groupIDs);
@


1.2
log
@Snapshot.  Server is multithreaded internally.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/sprited/proc/RCS/procID.c,v 1.1 91/09/22 22:20:08 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d23 2
d26 2
d29 1
a29 1
#include <status.h>
a31 1
#include <bstring.h>
a42 1
#if 0
d46 1
a46 1
 * Proc_GetIDs --
d52 1
a52 2
 *	SYS_ARG_NOACCESS - 	the arguments were not accessible.
 *	PROC_INVALID_PID -	the pid argument was illegal.
d60 3
a62 2
ReturnStatus
Proc_GetIDs(procIDPtr, parentIDPtr, userIDPtr, effUserIDPtr)
d74 7
a80 1
     *  Copy the information to the out parameters.
d82 4
a85 22

    if (procIDPtr != USER_NIL) {
	/*
	 * Return the process ID this process thinks it is, not necessarily
	 * the one in the PCB.
	 */
	if (procPtr->genFlags & PROC_FOREIGN) {
	    myPID = procPtr->peerProcessID;
	} else {
	    myPID = procPtr->processID;
	}
	if (Proc_ByteCopy(FALSE, sizeof(Proc_PID), 
	    (Address) &myPID, (Address) procIDPtr) != SUCCESS) {
	    return(SYS_ARG_NOACCESS);
	}
    }

    if (parentIDPtr != USER_NIL) {
	if (Proc_ByteCopy(FALSE, sizeof(Proc_PID), 
	    (Address) &(procPtr->parentID), (Address) parentIDPtr) != SUCCESS){
	    return(SYS_ARG_NOACCESS);
	}
d87 1
d89 3
a91 6
    if (userIDPtr != USER_NIL) {
	if (Proc_ByteCopy(FALSE, sizeof(int), 
	    (Address) &(procPtr->userID), (Address) userIDPtr) != SUCCESS){
	    return(SYS_ARG_NOACCESS);
	}
    }
d93 1
a93 8
    if (effUserIDPtr != USER_NIL) {
	if (Proc_ByteCopy(FALSE, sizeof(int), 
	    (Address) &(procPtr->effectiveUserID), 
	    (Address) effUserIDPtr) != SUCCESS){
	    return(SYS_ARG_NOACCESS);
	}
    }
    return(SUCCESS);
a94 1
#endif /* 0 */
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /sprite/src/kernel/proc/RCS/procID.c,v 9.3 90/09/12 13:57:58 jhh Exp $ SPRITE (Berkeley)";
a24 1
#include <stdlib.h>
a26 1
#include <sched.h>
d40 1
d114 1
d162 1
d166 1
d171 1
d228 1
d231 1
d305 1
d325 1
a325 1
    Proc_ControlBlock	*procPtr;
d328 1
d352 1
@
