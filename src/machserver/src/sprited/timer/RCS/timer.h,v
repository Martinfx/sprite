head     1.7;
branch   ;
access   ;
symbols  srv030:1.7 srv028:1.7 srv027:1.7 srv026:1.7 srv024:1.7 srv022:1.7 srv021:1.7 srv019:1.7 srv018:1.7 srv016:1.7 srv015:1.7 srv014:1.7 srv012:1.7 srv011:1.7 srv010:1.7 srv008:1.7 srv007:1.7 srv006:1.7 srv005:1.7 srv004:1.7 srv003:1.7 srv002:1.7 srv001:1.7;
locks    ; strict;
comment  @ * @;


1.7
date     92.04.16.11.46.41;  author kupfer;  state Exp;
branches ;
next     1.6;

1.6
date     92.03.12.17.38.06;  author kupfer;  state Exp;
branches ;
next     1.5;

1.5
date     92.01.21.16.18.46;  author kupfer;  state Exp;
branches ;
next     1.4;

1.4
date     91.11.14.10.03.09;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.07.14.07.07;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.04.11.37.51;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.02.21.55.07;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.7
log
@Move Timer_Statistics to timerStat.h.  Add more instrumentation for
late callbacks.  Get the clock resolution from Mach.
@
text
@/*
 * timer.h --
 *
 *     External definitions for the clock timer routines.
 *
 * Copyright 1985, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * rcsid: $Header: /user5/kupfer/spriteserver/src/sprited/timer/RCS/timer.h,v 1.6 92/03/12 17:38:06 kupfer Exp Locker: kupfer $ SPRITE (Berkeley) 
 */

#ifndef _TIMER
#define _TIMER

#include <sprite.h>
#include <list.h>

#ifdef SPRITED
#include <spriteTime.h>
#include <timerTick.h>
#include <syncTypes.h>
#else
#include <spriteTime.h>
#include <sprited/timerTick.h>
#include <sprited/syncTypes.h>
#endif

/* 
 * Enable instrumentation of late callbacks from the timer thread.  This is 
 * a public flag because some of the counters are updated outside the timer 
 * module. 
 */
#define TIMER_BACKLOG_STATS	1

/*
 *  TimerQueueElement defines the structure to store info about a
 *  routine so it can be called at its scheduled time.
 *
 *  Only three fields need to be filled in by the client before passing 
 *  the element's address to Timer_ScheduleRoutine:
 *	a) The address of the routine,
 *	b) The time when the routine should be called. 
 *	   If the time value is an "absolute" time and not a time 
 *	   relative to the current time, use the time field.
 *	   If the time value is relative to the current time, use 
 *	   the interval field.
 *	c) Client-specific data to be passed to the routine when it is 
 *	   called.
 *
 *  Since the client controls the storage of the timer queue element, it
 *  could modify fields of the structure while it is on the timer queue.
 *  Once the element is scheduled, it must be treated as read-only!!
 *  Only when the scheduled routine is called or descheduled can the element 
 *  be modified by the client.
 *
 *  Note:  Do not access any part of the structure that is 
 *  	   labeled "private". These fields can be accessed only by 
 *	   the Timer module routines.
 *
 *	   Public fields marked "readonly" must not be modified by 
 *	   the client.
 *
 */


typedef struct {
    List_Links	links;		/* private: */

    void	(*routine) _ARGS_((Timer_Ticks timeTicks, 
				  ClientData  clientData));	
			        /* public:  address of the routine */
    Timer_Ticks	time;		/* public:  time when the routine should be
				 * 	    called. interval field is ignored*/ 
    ClientData	clientData;	/* public:  data passed to the routine when
				 *	    called. */

    Boolean	processed;	/* public, readonly:  TRUE if routine has
				 * 	    been called (at its scheduled time),
				 *	    FALSE if not called yet. */
    Time	interval;	/* public:  interval relative from now when 
				 * 	    the routine should be called.
				 *	    The time field becomes private. */
} Timer_QueueElement;

extern Time timer_Resolution;

#define TIMER_CALLBACK_INTERVAL_APPROX	(timer_Resolution.microseconds)

/* 
 * Aliases for backward compatibility.
 */

#define Timer_GetCurrentTicks(timePtr) \
    Timer_GetTimeOfDay((timePtr), (int *)NULL, (Boolean *)NULL)
#define Timer_GetRealTimeOfDay(timePtr, offsetPtr, dstPtr) \
    Timer_GetTimeOfDay((timePtr), (offsetPtr), (dstPtr))

extern void Timer_Init _ARGS_((void));
extern Boolean Timer_IsScheduled _ARGS_((Timer_QueueElement *elementPtr));
extern void Timer_ScheduleRoutine _ARGS_((register 
			Timer_QueueElement *newElementPtr, Boolean interval));
extern Boolean Timer_DescheduleRoutine _ARGS_((register 
			Timer_QueueElement *elementPtr));
extern void Timer_GetRealTimeFromTicks _ARGS_((Timer_Ticks ticks, 
			Time *timePtr, int *timerLocalOffsetPtr, 
			Boolean *DSTPtr));
extern void Timer_GetTimeOfDay _ARGS_((Time *timePtr, int *timerLocalOffsetPtr,
			Boolean *DSTPtr));

#endif /* _TIMER */
@


1.6
log
@Add TIMER_CALLBACK_INTERVAL_APPROX.
@
text
@d15 1
a15 1
 * rcsid: $Header: /user5/kupfer/spriteserver/src/sprited/timer/RCS/timer.h,v 1.5 92/01/21 16:18:46 kupfer Exp Locker: kupfer $ SPRITE (Berkeley) 
d35 3
a37 4
 * The timer callback interval, in microseconds.  Mach supports a 1ms 
 * resolution for wakeups, which we try to take advantage of, but let's 
 * advertise a lower resolution to the rest of Sprite.  Native Sprite 
 * provides 8ms resolution on DECstations and 20ms on Suns.
d39 1
a40 2
#define TIMER_CALLBACK_INTERVAL_APPROX	20000

d91 1
a91 3
/*
 *  The statistics counts used by the dump routines.
 */
d93 1
a93 8
typedef struct {
    int		callback;	/* count of callback timer interrupts */
    int		profile;	/* count of profile timer interrupts */
    int		spurious;	/* count of spurious timer interrupts */
    int		schedule;	/* count of Timer_ScheduleRoutine calls */
    int		resched;	/* count of Timer_RescheduleRoutine calls */
    int		desched;	/* count of Timer_DescheduleRoutine calls */
} Timer_Statistics;
a102 1

@


1.5
log
@Add Timer_IsScheduled.
@
text
@d15 1
a15 1
 * rcsid: $Header: /r3/kupfer/spriteserver/src/sprited/timer/RCS/timer.h,v 1.4 91/11/14 10:03:09 kupfer Exp Locker: kupfer $ SPRITE (Berkeley) 
d34 8
@


1.4
log
@Snapshot. net, rpc, recov modules added.
@
text
@d15 1
a15 1
 * rcsid: $Header: /r3/kupfer/spriteserver/src/sprited/timer/RCS/timer.h,v 1.3 91/10/07 14:07:07 kupfer Exp Locker: kupfer $ SPRITE (Berkeley) 
d109 1
@


1.3
log
@Add Timer_Init.
@
text
@d15 1
a15 1
 * rcsid: $Header: /r3/kupfer/spriteserver/src/sprited/timer/RCS/timer.h,v 1.2 91/10/04 11:37:51 kupfer Exp Locker: kupfer $ SPRITE (Berkeley) 
a35 22
 * Interval Timers:
 *  The systems should provide two interval timers capable of interrupting 
 *  the CPU after a specified interval, calling the correct routine, and
 *  reseting themselves to interrupt again. 
 * The timers are:
 *  TIMER_CALLBACK_TIMER is the timer used to determine when
 *  	the first routine on the timer queue should be called.
 *  TIMER_PROFILE_TIMER is the timer used to determine when
 *  	the profile routine should be called.
 */

#define TIMER_CALLBACK_TIMER	2
#define	TIMER_CALLBACK_ROUTINE	Timer_CallBack

#define TIMER_PROFILE_TIMER	3
#define	TIMER_PROFILE_ROUTINE	Prof_CollectInfo


 /* DATA STRUCTURES: */


/*
d80 1
a80 1
    unsigned int interval;	/* public:  interval relative from now when 
d85 23
d109 7
@


1.2
log
@Snapshot.  fork/exec work.
@
text
@d15 1
a15 1
 * rcsid: $Header: /r3/kupfer/spriteserver/src/sprited/timer/RCS/timer.h,v 1.1 91/10/02 21:55:07 kupfer Exp Locker: kupfer $ SPRITE (Berkeley) 
d107 1
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
 * rcsid: $Header: /sprite/src/kernel/timer/RCS/timer.h,v 9.6 90/10/09 12:01:27 jhh Exp $ SPRITE (Berkeley) 
d34 20
d106 3
@
