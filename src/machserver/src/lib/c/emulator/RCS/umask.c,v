head     1.3;
branch   ;
access   ;
symbols  srv030:1.3 srv028:1.3 srv027:1.3 srv026:1.3 srv024:1.3 srv022:1.3 srv021:1.3 srv019:1.3 srv018:1.3 srv016:1.3 srv014:1.3 srv010:1.3 srv008:1.3 srv007:1.3 srv006:1.3 srv005:1.3 srv004:1.3 srv003:1.3 srv002:1.3 srv001:1.3;
locks    ; strict;
comment  @ * @;


1.3
date     92.03.12.19.22.30;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.12.12.21.48.06;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.12.10.16.31.44;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Add sigPending parameter to Sprite calls.
@
text
@/* 
 * umask.c --
 *
 *	Procedure to map from Unix umask system call to Sprite.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/umask.c,v 1.2 91/12/12 21:48:06 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif not lint

#include <sprite.h>
#include <mach.h>
#include <fs.h>

#include "compatInt.h"
#include <spriteEmuInt.h>

/*
 * These are the bits to invert and pass to the Sprite system call.
 */

#define PERMISSION_MASK 0777


/*
 *----------------------------------------------------------------------
 *
 * umask --
 *
 *	Procedure to map from Unix umask system call to Sprite
 *	Fs_SetDefPerm.
 *
 * Results:
 *	On success, the former value of umask is returned.  If
 *	Fs_SetDefPerm returns an error,	UNIX_ERROR is returned and the
 *	actual error code is stored in errno.  
 *
 * Side effects:
 *	The default protection of files created by the current process
 *	is changed.
 *
 *----------------------------------------------------------------------
 */

int
umask(newMask)
    int newMask;
{
    ReturnStatus status;
    kern_return_t kernStatus;
    int oldMask;
    Boolean sigPending;

    /*
     * Sprite default permissions are the logical NOT of Unix permissions.
     */

    newMask = (~newMask) & PERMISSION_MASK;
    
    kernStatus = Fs_SetDefPermStub(SpriteEmu_ServerPort(), newMask,
				   &oldMask, &sigPending);
    status = (kernStatus == KERN_SUCCESS) ? 
	SUCCESS : Utils_MapMachStatus(kernStatus);
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (status != SUCCESS) {
	errno = Compat_MapCode(status);
	return(UNIX_ERROR);
    } else {
	oldMask = (~oldMask) & PERMISSION_MASK;
	return(oldMask);
    }
}
@


1.2
log
@Changes for sprited.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/umask.c,v 1.1 91/12/10 16:31:44 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d55 1
d64 1
a64 1
				   &oldMask);
d67 3
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: umask.c,v 1.1 88/06/19 14:32:09 ouster Exp $ SPRITE (Berkeley)";
d14 3
a16 2
#include "sprite.h"
#include "fs.h"
d19 1
d52 2
a53 1
    ReturnStatus status;	/* result returned by Fs_SetDefPerm */
d62 4
a65 1
    status = Fs_SetDefPerm(newMask, &oldMask);
@
