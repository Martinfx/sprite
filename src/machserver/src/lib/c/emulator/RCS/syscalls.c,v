head     1.14;
branch   ;
access   ;
symbols  srv030:1.13 srv028:1.12 srv027:1.12 srv026:1.12 srv024:1.12 srv022:1.12 srv021:1.12 srv019:1.12 srv018:1.12 srv016:1.12 srv014:1.12 srv010:1.12 srv008:1.12 srv007:1.12 srv006:1.12 srv005:1.12 srv004:1.12 srv003:1.12 srv002:1.12 srv001:1.11;
locks    ; strict;
comment  @ * @;


1.14
date     92.07.17.16.33.39;  author kupfer;  state Exp;
branches ;
next     1.13;

1.13
date     92.07.16.18.04.07;  author kupfer;  state Exp;
branches ;
next     1.12;

1.12
date     92.04.23.23.58.36;  author kupfer;  state Exp;
branches ;
next     1.11;

1.11
date     92.04.16.13.17.48;  author kupfer;  state Exp;
branches ;
next     1.10;

1.10
date     92.04.02.21.41.12;  author kupfer;  state Exp;
branches ;
next     1.9;

1.9
date     92.03.12.19.23.01;  author kupfer;  state Exp;
branches ;
next     1.8;

1.8
date     92.01.22.13.15.53;  author kupfer;  state Exp;
branches ;
next     1.7;

1.7
date     91.12.19.13.21.42;  author kupfer;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.12.21.32.44;  author kupfer;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.01.22.31.45;  author kupfer;  state Exp;
branches ;
next     1.4;

1.4
date     91.11.14.11.37.03;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.18.18.44.56;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.04.12.08.01;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.09.30.18.24.06;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.14
log
@Add Test_Return1, Test_Return2.
@
text
@/* 
 * syscalls.c --
 *
 *	Facade routines to call the MIG-generated stubs for the Sprite 
 *	server.  The routines in this file mostly correspond to native
 *	Sprite system calls.  The MIG-generated stubs are all loaded
 *	together in one file, so these routines might as well be, too.
 *
 * Copyright 1991 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that this copyright
 * notice appears in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.13 92/07/16 18:04:07 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif /* not lint */

#include <mach.h>
#include <mach/message.h>
#include <bstring.h>
#include <net.h>
#include <rpc.h>
#include <spriteEmu.h>
#include <spriteEmuInt.h>
#include <spriteSrv.h>
#include <status.h>
#include <stdio.h>
#include <string.h>
#include <sys.h>
#include <sys/types.h>
#include <test.h>
#include <vm.h>
#include <vmStat.h>

/* ARGSUSED */
ReturnStatus
Fs_AttachDisk(devName, dirName, flags)
    char *devName;
    char *dirName;
    int flags;
{
    /* Currently unsupported. */
    return FAILURE;
}

ReturnStatus 
Fs_Close(streamID)
    int streamID;		/* the file to close */
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Boolean sigPending;

    kernStatus = Fs_CloseStub(SpriteEmu_ServerPort(), streamID,
			      &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Fs_Command(command, bufSize, buffer)
    int command;
    int bufSize;
    Address buffer;
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Boolean sigPending;

    kernStatus = Fs_CommandStub(SpriteEmu_ServerPort(), command,
				(vm_size_t)bufSize, (vm_address_t)buffer,
				&status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Fs_GetAttributes(pathName, fileOrLink, attrPtr)
    char *pathName;		/* The name of the file to open */
    int fileOrLink;		/* FS_ATTRIB_FILE or FS_ATTRIB_LINK */
    Fs_Attributes *attrPtr;
{
    kern_return_t kernStatus;
    ReturnStatus status;
    mach_msg_type_number_t pathNameLength = strlen(pathName) + 1;
    Boolean sigPending;

    kernStatus = Fs_GetAttributesStub(SpriteEmu_ServerPort(), pathName,
				      pathNameLength, fileOrLink, &status,
				      attrPtr, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Fs_GetAttributesID(streamID, attrPtr)
    int		streamID;	/* The user's index into its open file list */
    Fs_Attributes *attrPtr;	/* point to buffer to hold attributes */
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Boolean sigPending;

    kernStatus = Fs_GetAttributesIDStub(SpriteEmu_ServerPort(), streamID,
					&status, attrPtr, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Fs_Open(pathName, usageFlags, permissions, streamIDPtr)
    char *pathName;		/* The name of the file to open */
    int usageFlags;		/* FS_READ, FS_WRITE, FS_CREATE, FS_TRUNC */
    int permissions;		/* Permission mask to use on creation */
    int *streamIDPtr;		/* This is the user's handle on the open
				 * file used in later filesystem requests */
{
    kern_return_t kernStatus;
    ReturnStatus status;
    mach_msg_type_number_t pathNameLength = strlen(pathName) + 1;
    Boolean sigPending;

    kernStatus = Fs_OpenStub(SpriteEmu_ServerPort(), pathName,
			     pathNameLength, usageFlags, permissions,
			     &status, streamIDPtr, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Fs_SetAttr(pathName, fileOrLink, attrPtr, flags)
    char *pathName;		/* The name of the file to open */
    int fileOrLink;		/* Whether or not to follow symbolic links */
    Fs_Attributes *attrPtr;	/* New values for attributes */
    int flags;			/* What attributes to set */
{
    kern_return_t kernStatus;
    ReturnStatus status;
    mach_msg_type_number_t pathNameLength = strlen(pathName) + 1;
    Boolean sigPending;

    kernStatus = Fs_SetAttrStub(SpriteEmu_ServerPort(), pathName,
			     pathNameLength, fileOrLink, *attrPtr, flags,
			     &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Fs_SetAttrID(streamID, attrPtr, flags)
    int streamID;		/* References file to manipulate */
    Fs_Attributes *attrPtr;	/* New values for attributes */
    int flags;			/* What attributes to set */
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Boolean sigPending;

    kernStatus = Fs_SetAttrIDStub(SpriteEmu_ServerPort(), streamID,
				  *attrPtr, flags, &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Fs_SymLink(targetName, linkName, remoteFlag)
    char *targetName;	/* Name of the file to link to */
    char *linkName;	/* The name of the new link file that's created */
    Boolean remoteFlag;	/* TRUE => link will be a REMOTE_LINK */
{
    kern_return_t kernStatus;
    ReturnStatus status;
    mach_msg_type_number_t targetNameLength = strlen(targetName) + 1;
    mach_msg_type_number_t linkNameLength = strlen(linkName) + 1;
    Boolean sigPending;

    kernStatus = Fs_SymLinkStub(SpriteEmu_ServerPort(), targetName,
				targetNameLength, linkName, linkNameLength,
				remoteFlag, &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Net_InstallRoute(size, routeInfoPtr)
    int size;
    Net_RouteInfo *routeInfoPtr;
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Boolean sigPending;

    kernStatus = Net_InstallRouteStub(SpriteEmu_ServerPort(), size,
				      (vm_address_t)routeInfoPtr, &status,
				      &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Proc_Detach(statusCode)
    int statusCode;
{
    Boolean sigPending;
    ReturnStatus status;

    status = Utils_MapMachStatus(Proc_DetachStub(SpriteEmu_ServerPort(),
						 statusCode, &sigPending));
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Proc_GetHostIDs(virtualHostPtr, physicalHostPtr)
    int	*virtualHostPtr;   	/* Buffer to hold virtual host ID. */
    int	*physicalHostPtr;   	/* Buffer to hold physical host ID. */
{
    kern_return_t kernStatus;
    ReturnStatus status = SUCCESS;
    Boolean sigPending;
    int dummyVirt;		/* in case virtualHostPtr is nil */
    int dummyPhys;		/* in case physicalHostPtr is nil */

    if (virtualHostPtr == NULL) {
	virtualHostPtr = &dummyVirt;
    }
    if (physicalHostPtr == NULL) {
	physicalHostPtr = &dummyPhys;
    }
    kernStatus = Proc_GetHostIDsStub(SpriteEmu_ServerPort(),
				     virtualHostPtr, physicalHostPtr, 
				     &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus 
Proc_GetPCBInfo(firstPid, lastPid, hostID, infoSize, bufferPtr, 
		argsPtr, trueNumBuffersPtr)
    Proc_PID 		firstPid;	     /* First pid to get info for. */
    Proc_PID		lastPid;	     /* Last pid to get info for. */
    int			hostID;		     /* Host ID to get info for. */
    int			infoSize;   	     /* Size of structure */
    Address	 	bufferPtr;	     /* Pointer to buffers. */
    Proc_PCBArgString	*argsPtr;	     /* Pointer to argument strings. */
    int 		*trueNumBuffersPtr;  /* The actual number of buffers 
						used.*/
{
    kern_return_t kernStatus;
    ReturnStatus status;
    int dummy;			/* in case caller doesn't want num buffers */
    Boolean sigPending;

    if (trueNumBuffersPtr == NULL) {
	trueNumBuffersPtr = &dummy;
    }
    kernStatus = Proc_GetPCBInfoStub(SpriteEmu_ServerPort(), firstPid,
				     lastPid, hostID, infoSize,
				     (vm_address_t)bufferPtr,
				     (vm_address_t)argsPtr, &status,
				     trueNumBuffersPtr, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Sig_Send(sigNum, id, isFamily)
    int		sigNum;		/* The signal to send. */
    Proc_PID	id;		/* The id number of the process or process
				   family. */
    Boolean	isFamily;	/* Whether the id is a process id or a process
				   group id. */
{
    ReturnStatus status;
    kern_return_t kernStatus;
    Boolean sigPending;

    kernStatus = Sig_SendStub(SpriteEmu_ServerPort(), sigNum, id, isFamily,
			      &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }

    return status;
}

ReturnStatus
Sig_SetHoldMask(newMask, oldMaskPtr)
    int	newMask;	/* Mask to set the hold mask to. */
    int	*oldMaskPtr;	/* Where to store the old mask. */
{
    kern_return_t kernStatus;
    int dummyMask;		/* in case the old mask wasn't requested */
    Boolean sigPending;

    if (oldMaskPtr == NULL) {
	oldMaskPtr = &dummyMask;
    }
    kernStatus = Sig_SetHoldMaskStub(SpriteEmu_ServerPort(), newMask,
				     oldMaskPtr, &sigPending);
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return Utils_MapMachStatus(kernStatus);
}

ReturnStatus
Sys_GetMachineInfo(size, bufferPtr)
    int size;
    Address bufferPtr;
{
    boolean_t sigPending;
    kern_return_t kernStatus;
    ReturnStatus status;

    kernStatus = Sys_GetMachineInfoStub(SpriteEmu_ServerPort(), size,
					(vm_address_t)bufferPtr, &status,
					&sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Sys_GetTimeOfDay(timePtr, offsetPtr, dstPtr)
    Time *timePtr;
    int *offsetPtr;
    Boolean *dstPtr;
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Time dummyTime;		/* in case user's ptr is nil */
    int dummyOffset;		/* ditto */
    Boolean dummyDst;		/* ditto */
    Boolean sigPending;

    if (timePtr == NULL) {
	timePtr = &dummyTime;
    }
    if (offsetPtr == NULL) {
	offsetPtr = &dummyOffset;
    }
    if (dstPtr == NULL) {
	dstPtr = &dummyDst;
    }

    kernStatus = Sys_GetTimeOfDayStub(SpriteEmu_ServerPort(), timePtr,
				      offsetPtr, dstPtr, &status, &sigPending);
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }

    return status;
}

ReturnStatus
Sys_SetTimeOfDay(timePtr, offset, dst)
    Time *timePtr;
    int offset;
    Boolean dst;
{
    kern_return_t kernStatus;
    ReturnStatus status;
    Boolean sigPending;

    kernStatus = Sys_SetTimeOfDayStub(SpriteEmu_ServerPort(), *timePtr,
				      offset, dst, &status, &sigPending);
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }

    return status;
}

ReturnStatus
Sys_Shutdown(flags, rebootString)
    int flags;
    char *rebootString;		/* name of file to reboot with */
{
    boolean_t sigPending;
    ReturnStatus status;

    if (rebootString != NULL) {
	fprintf(stderr, "Sys_Shutdown: reboot string not supported.\n");
    }
    status = Utils_MapMachStatus(Sys_ShutdownStub(SpriteEmu_ServerPort(),
						  flags, &sigPending));
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Sys_Stats(command, option, argPtr)
    int command;
    int option;
    Address argPtr;
{
    ReturnStatus status;
    Boolean sigPending;
    kern_return_t kernStatus;

    kernStatus = Sys_StatsStub(SpriteEmu_ServerPort(), command, option,
			       (vm_address_t)argPtr, &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

void
Test_GetString(buf, bufLen)
    char *buf;
    int bufLen;
{
    (void)Test_GetStringStub(SpriteEmu_ServerPort(), (vm_address_t)buf,
			     bufLen);
}

/* ARGSUSED */
void
Test_MemCheck(file)
    char *file;			/* currently ignored */
{
    (void)Test_MemCheckStub(SpriteEmu_ServerPort());
}

void
Test_PutDecimal(n)
    int n;
{
    (void)Test_PutDecimalStub(SpriteEmu_ServerPort(), n);
}

void
Test_PutHex(n)
    int n;
{
    (void)Test_PutHexStub(SpriteEmu_ServerPort(), n);
}

void
Test_PutMessage(s)
    char *s;
{
    (void)Test_PutMessageStub(SpriteEmu_ServerPort(), s);
}

void
Test_PutOctal(n)
    int n;
{
    (void)Test_PutOctalStub(SpriteEmu_ServerPort(), n);
}

void
Test_PutString(buf, bufLen)
    char *buf;
    int bufLen;
{
    (void)Test_PutStringStub(SpriteEmu_ServerPort(), (vm_address_t)buf,
			     bufLen);
}

void
Test_PutTime(now, overwrite)
    time_t now;
    Boolean overwrite;
{
    (void)Test_PutTimeStub(SpriteEmu_ServerPort(), (int)now, overwrite);
}

void
Test_Return1()
{
    (void)Test_Return1Stub(SpriteEmu_ServerPort());
}

void
Test_Return2()
{
    (void)Test_Return2Stub(SpriteEmu_ServerPort());
}

ReturnStatus
Test_Rpc(command, argPtr)
    int command;
    Address argPtr;
{
    ReturnStatus status;
    kern_return_t kernStatus;
    Boolean sigPending;
    
    kernStatus = Test_RpcStub(SpriteEmu_ServerPort(), command,
			      (vm_address_t)argPtr, &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

ReturnStatus
Vm_Cmd(command, length, arg)
    int command;
    int length;
    int arg;
{
    ReturnStatus status;
    kern_return_t kernStatus;
    Boolean sigPending;
    vm_address_t outBuf;
    mach_msg_type_number_t outBufLength;

    /* 
     * Which stub we use depends on which command is invoked.
     */
    switch (command) {
    case VM_DO_COPY_IN_INBAND:
	kernStatus = Vm_CmdInbandStub(SpriteEmu_ServerPort(), command,
				      length, (Sys_CharArray)arg, 
				      (mach_msg_type_number_t)length,
				      &outBuf, &outBufLength, &status,
				      &sigPending);
	if (outBuf != 0) {
	    (void)vm_deallocate(mach_task_self(), outBuf, outBufLength);
	}
	break;
    case VM_DO_COPY_OUT_INBAND:
	kernStatus = Vm_CmdInbandStub(SpriteEmu_ServerPort(), command,
				      length, (Sys_CharArray)0, 0, &outBuf,
				      &outBufLength, &status, &sigPending);
	bcopy(outBuf, arg, length);
	if (outBuf != 0) {
	    (void)vm_deallocate(mach_task_self(), outBuf, outBufLength);
	}
	break;
    default:
	kernStatus = Vm_CmdStub(SpriteEmu_ServerPort(), command,
				(vm_size_t)length, (vm_address_t)arg, &status,
				&sigPending);
	break;
    }

    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}

/* 
 * Eventually there should be a MIG call to the server to get information 
 * about the VM segments (aka Mach memory objects).  For the time being, 
 * though, just zero out the record.
 */

ReturnStatus
Vm_GetSegInfo(infoPtr, segID, infoSize, segBufPtr)
    Proc_PCBInfo *infoPtr;	/* User's copy of PCB. */
    Vm_SegmentID segID;		/* Segment number of get info for if no pcb */
    int		infoSize;	/* Size of segment info structures */
    Address	segBufPtr;	/* Where to store segment information.*/
{
#ifdef lint
    infoPtr = infoPtr;
    segID = segID;
#endif
    bzero(segBufPtr, infoSize);
    return SUCCESS;
}

ReturnStatus
Vm_PageSize(pageSizePtr)
    int *pageSizePtr;
{
    *pageSizePtr = vm_page_size;
    return SUCCESS;
}

ReturnStatus
Vm_MapFile(fileName, readOnly, offset, length, startAddrPtr)
    char *fileName;
    Boolean readOnly;
    off_t offset;
    vm_size_t length;
    Address *startAddrPtr;
{
    kern_return_t kernStatus;
    mach_msg_type_number_t fileNameLength = strlen(fileName) + 1;
    ReturnStatus status;
    Boolean sigPending;

    if (fileNameLength > FS_MAX_PATH_NAME_LENGTH) {
	return FS_INVALID_ARG;
    }
    kernStatus = Vm_MapFileStub(SpriteEmu_ServerPort(), fileName,
				fileNameLength, readOnly, offset, length,
				&status, (vm_address_t *)startAddrPtr,
				&sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    return status;
}
@


1.13
log
@Split spriteSrv.h into user and server versions.  Add support for
VM_DO_COPY_IN_INBAND and VM_DO_COPY_OUT_INBAND VM commands.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.12 92/04/23 23:58:36 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d550 12
@


1.12
log
@Fix Vm_Cmd so that the user code specifies the buffer length.
(Rebuilding the user program is often easier than rebuilding and
installing the C library.)
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.11 92/04/16 13:17:48 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d30 1
a30 1
#include <sprited/spriteSrv.h>
d581 2
d584 30
a613 3
    kernStatus = Vm_CmdStub(SpriteEmu_ServerPort(), command,
			    (vm_size_t)length, (vm_address_t)arg, &status,
			    &sigPending);
@


1.11
log
@Add length parameter to Vm_CmdStub.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.10 92/04/02 21:41:12 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
a571 6
/* 
 * XXX It would be better if the user program specifies the buffer length, 
 * but that would be an incompatible source-level change.  As long as the 
 * library is rebuilt whenever the Vm_Stat structure changes, that should 
 * be sufficient.
 */
d573 1
a573 1
Vm_Cmd(command, arg)
d575 1
a580 1
    vm_size_t length = 0;
d582 3
a584 5
    if (command == VM_GET_STATS) {
	length = sizeof(Vm_Stat);
    }
    kernStatus = Vm_CmdStub(SpriteEmu_ServerPort(), command, length,
			    (vm_address_t)arg, &status, &sigPending);
@


1.10
log
@Add Fs_AttachDisk (stub), Fs_Command, Net_InstallRoute,
Proc_GetHostIDs, Sys_GetMachineInfo, Sys_GetTimeOfDay,
Sys_SetTimeOfDay.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.9 92/03/12 19:23:01 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d38 1
d572 6
d586 1
d588 4
a591 1
    kernStatus = Vm_CmdStub(SpriteEmu_ServerPort(), command,
@


1.9
log
@Add sigPending parameter to Sprite calls.  Add Sig_Send,
Sig_SetHoldMask, Vm_Cmd.  Add fake Vm_GetSegInfo.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.8 92/01/22 13:15:53 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d26 1
d39 11
d69 22
d229 21
d264 29
d369 78
@


1.8
log
@Ditch TempFs_Length.  Fix Sys_Shutdown to be compatible with native
version.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.7 91/12/19 13:21:42 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d25 1
d44 1
d47 1
a47 1
			      &status);
d51 3
d66 1
d70 1
a70 1
				      attrPtr);
d74 3
d87 1
d90 1
a90 1
					&status, attrPtr);
d94 3
d111 1
d115 1
a115 1
			     &status, streamIDPtr);
d119 3
d135 1
d139 1
a139 1
			     &status);
d143 3
d157 1
d160 1
a160 1
				  *attrPtr, flags, &status);
d164 3
d180 1
d184 1
a184 1
				remoteFlag, &status);
d188 3
d195 2
a196 2
Proc_Detach(status)
    int status;
d198 9
a206 2
    return Utils_MapMachStatus(Proc_DetachStub(SpriteEmu_ServerPort(),
					       status));
d223 2
a224 1
    int dummy;
d233 24
a256 1
				     trueNumBuffersPtr);
d260 4
d268 20
d292 3
d298 6
a303 2
    return Utils_MapMachStatus(Sys_ShutdownStub(SpriteEmu_ServerPort(),
						flags));
d312 13
a324 3
    return Utils_MapMachStatus(Sys_StatsStub(SpriteEmu_ServerPort(),
					     command, option,
					     (vm_address_t)argPtr));
d396 1
d399 1
a399 1
			      (vm_address_t)argPtr, &status);
d403 3
d410 41
d469 1
d476 2
a477 1
				&status, (vm_address_t *)startAddrPtr);
d479 4
a482 1
	return Utils_MapMachStatus(kernStatus);
@


1.7
log
@Add Fs_GetAttributes, Fs_GetAttributesID, Fs_SetAttr, Fs_SetAttrID,
Fs_SymLink, Proc_Detach, Proc_GetPCBInfo.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.6 91/12/12 21:32:44 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d30 1
a33 1
#include <tempFs.h>
d204 1
a204 1
Sys_Shutdown(flags)
d206 1
d208 3
a223 20
}

ReturnStatus
TempFs_Length(fileName, lengthPtr)
    char *fileName;
    int *lengthPtr;
{
    kern_return_t kernStatus;
    mach_msg_type_number_t fileNameLength = strlen(fileName) + 1;
    ReturnStatus status;

    if (fileNameLength > FS_MAX_PATH_NAME_LENGTH) {
	return FS_INVALID_ARG;
    }
    kernStatus = TempFs_LengthStub(SpriteEmu_ServerPort(), fileName,
				   fileNameLength, &status, lengthPtr);
    if (kernStatus != KERN_SUCCESS) {
	return Utils_MapMachStatus(kernStatus);
    }
    return status;
@


1.6
log
@Move a bunch of routines back into their own files.  They don't
directly call the MIG stubs, because they don't want to deal with
interruptions by signals.  Add Fs_Close, Fs_Open, Vm_PageSize.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.5 91/12/01 22:31:45 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d53 35
d102 95
@


1.5
log
@Snapshot: FS support.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.4 91/11/14 11:37:03 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d37 3
a39 28

/*
 *----------------------------------------------------------------------
 *
 * Ioc_Reposition --
 *
 *	Reposition the access position on a filesystem stream.  The next
 *	read or write will start at the byte offset specified by the
 *	combination of base and offset.  Base has three values corresponding
 *	to the beginning of file, current position, and end of file.
 *
 * Results:
 *	None.
 *
 * Side effects:
 *	Sets the stream access position.
 *
 *----------------------------------------------------------------------
 */

ReturnStatus
Ioc_Reposition(streamID, base, offset, newOffsetPtr)
    int streamID;		/* StreamID returned from Fs_Open */
    int base;			/* IOC_BASE_ZERO for beginning of file,
				 * IOC_BASE_CURRENT for the current position,
				 * IOC_BASE_EOF for end of file. */
    int offset;			/* Byte offset relative to base */
    int *newOffsetPtr;		/* The resulting access position */
d41 1
d43 17
d61 2
a62 1
    Ioc_RepositionArgs args;
d64 3
a66 6
    args.base = base;
    args.offset = offset;
    kernStatus = Fs_IOControlStub(SpriteEmu_ServerPort(), streamID,
			IOC_REPOSITION, sizeof(Ioc_RepositionArgs),
			(vm_address_t)&args, sizeof(int),
			(vm_address_t) newOffsetPtr, &status);
d70 20
a89 1
    return(status);
d92 19
a110 1

d191 2
a192 12
Sys_Shutdown(flags)
    int flags;
{
    return Utils_MapMachStatus(Sys_ShutdownStub(SpriteEmu_ServerPort(),
						flags));
}

ReturnStatus
Sys_Stats(command, option, argPtr)
    int command;
    int option;
    Address argPtr;
d194 2
a195 3
    return Utils_MapMachStatus(Sys_StatsStub(SpriteEmu_ServerPort(),
					     command, option,
					     (vm_address_t)argPtr));
a220 21

ReturnStatus
TempFs_Length(fileName, lengthPtr)
    char *fileName;
    int *lengthPtr;
{
    kern_return_t kernStatus;
    mach_msg_type_number_t fileNameLength = strlen(fileName) + 1;
    ReturnStatus status;

    if (fileNameLength > FS_MAX_PATH_NAME_LENGTH) {
	return FS_INVALID_ARG;
    }
    kernStatus = TempFs_LengthStub(SpriteEmu_ServerPort(), fileName,
				   fileNameLength, &status, lengthPtr);
    if (kernStatus != KERN_SUCCESS) {
	return Utils_MapMachStatus(kernStatus);
    }
    return status;
}

@


1.4
log
@Alphabetize.  Lint.  Add Sys_Stats & Test_Rpc.
@
text
@d5 3
a7 3
 *	server.  These mostly correspond to native Sprite system calls.  
 *	The MIG-generated stubs are all loaded together in one file, so 
 *	these routines might as well be, too.
d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.3 91/10/18 18:44:56 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d36 47
@


1.3
log
@Lint.  Add Test_MemCheck.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.2 91/10/04 12:08:01 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d25 1
d38 3
a40 2
Test_PutDecimal(n)
    int n;
d42 2
a43 1
    (void)Test_PutDecimalStub(SpriteEmu_ServerPort(), n);
d46 1
d48 2
a49 2
Test_PutHex(n)
    int n;
d51 1
a51 1
    (void)Test_PutHexStub(SpriteEmu_ServerPort(), n);
d55 1
a55 1
Test_PutOctal(n)
d58 1
a58 1
    (void)Test_PutOctalStub(SpriteEmu_ServerPort(), n);
d62 2
a63 3
Test_PutTime(now, overwrite)
    time_t now;
    Boolean overwrite;
d65 1
a65 1
    (void)Test_PutTimeStub(SpriteEmu_ServerPort(), (int)now, overwrite);
d76 7
d92 3
a94 3
Test_GetString(buf, bufLen)
    char *buf;
    int bufLen;
d96 1
a96 2
    (void)Test_GetStringStub(SpriteEmu_ServerPort(), (vm_address_t)buf,
			     bufLen);
d99 4
a102 4
/* ARGSUSED */
void
Test_MemCheck(file)
    char *file;			/* currently ignored */
d104 9
a112 1
    (void)Test_MemCheckStub(SpriteEmu_ServerPort());
d124 11
d138 2
a139 2
    int offset;
    int length;
@


1.2
log
@Use SpriteEmu_ServerPort.  Add Test_PutTime.
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/syscalls.c,v 1.1 91/09/30 18:24:06 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d62 1
a62 1
    (void)Test_PutTimeStub(SpriteEmu_ServerPort(), now, overwrite);
d88 8
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
static char rcsid[] = "$Header: /sprite/lib/forms/RCS/proto.c,v 1.5 91/02/09 13:24:44 ouster Exp $ SPRITE (Berkeley)";
d31 1
d40 1
a40 1
    (void)Test_PutDecimalStub(spriteEmu_ServerPort, n);
d47 1
a47 1
    (void)Test_PutHexStub(spriteEmu_ServerPort, n);
d54 1
a54 1
    (void)Test_PutOctalStub(spriteEmu_ServerPort, n);
d58 8
d69 1
a69 1
    (void)Test_PutMessageStub(spriteEmu_ServerPort, s);
d77 2
a78 1
    (void)Test_PutStringStub(spriteEmu_ServerPort, (vm_address_t)buf, bufLen);
d86 2
a87 1
    (void)Test_GetStringStub(spriteEmu_ServerPort, (vm_address_t)buf, bufLen);
d94 2
a95 1
    return Utils_MapMachStatus(Sys_ShutdownStub(spriteEmu_ServerPort, flags));
d113 1
a113 1
    kernStatus = Vm_MapFileStub(spriteEmu_ServerPort, fileName,
d134 1
a134 1
    kernStatus = TempFs_LengthStub(spriteEmu_ServerPort, fileName,
@
