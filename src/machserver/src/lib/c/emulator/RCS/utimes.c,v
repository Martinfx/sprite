head     1.4;
branch   ;
access   ;
symbols  srv030:1.4 srv028:1.4 srv027:1.4 srv026:1.4 srv024:1.4 srv022:1.4 srv021:1.4 srv019:1.4 srv018:1.4 srv016:1.4 srv014:1.4 srv010:1.4 srv008:1.4 srv007:1.4 srv006:1.4 srv005:1.4 srv004:1.4 srv003:1.4 srv002:1.4 srv001:1.4;
locks    ; strict;
comment  @ * @;


1.4
date     92.03.13.20.43.04;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     92.03.12.19.22.31;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.12.12.21.48.07;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.12.10.16.35.51;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Fix include's.
@
text
@/* 
 * utimes.c --
 *
 *	Procedure to map from Unix utimes system call to Sprite system call.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/utimes.c,v 1.3 92/03/12 19:22:31 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif not lint

#include <sprite.h>
#include <mach.h>
#include <mach/message.h>
#include <fs.h>

#include "compatInt.h"
#include <errno.h>
#include <sys/time.h>
#include <spriteEmuInt.h>
#include <spriteSrv.h>
#include <string.h>


/*
 *----------------------------------------------------------------------
 *
 * utimes --
 *
 *	Procedure to map from Unix utimes system call to Sprite 
 *	Fs_SetAttributes system call.
 *
 * Results:
 *      UNIX_SUCCESS    - the call was successful.
 *      UNIX_ERROR      - the call was not successful.
 *                        The actual error code stored in errno.
 *
 * Side effects:
 *	The protection of the specified file is modified.
 *
 *----------------------------------------------------------------------
 */

int
utimes(path, tvp)
    char *path;
    struct timeval tvp[2];
{
    ReturnStatus status;
    kern_return_t kernStatus;
    Fs_Attributes attributes;	/* struct containing all file attributes,
				 * only access/modify times looked at. */
    mach_msg_type_number_t pathNameLength = strlen(path) + 1;
    Boolean sigPending;

    attributes.accessTime.seconds = tvp[0].tv_sec;
    attributes.accessTime.microseconds = tvp[0].tv_usec;
    attributes.dataModifyTime.seconds = tvp[1].tv_sec;
    attributes.dataModifyTime.microseconds = tvp[1].tv_usec;
    kernStatus = Fs_SetAttrStub(SpriteEmu_ServerPort(), path,
				pathNameLength, FS_ATTRIB_FILE, attributes,
				FS_SET_TIMES, &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (status != SUCCESS) {
	errno = Compat_MapCode(status);
	return(UNIX_ERROR);
    } else {
	return(UNIX_SUCCESS);
    }
}
@


1.3
log
@Add sigPending parameter to Sprite calls.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/utimes.c,v 1.2 91/12/12 21:48:07 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d23 2
@


1.2
log
@Changes for sprited.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/utimes.c,v 1.1 91/12/10 16:35:51 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d54 1
d62 1
a62 1
				FS_SET_TIMES, &status);
d65 3
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: utimes.c,v 1.2 88/08/25 14:41:12 brent Exp $ SPRITE (Berkeley)";
d14 4
a17 2
#include "sprite.h"
#include "fs.h"
d22 1
d49 2
a50 1
    ReturnStatus status;	/* result returned by Sprite system calls */
d53 1
d59 6
a64 1
    status = Fs_SetAttr(path,  FS_ATTRIB_FILE, &attributes, FS_SET_TIMES);
@
