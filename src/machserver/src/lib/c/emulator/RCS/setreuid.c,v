head     1.1;
branch   ;
access   ;
symbols  srv030:1.1 srv028:1.1 srv027:1.1 srv026:1.1 srv024:1.1 srv022:1.1 srv021:1.1 srv019:1.1 srv018:1.1 srv016:1.1 srv014:1.1 srv010:1.1 srv008:1.1 srv007:1.1 srv006:1.1 srv005:1.1 srv004:1.1 srv003:1.1 srv002:1.1 srv001:1.1;
locks    ; strict;
comment  @ * @;


1.1
date     92.03.13.20.41.51;  author kupfer;  state Exp;
branches ;
next     ;


desc
@UNIX setreuid call.
@



1.1
log
@Initial revision
@
text
@/* 
 * setreuid.c --
 *
 *	UNIX setreuid() for the Sprite server.
 *
 * Copyright 1988, 1992 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that this copyright
 * notice appears in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/lib/forms/RCS/proto.c,v 1.6 92/03/02 15:29:56 bmiller Exp $ SPRITE (Berkeley)";
#endif /* not lint */

#include <mach.h>
#include <sprite.h>
#include <compatInt.h>
#include <spriteEmuInt.h>
#include <spriteSrv.h>


/*
 *----------------------------------------------------------------------
 *
 * setreuid --
 *
 *	Procedure to map from Unix setreuid system call to Sprite Proc_SetIDs.
 *
 * Results:
 *	UNIX_ERROR is returned upon error, with the actual error code
 *	stored in errno.  Upon success, UNIX_SUCCESS is returned.
 *
 * Side effects:
 *	The real and effective user ID's of the process are modified as
 *	specified, if the user is privileged to do so.
 *
 *----------------------------------------------------------------------
 */

int
setreuid(ruid, euid)
    int	ruid, euid;
{
    ReturnStatus status;	/* result returned by Proc_SetIDs */
    kern_return_t kernStatus;
    Boolean sigPending;

    if (ruid == -1) {
	ruid = PROC_NO_ID;
    }
    if (euid == -1) {
	euid = PROC_NO_ID;
    }
    kernStatus = Proc_SetIDsStub(SpriteEmu_ServerPort(), ruid, euid,
				 &status, &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (status != SUCCESS) {
	errno = Compat_MapCode(status);
	return(UNIX_ERROR);
    } else {
	return(UNIX_SUCCESS);
    }
}

@
