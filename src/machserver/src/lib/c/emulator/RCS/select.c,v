head     1.3;
branch   ;
access   ;
symbols  srv030:1.3 srv028:1.3 srv027:1.3 srv026:1.3 srv024:1.3 srv022:1.3 srv021:1.3 srv019:1.3 srv018:1.3 srv016:1.3 srv014:1.3 srv010:1.3 srv008:1.3 srv007:1.3 srv006:1.3 srv005:1.3 srv004:1.3 srv003:1.3 srv002:1.3 srv001:1.3;
locks    ; strict;
comment  @ * @;


1.3
date     92.03.12.19.22.29;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.12.12.21.48.05;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.12.10.16.12.59;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Add sigPending parameter to Sprite calls.
@
text
@/* 
 * select.c --
 *
 *	Procedure to map from Unix select system call to Sprite.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/select.c,v 1.2 91/12/12 21:48:05 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif not lint

#include <sprite.h>
#include <mach.h>
#include <status.h>
#include <fs.h>
#include "compatInt.h"
#include <sys/time.h>
#include <spriteEmuInt.h>


/*
 *----------------------------------------------------------------------
 *
 * select --
 *
 *	Procedure to map from Unix select system call to Sprite Fs_Select.
 *
 * Results:
 *	UNIX_ERROR is returned upon error, with the actual error code
 *	stored in errno.  The number of ready descriptors is returned
 *	upon success.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

int
select(width, readfds, writefds, exceptfds, timeout)
    int width, *readfds, *writefds, *exceptfds;
    struct timeval *timeout;
{
    ReturnStatus status;
    kern_return_t kernStatus;
    int numReady;
    Time spriteTimeout;
    Time *timeoutPtr = &spriteTimeout;
    Boolean useTimeout = FALSE;
    Boolean sigPending;

    if (timeout != NULL) {
	useTimeout = TRUE;
	spriteTimeout.seconds = timeout->tv_sec;
	spriteTimeout.microseconds = timeout->tv_usec;
    }
    kernStatus = Fs_SelectStub(SpriteEmu_ServerPort(), width, useTimeout,
			       timeoutPtr, (vm_address_t)readfds,
			       (vm_address_t)writefds,
			       (vm_address_t)exceptfds, &status, &numReady,
			       &sigPending);
    if (kernStatus != KERN_SUCCESS) {
	status = Utils_MapMachStatus(kernStatus);
    }
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (status != SUCCESS) {
	if (status == FS_TIMEOUT) {
	    if (readfds != NULL) {
		*readfds = 0;
	    }
	    if (writefds != NULL) {
		*writefds = 0;
	    }
	    if (exceptfds != NULL) {
		*exceptfds = 0;
	    }
	    return(0);
	} else {
	    errno = Compat_MapCode(status);
	    return(UNIX_ERROR);
	}
    } else {
	return(numReady);
    }
}
@


1.2
log
@Changes for sprited.
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/select.c,v 1.1 91/12/10 16:12:59 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d52 1
d62 2
a63 1
			       (vm_address_t)exceptfds, &status, &numReady);
d66 3
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char rcsid[] = "$Header: /sprite/src/lib/c/unixSyscall/RCS/select.c,v 1.2 89/03/22 12:20:49 douglis Exp $ SPRITE (Berkeley)";
d14 4
a17 3
#include "sprite.h"
#include "status.h"
#include "fs.h"
d20 1
d46 2
a47 1
    ReturnStatus status;	/* result returned by Fs_Select */
d50 2
a51 1
    Time *timeoutPtr = NULL;
d54 1
a56 1
	timeoutPtr = &spriteTimeout;
d58 7
a64 3
    status = Fs_RawSelect(width, timeoutPtr, readfds, writefds,
			  exceptfds, &numReady);

@
