head     1.3;
branch   ;
access   ;
symbols  srv030:1.3 srv028:1.3 srv027:1.3 srv026:1.3 srv024:1.3 srv022:1.3 srv021:1.3 srv019:1.3 srv018:1.3 srv016:1.3 srv014:1.3 srv010:1.3 srv008:1.3 srv007:1.3 srv006:1.3 srv005:1.3 srv004:1.3 srv003:1.3 srv002:1.3 srv001:1.3;
locks    ; strict;
comment  @ * @;


1.3
date     92.03.12.19.22.33;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.04.12.04.17;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.09.29.19.14.44;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Add sigPending parameter to Sprite calls.
@
text
@/* 
 * getpid.c --
 *
 *	Source code for the getpid library procedure.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /user5/kupfer/spriteserver/src/lib/c/emulator/RCS/getpid.c,v 1.2 91/10/04 12:04:17 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
#endif not lint

#include <sprite.h>
#include <mach.h>
#include <proc.h>
#include <compatInt.h>
#include <spriteEmuInt.h>
#include <status.h>


/*
 *----------------------------------------------------------------------
 *
 * getpid --
 *
 *	Procedure to map from Unix getpid system call to Sprite 
 *	Proc_GetIDsStub.
 *
 * Results:
 *	UNIX_ERROR is returned upon error, with the actual error code
 *	stored in errno.  Upon success, the process ID of the current
 *	process is returned.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */
    
int
getpid()
{
    kern_return_t kernStatus;	/* result returned by Proc_GetIDsStub */
    Proc_PID pid;		/* ID of current process */
    int dummy[3];		/* throw-away values for Proc_GetIDsStub */
    Boolean sigPending;

    kernStatus = Proc_GetIDsStub(SpriteEmu_ServerPort(), &pid,
				 (Proc_PID *)&dummy[0], &dummy[1],
				 &dummy[2], &sigPending);
    if (sigPending) {
	SpriteEmu_TakeSignals();
    }
    if (kernStatus != KERN_SUCCESS) {
	errno = Compat_MapCode(Utils_MapMachStatus(kernStatus));
	return UNIX_ERROR;
    } else {
	return (int)pid;
    }
}
@


1.2
log
@Convert for use with Sprite server.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /r3/kupfer/spriteserver/src/lib/c/emulator/RCS/getpid.c,v 1.1 91/09/29 19:14:44 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)";
d53 1
d56 5
a60 1
				 (Proc_PID *)&dummy[0], &dummy[1], &dummy[2]);
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/lib/c/unixSyscall/RCS/getpid.c,v 1.1 88/11/17 13:30:40 ouster Exp $ SPRITE (Berkeley)";
d21 1
d23 5
a27 1
#include "compatInt.h"
d33 2
a34 1
 *	Procedure to map from Unix getpid system call to Sprite Proc_GetIDs.
d46 1
a46 1

d50 3
a52 2
    ReturnStatus status;	/* result returned by Proc_GetIDs */
    int pid;			/* ID of current process */
d54 5
a58 4
    status = Proc_GetIDs(&pid, (int *) NULL, (int *) NULL, (int *) NULL);
    if (status != SUCCESS) {
	errno = Compat_MapCode(status);
	return(UNIX_ERROR);
d60 1
a60 1
	return(pid);
@
