head     1.2;
branch   ;
access   ;
symbols  srv030:1.2 srv027:1.2 srv026:1.2 srv024:1.2 srv021:1.2 srv019:1.2 srv018:1.2 srv016:1.2 srv014:1.2 srv010:1.2 srv008:1.2 srv007:1.2 srv006:1.2 srv005:1.2 srv004:1.2 srv003:1.2 srv002:1.2 srv001:1.2;
locks    ; strict;
comment  @ * @;


1.2
date     91.12.01.22.16.11;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.11.17.17.09.47;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.2
log
@Hacks so can build sprited w/o support for local disk.
@
text
@/*
 * lfs.h --
 *
 *	Declarations of data structures and routines of the LFS file system
 *	exported to the rest of the Sprite file system. 
 *
 * Copyright 1989 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /r3/kupfer/spriteserver/include/RCS/lfs.h,v 1.1 91/11/17 17:09:47 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
 */

#ifndef _LFS
#define _LFS

#include <sprite.h>
#ifdef SPRITED_LOCALDISK
#include <fsdm.h>
#endif

/*
 * Flags controlling file system.
 * LFS_CONTROL_CLEANALL - When cleaning, clean all dirty segments.
 */
#define	LFS_CONTROL_CLEANALL	0x1

/* Descriptor management routines. */

#ifdef SPRITED_LOCALDISK
extern ReturnStatus Lfs_GetNewFileNumber _ARGS_((Fsdm_Domain *domainPtr, 
		int dirFileNum, int *fileNumberPtr));
extern ReturnStatus Lfs_FreeFileNumber _ARGS_((Fsdm_Domain *domainPtr, 
		int fileNumber));
extern ReturnStatus Lfs_FileDescStore _ARGS_((register Fsdm_Domain *domainPtr,
		Fsio_FileIOHandle *handlePtr, int fileNumber, 
		Fsdm_FileDescriptor *fileDescPtr, Boolean forceOut));
extern ReturnStatus Lfs_FileDescFetch _ARGS_((Fsdm_Domain *domainPtr, 
		int fileNumber, Fsdm_FileDescriptor *fileDescPtr));
extern ReturnStatus Lfs_FileDescInit _ARGS_((Fsdm_Domain *domainPtr, 
		int fileNumber, int type, int permissions, int uid, int gid,
		Fsdm_FileDescriptor *fileDescPtr));
/*
 * Startup and shutdown routines. 
 */
extern ReturnStatus Lfs_AttachDisk _ARGS_((Fs_Device *devicePtr, 
			char *localName, int flags, int *domainNumPtr));
extern ReturnStatus Lfs_DetachDisk _ARGS_((Fsdm_Domain *domainPtr));
extern ReturnStatus Lfs_DomainWriteBack _ARGS_((Fsdm_Domain *domainPtr, 
			Boolean shutdown));
extern ReturnStatus Lfs_RereadSummaryInfo _ARGS_((Fsdm_Domain *domainPtr));
extern ReturnStatus Lfs_DomainInfo _ARGS_((Fsdm_Domain *domainPtr, 
			Fs_DomainInfo *domainInfoPtr));
/*
 * File I/O and allocate routines. 
 */
extern ReturnStatus Lfs_FileBlockRead _ARGS_((Fsdm_Domain *domainPtr, 
			register Fsio_FileIOHandle *handlePtr, 
			Fscache_Block *blockPtr));
extern ReturnStatus Lfs_FileBlockWrite _ARGS_((Fsdm_Domain *domainPtr, 
			Fsio_FileIOHandle *handlePtr, Fscache_Block *blockPtr));
extern ReturnStatus Lfs_BlockAllocate _ARGS_((Fsdm_Domain *domainPtr, 
			register Fsio_FileIOHandle *handlePtr, int offset, 
			int numBytes, int flags, int *blockAddrPtr, 
			Boolean *newBlockPtr));
extern ReturnStatus Lfs_FileTrunc _ARGS_((Fsdm_Domain *domainPtr, 
			Fsio_FileIOHandle *handlePtr, 
			int size, Boolean delete));

/*
 * Directory routines.
 */
extern ClientData Lfs_DirOpStart _ARGS_((Fsdm_Domain *domainPtr, int opFlags, 
			char *name, int nameLen, int fileNumber, 
			Fsdm_FileDescriptor *fileDescPtr, int dirFileNumber, 
			int dirOffset, Fsdm_FileDescriptor *dirFileDescPtr));
extern void Lfs_DirOpEnd _ARGS_((Fsdm_Domain *domainPtr, ClientData clientData,
			ReturnStatus status, int opFlags, char *name, 
			int nameLen, int fileNumber, 
			Fsdm_FileDescriptor *fileDescPtr, int dirFileNumber, 
			int dirOffset, Fsdm_FileDescriptor *dirFileDescPtr));


extern void Lfs_Init _ARGS_((void));
extern ReturnStatus Lfs_Command _ARGS_((int command, int bufSize, 
				       Address buffer));
#else /* SPRITED_LOCALDISK */

/* 
 * "Return" an error code if somebody tries to invoke Lfs_Command. 
 */
#define Lfs_Command(command, bufSize, buffer)	FS_INVALID_ARG

#endif

#endif /* _LFS */

@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
 * $Header: /sprite/src/kernel/lfs/RCS/lfs.h,v 1.4 91/01/09 12:16:31 mendel Exp $ SPRITE (Berkeley)
d23 1
d25 1
d35 1
d92 8
@
