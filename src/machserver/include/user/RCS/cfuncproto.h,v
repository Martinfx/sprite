head     1.4;
branch   ;
access   ;
symbols  srv030:1.4 srv027:1.4 srv026:1.4 srv024:1.4 srv021:1.4 srv019:1.4 srv018:1.4 srv016:1.4 srv014:1.4 srv010:1.4 srv008:1.4 srv007:1.4 srv006:1.4 srv005:1.4 srv004:1.4 srv003:1.4 srv002:1.4 srv001:1.4;
locks    ; strict;
comment  @ * @;


1.4
date     91.12.12.22.27.01;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     91.12.01.22.19.30;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.07.14.18.40;  author kupfer;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.06.23.58.34;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Lint doesn't understand void pointers, either.
@
text
@/*
 * cfuncproto.h --
 *
 *	Declarations of a macro supporting Ansi-C function prototypes in
 *	Sprite. This macro allow function prototypes to be defined 
 *	such that the code works on both standard and K&R C.
 *
 * Copyright 1990 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /r3/kupfer/spriteserver/include/user/RCS/cfuncproto.h,v 1.3 91/12/01 22:19:30 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
 */

#ifndef _CFUNCPROTO
#define _CFUNCPROTO

/*
 * Definition of the _ARGS_ macro.  The _ARGS_ macro such be used to 
 * enclose the argument list of a function prototype.  For example, the
 * function:
 * extern int main(argc, argv)
 *	int args;
 * 	char **argv;
 *
 * Would have a prototype of:
 *
 * extern int main _ARGS_((int argc, char **argv))
 *
 * Currently the macro uses the arguments only when compiling the
 * KERNEL or Sprite server with a standard C compiler.
 */

#ifndef _ASM

#if (defined(KERNEL) || defined(SPRITED)) && defined(__STDC__)
#define _HAS_PROTOTYPES
#define _HAS_VOIDPTR
#endif

#ifdef lint
#undef _HAS_CONST
#undef _HAS_VOIDPTR
#endif

#if defined(__cplusplus)
#define _EXTERN         extern "C"
#define _NULLARGS	(void) 
#define _HAS_PROTOTYPES
#define _HAS_VOIDPTR
#define _HAS_CONST
#else 
#define _EXTERN         extern
#define _NULLARGS	() 
#endif

#if defined(_HAS_PROTOTYPES) && !defined(lint)
#define	_ARGS_(x)	x
#else
#define	_ARGS_(x)	()
#endif

#ifdef _HAS_CONST
#define _CONST          const
#else
#define _CONST
#endif

#ifdef _HAS_VOIDPTR
typedef void *_VoidPtr;
#else
typedef char *_VoidPtr;
#endif

#endif /* _ASM */
#endif /* _CFUNCPROTO */

@


1.3
log
@Lint doesn't understand "const".
@
text
@d17 1
a17 1
 * $Header: /r3/kupfer/spriteserver/include/user/RCS/cfuncproto.h,v 1.2 91/10/07 14:18:40 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d48 1
@


1.2
log
@Special-case the Sprite server the same way we special-case the kernel.
@
text
@d17 1
a17 1
 * $Header: /r3/kupfer/spriteserver/include/user/RCS/cfuncproto.h,v 1.1 91/10/06 23:58:34 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d44 4
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
 * $Header: /sprite/src/lib/include/RCS/cfuncproto.h,v 1.5 91/02/12 14:48:28 jhh Exp $ SPRITE (Berkeley)
d36 1
a36 1
 * KERNEL with a standard C compiler.
d41 1
a41 1
#if defined(KERNEL) && defined(__STDC__)
@
