head     1.4;
branch   ;
access   ;
symbols  sprited:1.4.1;
locks    ; strict;
comment  @ * @;


1.4
date     90.09.11.14.30.07;  author kupfer;  state Exp;
branches 1.4.1.1;
next     1.3;

1.3
date     89.12.11.13.41.09;  author rab;  state Exp;
branches ;
next     1.2;

1.2
date     89.01.16.09.28.45;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.19.14.31.10;  author ouster;  state Exp;
branches ;
next     ;

1.4.1.1
date     92.03.13.15.43.24;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Use function prototypes.  Lint.
@
text
@/*
 * compatInt.h --
 *
 *	Declarations of routines used to implement Unix system calls
 *	in terms of Sprite ones.  When Sprite gets converted to
 *	implement the Unix system calls directly, this file should
 *	go away.
 *
 * Copyright 1986, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Compat: proto.h,v 1.3 86/02/14 09:47:40 ouster Exp $ SPRITE (Berkeley)
 */

#ifndef _COMPATINT
#define _COMPATINT

#include "sprite.h"

/*
 * UNIX_ERROR is the value Unix system calls return upon error.
 * UNIX_SUCCESS is the value Unix system calls return if they don't
 * return anything interesting and there has been no error.
 */

#define UNIX_ERROR (-1)
#define UNIX_SUCCESS 0

/*
 * Unix error code is stored in external variable errno.
 */

extern int errno;

/*
 * Define a few routines to map Sprite constants to Unix and vice-versa.
 */

extern ReturnStatus 
    Compat_UnixSignalToSprite _ARGS_((int signal, int *spriteSigPtr));
extern ReturnStatus
    Compat_SpriteSignalToUnix _ARGS_((int signal, int *unixSigPtr));
extern ReturnStatus
    Compat_UnixSigMaskToSprite _ARGS_((int unixMask, int *spriteMaskPtr));
extern ReturnStatus
    Compat_SpriteSigMaskToUnix _ARGS_((int SpriteMask, int *UnixMaskPtr));
extern ReturnStatus
    Compat_GetSigHoldMask _ARGS_((int *maskPtr));

#endif /* _COMPATINT */
@


1.4.1.1
log
@Initial branch for Sprite server.
@
text
@@


1.3
log
@Put some parens around -1.
@
text
@d45 10
a54 6
extern int	    Compat_MapCode();
extern ReturnStatus Compat_UnixSignalToSprite();
extern ReturnStatus Compat_SpriteSignalToUnix();
extern ReturnStatus Compat_UnixSigMaskToSprite();
extern ReturnStatus Compat_SpriteSigMaskToUnix();
extern ReturnStatus Compat_GetSigMask();
@


1.2
log
@Give Compat_MapCode the correct type.
@
text
@d32 1
a32 1
#define UNIX_ERROR -1
d52 1
a52 1
#endif _COMPATINT
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
extern ReturnStatus Compat_MapCode();
@
