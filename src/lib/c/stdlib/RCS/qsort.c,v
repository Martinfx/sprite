head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     89.03.22.00.47.21;  author rab;  state Exp;
branches ;
next     1.4;

1.4
date     88.08.29.08.54.58;  author ouster;  state Exp;
branches ;
next     1.3;

1.3
date     88.05.25.13.44.41;  author ouster;  state Exp;
branches ;
next     1.2;

1.2
date     88.05.23.08.38.56;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.05.21.14.46.03;  author ouster;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@*** empty log message ***
@
text
@/* 
 * qsort.c --
 *
 *	Source code for the library routine "qsort".  Taken
 *	from BSD.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/lib/c/stdlib/RCS/qsort.c,v 1.4 88/08/29 08:54:58 ouster Exp Locker: rab $ SPRITE (Berkeley)";
#endif /* not lint */

#include <stdlib.h>

/*
 * qsort.c:
 * Our own version of the system qsort routine which is faster by an average
 * of 25%, with lows and highs of 10% and 50%.
 * The THRESHold below is the insertion sort threshold, and has been adjusted
 * for records of size 48 bytes.
 * The MTHREShold is where we stop finding a better median.
 */

#define         THRESH          4               /* threshold for insertion */
#define         MTHRESH         6               /* threshold for median */

static  int             (*qcmp)();              /* the comparison routine */
static  int             qsz;                    /* size of each record */
static  int             thresh;                 /* THRESHold in chars */
static  int             mthresh;                /* MTHRESHold in chars */
static  void            qst();
/*
 * qsort:
 * First, set up some global parameters for qst to share.  Then, quicksort
 * with qst(), and then a cleanup insertion sort ourselves.  Sound simple?
 * It's not...
 */

void
qsort(base, n, size, compar)
        char    *base;
        int     n;
        int     size;
        int     (*compar)();
{
        register char c, *i, *j, *lo, *hi;
        char *min, *max;

        if (n <= 1)
                return;
        qsz = size;
        qcmp = compar;
        thresh = qsz * THRESH;
        mthresh = qsz * MTHRESH;
        max = base + n * qsz;
        if (n >= THRESH) {
                qst(base, max);
                hi = base + thresh;
        } else {
                hi = max;
        }
        /*
         * First put smallest element, which must be in the first THRESH, in
         * the first position as a sentinel.  This is done just by searching
         * the first THRESH elements (or the first n if n < THRESH), finding
         * the min, and swapping it into the first position.
         */
        for (j = lo = base; (lo += qsz) < hi; )
                if (qcmp(j, lo) > 0)
                        j = lo;
        if (j != base) {
                /* swap j into place */
                for (i = base, hi = base + qsz; i < hi; ) {
                        c = *j;
                        *j++ = *i;
                        *i++ = c;
                }
        }
        /*
         * With our sentinel in place, we now run the following hyper-fast
         * insertion sort.  For each remaining element, min, from [1] to [n-1],
         * set hi to the index of the element AFTER which this one goes.
         * Then, do the standard insertion sort shift on a character at a time
         * basis for each element in the frob.
         */
        for (min = base; (hi = min += qsz) < max; ) {
                while (qcmp(hi -= qsz, min) > 0)
                        /* void */;
                if ((hi += qsz) != min) {
                        for (lo = min + qsz; --lo >= min; ) {
                                c = *lo;
                                for (i = j = lo; (j -= qsz) >= hi; i = j)
                                        *i = *j;
                                *i = c;
                        }
                }
        }
}

/*
 * qst:
 * Do a quicksort
 * First, find the median element, and put that one in the first place as the
 * discriminator.  (This "median" is just the median of the first, last and
 * middle elements).  (Using this median instead of the first element is a big
 * win).  Then, the usual partitioning/swapping, followed by moving the
 * discriminator into the right place.  Then, figure out the sizes of the two
 * partions, do the smaller one recursively and the larger one via a repeat of
 * this code.  Stopping when there are less than THRESH elements in a partition
 * and cleaning up with an insertion sort (in our caller) is a huge win.
 * All data swaps are done in-line, which is space-losing but time-saving.
 * (And there are only three places where this is done).
 */

static void
qst(base, max)
        char *base, *max;
{
        register char c, *i, *j, *jj;
        register int ii;
        char *mid, *tmp;
        int lo, hi;

        /*
         * At the top here, lo is the number of characters of elements in the
         * current partition.  (Which should be max - base).
         * Find the median of the first, last, and middle element and make
         * that the middle element.  Set j to largest of first and middle.
         * If max is larger than that guy, then it's that guy, else compare
         * max with loser of first and take larger.  Things are set up to
         * prefer the middle, then the first in case of ties.
         */
        lo = max - base;                /* number of elements as chars */
        do      {
                mid = i = base + qsz * ((lo / qsz) >> 1);
                if (lo >= mthresh) {
                        j = (qcmp((jj = base), i) > 0 ? jj : i);
                        if (qcmp(j, (tmp = max - qsz)) > 0) {
                                /* switch to first loser */
                                j = (j == jj ? i : jj);
                                if (qcmp(j, tmp) < 0)
                                        j = tmp;
                        }
                        if (j != i) {
                                ii = qsz;
                                do      {
                                        c = *i;
                                        *i++ = *j;
                                        *j++ = c;
                                } while (--ii);
                        }
                }
                /*
                 * Semi-standard quicksort partitioning/swapping
                 */
                for (i = base, j = max - qsz; ; ) {
                        while (i < mid && qcmp(i, mid) <= 0)
                                i += qsz;
                        while (j > mid) {
                                if (qcmp(mid, j) <= 0) {
                                        j -= qsz;
                                        continue;
                                }
                                tmp = i + qsz;  /* value of i after swap */
                                if (i == mid) {
                                        /* j <-> mid, new mid is j */
                                        mid = jj = j;
                                } else {
                                        /* i <-> j */
                                        jj = j;
                                        j -= qsz;
                                }
                                goto swap;
                        }
                        if (i == mid) {
                                break;
                        } else {
                                /* i <-> mid, new mid is i */
                                jj = mid;
                                tmp = mid = i;  /* value of i after swap */
                                j -= qsz;
                        }
                swap:
                        ii = qsz;
                        do      {
                                c = *i;
                                *i++ = *jj;
                                *jj++ = c;
                        } while (--ii);
                        i = tmp;
                }
                /*
                 * Look at sizes of the two partitions, do the smaller
                 * one first by recursion, then do the larger one by
                 * making sure lo is its size, base and max are update
                 * correctly, and branching back.  But only repeat
                 * (recursively or by branching) if the partition is
                 * of at least size THRESH.
                 */
                i = (j = mid) + qsz;
                if ((lo = j - base) <= (hi = max - i)) {
                        if (lo >= thresh)
                                qst(base, j);
                        base = i;
                        lo = hi;
                } else {
                        if (hi >= thresh)
                                qst(i, max);
                        max = j;
                }
        } while (lo >= thresh);
}
@


1.4
log
@Change type from void to none.
@
text
@d18 2
a19 2
static char rcsid[] = "$Header: qsort.c,v 1.3 88/05/25 13:44:41 ouster Exp $ SPRITE (Berkeley)";
#endif not lint
d21 2
d39 1
a39 1

d47 1
d123 1
a123 1
static
@


1.3
log
@It's free code after all.  Change copyright notice again.
@
text
@d18 1
a18 1
static char rcsid[] = "$Header: qsort.c,v 1.2 88/05/23 08:38:56 ouster Exp $ SPRITE (Berkeley)";
a44 1
void
@


1.2
log
@Change copyright notice.
@
text
@d7 8
a14 4
 * Copyright (c) 1980 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 * This code may have AT&T roots and cannot be distributed freely.
d18 1
a18 1
static char rcsid[] = "$Header: qsort.c,v 1.1 88/05/21 14:46:03 ouster Exp $ SPRITE (Berkeley)";
@


1.1
log
@Initial revision
@
text
@d7 4
a10 8
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
d14 1
a14 1
static char rcsid[] = "$Header: proto.c,v 1.2 88/03/11 08:39:08 ouster Exp $ SPRITE (Berkeley)";
@
