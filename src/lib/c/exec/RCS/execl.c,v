head     1.4;
branch   ;
access   ;
symbols  sprited:1.4.1;
locks    ; strict;
comment  @ * @;


1.4
date     88.07.28.17.41.41;  author ouster;  state Exp;
branches 1.4.1.1;
next     1.3;

1.3
date     88.07.25.10.49.49;  author ouster;  state Exp;
branches ;
next     1.2;

1.2
date     88.07.11.15.40.31;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.19.16.55.57;  author ouster;  state Exp;
branches ;
next     ;

1.4.1.1
date     92.06.08.22.52.30;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.4
log
@Add #ifdefs to generate correct lint library.
@
text
@/* 
 * execl.c --
 *
 *	Source code for the execl library procedure.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: execl.c,v 1.3 88/07/25 10:49:49 ouster Exp $ SPRITE (Berkeley)";
#endif not lint

#include <stdlib.h>
#include <varargs.h>

/*
 * Library imports:
 */

extern char **environ;
extern execve();
extern char **_ExecArgs();


/*
 *----------------------------------------------------------------------
 *
 * execl --
 *
 *	Execute a process, using the current environment variable,
 *	instead of an explicitly-supplied one, and with arguments
 *	in-line instead of in a separate array.
 *
 * Results:
 *	This procedure returns only if the exec fails.  In this case
 *	the return value is -1.
 *
 * Side effects:
 *	Overlays the current process with a new image.  See the man
 *	page for details.
 *
 *----------------------------------------------------------------------
 */

#ifndef lint
int
execl(va_alist)
    va_dcl			/* Name of file containing program to exec,
				 * followed by one or more arguments of type
				 * "char *", terminated by a zero argument. */
{
    char **argv;
    char *name;
    va_list args;

    va_start(args);
    name = va_arg(args, char *);
    argv = _ExecArgs(&args);
    execve(name, argv, environ);
    free((char *) argv);
    return -1;
}
#else
/* VARARGS2 */
/* ARGSUSED */
int
execl(file, arg1)
    char *file;
    char *arg1;
{
    return 0;
}
#endif
@


1.4.1.1
log
@Initial branch for Sprite server.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: /sprite/src/lib/c/exec/RCS/execl.c,v 1.4 88/07/28 17:41:41 ouster Exp $ SPRITE (Berkeley)";
@


1.3
log
@Lint.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: execl.c,v 1.2 88/07/11 15:40:31 ouster Exp $ SPRITE (Berkeley)";
d52 1
a52 1
	/* VARARGS0 */
d70 11
@


1.2
log
@When using varargs, only have a single argument in the list.
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: execl.c,v 1.1 88/06/19 16:55:57 ouster Exp $ SPRITE (Berkeley)";
d20 1
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
static char rcsid[] = "$Header: proto.c,v 1.2 88/03/11 08:39:08 ouster Exp $ SPRITE (Berkeley)";
d51 1
d53 4
a56 4
execl(name, va_alist)
    char *name;			/* Name of file containing program to exec. */
    va_dcl			/* One or more arguments of type "char *",
				 * terminated by a zero argument. */
d59 1
d63 1
@
