head     2.2;
branch   ;
access   ;
symbols  no-auto-remigrate:2.1 installed:2.0;
locks    ; strict;
comment  @ * @;


2.2
date     90.09.24.14.46.48;  author douglis;  state Exp;
branches ;
next     2.1;

2.1
date     90.06.22.14.58.24;  author douglis;  state Exp;
branches ;
next     2.0;

2.0
date     90.03.10.13.12.55;  author douglis;  state Stable;
branches ;
next     1.1;

1.1
date     90.02.16.14.29.53;  author douglis;  state Exp;
branches ;
next     ;


desc
@Source code for the Mig_ReturnHosts procedure.
This procedure returns the specified hosts to the
pool of idle hosts.
@


2.2
log
@added callback flag to MigHostCache to make it easier to flag all hosts as reclaimed after error
@
text
@/* 
 * Mig_ReturnHosts.c --
 *
 *	Source code for the Mig_ReturnHosts procedure.
 *	This procedure returns the specified hosts to the
 *	pool of idle hosts.
 *
 * Copyright 1990 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */

#ifndef lint
static char rcsid[] = "$Header: /sprite/src/lib/c/mig/RCS/Mig_ReturnHosts.c,v 2.1 90/06/22 14:58:24 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
#endif not lint


#include <sprite.h>
#include <mig.h>
#include <host.h>
#include <errno.h>
#include <stdio.h>
#include "migInt.h"

extern int errno;
extern char *strerror();
extern char *malloc();


/*
 *----------------------------------------------------------------------
 *
 * Mig_ReturnHosts --
 *
 *	Return hosts to the pool of idle hosts.  
 *
 * Results:
 *	A non-zero status indicates an error, in which case errno reflects
 *	the error from the migration daemon.
 *
 * Side effects:
 *      None.
 *
 *----------------------------------------------------------------------
 */
int
Mig_ReturnHosts(numHosts, hostArray)
    int numHosts;		/* Number of hosts to return, or
				 * MIG_ALL_HOSTS. */
    int *hostArray;		/* Array of hostIDs, or NULL if all hosts. */
{
    int status;			/* Status of system calls. */
    int dummyArray[1];		/* Array used in the event of all hosts being
				 * returned. */
    int *arrayPtr;		/* Pointer specifying which array to use. */
    int size;			/* Size of buffer for ioctl. */
    int i;			/* Counter. */
    int actualHosts;		/* Number of hosts we really want to return. */
    int *allocArray;		/* Array used in the event of specific hosts
				   being returned.  */


    if (mig_GlobalPdev < 0) {
	errno = EINVAL;
	return(-1);
    }
    if (numHosts <= 0 && hostArray != (int *) NULL) {
	errno = EINVAL;
	return(-1);
    }

    if (hostArray == (int *) NULL) {
	MigHostCache(0, MIG_CACHE_REMOVE_ALL);
	arrayPtr = dummyArray;
	allocArray = (int *) NULL;
	dummyArray[0] = MIG_ALL_HOSTS;
	size = sizeof(int);
    } else {
	allocArray = (int *) malloc(numHosts * sizeof(int));
	if (allocArray == (int *) NULL) {
	    errno = ENOMEM;
	    return(-1);
	}
	for (i = 0, actualHosts = 0; i < numHosts; i++) {
	    int host = hostArray[i];
	    if (Mig_ConfirmIdle(host) &&
		MigHostCache(host, MIG_CACHE_REMOVE, FALSE)) {
		allocArray[actualHosts] = host;
		actualHosts++;
	    }
	}
	if (actualHosts == 0) {
	    return(0);
	}
	arrayPtr = allocArray;
	size = actualHosts * sizeof(int);
    }
    if (MigSetAlarm() < 0) {
	fprintf(stderr,
		"Error setting alarm for contact with migd.\n");
	return(-1);
    }
    status = Fs_IOControl(mig_GlobalPdev, IOC_MIG_DONE,
			  size, (char *) arrayPtr, 0, (char *) NULL);
    if (MigClearAlarm() < 0) {
	fprintf(stderr,
		"Error clearing alarm for contact with migd.\n");
    }
    if (allocArray != (int *) NULL) {
	free((char *) allocArray);
    }
    if (status != SUCCESS) {
	fprintf(stderr,
	       "Mig_ReturnHosts: error during ioctl to global master: %s\n",
	       Stat_GetMsg(status));
	errno = Compat_MapCode(status);
	return(-1);
    }
    return(0);
}
@


2.1
log
@changes for alarms for timeouts with migd and for printing to stderr instead of syslog
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/lib/c/mig/RCS/Mig_ReturnHosts.c,v 2.0 90/03/10 13:12:55 douglis Stable Locker: douglis $ SPRITE (Berkeley)";
d92 1
a92 1
		MigHostCache(host, MIG_CACHE_REMOVE)) {
@


2.0
log
@Changing version numbers.
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /sprite/src/lib/c/mig/RCS/Mig_ReturnHosts.c,v 1.1 90/02/16 14:29:53 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
a24 1
#include <syslog.h>
d103 5
d110 4
d118 1
a118 1
	syslog(LOG_WARNING,
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char rcsid[] = "$Header: /user2/douglis/pdev_mig/mig_p/RCS/Mig_ReturnHosts.c,v 1.2 90/02/08 20:22:53 douglis Exp Locker: douglis $ SPRITE (Berkeley)";
@
