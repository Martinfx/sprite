head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     89.06.15.14.52.43;  author ouster;  state Exp;
branches ;
next     1.2;

1.2
date     88.07.28.17.48.03;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.07.02.16.49.42;  author ouster;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Make signal handlers return void instead of int.
@
text
@/*
 * Copyright (c) 1985 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)signal.c	5.2 (Berkeley) 3/9/86";
#endif LIBC_SCCS and not lint

/*
 * Almost backwards compatible signal.
 */
#include <signal.h>

void (*
signal(s, a))()
	int s;
	void (*a)();
{
	struct sigvec osv, sv;
	static int mask[NSIG];
	static int flags[NSIG];

	sv.sv_handler = a;
	sv.sv_mask = mask[s];
	sv.sv_flags = flags[s];
	if (sigvec(s, &sv, &osv) < 0)
		return (BADSIG);
	if (sv.sv_mask != osv.sv_mask || sv.sv_flags != osv.sv_flags) {
		mask[s] = sv.sv_mask = osv.sv_mask;
		flags[s] = sv.sv_flags = osv.sv_flags;
		if (sigvec(s, &sv, (struct sigvec *) 0) < 0)
			return (BADSIG);
	}
	return (osv.sv_handler);
}
@


1.2
log
@Lint.
@
text
@d16 1
a16 1
int (*
d18 2
a19 1
	int s, (*a)();
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
		if (sigvec(s, &sv, 0) < 0)
@
