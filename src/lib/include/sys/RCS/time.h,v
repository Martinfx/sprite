head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     91.06.10.17.21.45;  author kupfer;  state Exp;
branches ;
next     1.4;

1.4
date     91.03.12.12.15.04;  author kupfer;  state Exp;
branches ;
next     1.3;

1.3
date     89.07.14.09.15.34;  author rab;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.29.14.48.19;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.21.16.12.56;  author ouster;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@Add prototypes for getitimer, setitimer, and utimes.
@
text
@/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 *	@@(#)time.h	7.1 (Berkeley) 6/4/86
 * $Header$
 */

#ifndef _SYSTIME
#define _SYSTIME

#include <cfuncproto.h>

/*
 * Structure returned by gettimeofday(2) system call,
 * and used in other calls.
 */
struct timeval {
	long	tv_sec;		/* seconds */
	long	tv_usec;	/* and microseconds */
};

struct timezone {
	int	tz_minuteswest;	/* minutes west of Greenwich */
	int	tz_dsttime;	/* type of dst correction */
};
#define	DST_NONE	0	/* not on dst */
#define	DST_USA		1	/* USA style dst */
#define	DST_AUST	2	/* Australian style dst */
#define	DST_WET		3	/* Western European dst */
#define	DST_MET		4	/* Middle European dst */
#define	DST_EET		5	/* Eastern European dst */
#define	DST_CAN		6	/* Canada */

/*
 * Operations on timevals.
 *
 * NB: timercmp does not work for >= or <=.
 */
#define	timerisset(tvp)		((tvp)->tv_sec || (tvp)->tv_usec)
#define	timercmp(tvp, uvp, cmp)	\
	((tvp)->tv_sec cmp (uvp)->tv_sec || \
	 (tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp (uvp)->tv_usec)
#define	timerclear(tvp)		(tvp)->tv_sec = (tvp)->tv_usec = 0

/*
 * Names of the interval timers, and structure
 * defining a timer setting.
 */
#define	ITIMER_REAL	0
#define	ITIMER_VIRTUAL	1
#define	ITIMER_PROF	2

struct	itimerval {
	struct	timeval it_interval;	/* timer interval */
	struct	timeval it_value;	/* current value */
};

#ifndef KERNEL
#include <time.h>
#endif

_EXTERN int	getitimer _ARGS_((int timer, struct itimerval *valuePtr));
_EXTERN int	gettimeofday _ARGS_ ((struct timeval *tvPtr,
				      struct timezone *tzPtr));
_EXTERN int	settimeofday _ARGS_ ((_CONST struct timeval *tvPtr,
				      _CONST struct timezone *tzPtr));
_EXTERN int	setitimer _ARGS_((int timer, _CONST struct itimerval *newPtr,
				  struct itimerval *oldPtr));
_EXTERN int	utimes _ARGS_((_CONST char *file,
			       _CONST struct timeval *tvPtr));

#endif /* _SYSTIME */
@


1.4
log
@Add prototypes for gettimeofday and settimeofday.
@
text
@d7 1
d64 1
d69 4
@


1.3
log
@*** empty log message ***
@
text
@d12 2
d62 5
@


1.2
log
@Add ifdefs to prevent files from being included multiple times.
@
text
@d61 1
a61 1
#endif _SYSTIME
@


1.1
log
@Initial revision
@
text
@d9 3
d60 2
@
