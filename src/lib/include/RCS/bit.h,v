head     1.5;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.5
date     91.07.26.17.13.33;  author mendel;  state Exp;
branches ;
next     1.4;

1.4
date     89.06.23.11.29.36;  author rab;  state Exp;
branches ;
next     1.3;

1.3
date     88.07.28.17.22.25;  author ouster;  state Exp;
branches ;
next     1.2;

1.2
date     88.07.22.15.39.31;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.21.09.36.46;  author ouster;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@Added function prototypes
@
text
@/*
 * bit.h --
 *
 *	Definition of macros for setting and clearing bits in an array
 *	of integers.
 *
 *	It is assumed that "int" is 32 bits wide.
 *
 * Copyright 1987, 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/lib/include/RCS/bit.h,v 1.4 89/06/23 11:29:36 rab Exp Locker: mendel $ SPRITE (Berkeley)
 */

#ifndef _BIT
#define _BIT

#ifndef _SPRITE
#include "sprite.h"
#endif
#include <cfuncproto.h>
#include <bstring.h>

#define BIT_NUM_BITS_PER_INT	32
#define BIT_NUM_BITS_PER_BYTE	8

#define Bit_NumInts(numBits)	\
	(((numBits)+BIT_NUM_BITS_PER_INT -1)/BIT_NUM_BITS_PER_INT)

#define Bit_NumBytes(numBits)	\
	(Bit_NumInts(numBits) * sizeof(int))

#define Bit_Alloc(numBits, bitArrayPtr)  	\
        bitArrayPtr = (int *) malloc((unsigned) Bit_NumBytes(numBits)); \
        Bit_Zero((numBits), (bitArrayPtr))

#define Bit_Free(bitArrayPtr)	\
        free((char *)bitArrayPtr)

#define Bit_Set(numBits, bitArrayPtr) \
	((bitArrayPtr)[(numBits)/BIT_NUM_BITS_PER_INT] |= \
		(1 << ((numBits) % BIT_NUM_BITS_PER_INT)))

#define Bit_IsSet(numBits, bitArrayPtr) \
	((bitArrayPtr)[(numBits)/BIT_NUM_BITS_PER_INT] & \
		(1 << ((numBits) % BIT_NUM_BITS_PER_INT)))

#define Bit_Clear(numBits, bitArrayPtr) \
	((bitArrayPtr)[(numBits)/BIT_NUM_BITS_PER_INT] &= \
		~(1 << ((numBits) % BIT_NUM_BITS_PER_INT)))

#define Bit_IsClear(numBits, bitArrayPtr) \
	(!(Bit_IsSet((numBits), (bitArrayPtr))))

#define Bit_Copy(numBits, srcArrayPtr, destArrayPtr) \
	bcopy((char *) (srcArrayPtr), (char *) (destArrayPtr), \
		Bit_NumBytes(numBits))

#define Bit_Zero(numBits, bitArrayPtr) \
	bzero((char *) (bitArrayPtr), Bit_NumBytes(numBits))

extern int	  Bit_FindFirstSet _ARGS_((int numBits, int *arrayPtr));
extern int	  Bit_FindFirstClear _ARGS_((int numBits, int *arrayPtr));
extern Boolean	  Bit_Intersect _ARGS_((int numBits, int *src1Ptr, int *src2Ptr, int *destPtr));
extern Boolean 	  Bit_Union _ARGS_((int numBits, int *src1Ptr, int *src2Ptr, int *destPtr));
extern Boolean 	  Bit_AnySet _ARGS_((int numBits, int *maskPtr));
extern int  	  *Bit_Expand _ARGS_((int newNumBits, int oldNumBits, int *oldBitPtr));
	 
#endif /* _BIT */
@


1.4
log
@*** empty log message ***
@
text
@d18 1
a18 1
 * $Header: /sprite/src/lib/include/RCS/bit.h,v 1.3 88/07/28 17:22:25 ouster Exp Locker: rab $ SPRITE (Berkeley)
d27 2
d68 6
a73 6
extern int	  Bit_FindFirstSet();
extern int	  Bit_FindFirstClear();
extern Boolean	  Bit_Intersect();
extern Boolean 	  Bit_Union();
extern Boolean 	  Bit_AnySet();
extern int  	  *Bit_Expand();
@


1.3
log
@Lint.
@
text
@d18 1
a18 1
 * $Header: bit.h,v 1.2 88/07/22 15:39:31 ouster Exp $ SPRITE (Berkeley)
d73 1
a73 1
#endif _BIT
@


1.2
log
@Exterminate Mem_Alloc usage.
@
text
@d18 1
a18 1
 * $Header: bit.h,v 1.1 88/06/21 09:36:46 ouster Exp $ SPRITE (Berkeley)
d38 1
a38 1
        bitArrayPtr = (int *) malloc(Bit_NumBytes(numBits)); \
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 * $Header: bit.h,v 1.1 88/06/19 14:34:52 ouster Exp $ SPRITE (Berkeley)
d38 1
a38 1
        bitArrayPtr = (int *)Mem_Alloc(Bit_NumBytes(numBits)); \
@
