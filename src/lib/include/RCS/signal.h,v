head     1.14;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.14
date     91.10.24.17.49.43;  author rab;  state Exp;
branches ;
next     1.13;

1.13
date     91.10.24.17.34.16;  author rab;  state Exp;
branches ;
next     1.12;

1.12
date     91.09.05.21.54.04;  author shirriff;  state Exp;
branches ;
next     1.11;

1.11
date     91.05.30.13.22.03;  author shirriff;  state Exp;
branches ;
next     1.10;

1.10
date     90.12.18.18.39.43;  author kupfer;  state Exp;
branches ;
next     1.9;

1.9
date     90.09.10.16.14.22;  author kupfer;  state Exp;
branches ;
next     1.8;

1.8
date     89.06.15.12.53.40;  author ouster;  state Exp;
branches ;
next     1.7;

1.7
date     89.06.15.11.55.37;  author ouster;  state Exp;
branches ;
next     1.6;

1.6
date     89.03.06.15.15.28;  author rab;  state Exp;
branches ;
next     1.5;

1.5
date     88.10.20.15.26.13;  author ouster;  state Exp;
branches ;
next     1.4;

1.4
date     88.09.08.15.36.17;  author ouster;  state Exp;
branches ;
next     1.3;

1.3
date     88.06.29.14.57.54;  author ouster;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.21.16.46.25;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.21.16.42.09;  author ouster;  state Exp;
branches ;
next     ;


desc
@@


1.14
log
@Deleted my previous changes because it was the wrong way to fix the problem.
@
text
@/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 *	@@(#)signal.h	7.3 (Berkeley) 5/14/88
 * $Header: /sprite/src/lib/include/RCS/signal.h,v 1.13 91/10/24 17:34:16 rab Exp Locker: rab $
 */

#ifndef _SIGNAL
#define _SIGNAL

#include <cfuncproto.h>
#include <machSignal.h>

#ifndef	NSIG
#define NSIG	32
#endif

#define	SIGHUP	1	/* hangup */
#define	SIGINT	2	/* interrupt */
#define	SIGQUIT	3	/* quit */
#define	SIGILL	4	/* illegal instruction (not reset when caught) */
#define	SIGTRAP	5	/* trace trap (not reset when caught) */
#define	SIGIOT	6	/* IOT instruction */
#define	SIGABRT	SIGIOT	/* compatibility */
#define	SIGEMT	7	/* EMT instruction */
#define	SIGFPE	8	/* floating point exception */
#define	SIGKILL	9	/* kill (cannot be caught or ignored) */
#define	SIGBUS	10	/* bus error */
#define	SIGSEGV	11	/* segmentation violation */
#define	SIGSYS	12	/* bad argument to system call */
#define	SIGPIPE	13	/* write on a pipe with no one to read it */
#define	SIGALRM	14	/* alarm clock */
#define	SIGTERM	15	/* software termination signal from kill */
#define	SIGURG	16	/* urgent condition on IO channel */
#define	SIGSTOP	17	/* sendable stop signal not from tty */
#define	SIGTSTP	18	/* stop signal from tty */
#define	SIGCONT	19	/* continue a stopped process */
#define	SIGCHLD	20	/* to parent on child stop or exit */
#define	SIGCLD	SIGCHLD	/* compatibility */
#define	SIGTTIN	21	/* to readers pgrp upon background tty read */
#define	SIGTTOU	22	/* like TTIN for output if (tp->t_local&LTOSTOP) */
#define	SIGIO	23	/* input/output possible signal */
#define	SIGXCPU	24	/* exceeded CPU time limit */
#define	SIGXFSZ	25	/* exceeded file size limit */
#define	SIGVTALRM 26	/* virtual time alarm */
#define	SIGPROF	27	/* profiling time alarm */
#define SIGWINCH 28	/* window size changes */
#define SIGUSR1 30	/* user defined signal 1 */
#define SIGUSR2 31	/* user defined signal 2 */

/*
 * Special Sprite signals:
 */

#define SIGDEBUG 3	/* debug (same as quit in Sprite) */
#define SIGMIG	10	/* migrate process */
#define SIGMIGHOME 29	/* migrate process back to home node */

#ifndef KERNEL
/* 
 * This is taken more or less from K&R 2nd ed., section B9.  Recall 
 * that signal() returns the previous handler.
 */
extern void (*signal _ARGS_((int sig,
			     void (*handler)(int sig)))) _ARGS_((int sig));

extern int sigblock _ARGS_ ((int mask));
extern int sigpause _ARGS_ ((int mask));
extern int sigsetmask _ARGS_ ((int mask));
#endif

/*
 * Signal vector "template" used in sigvec call.
 */
struct	sigvec {
	void	(*sv_handler)();	/* signal handler */
	int	sv_mask;		/* signal mask to apply */
	int	sv_flags;		/* see signal options below */
};
#define SV_ONSTACK	0x0001	/* take signal on signal stack */
#define SV_INTERRUPT	0x0002	/* do not restart system on signal return */
#define sv_onstack sv_flags	/* isn't compatibility wonderful! */

/*
 * Structure used in sigstack call.
 */
struct	sigstack {
	char	*ss_sp;			/* signal stack pointer */
	int	ss_onstack;		/* current status */
};

#if 0
/*
 * This declaration has been moved to the machine dependent file
 * machSignal.h
 */

/*
 * Information pushed on stack when a signal is delivered.
 * This is used by the kernel to restore state following
 * execution of the signal handler.  On some systems it is also made
 * available to the handler to allow it to properly restore state if a
 * non-standard exit is performed.  However, user programs should not
 * rely on having access to this information.
 */
struct	sigcontext {
	int	sc_onstack;		/* sigstack state to restore */
	int	sc_mask;		/* signal mask to restore */
	int	sc_sp;			/* sp to restore */
	int	sc_fp;			/* fp to restore */
	int	sc_ap;			/* ap to restore */
	int	sc_pc;			/* pc to restore */
	int	sc_ps;			/* psl to restore */
};
#endif

#define	BADSIG		(void (*)())-1
#define	SIG_DFL		(void (*)())0
#define	SIG_IGN		(void (*)())1

#ifdef KERNEL
#define	SIG_CATCH	(void (*)())2
#define	SIG_HOLD	(void (*)())3
#endif

/*
 * Macro for converting signal number to a mask suitable for
 * sigblock().
 */
#define sigmask(m)	(1 << ((m)-1))

#endif /* _SIGNAL */
@


1.13
log
@Added definition of struct sigaction.
@
text
@d7 1
a7 1
 * $Header: /sprite/src/lib/include/RCS/signal.h,v 1.12 91/09/05 21:54:04 shirriff Exp Locker: rab $
a132 12

/*
 * If changes are made to sigset_t or struct sigaction, the same changes
 * must be made in /usr/include/signal.h as well.
 */
typedef int sigset_t;

struct  sigaction {
        void            (*sa_handler)();
        sigset_t        sa_mask;
        int             sa_flags;
};
@


1.12
log
@Added include of machSignal.h to get sigcontext declaration.
@
text
@d7 1
a7 1
 * $Header: /sprite/src/lib/include/RCS/signal.h,v 1.11 91/05/30 13:22:03 shirriff Exp Locker: shirriff $
d133 12
@


1.11
log
@Removed machine-dependent declaration.
@
text
@d7 1
a7 1
 * $Header: /sprite/src/lib/include/RCS/signal.h,v 1.10 90/12/18 18:39:43 kupfer Exp Locker: shirriff $
d14 1
@


1.10
log
@Add function prototypes for signal, sigblock, sigpause, and
sigsetmask.
@
text
@d7 1
a7 1
 * $Header$
d93 1
d95 5
d116 1
@


1.9
log
@Change comments for sigcontext to discourage user programmers from
using it.
@
text
@d7 1
d13 2
d61 10
a70 1
void	(*signal())();
@


1.8
log
@Didn't quite finish previous change.
@
text
@d84 4
a87 3
 * execution of the signal handler.  It is also made available
 * to the handler to allow it to properly restore state if
 * a non-standard exit is performed.
@


1.7
log
@Changed signal handlers from int () to void ().
@
text
@d98 3
a100 3
#define	BADSIG		(int (*)())-1
#define	SIG_DFL		(int (*)())0
#define	SIG_IGN		(int (*)())1
d103 2
a104 2
#define	SIG_CATCH	(int (*)())2
#define	SIG_HOLD	(int (*)())3
@


1.6
log
@Fixed #endif's.
@
text
@d58 1
a58 1
int	(*signal())();
d65 1
a65 1
	int	(*sv_handler)();	/* signal handler */
@


1.5
log
@Added Sprite-specific signals.
@
text
@d10 1
a11 1

d14 1
a105 1
#endif
d113 1
a113 1
#endif _KERNEL
@


1.4
log
@Eliminate code that isn't useful for sprite anyway.
@
text
@d48 8
@


1.3
log
@Add ifdefs so that file can't be processed twice.
@
text
@a14 8
#ifndef sprite
#ifdef KERNEL
#include "../machine/trap.h"	/* codes for SIGILL, SIGFPE */
#else
#include <machine/trap.h>	/* codes for SIGILL, SIGFPE */
#endif
#endif sprite

@


1.2
log
@Ignore machine/trap.h
@
text
@d9 3
d112 2
@


1.1
log
@Initial revision
@
text
@d12 1
d18 1
@
