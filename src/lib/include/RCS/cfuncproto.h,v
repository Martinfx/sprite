head     1.5;
branch   ;
access   ;
symbols  sprited:1.5.1;
locks    ; strict;
comment  @ * @;


1.5
date     91.02.12.14.48.28;  author jhh;  state Exp;
branches 1.5.1.1;
next     1.4;

1.4
date     91.02.12.14.47.11;  author jhh;  state Exp;
branches ;
next     1.3;

1.3
date     90.11.06.17.21.16;  author rab;  state Exp;
branches ;
next     1.2;

1.2
date     90.09.11.11.00.53;  author mendel;  state Exp;
branches ;
next     1.1;

1.1
date     90.08.20.16.52.45;  author mendel;  state Exp;
branches ;
next     ;

1.5.1.1
date     91.10.06.23.58.18;  author kupfer;  state Exp;
branches ;
next     ;


desc
@Macros for standard C function prototypes in Sprite.
@


1.5
log
@guess I was a little hasty in installing the last change
@
text
@/*
 * cfuncproto.h --
 *
 *	Declarations of a macro supporting Ansi-C function prototypes in
 *	Sprite. This macro allow function prototypes to be defined 
 *	such that the code works on both standard and K&R C.
 *
 * Copyright 1990 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/lib/include/RCS/cfuncproto.h,v 1.4 91/02/12 14:47:11 jhh Exp Locker: jhh $ SPRITE (Berkeley)
 */

#ifndef _CFUNCPROTO
#define _CFUNCPROTO

/*
 * Definition of the _ARGS_ macro.  The _ARGS_ macro such be used to 
 * enclose the argument list of a function prototype.  For example, the
 * function:
 * extern int main(argc, argv)
 *	int args;
 * 	char **argv;
 *
 * Would have a prototype of:
 *
 * extern int main _ARGS_((int argc, char **argv))
 *
 * Currently the macro uses the arguments only when compiling the
 * KERNEL with a standard C compiler.
 */

#ifndef _ASM

#if defined(KERNEL) && defined(__STDC__)
#define _HAS_PROTOTYPES
#define _HAS_VOIDPTR
#endif

#if defined(__cplusplus)
#define _EXTERN         extern "C"
#define _NULLARGS	(void) 
#define _HAS_PROTOTYPES
#define _HAS_VOIDPTR
#define _HAS_CONST
#else 
#define _EXTERN         extern
#define _NULLARGS	() 
#endif

#if defined(_HAS_PROTOTYPES) && !defined(lint)
#define	_ARGS_(x)	x
#else
#define	_ARGS_(x)	()
#endif

#ifdef _HAS_CONST
#define _CONST          const
#else
#define _CONST
#endif

#ifdef _HAS_VOIDPTR
typedef void *_VoidPtr;
#else
typedef char *_VoidPtr;
#endif

#endif /* _ASM */
#endif /* _CFUNCPROTO */

@


1.5.1.1
log
@Initial branch for Sprite server.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/lib/include/RCS/cfuncproto.h,v 1.5 91/02/12 14:48:28 jhh Exp $ SPRITE (Berkeley)
@


1.4
log
@don't use function prototypes if you are running lint.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/lib/include/RCS/cfuncproto.h,v 1.3 90/11/06 17:21:16 rab Exp $ SPRITE (Berkeley)
d57 1
a57 1
#ifdef _HAS_PROTOTYPES && !defined(lint)
@


1.3
log
@Changed extern to _EXTERN for g++.
@
text
@d17 1
a17 1
 * $Header: /sprite/src/lib/include/RCS/cfuncproto.h,v 1.2 90/09/11 11:00:53 mendel Exp Locker: rab $ SPRITE (Berkeley)
d57 1
a57 1
#ifdef _HAS_PROTOTYPES
@


1.2
log
@Fixed stupid macro bug.
@
text
@d17 1
a17 1
 * $Header: /sprite/lib/forms/RCS/proto.h,v 1.5 90/01/12 12:03:25 douglis Exp $ SPRITE (Berkeley)
d29 1
a29 1
 * 	char *argv[];
d33 1
a33 1
 * extern int main _ARGS_((int argc, char *argv[]))
d39 19
a57 1
#if defined(KERNEL) && defined(__STDC__) 
d63 13
@


1.1
log
@Initial revision
@
text
@d40 1
a40 1
#define	_ARGS_(x)	(x)
d42 1
a42 1
#define	_ARGS(x)	()
@
