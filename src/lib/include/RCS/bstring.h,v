head     1.6;
branch   ;
access   ;
symbols  sprited:1.4.1;
locks    ; strict;
comment  @ * @;


1.6
date     92.05.14.16.57.25;  author kupfer;  state Exp;
branches ;
next     1.5;

1.5
date     92.05.14.16.25.10;  author kupfer;  state Exp;
branches ;
next     1.4;

1.4
date     90.09.11.14.32.01;  author kupfer;  state Exp;
branches 1.4.1.1;
next     1.3;

1.3
date     90.08.29.20.54.59;  author kupfer;  state Exp;
branches ;
next     1.2;

1.2
date     89.06.23.11.29.33;  author rab;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.21.09.36.49;  author ouster;  state Exp;
branches ;
next     ;

1.4.1.1
date     91.09.09.22.58.14;  author kupfer;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@Don't use size_t, because it breaks existing code.  (I *knew* this
would happen!)
@
text
@/*
 * bstring.h --
 *
 *	Declarations of BSD library procedures for byte manipulation.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/lib/include/RCS/bstring.h,v 1.5 92/05/14 16:25:10 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
 */

#ifndef _BSTRING
#define _BSTRING

#include <cfuncproto.h>

/* 
 * Some of the int's below should be size_t.  Unfortunately, forcing 
 * bstring.h to include <sys/types.h> can break old code that does its own 
 * type declarations.
 */

extern int	bcmp _ARGS_((_CONST _VoidPtr sourcePtr,
			     _CONST _VoidPtr destPtr,
			     /* size_t */ int numBytes));
extern void	bcopy _ARGS_((_CONST _VoidPtr sourcePtr, _VoidPtr destPtr,
			      /* size_t */ int numBytes));
extern void	bzero _ARGS_((_VoidPtr destPtr, /* size_t */ int numBytes));
extern int	ffs _ARGS_((int i));

#endif /* _BSTRING */
@


1.5
log
@Fix the prototypes to use const and void pointers as appropriate.
(Shoulda got this right the first time.)
@
text
@d15 1
a15 1
 * $Header: /sprite/src/lib/include/RCS/bstring.h,v 1.4 90/09/11 14:32:01 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
a21 3
#ifdef _HAS_PROTOTYPES
#include <sys/types.h>
#endif
d23 6
d30 2
a31 1
			     _CONST _VoidPtr destPtr, size_t numBytes));
d33 2
a34 2
			      size_t numBytes));
extern void	bzero _ARGS_((_VoidPtr destPtr, size_t numBytes));
@


1.4
log
@bcopy and bzero return void.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/lib/include/RCS/bstring.h,v 1.3 90/08/29 20:54:59 kupfer Exp Locker: kupfer $ SPRITE (Berkeley)
d22 3
d26 5
a30 3
extern int	bcmp _ARGS_((char *sourcePtr, char *destPtr, int numBytes));
extern void	bcopy _ARGS_((char *sourcePtr, char *destPtr, int numBytes));
extern void	bzero _ARGS_((char *destPtr, int numBytes));
@


1.4.1.1
log
@Initial branch for Sprite server.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/lib/include/RCS/bstring.h,v 1.4 90/09/11 14:32:01 kupfer Exp $ SPRITE (Berkeley)
@


1.3
log
@Add function prototypes.  Doing it now because the kernel uses these
routines.
@
text
@d15 1
a15 1
 * $Header: /sprite/src/lib/include/RCS/bstring.h,v 1.2 89/06/23 11:29:33 rab Exp Locker: kupfer $ SPRITE (Berkeley)
d24 2
a25 2
extern int	bcopy _ARGS_((char *sourcePtr, char *destPtr, int numBytes));
extern int	bzero _ARGS_((char *destPtr, int numBytes));
@


1.2
log
@*** empty log message ***
@
text
@d15 1
a15 1
 * $Header: /sprite/src/lib/include/RCS/bstring.h,v 1.1 88/06/21 09:36:49 ouster Exp Locker: rab $ SPRITE (Berkeley)
d21 6
a26 4
extern int	bcmp();
extern int	bcopy();
extern int	bzero();
extern int	ffs();
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
 * $Header: bstring.h,v 1.1 88/04/25 21:39:14 ouster Exp $ SPRITE (Berkeley)
d22 2
a23 2
extern 		bcopy();
extern		bzero();
d26 1
a26 1
#endif _BSTRING
@
