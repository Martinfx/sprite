head     1.6;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.6
date     90.03.29.12.44.34;  author shirriff;  state Exp;
branches ;
next     1.5;

1.5
date     89.06.19.12.21.25;  author rab;  state Exp;
branches ;
next     1.4;

1.4
date     88.10.28.11.23.18;  author brent;  state Exp;
branches ;
next     1.3;

1.3
date     88.07.01.15.52.53;  author ouster;  state Exp;
branches ;
next     1.2;

1.2
date     88.06.21.11.30.06;  author ouster;  state Exp;
branches ;
next     1.1;

1.1
date     88.06.21.10.46.23;  author ouster;  state Exp;
branches ;
next     ;


desc
@@


1.6
log
@Mary checking this in for Ken before an install.
@
text
@/*
 * errno.h --
 *
 *	Declaration for the errno variable, the error constants, and
 *	the strings giving error messages for various errors.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 * $Header: /sprite/src/lib/include/RCS/errno.h,v 1.5 89/06/19 12:21:25 rab Exp Locker: shirriff $ SPRITE (Berkeley)
 */

#ifndef _ERRNO
#define _ERRNO

extern int	errno;		/* Last error condition returned from a
				 * kernel call or some other procedure. */
extern int	sys_nerr;	/* Number of error message in array below. */
extern char	*sys_errlist[];	/* Array containing string error messages
				 * for errors 0 up to sys_nerr-1. */

/*
 * Known values for errno:
 */

#define EPERM		1
#define ENOENT		2
#define ESRCH		3
#define EINTR		4
#define EIO		5
#define ENXIO		6
#define E2BIG		7
#define ENOEXEC		8
#define EBADF		9
#define ECHILD		10
#define EAGAIN		11
#define ENOMEM		12
#define EACCES		13
#define EFAULT		14
#define ENOTBLK		15
#define EBUSY		16
#define EEXIST		17
#define EXDEV		18
#define ENODEV		19
#define ENOTDIR		20
#define EISDIR		21
#define EINVAL		22
#define ENFILE		23
#define EMFILE		24
#define ENOTTY		25
#define ETXTBSY		26
#define EFBIG		27
#define ENOSPC		28
#define ESPIPE		29
#define EROFS		30
#define EMLINK		31
#define EPIPE		32
#define EDOM		33
#define ERANGE		34
#define EWOULDBLOCK	35
#define EINPROGRESS	36
#define EALREADY	37
#define ENOTSOCK	38
#define EDESTADDRREQ	39
#define EMSGSIZE	40
#define EPROTOTYPE	41
#define ENOPROTOOPT	42
#define EPROTONOSUPPORT 43
#define ESOCKTNOSUPPORT 44
#define EOPNOTSUPP	45
#define EPFNOSUPPORT	46
#define EAFNOSUPPORT	47
#define EADDRINUSE	48
#define EADDRNOTAVAIL	49
#define ENETDOWN	50
#define ENETUNREACH	51
#define ENETRESET	52
#define ECONNABORTED	53
#define ECONNRESET	54
#define ENOBUFS		55
#define EISCONN		56
#define ENOTCONN	57
#define ESHUTDOWN	58

#define ETIMEDOUT	60
#define ECONNREFUSED	61
#define ELOOP		62
#define ENAMETOOLONG	63
#define EHOSTDOWN	64
#define EHOSTUNREACH	65
#define ENOTEMPTY	66
#define EPROCLIM	67
#define EUSERS		68
#define EDQUOT		69
#define ESTALE		70
#define EREMOTE		71

#define EIDRM		77

#endif /* _ERRNO */
@


1.5
log
@*** empty log message ***
@
text
@d16 1
a16 1
 * $Header: /sprite/src/lib/include/RCS/errno.h,v 1.4 88/10/28 11:23:18 brent Exp Locker: rab $ SPRITE (Berkeley)
d103 2
@


1.4
log
@Added ESTALE and EREMOTE
@
text
@d16 1
a16 1
 * $Header: /sprite/src/lib/include.new/RCS/errno.h,v 1.3 88/07/01 15:52:53 ouster Exp Locker: brent $ SPRITE (Berkeley)
d104 1
a104 1
#endif _ERRNO
@


1.3
log
@Spelled EACCESS correctly, which was wrong.
@
text
@d16 1
a16 1
 * $Header: errno.h,v 1.2 88/06/21 11:30:06 ouster Exp $ SPRITE (Berkeley)
d90 1
d101 2
@


1.2
log
@Typo.
@
text
@d16 1
a16 1
 * $Header: errno.h,v 1.1 88/06/21 10:46:23 ouster Exp $ SPRITE (Berkeley)
d44 1
a44 1
#define EACCESS		13
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
 * $Header: errno.h,v 1.1 88/06/21 10:45:19 ouster Exp $ SPRITE (Berkeley)
d22 1
a22 1
extern int	d errno;	/* Last error condition returned from a
@
