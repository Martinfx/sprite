head     1.11;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.11
date     89.06.01.10.44.49;  author brent;  state Exp;
branches ;
next     1.10;

1.10
date     88.09.11.15.57.10;  author ouster;  state Exp;
branches ;
next     1.9;

1.9
date     88.09.09.18.00.35;  author ouster;  state Exp;
branches ;
next     1.8;

1.8
date     88.09.08.18.16.09;  author ouster;  state Exp;
branches ;
next     1.7;

1.7
date     88.08.27.11.42.53;  author deboor;  state Exp;
branches ;
next     1.6;

1.6
date     87.11.29.19.49.18;  author deboor;  state Exp;
branches ;
next     1.5;

1.5
date     87.11.01.20.22.07;  author deboor;  state Exp;
branches ;
next     1.4;

1.4
date     87.08.21.20.30.37;  author deboor;  state Exp;
branches ;
next     1.3;

1.3
date     87.06.30.19.13.07;  author deboor;  state Exp;
branches ;
next     1.2;

1.2
date     87.06.20.19.58.20;  author deboor;  state Exp;
branches ;
next     1.1;

1.1
date     87.06.11.17.47.23;  author deboor;  state Exp;
branches ;
next     ;


desc
@Functions to perform the scheduling of requests among clients

@


1.11
log
@Put in checks against 'client->clientGone' because the
are apparently cases where deleted fields in the client
structure were causing problems.
@
text
@/*-
 * scheduler.c --
 *	OS dependent scheduling routines:
 *	WaitForSomething, SchedPacket, SchedYield
 *
 * Copyright (c) 1987 by the Regents of the University of California
 *
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 *
 *
 */
#ifndef lint
static char rcsid[] =
	"$Header: scheduler.c,v 1.10 88/09/11 15:57:10 ouster Exp $ SPRITE (Berkeley)";
#endif lint

#include    "spriteos.h"
#include    <bit.h>
#include    <errno.h>
#include    <sys/time.h>

#include    "dixstruct.h"
#include    "opaque.h"

#include    "misc.h"

extern long ScreenSaverTime;            /* milliseconds */
extern long ScreenSaverInterval;        /* milliseconds */

Bool isItTimeToYield = TRUE;

/*-
 *-----------------------------------------------------------------------
 * WaitForSomething --
 *	Hang out until something interesting happens:
 *	    - data from clients
 *	    - new client connecting
 *	    - device input available
 *	If no input events come in for a sufficiently long time
 *	(ScreenSaverTime), turns on the screen saver.
 *
 *     	For more info on ClientsWithInput, see ReadRequestFromClient().
 *     	pClientsReady is a mask, the bits set are 
 *     	indices into the o.s. depedent table of available clients.
 *     	(In this case, there is no table -- the index is the socket
 *     	file descriptor.)  
 *
 * Results:
 *
 * Side Effects:
 *
 *-----------------------------------------------------------------------
 */

static int intervalCount = 0;

WaitForSomething(pClientsReady, pNumReady, pNewClients, pNumNew)
    ClientPtr  	  *pClientsReady; 	/* OUT: ready clients */
    int     	  *pNumReady;	    	/* OUT: number of ready clients */
    ClientPtr  	  *pNewClients;   	/* OUT: new client pointers */
    int     	  *pNumNew;	    	/* OUT: number of new clients */
{
    int			i;
    struct timeval	waittime, *wt;
    long		timeout;
    
    *pNumReady = 0;
    *pNumNew = 0;

    if (!Bit_AnySet (NumActiveStreams, ClientsWithInputMask)) {
	/*
	 * We need a while loop here to handle the screen saver timeout
	 */
	while (1) {
	    if (clientsDoomed) {
		Bit_Zero (NumActiveStreams, LastSelectMask);
		break;
	    }
	    
            if (ScreenSaverTime) {
		/*
		 * If screen saver is needed, set 'timeout' to the time
		 * remaining until the screen saver should be activated.
		 */
                timeout = ScreenSaverTime - TimeSinceLastInputEvent();
	        if (timeout < 0) {
		    /*
		     * There is no time left -- activate the screen saver.
		     */
	            if (timeout < intervalCount) {
		        SaveScreens(SCREEN_SAVER_ON, ScreenSaverActive);
		        if (intervalCount)
    		            intervalCount -= ScreenSaverInterval;
                        else
                            intervalCount = 
				-(ScreenSaverInterval + ScreenSaverTime);
		    }
    	            timeout -= intervalCount;
    	        } else {
	            intervalCount = 0;
		}
                waittime.tv_sec = timeout / 1000;
	        waittime.tv_usec = 0;
		wt = &waittime;
	    } else {
                wt = (struct timeval *) NULL;
	    }

	    Bit_Copy (NumActiveStreams, AllStreamsMask, LastSelectMask);

	    BlockHandler(&wt, LastSelectMask);
	    i = select(NumActiveStreams, LastSelectMask, (int *) NULL,
		    (int *) NULL, wt);
	    if (i <= 0) {
		if ((i == -1) && ((errno == EINVAL) || (errno == EIO))) {
		    /*
		     * If a stream was invalid, find each one that's
		     * bogus and close the client down. If it's one
		     * of the listening streams (Pdev_Conn, TCP_Conn,
		     * or NewPdev_Conn), close that down and set the
		     * appropriate variable to be -1 so we don't
		     * pay attention to it any more.
		     */
		    int 	    	    *selMask;
		    struct timeval     	    poll;
		    register ClntPrivPtr    pPriv;
		    register ClientPtr	    client;
		    int			    junk;
		    
		    ErrorF("Bad stream in select -- seek and destroy...");
		    poll.tv_sec = 0;
		    poll.tv_usec = 0;
		    
		    Bit_Alloc(NumActiveStreams, selMask);
		    
		    for (i = 1; i < currentMaxClients; i++) {
			client = clients[i];
			pPriv = (ClntPrivPtr) ((client && !client->clientGone) ?
						client->osPrivate : 0);

			if (pPriv && (pPriv->ready != (int *)0)) {
			    Bit_Copy(pPriv->maskWidth, pPriv->ready,
				     selMask);
			    junk = select(pPriv->maskWidth, selMask,
				    (int *) NULL, (int *) NULL, &poll);
			    if ((junk == -1) && ((errno == EINVAL)
				    || (errno == EIO))) {
				ErrorF("CLIENT(%d) ", client->index);
				CloseDownClient(client);
				break;
			    }
			}
		    }
		    Bit_Zero(NumActiveStreams, selMask);
		    Bit_Set(Pdev_Conn, selMask);
		    junk = select(Pdev_Conn + 1, selMask, (int *) NULL,
				(int *) NULL, &poll);
		    if ((junk == -1) && ((errno == EINVAL) || (errno == EIO))) {
			ErrorF("PDEV ");
			(void)close(Pdev_Conn);
			Bit_Clear(Pdev_Conn, selMask);
			Bit_Clear(Pdev_Conn, AllStreamsMask);
			Pdev_Conn = -1;
		    } else {
			Bit_Clear(Pdev_Conn, selMask);
		    }
#ifdef TCPCONN
		    Bit_Set(TCP_Conn, selMask);
		    junk = select(TCP_Conn + 1, selMask, (int *) NULL,
			    (int *) NULL, &poll);
		    if ((junk == -1) && ((errno == EINVAL) || (errno == EIO))) {
			ErrorF("TCP ");
			(void)close(TCP_Conn);
			Bit_Clear(TCP_Conn, selMask);
			Bit_Clear(TCP_Conn, AllStreamsMask);
			TCP_Conn = -1;
		    } else {
			Bit_Clear(TCP_Conn, selMask);
		    }
#endif /* TCPCONN */
		    ErrorF("done\n");
		} else if (i != 0) {
		    Error("Scheduler Select");
		}
		i = 0;
		Bit_Zero(NumActiveStreams, LastSelectMask);
	    }
	    WakeupHandler (&i, LastSelectMask);

	    if (i > 0) {
		if ((Pdev_Conn >= 0) && Bit_IsSet (Pdev_Conn, LastSelectMask)) {
		    Pdev_EstablishNewConnections (pNewClients, pNumNew);
		}
#ifdef TCPCONN
		if ((TCP_Conn >= 0) && Bit_IsSet (TCP_Conn, LastSelectMask)) {
		    TCP_EstablishNewConnections (pNewClients, pNumNew);
		}
#endif TCPCONN

		if (*pNumNew ||
		    Bit_Intersect (NumActiveStreams, LastSelectMask,
				   EnabledDevicesMask, (int *)NULL) ||
		    Bit_Intersect (NumActiveStreams, LastSelectMask,
				   AllClientsMask, (int *)NULL)) {
				      /*
				       * If there are new connections, or
				       * an enabled device has data available,
				       * or there are requests from clients,
				       * break out of this loop...we're ready
				       * to return.
				       */
				      break;
		}
	    }
	}
    } else {
	register int i;
	Bit_Copy (NumActiveStreams, ClientsWithInputMask, LastSelectMask);
	Bit_Zero (NumActiveStreams, ClientsWithInputMask);
    }
    
    if (Bit_Intersect(NumActiveStreams, LastSelectMask, AllClientsMask, NULL)){
	/*
	 * If any clients are ready, go through the table of clients
	 * and see if any of the client's streams has its bit set in the
	 * select mask. Any that does has its bit set in the client's
	 * "ready" mask.
	 */
	register ClntPrivPtr  	pPriv;
	register ClientPtr  	client;

	for (i = 1; i < currentMaxClients; i++) {
	    client = clients[i];
	    pPriv = (ClntPrivPtr) ((client && !client->clientGone) ?
				    client->osPrivate : 0);

	    if (pPriv && (pPriv->ready != (int *)0) &&
		Bit_Intersect (pPriv->maskWidth, LastSelectMask,
			       pPriv->mask, pPriv->ready)) {
				   pClientsReady[*pNumReady] = client;
				   (*pNumReady)++;
	    }
	}
    }

    /*
     * As a concession to the DDX layer, if any of the streams to devices
     * is ready, call spriteInputAvail() to inform DDX of this.
     */
    if (Bit_Intersect (NumActiveStreams, LastSelectMask, EnabledDevicesMask,
		       NULL)) {
			   spriteInputAvail();
    }
}

static int	  packets = 0;
/*-
 *-----------------------------------------------------------------------
 * SchedPacket --
 *	Record having received another packet for the given client.
 *
 * Results:
 *	None.
 *
 * Side Effects:
 *	???
 *
 *-----------------------------------------------------------------------
 */
/*ARGSUSED*/
void
SchedPacket (client)
    ClientPtr	  client;
{
    if (!isItTimeToYield) {
	packets += 1;
	if (packets == MAX_PACKETS) {
	    isItTimeToYield = TRUE;
	    packets = 0;
	}
    }
}

/*-
 *-----------------------------------------------------------------------
 * SchedYield --
 *	Yield the server to another client.
 *
 * Results:
 *	None.
 *
 * Side Effects:
 *	isItTimeToYield is set TRUE.
 *
 *-----------------------------------------------------------------------
 */
void
SchedYield()
{
    isItTimeToYield = TRUE;
    packets = 0;
}
@


1.10
log
@Remove pdev-related conditional compiles.  They aren't necessary.
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.9 88/09/09 18:00:35 ouster Exp $ SPRITE (Berkeley)";
d144 2
a145 2
			pPriv = (ClntPrivPtr) (client ? client->osPrivate :
					       0);
d240 2
a241 1
	    pPriv = (ClntPrivPtr) (client ? client->osPrivate : 0);
@


1.9
log
@Include bit.h.
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.8 88/09/08 18:16:09 ouster Exp $ SPRITE (Berkeley)";
a160 1
#ifdef OLDPDEV
a172 1
#endif /* OLDPDEV */
a186 14
#ifdef NEWPDEV
		    Bit_Set(NewPdev_Conn, selMask);
		    junk = select(NewPdev_Conn + 1, selMask (int *) NULL,
			    (int *) NULL, &poll);
		    if ((junk == -1) && ((errno == EINVAL) || (errno == EIO))) {
			ErrorF("NEWPDEV ");
			(void)close(NewPdev_Conn);
			Bit_Clear(NewPdev_Conn, selMask);
			Bit_Clear(NewPdev_Conn, AllStreamsMask);
			NewPdev_Conn = -1;
		    } else {
			Bit_Clear(NewPdev_Conn, selMask);
		    }
#endif /* NEWPDEV */
a196 1
#ifdef OLDPDEV
a199 1
#endif OLDPDEV
a204 7
#ifdef NEWPDEV
		if ((NewPdev_Conn >= 0) && Bit_IsSet(NewPdev_Conn,
						     LastSelectMask))
		{
		    NewPdev_EstablishNewConnections (pNewClients, pNumNew);
		}
#endif NEWPDEV
@


1.8
log
@Intermediate check-in while converting to new C library.
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.7 88/08/27 11:42:53 deboor Exp $ SPRITE (Berkeley)";
d24 1
@


1.7
log
@Added cleanup code
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.6 87/11/29 19:49:18 deboor Exp $ SPRITE (Berkeley)";
a22 1
#define Time	  SpriteTime
d24 2
a25 4
#include    <io.h>
#include    <time.h>
#include    <sig.h>
#undef Time
d68 3
a70 4
    int     	  i;
    SpriteTime    waittime,
		  *wt;
    long    	  timeout;
d107 2
a108 2
                waittime.seconds = timeout / 1000;
	        waittime.microseconds = 0;
d111 1
a111 1
                wt = NULL;
d117 4
a120 4
	    if (Fs_Select (NumActiveStreams, wt, LastSelectMask,
			   (int *) NULL, (int *) NULL, &i) != SUCCESS)
	    {
		if (stat_LastError == SYS_INVALID_ARG ||  stat_LastError == DEV_OFFLINE) {
d130 1
a130 1
		    SpriteTime      	    poll;
d136 2
a137 2
		    poll.seconds = 0;
		    poll.microseconds = 0;
d145 1
a145 1
			
d149 7
a155 12
			    switch (Fs_Select(pPriv->maskWidth,
					  &poll,
					  selMask,
					  (int *)NULL,
					  (int *)NULL,
					  &junk))
			    {
				case SYS_INVALID_ARG:
				case DEV_OFFLINE:
				    ErrorF("CLIENT(%d) ", client->index);
				    CloseDownClient(client);
				    break;
d162 10
a171 14
		    switch (Fs_Select(Pdev_Conn + 1, &poll, selMask,
					(int *)NULL, (int *)NULL, &junk))
		    {
			case SYS_INVALID_ARG:
			case DEV_OFFLINE:
			    ErrorF("PDEV ");
			    (void)close(Pdev_Conn);
			    Bit_Clear(Pdev_Conn, selMask);
			    Bit_Clear(Pdev_Conn, AllStreamsMask);
			    Pdev_Conn = -1;
			    break;
			default:
			    Bit_Clear(Pdev_Conn, selMask);
			    break;
d176 10
a185 14
		    switch (Fs_Select(TCP_Conn + 1, &poll, selMask,
					(int *)NULL, (int *)NULL, &junk))
		    {
			case SYS_INVALID_ARG:
			case DEV_OFFLINE:
			    ErrorF("TCP ");
			    (void)close(TCP_Conn);
			    Bit_Clear(TCP_Conn, selMask);
			    Bit_Clear(TCP_Conn, AllStreamsMask);
			    TCP_Conn = -1;
			    break;
			default:
			    Bit_Clear(TCP_Conn, selMask);
			    break;
d190 10
a199 14
		    switch (Fs_Select(NewPdev_Conn + 1, &poll, selMask,
					(int *)NULL, (int *)NULL, &junk))
		    {
			case SYS_INVALID_ARG:
			case DEV_OFFLINE:
			    ErrorF("NEWPDEV ");
			    (void)close(NewPdev_Conn);
			    Bit_Clear(NewPdev_Conn, selMask);
			    Bit_Clear(NewPdev_Conn, AllStreamsMask);
			    NewPdev_Conn = -1;
			    break;
			default:
			    Bit_Clear(NewPdev_Conn, selMask);
			    break;
d203 1
a203 1
		} else if (stat_LastError != FS_TIMEOUT) {
@


1.6
log
@Added support for new pseudo-devices
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.5 87/11/01 20:22:07 deboor Exp $ SPRITE (Berkeley)";
d122 107
a228 6
			   (int *) NULL, (int *) NULL, &i) != SUCCESS) {
			       if (stat_LastError != FS_TIMEOUT) {
				   Error("Scheduler Select");
			       }
			       i = 0;
			       Bit_Zero(NumActiveStreams, LastSelectMask);
d233 2
a234 1
		if (Bit_IsSet (Pdev_Conn, LastSelectMask)) {
d237 1
d239 1
a239 1
		if (Bit_IsSet (TCP_Conn, LastSelectMask)) {
d244 3
a246 1
		if (Bit_IsSet(NewPdev_Conn, LastSelectMask)) {
d275 1
a275 1
	 * If any clients is ready, go through the table of clients
@


1.5
log
@Added Block/Wakeup handler calls and TCP support
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.4 87/08/21 20:30:37 deboor Exp $ SPRITE (Berkeley)";
d140 5
@


1.4
log
@workaround for Fs_Select not behaving as advertised -- it's supposed to set
the number of ready streams to 0 on a timeout, but it doesn't...
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.3 87/06/30 19:13:07 deboor Exp $ SPRITE (Berkeley)";
d84 5
d119 2
d127 1
d129 2
d132 2
a133 2
		if (Bit_IsSet (PseudoDevice, LastSelectMask)) {
		    EstablishNewConnections (pNewClients, pNumNew);
d135 5
d158 1
d215 6
a220 4
    packets += 1;
    if (packets == MAX_PACKETS) {
	isItTimeToYield = TRUE;
	packets = 0;
@


1.3
log
@Adapted to beta-1
@
text
@d20 1
a20 1
	"$Header: scheduler.c,v 1.2 87/06/20 19:58:20 deboor Exp $ SPRITE (Berkeley)";
d114 7
a120 2
	    (void) Fs_Select (NumActiveStreams, wt, LastSelectMask,
			      (int *) NULL, (int *) NULL, &i);
@


1.2
log
@adapted to Beta-0 and "debugged"
@
text
@d4 1
a4 1
 *	WaitForSomething, GetEvent
d20 1
a20 1
	"$Header: scheduler.c,v 1.1 87/06/11 17:47:23 deboor Exp $ SPRITE (Berkeley)";
a39 2
ClntPrivRec clientPriv[MAXCLIENTS];

d66 1
a66 1
    long    	  *pClientsReady; 	/* OUT: ready client numbers */
d68 1
a68 1
    long    	  *pNewClients;   	/* OUT: new client numbers */
d144 1
a144 1
	 * If any clients are ready, go through the table of clients
d149 2
a150 4
	register ClntPrivPtr  pPriv;
	for (pPriv = &clientPriv[FirstClient], i = FirstClient;
	     i <= LastClient;
	     i++, pPriv++) {
d152 10
a161 6
		 if ((pPriv->ready != (int *)0) &&
		     Bit_Intersect (pPriv->maskWidth, LastSelectMask,
				    pPriv->mask, pPriv->ready)) {
					pClientsReady[*pNumReady] = i;
					(*pNumReady)++;
		 }
a174 1

a175 2


d192 1
a192 1
    int	    client;
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
	"$Header$ SPRITE (Berkeley)";
d141 1
@
