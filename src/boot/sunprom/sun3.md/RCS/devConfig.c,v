head     1.3;
branch   ;
access   ;
symbols  ;
locks    mendel:1.3; strict;
comment  @ * @;


1.3
date     88.08.31.20.58.12;  author nelson;  state Exp;
branches ;
next     1.2;

1.2
date     87.05.08.17.44.24;  author brent;  state Exp;
branches ;
next     1.1;

1.1
date     86.07.18.09.30.38;  author brent;  state Exp;
branches ;
next     ;


desc
@Boot program device configureation table.
Initial version for SCSI disk or tape
@


1.3
log
@Fixed bug where for Sun3's was trying to go to the multibus device.
@
text
@/* 
 * devConfig.c --
 *
 *	Configuration table for the devices in the system.  Devices fall
 *	into two classes: those that are slaves of a controller,
 *	and those that aren't.  As such there is a configuration table for
 *	controllers and one for devices.
 *
 * Copyright 1986 Regents of the University of California
 * All rights reserved.
 */

#ifndef lint
static char rcsid[] = "$Header: devConfig.c,v 1.2 87/05/08 17:44:24 brent Exp $ SPRITE (Berkeley)";
#endif not lint


#include "sprite.h"
#include "boot.h"
#include "devInt.h"
/*
 * Per device include files.
 */
#if defined(SCSI_DISK_BOOT) || defined(SCSI_TAPE_BOOT)
#include "devSCSI.h"
#endif

#ifdef XYLOGICS_BOOT
#include "devXylogics.h"
#endif

/*
 * The controller configuration table.
 */
DevConfigController devCntrlr[] = {
/*   address,  ID, initProc */
#if defined(SCSI_DISK_BOOT) || defined(SCSI_TAPE_BOOT)
#ifdef SUN2
    { "SCSI", 0x80000, DEV_MULTIBUS,	0, Dev_SCSIInitController, 0, 0},
#endif
    { "SCSI", 0x200000, DEV_VME_D16A24,	0, Dev_SCSIInitController, 64, 0},
#endif
#ifdef XYLOGICS_BOOT
    { "Xylogics", 0xee40, DEV_VME_D16A16, 0, Dev_XylogicsInitController, 72, 0},
#endif
};
int devNumConfigCntrlrs = sizeof(devCntrlr) / sizeof(DevConfigController);

/*
 * The device configuration table.  Device entries for non-existent controllers
 * don't cost any time at startup.  Non-existent devices on existing
 * controllers can cost a timeout period of up to a second at start up.
 *
 * NB: There is an implicit correspondence between filesystem unit numbers
 * and particular disks.  Several entries for the same kind of device
 * result in a correspondence between those devices and ranges of unit
 * numbers. For disks, there are FS_NUM_DISK_PARTS different unit numbers
 * associated with each disk, and successive disks have consequative
 * ranges of unit numbers.
 */
DevConfigDevice devDevice[] = {
/* cntrlrID, slaveID, flags, initproc */
#ifdef SCSI_DISK_BOOT
    { 0, 0, DEV_SCSI_DISK, Dev_SCSIInitDevice},		/* Units 0-7 */
#endif
#ifdef SCSI_TAPE_BOOT
    { 0, 4, DEV_SCSI_TAPE, Dev_SCSIInitDevice},
#endif
#ifdef XYLOGICS_BOOT
    { 0, 0, 0, Dev_XylogicsInitDevice},			/* Units 0-7 */
#endif
};
int devNumConfigDevices = sizeof(devDevice) / sizeof(DevConfigDevice);
@


1.2
log
@Added stuff for devXylogics
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: devConfig.c,v 1.1 86/07/18 09:30:38 brent Exp $ SPRITE (Berkeley)";
d38 1
d40 1
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
static char rcsid[] = "$Header: devConfig.c,v 1.4 86/07/07 10:39:42 brent Exp $ SPRITE (Berkeley)";
d24 1
d26 1
d28 4
d37 7
a43 2
    { 0x80000, 0, Dev_SCSIInitController},
    { 0x84000, 1, Dev_SCSIInitController},
d61 1
a61 1
#ifdef DISK_BOOT
d64 1
a64 1
#ifdef TAPE_BOOT
d66 3
@
