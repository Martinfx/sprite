head     1.3;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     87.05.08.17.48.40;  author brent;  state Exp;
branches ;
next     1.2;

1.2
date     86.07.18.11.58.47;  author nelson;  state Exp;
branches ;
next     1.1;

1.1
date     86.07.18.10.45.40;  author nelson;  state Exp;
branches ;
next     ;


desc
@@


1.3
log
@Guarded against multiple definitions of consstants
@
text
@/*
 * fsIndex.h --
 *
 *	Definitions to allow moving through indirect blocks.
 *
 * Copyright (C) 1985 Regents of the University of California
 * All rights reserved.
 *
 *
 * $Header: fsIndex.h,v 1.2 86/07/18 11:58:47 nelson Exp $ SPRITE (Berkeley)
 */

#ifndef _FSINDEX
#define _FSINDEX

/*
 * Index type constants.
 */
#ifndef FS_INDIRECT
#define	FS_INDIRECT	0
#define	FS_DBL_INDIRECT	1
#define	FS_DIRECT	2
#endif

typedef struct BlockIndexInfo {
    int	 	indexType;		/* Whether chasing direct, indirect,
					   or doubly indirect blocks. */
    int		 blockNum;		/* Block that is being read, written,
					   or allocated. */
    int		 *blockAddrPtr;		/* Pointer to block pointer. */
    int		 firstIndex;		/* An index into either the direct
					   block pointers or into an 
					   indirect block. */
    int		 secondIndex;		/* An index into a doubly indirect
					   block. */
    Boolean 	 firstBlockNil;		/* The first block is empty. */
} BlockIndexInfo;

#endif _FSINDEX
@


1.2
log
@Trimmed.
@
text
@d10 1
a10 1
 * $Header: fsIndex.h,v 1.1 86/07/18 10:45:40 nelson Exp $ SPRITE (Berkeley)
d19 1
a19 1

d23 1
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
 * $Header: fsLocalDomain.h,v 1.12 86/07/11 13:52:17 brent Exp $ SPRITE (Berkeley)
d17 1
a17 1
 * Structure to contain the current state about a block index.
d20 3
a22 5
typedef enum {
    FS_DIRECT, 
    FS_INDIRECT, 
    FS_DBL_INDIRECT
} BlockIndexType;
d25 1
a25 1
    BlockIndexType	 indexType;	/* Whether chasing direct, indirect,
d29 1
a29 1
    int		 blockAddr;		/* Block pointer. */
d35 1
a35 4
    Address 	 firstBlockPtr;		/* Pointer to first level indirect 
					   block. */
    Address      secondBlockPtr;	/* Pointer to second level indirect
					   block. */
@
