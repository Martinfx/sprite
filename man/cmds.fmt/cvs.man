


CVS                  UNKNOWN MANUAL SECTION                   CVS



NNAAMMEE
     cvs - Concurrent Versions System

SSYYNNOOPPSSIISS
     ccvvss [ _c_v_s__o_p_t_i_o_n_s ] _c_v_s__c_o_m_m_a_n_d [ _c_o_m_m_a_n_d__o_p_t_i_o_n_s ] [
     _c_o_m_m_a_n_d__a_r_g_s ]

DDEESSCCRRIIPPTTIIOONN
     ccvvss is a front end to the rrccss(l) revision control system
     which extends the notion of revision control from a collec-
     tion of files in a single directory to a hierarchical col-
     lection of directories consisting of revision controlled
     files.  These directories and files can be combined together
     to form a software release.  ccvvss provides the functions
     necessary to manage these software releases and to control
     the concurrent editing of source files among multiple
     software developers.

     The following list summarizes some of the strong points of
     ccvvss:

     o+    Only a single copy of the master sources exist.  This
          copy is called the source ``repository'' and, through
          administrative actions, contains all the information to
          extract previous software releases at any time based on
          either a symbolic revision tag, or a date in the past.

     o+    Individual software developers check out private copies
          of the sources into their personal work space.  These
          private sources can be edited at any time and checked
          back into the source repository as a permanent change.
          ccvvss takes special care to ensure that a file is up-to-
          date with the current revision in the source repository
          before allowing it to be added as a permanent change.

     o+    There is a facility for software developers to bring
          their private copies of the sources up-to-date with the
          currently checked in revisions, while at the same time
          preserving any modifications that have been made to
          their private sources.  This allows multiple developers
          to be concurrently working on the same source files
          without regard for what the other guy is doing.

          Note that this is the biggest change from the way most
          other revision control systems, like RCS or SCCS work,
          which allow only one developer to ever be changing a
          file, since the file must be checked out as ``locked''
          for the exclusive use of that person.  ccvvss instead
          never applies an RCS lock to a checked out file until
          the moment before it is to be checked back in as a per-
          manent change.  Concurrency checks are performed on the
          soon-to-be checked in file and the file must be up-to-



Sprite v1.0               20 July 1989                          1






CVS                  UNKNOWN MANUAL SECTION                   CVS



          date before it can be made permanent.  In this way, ccvvss
          allows individuals the freedom to change any file at
          will, and provides the tools necessary to point out, if
          not resolve, any conflicts that may be generated by
          allowing this extra, and necessary, freedom.

     o+    ccvvss has direct support for tracking source releases
          from third-party vendors.  The cchheecckkiinn(l) program is
          used to initially setup the source repository.  The
          branch support of RCS is used to build the vendor
          release as a branch off the main (local) RCS trunk.
          Once this is done, developers can check out files and
          make local changes to the vendor's source distribution.
          The act of checking in a local change to a vendor's
          source distribution moves the RCS branch from tracking
          the third-party vendor's release to the main (local)
          RCS trunk so that the local version of the file is used
          forever more.

          When a new version of the vendor's source distribution
          (or even a minor version consisting of a small subset
          of files) arrives, the cchheecckkiinn program is used again to
          add the new vendor release to the already existing
          source repository.  For files that have not been
          changed locally, the new file from the vendor becomes
          the current revision.  For files that have been modi-
          fied locally, cchheecckkiinn warns that the file must be
          merged manually with the new vendor release.  The jjooiinn
          command of ccvvss is a useful tool that aids this manual
          merge process (see below).

     o+    A vendor release or a local release can be given a sym-
          bolic tag name that is stored directly in the RCS
          files.  This tag can be used at any time in the future
          to get an exact copy of any previous release.  With
          equal ease, one can also extract an exact copy of the
          source files as of any arbitrary date in the past as
          well.

     o+    All changes that are made to the source repository are
          carefully logged in a file, notesfile, or news data-
          base, which can be used to produce release notices.
          ccvvss can be configured to send log updates through one
          or more filter programs, based on a regular expression
          match on the directory that is being changed.  This
          allows multiple related or unrelated projects to exist
          within a single ccvvss source repository tree, with each
          different project sending their checkin reports to a
          unique log device for the project.

     o+    There is support for a simple, yet powerful, ``module''
          database.  This database can be used to apply names to



Sprite v1.0               20 July 1989                          2






CVS                  UNKNOWN MANUAL SECTION                   CVS



          collections of directories and files as a matter of
          convenience when checking out smaller pieces of a
          larger software distribution.  This allows one to
          checkout the ``diff'' program, for example, without
          ever requiring the knowledge that the sources to
          ``diff'' actually reside in the ``bin/diff'' directory.

          The module database also has limited support for an
          aliasing capability.  This is useful for programs that
          share sources from completely disjoint directories.
          The aliasing feature can also be used to limit a named
          release to a certain collection of directories and
          files, to only work with pieces of the source found in
          the entire source repository.

     o+    There is direct support for determining which files
          have changed since a previous release, or from a par-
          ticular date.  As well, ccvvss can create a ppaattcchh(l) for-
          mat output file which can be used to bring a previously
          released software distribution current with the newest
          release.  One can create a patch file between two
          tagged revisions, between a revision and some date in
          the past, between two dates, or between a date or revi-
          sion and the current ``head'' revision.

     The remainder of this manual page will document how all
     these actions can be done using the ccvvss program.

OOPPTTIIOONNSS
     ccvvss accepts a number of options that override the current
     setting of the recognized environment variables.

     --rr   Checks out files read-only.  Same effect as if the
          CVSREAD environment variable is set.

     --ww   Checks out files read-write (default).  Overrides the
          setting of the CVSREAD environment variable.

     --vv   Outputs version and copyright information for ccvvss, then
          exits.

     --dd _C_V_S__r_o_o_t__d_i_r_e_c_t_o_r_y
          Use _C_V_S__r_o_o_t__d_i_r_e_c_t_o_r_y as the root directory pathname
          of the master RCS source repository.  Overrides the
          setting of the CVSROOT environment variable.

     --bb _b_i_n_d_i_r
          Use _b_i_n_d_i_r as the directory to find RCS programs
          within.  Overrides the setting of the RCSBIN environ-
          ment variable.

     --ee _e_d_i_t_o_r



Sprite v1.0               20 July 1989                          3






CVS                  UNKNOWN MANUAL SECTION                   CVS



          Use _e_d_i_t_o_r for editing revision log information.  Over-
          rides the setting of the EDITOR environment variable.

     --HH   Displays usage information about the specified
          _c_v_s__c_o_m_m_a_n_d without actually executing said command.

UUSSAAGGEE
     A _c_v_s__c_o_m_m_a_n_d must be specified to ccvvss which drives the
     specific release control function that is performed.  Each
     ccvvss command accepts options and arguments unique to the com-
     mand.  The usage statements for each command can be
     displayed by specifying the --HH option to the command.

     The available commands are listed below along with a
     description of their function.  Command options unique to
     the command are described in this section with the command
     description.  Common command options are described fully in
     the following section.

     cchheecckkoouutt [--QQqqllffnnpp] [--cc] [--rr _t_a_g|--DD _d_a_t_e__s_p_e_c] _m_o_d_u_l_e_s...
          Checks out the source files defined by _m_o_d_u_l_e_s.  This
          command is used to get a private copy of the current
          sources that can be edited and processed by most of the
          other ccvvss commands.  cchheecckkoouutt must be done before many
          of the other ccvvss commands are used, since most of them
          operate on checked out sources.

          Depending on the _m_o_d_u_l_e_s specified, cchheecckkoouutt may recur-
          sively create directories and populate them with the
          appropriate source files.  These source files can then
          be edited at any time (regardless of whether other
          software developers are editing their private copies of
          the sources), updated to include new changes checked
          into the source repository, or committed as a permanent
          change to the RCS repository.

          Note that cchheecckkoouutt is used to create directories.  The
          top-level directory created is always added to the
          working directory where cchheecckkoouutt is invoked, and usu-
          ally has the same name as the specified _m_o_d_u_l_e.  In the
          case of a _m_o_d_u_l_e alias, the created sub-directory may
          have a different name, but you can be sure that it will
          be a sub-directory, and that cchheecckkoouutt will show the
          relative path leading to each file as it is extracted
          into your private work area, unless the --QQ option is
          specified.

          Running cchheecckkoouutt on a directory that was already built
          by cchheecckkoouutt is also OK.  This has the same effect as
          specifying the --dd option to the uuppddaattee command
          described below.




Sprite v1.0               20 July 1989                          4






CVS                  UNKNOWN MANUAL SECTION                   CVS



          The --cc option ``cat''s the module file, sorted, to the
          standard output, and does not cause any files or direc-
          tories to be checked out.

          ccoo can be specified instead of cchheecckkoouutt to save some
          typing.  See the MODULES section below for a complete
          description of modules.

     uuppddaattee [--QQqqllffpp] [--dd] [--rr _t_a_g|--DD _d_a_t_e__s_p_e_c] _f_i_l_e_s...
          After cchheecckkoouutt is run, directories and files have been
          extracted from the source repository for your personal
          editing.  At any time that is convenient in your
          development process, the uuppddaattee command can be run _f_r_o_m
          _w_i_t_h_i_n _t_h_e _d_i_r_e_c_t_o_r_y _t_h_a_t _c_o_n_t_a_i_n_s _t_h_e _c_h_e_c_k_e_d _o_u_t
          _s_o_u_r_c_e_s to bring those sources current with any revi-
          sions that have been checked into the source repository
          since they were last checked out or uuppddaatteed.

          Normally, uuppddaattee brings the current directory up-to-
          date, then descends any sub-directories, bringing them
          up-to-date as well.  This can be overridden by specify-
          ing a list of files that should only be updated, or by
          using the --ll option which causes uuppddaattee to only process
          the current directory, ignoring any sub-directories.

          If any special options were initially specified to
          cchheecckkoouutt when the source were initially checked out,
          these exact options should be specified to uuppddaattee as
          well to keep the sources consistent with the way they
          were originally checked out.  For example, checking out
          sources by specifying the ``--rr VV11__00'' option will check
          out the revisions associated with the VV11__00 release tag.
          A subsequent uuppddaattee that does _n_o_t specify this exact --rr
          option as well will revert to updating the sources with
          the current revisions as stored in the source reposi-
          tory, rather than those revisions associated with the
          VV11__00 release.

          If the --dd option is specified then uuppddaattee will update
          your source tree with any new directories that have
          been added to the repository.

          For a complete description of the algorithm that uuppddaattee
          uses to bring your source up-to-date, refer to the CCOONN--
          FFLLIICCTT RREESSOOLLUUTTIIOONN section below.

     ccoommmmiitt [--QQqqffnn] [-a] [--mm '_l_o_g__m_e_s_s_a_g_e'] [--
          rr _r_e_v_i_s_i_o_n] [_f_i_l_e_s...]
          At any point, changes that you have made to your
          private copies of the sources may be ccoommmmiittted to the
          source repository as a permanent change.  ccoommmmiitt does
          not do a recursive ccoommmmiitt, so each individual directory



Sprite v1.0               20 July 1989                          5






CVS                  UNKNOWN MANUAL SECTION                   CVS



          must be checked in separately, even if the changes were
          related.

          ccoommmmiitt verifies that the selected files are up-to-date
          with the current revisions in the source repository and
          will abort without committing if any of the specified
          files must be made current first with the uuppddaattee com-
          mand.  With the --aa option, all relevant files of the
          current directory are examined.  ccoommmmiitt is careful to
          only check in those files that have really changed.
          Note that ccoommmmiitt does not uuppddaattee the out-of-date files
          for you, but rather leaves that for you to do when the
          time is right.

          An RCS identification string ($Id) must exist in the
          modified files that are to be checked in.  If the iden-
          tification string cannot be found in any of the files,
          ccoommmmiitt will prompt you for verification before proceed-
          ing.  This prompt is bypassed if the --ff option has been
          specified.

          When all is well, an editor is invoked for the purpose
          of entering a log message that will be written to one
          or more logging programs and placed in the RCS source
          repository file.  The log message may be specified on
          the command line with the --mm option, thus suppressing
          the editor invocation.

          ccii can be specified instead of ccoommmmiitt to save some typ-
          ing.

     ddiiffff [_r_c_s_d_i_f_f__o_p_t_i_o_n_s] [_f_i_l_e_s...]
          Your checked out files can be diffed against the origi-
          nal revisions they were based upon with the ddiiffff com-
          mand.  See rrccssddiiffff(l) for a list of accepted options.
          If no files are specified, ddiiffff will only ``diff''
          those files in the current directory that are different
          than the checked out revision (i.e. ones that _y_o_u have
          changed), or that are different than a specified revi-
          sion.  If files are specified, only those files are
          diffed.

          Two revisions may be specified as well.  In which case
          your private sources are not diffed at all.  Instead,
          the two revisions specified are diffed.

     lloogg [_r_l_o_g__o_p_t_i_o_n_s] [_f_i_l_e_s...]
          To display revision log information equivalent to the
          rrlloogg(l) program, the lloogg command is used.  See rrlloogg(l)
          for a list of accepted options.  If no files are speci-
          fied, lloogg will run an rrlloogg (with the arguments asa
          specified) on every file under ccvvss control in the



Sprite v1.0               20 July 1989                          6






CVS                  UNKNOWN MANUAL SECTION                   CVS



          current directory.  If files are specified, the log
          information of only those files is displayed.

     ssttaattuuss [_f_i_l_e_s...]
          Displays three lines of information for each of its
          argument files, one for the user file (line 1), one for
          the newest RCS file showing the current ``head'' revi-
          sion number (line 3), and one for the RCS file both
          derive from showing the date it was last updated (line
          2).

     aadddd [--mm '_m_e_s_s_a_g_e'] _f_i_l_e_s...
          To permanently create a new file or directory in the
          RCS source repository, the aadddd command is used.  The
          files or directories specified to aadddd must already
          exist in the current directory (which must have been
          created with the cchheecckkoouutt command).  For adding a whole
          new directory hierarchy to the source repository that
          was received from a third-party vendor, see the
          cchheecckkiinn(l) program for how to do this.

          If the argument refers to an immediate sub-directory,
          the directory is created at the correct place in the
          RCS source repository and the necessary ccvvss administra-
          tion files are created within the argument directory.
          It is not considered an error if the RCS source reposi-
          tory directory already exists.  Thus, to add a direc-
          tory to your private sources that was created after you
          had done your cchheecckkoouutt of the sources, you can do the
          following:

                    eexxaammppllee%% mmkkddiirr nneeww__ddiirreeccttoorryy
                    eexxaammppllee%% ccvvss aadddd nneeww__ddiirreeccttoorryy
                    eexxaammppllee%% ccvvss uuppddaattee nneeww__ddiirreeccttoorryy

          For each added file, a description of the file's pur-
          pose is read from the terminal in RCS fashion, unless
          the --mm option is specified, in which case the argument
          _m_e_s_s_a_g_e is used instead.  This description will become
          a permanent part of the created RCS file.

          The added files are not placed in the RCS source repo-
          sitory until they are ccoommmmiittted as a permanent change.
          Doing an aadddd on a file that has been removed with the
          rreemmoovvee command will resurrect the file, unless it has
          already been ccoommmmiittted.

     rreemmoovvee _f_i_l_e_s...
          Marks the specified files as removed on purpose from
          the current directory in the source repository.  The
          specified files must no longer exist in the current
          directory when the rreemmoovvee command is issued.  The files



Sprite v1.0               20 July 1989                          7






CVS                  UNKNOWN MANUAL SECTION                   CVS



          are not actually removed until they are ccoommmmiittted, at
          which point their respective RCS files in the source
          depository are _m_o_v_e_d into the _A_t_t_i_c directory within
          the source repository.  To restore a committed removed
          file to the present version requires an administrator
          to physically _m_o_v_e the RCS file out of the _A_t_t_i_c and
          back into its parent directory.

     jjooiinn [--QQqqff] [--rr _t_a_g|--DD _d_a_t_e__s_p_e_c] _f_i_l_e_s...
          The intended purpose of the jjooiinn command is to perform
          the logical merge of a new vendor release installed
          with the cchheecckkiinn(l) command with locally modified files
          from a previous vendor release.  The cchheecckkiinn program
          will inform you that a vendor file has been locally
          modified and it is up to _y_o_u to resolve the two
          branches of development (local and vendor) into a uni-
          fied revision that will be ccoommmmiittted as a permanent
          change to the source repository on the main (local)
          trunk.  The jjooiinn command will usually be used with the
          --rr option to specify the vendor tag that is to be
          merged with the local changes.  This merge is handled
          by RCS and the resultant file is placed in the current
          directory (within your private work space) and any con-
          flicts during the merge are displayed.

          After correcting any conflicts during the merge, ccoommmmiitt
          the joined file as usual with a modified file, and the
          result (with a bit of work, perhaps) should be a work-
          ing combination of the local changes and the vendor
          changes.

     iinnffoo [--ff] [--rr _t_a_g|--DD _d_a_t_e__s_p_e_c] _f_i_l_e_s...
          The iinnffoo command gives a brief summary of the state of
          your checked out files.  Its output is similar to that
          of the uuppddaattee command.  See the CCOONNFFLLIICCTT RREESSOOLLUUTTIIOONN
          section for details.  If no arguments are given iinnffoo
          will print the state of all files in the current direc-
          tory, otherwise it will print the state of the speci-
          fied files.  IInnffoo is not recursive. There is a small
          difference in the meaning of the CC notation between the
          iinnffoo and uuppddaattee commands.  IInnffoo will print a CC in front
          of any file that has been modified both locally and in
          the repository. UUppddaattee will only print a CC if a merge
          of the two versions produces a conflict.

     The following commands do their work entirely within the RCS
     source repository and, as such, do not require that a
     cchheecckkoouutt be done first.  These commands are usually of
     interest only to the person responsible for the release pro-
     cedures of a software package.  See the MMOODDUULLEE SSUUPPPPOORRTT sec-
     tion below for a full description of what a _m_o_d_u_l_e is.




Sprite v1.0               20 July 1989                          8






CVS                  UNKNOWN MANUAL SECTION                   CVS



_m_o_d_u_l_e_s...
     ppaattcchh [--QQqqllff] [--ss|--tt] [--rr _t_a_g|--DD _d_a_t_e__s_p_e_c [--rr _t_a_g|--
          DD _d_a_t_e__s_p_e_c]]
          Builds a Larry Wall format ppaattcchh(l) file between two
          releases that can be fed directly into the ppaattcchh pro-
          gram to bring an old release up-to-date with the new
          release.  The diff output is sent to the standard out-
          put device.  Note that any combination of one or two
          revisions or dates may be specified.  If only one revi-
          sion or date is specified, the ppaattcchh is made between
          that revision or date and the current ``head'' revi-
          sions in the RCS file.

          Note that if the software release that is being ppaattcchhed
          is contained in more than one directory, then it may be
          necessary to specify the --pp option to the ppaattcchh(l) com-
          mand when patching the old sources, so that ppaattcchh(l) is
          able to find the files that are located in other direc-
          tories.

          If the --ss option is specified, a patch file is not pro-
          duced.  Instead, a description of the changed or added
          files between the two releases is sent to the standard
          output device.  This is useful for finding out, for
          example, which files have changed between two dates or
          revisions.

          If the --tt option is specified, a diff of the top two
          revisions is sent to the standard output device.  This
          is most useful for seeing what the last change to a
          file was.

     ttaagg [--QQqqllffnn] [--dd] [--rr _t_a_g|--
          DD _d_a_t_e__s_p_e_c] _s_y_m_b_o_l_i_c__t_a_g _m_o_d_u_l_e_s...
          Sources in the repository can have a symbolic tag asso-
          ciated with them.  This allows one to ``snapshot'' the
          current sources when the software freeze date of a pro-
          ject arrives, and as bugs are fixed after the freeze
          date, only those changed sources that are to be part of
          the release need be re-tagged.

          The symbolic tags are meant to permanently record which
          revisions of which files were used in creating a
          software distribution.  The functionality provided with
          the cchheecckkoouutt and uuppddaattee commands allow one to extract
          an exact copy of this release at any time in the
          future, regardless of whether files have been aadddded or
          rreemmoovveed since the release was ttaaggged.  So in general,
          these symbolic names of software distributions should
          not be removed, but the --dd option is provided as a
          means to remove completely obsolete symbolic names if
          necessary (as might be the case for an Alpha release,



Sprite v1.0               20 July 1989                          9






CVS                  UNKNOWN MANUAL SECTION                   CVS



          say).  It is also possible to only tag files that
          already contain a certain tag.  This method would be
          used to rename a tag - tag only the files with the old
          tag, then delete the old tag leaving the new tag which
          would tag the exact same files as the old tag.

CCOOMMMMAANNDD OOPPTTIIOONNSS
     The following options are common to more than one of the ccvvss
     commands, and are explained in detail here once, for brev-
     ity.

     --QQ   Causes the command to be _r_e_a_l_l_y quiet.

     --qq   Causes the command to be somewhat quiet.

     --ll   Causes the command to not be recursive.  Only the
          specified directory will be processed.

     --ff   Forces the specified tag to match.  Normally, when a
          tag is specified with the --rr option and the RCS file
          does not contain the tag, the ``head'' revision for the
          RCS file is returned.  When the --ff option is specified,
          any RCS file that does not contain the specified tag is
          ignored.  This is useful for extracting an exact copy
          of a previously tagged release.

     --nn   Causes the command _n_o_t to run any cchheecckkoouutt/ccoommmmiitt/ttaagg
          program as specified in the modules database.

     --pp   On cchheecckkoouutt or uuppddaattee, prune directories that are empty
          after being updated.  This is useful for extracting an
          exact copy of a previously release, especially when
          combined with the --ff option.

     --rr _t_a_g
          Causes the command to use the revision specified by the
          _t_a_g argument instead of the usual ``head'' revision.
          The _t_a_g can be either a symbolic or numeric tag, in RCS
          fashion, except in the case of the ccoommmmiitt command, in
          which case the _t_a_g must be a numeric one.  Specifying
          the --qq option along with the --rr option is often useful,
          to suppress the warning messages when the RCS file does
          not contain the specified tag.

     --DD _d_a_t_e__s_p_e_c
          Causes the command to use the revision that was checked
          in at or before the specified _d_a_t_e__s_p_e_c argument.  The
          _d_a_t_e__s_p_e_c is a single argument, free form date descrip-
          tion specifying a date in the past.  This option
          implies the --ff option.  See the EEXXAAMMPPLLEESS section for
          useful examples of how the --DD option can be used.




Sprite v1.0               20 July 1989                         10






CVS                  UNKNOWN MANUAL SECTION                   CVS



CCOONNFFLLIICCTT RREESSOOLLUUTTIIOONN
     The algorithm used by cchheecckkoouutt and uuppddaattee is described in
     this section.  The output generated, unless the --QQ option is
     specified, consists of the following lines to describe
     exactly how your private sources are being brought up-to-
     date with the RCS source repository.

     UU _f_i_l_e
          The specified file was copied directly out of its
          respective RCS file from the source repository.  This
          is done because the condition of your user file matches
          one of the following:
          o+    The user file did not exist in your private
               sources, whether it was because you removed it, or
               because someone added it to the source repository.
          o+    The file did exist, but you did not change it and
               a different revision was matched in the RCS file,
               be it by the default ``head'' match, or via the --rr
               or --DD options.

     MM _f_i_l_e
          The specified file has been modified locally by you.
          Use the ddiiffff command to see the actual changes that you
          have made.

     AA _f_i_l_e
          The specified file has been added to your private copy
          of the sources, and will be added to the RCS source
          repository when the file is ccoommmmiittted.  This is a rem-
          inder to you that the file needs to be committed.

     RR _f_i_l_e
          The specified file has been removed from your private
          copy of the sources, and will be removed from the RCS
          source repository when the file is ccoommmmiittted.  This is
          a reminder to you that the file needs to be committed.

     CC _f_i_l_e_s
          The specified file was modified locally by you, and
          while doing the uuppddaattee, it was determined that a later
          revision had been checked into the respective RCS file.
          As a result, ccvvss performs an rrccssmmeerrggee(l), which com-
          bines the changes made to the RCS file with the changes
          that you have made to your version of the file.  If
          there were any lines in conflict during the merge (i.e.
          the other developer changed the same line that you have
          changed), then the CC is displayed to show that the file
          must be manually corrected.

          This merge process delimits the lines in conflict using
          lines beginning with ``>>>>>>>'' and ``<<<<<<<'', so it
          is easy to find the conflicts within your merged file.



Sprite v1.0               20 July 1989                         11






CVS                  UNKNOWN MANUAL SECTION                   CVS



          Note that your original, modified file is preserved in
          a backup file within the same directory that the file
          existed.  The backup file has the form
          ``..##_f_i_l_e.._v_e_r_s_i_o_n'', where the _v_e_r_s_i_o_n is the RCS revi-
          sion that your modified file was based upon.  Note that
          some systems automatically purge files that begin with
          ..## if they have not been accessed in roughly three
          days.  Thus, if you intend to keep a copy of your ori-
          ginal file, I strongly suggest that it be renamed.

          If the merge process proceeded without any conflicts,
          an MM is displayed instead of a CC.  It is still a wise
          idea to ddiiffff(1) the original version before the merge,
          contained in the backup file, with the merged version
          to verify that the merged changes make sense with your
          changes.

MMOODDUULLEE SSUUPPPPOORRTT
     The cchheecckkoouutt, ppaattcchh, and ttaagg commands all accept _m_o_d_u_l_e
     names as arguments.  The module database is stored as an
     nnddbbmm(3) format database within the CVSROOT.adm directory of
     your CVSROOT source repository.  The remainder of this sec-
     tion considers how the cchheecckkoouutt command operates on the
     modules database.  The operations for the other commands
     that use the database are similar, except that they do not
     create any files or directories in your work space, as
     cchheecckkoouutt does.

     The above commands search the module database for each
     module argument.  If the module database does not exist, or
     if the argument does not have a matching key in the module
     database, the argument is processed as follows:

     1.   The value of the CVSROOT environment variable is
          prepended to the argument to form a full path name.

     2.   If the full path name does not exist, either as a
          directory or as a file with an RCS ,,vv extension, the
          argument module cannot be resolved and the command con-
          tinues, processing any remaining argument modules.

     3.   If the full path name refers to a directory, the direc-
          tories leading up to the directory are created, start-
          ing from the current working directory, and the direc-
          tory is populated with the correct files, ready for
          your editing satisfaction.  If available, and the --ll
          option was not specified, sub-directories are created
          and populated as well, until the entire directory
          hierarchy of the specified module argument is recon-
          structed in your work space.

     4.   If the full path name, combined with an RCS ,,vv suffix



Sprite v1.0               20 July 1989                         12






CVS                  UNKNOWN MANUAL SECTION                   CVS



          exists, only that file is extracted.  The directories
          leading up to where the argument module resides are
          created, if necessary, and the leaf directory is popu-
          lated with the single source file.

     It should be clear from reading the above algorithm that the
     module database is not required to extract or process whole
     directory hierarchies, or even individual files.  However,
     the addition of the module database allows a high degree of
     flexibility to be added to the structure or naming of pieces
     of software within the CVSROOT source hierarchy.  The easi-
     est way to demonstrate the usefulness of the module database
     is by example.  And so, one follows:










































Sprite v1.0               20 July 1989                         13






CVS                  UNKNOWN MANUAL SECTION                   CVS



          #
          # Sample CVS Modules file
          #
          # Three different line formats are valid:
          #    key     -a    aliases...
          #    key [options] directory
          #    key [options] directory files...
          #
          # Where "options" are composed of:
          #    -i prog        Run "prog" on checkin of files
          #    -o prog        Run "prog" on "checkout" of files
          #    -t prog        Run "prog" on tagging of files
          #

          # Convenient aliases
          world          -a .

          # CVSROOT.adm support
          CVSROOT   -i /usr/local/bin/mkmodules CVSROOT.adm
          CVSROOT.adm    -i /usr/local/bin/mkmodules CVSROOT.adm
          modules        -i /usr/local/bin/mkmodules CVSROOT.adm modules
          loginfo        -i /usr/local/bin/mkmodules CVSROOT.adm loginfo

          # The "sys" entry exists only to make symbolic links after checkout
          sys       -o sys/tools/make_links sys

          # Sub-directories of "bin"
          awk       bin/awk
          csh       bin/csh
          diff      bin/diff
          make      bin/make
          sed       bin/sed
          sh        bin/sh

          # Programs that live in "bin"
          cat       bin Makefile cat.c
          chgrp          bin Makefile chgrp.c
          chmod          bin Makefile chmod.c
          cmp       bin Makefile cmp.c
          cp        bin Makefile cp.c
          date      bin Makefile date.c
          dd        bin Makefile dd.c

     The format of the _m_o_d_u_l_e_s file is also described in the
     above example.  The --aa option in the database indicates that
     the key is an alias, and that the right-hand side of the
     alias is to be interpreted by the command _e_x_a_c_t_l_y as if it
     had been specified as arguments on the command line for the
     command.  The --oo option indicates that the specified program
     is to be run on cchheecckkoouutt.  The key for the entry is passed
     as the sole argument to the program.  The --ii option indi-
     cates that the specified program is to be run on ccoommmmiitt.



Sprite v1.0               20 July 1989                         14






CVS                  UNKNOWN MANUAL SECTION                   CVS



     The full pathname of the respective source repository direc-
     tory is passed as the sole argument to the program.  The --tt
     option indicates that the specified program is to be run on
     ttaagg.  The key for the entry is passed as the sole argument
     to the program.

     As an example, the command

               eexxaammppllee%% ccvvss cchheecckkoouutt aawwkk

     will create the ``awk'' directory in your current working
     directory, if necessary, and populate it with the current
     revisions of the files in the ``$CVSROOT/bin/awk'' direc-
     tory.  The command

               eexxaammppllee%% ccvvss cchheecckkoouutt ddaattee

     will create the ``date'' directory and populate with exactly
     the two files ``Makefile'' and ``date.c'' from the
     ``$CVSROOT/bin/awk'' directory.

VVEENNDDOORR BBRRAANNCCHH SSUUPPPPOORRTT
     The branch support of RCS is used to provide a convenient
     method of tracking the changes made to a vendor's source
     distribution.  When a source distribution is received from a
     vendor, the first step is to run the cchheecckkiinn(l) program to
     place the vendor's files under CVS control.  cchheecckkiinn(l)
     arranges that the RCS files produced from the vendor's
     source distribution are initially setup to track the 1.1.1
     branch of the RCS file.  When a ccoommmmiitt is done to one of
     these files, making permanent some local change, the RCS
     file is changed to track the normal ``trunk'' branch, con-
     tinuing the local changes to the vendor's sources.

     When a new version of the vendor's source distribution is
     received, cchheecckkiinn is used again to add the new files to CVS.
     cchheecckkiinn again adds the files to the (now already existing)
     1.1.1 branch of the RCS file.  This time, however, cchheecckkiinn
     issues a warning when a new version of a locally modified
     file is updated by the vendor's source distribution.  It is
     your responsibility to then use the jjooiinn command of ccvvss to
     merge the vendor's changes with your local changes.  See the
     description of the jjooiinn command above.

     The --rr and --DD options of the cchheecckkoouutt and uuppddaattee commands
     work ``as expected'' with the vendor branch support.  In
     particular, the --DD option to check out based on a date in
     the past follows the current default branch to find a match
     for the specified date.  If a match cannot be found on the
     default branch, the 1.1.1 vendor branch is searched.  This
     allows checking out based on a date to work regardless of
     when local changes are made to the file.



Sprite v1.0               20 July 1989                         15






CVS                  UNKNOWN MANUAL SECTION                   CVS



LLOOGGGGIINNGG SSUUPPPPOORRTT
     When ccoommmmiittting a change to the source repository, a confi-
     gurable logging support file, _l_o_g_i_n_f_o, is consulted in the
     $CVSROOT/CVSROOT.adm directory.  An example of the file is
     as follows:

          # The "loginfo" file is used to control where "cvs commit"
          # log information is sent.  The first entry on a line is a
          # regular expression which is tested against the directory
          # that the change is being made to, relative to the
          # $CVSROOT.  If a match is found, then the remainder of the
          # line is a filter program that should expect log information
          # on its standard input.
          #
          # The filter program may use one and only one % modifier (ala
          # printf).  If %s is specified in the filter program, a brief
          # title is included (enclosed in single quotes) showing the
          # modified file names.
          #
          # If the repository name does not match any of the regular
          # expressions in this file, the "DEFAULT" line is used, if it
          # is specified.
          #
          DEFAULT   /usr/local/bin/nfpipe -t %s utils.updates
          ^diag          /usr/local/bin/nfpipe -t %s diag.updates
          ^local         /usr/local/bin/nfpipe -t %s local.updates
          ^perf          /usr/local/bin/nfpipe -t %s perf.updates
          ^sys      /usr/local/bin/nfpipe -t %s kernel.updates

     In addition, ``ALL'' can be specified as a special regular
     expression which always matches, but does not change the
     behaviour of when the ``DEFAULT'' branch is taken.  All
     matches for the regular expression are executed.  This log-
     ging feature allows for multiple groups and logging programs
     to share a single CVS source repository.

EEXXAAMMPPLLEESS
     Using the example _m_o_d_u_l_e_s and _l_o_g_i_n_f_o files shown above,
     this section shows some sample commands and describes their
     functions.

               eexxaammppllee%% ccvvss cchheecckkoouutt ccsshh
               eexxaammppllee%% ccdd ccsshh
               eexxaammppllee%% mmaakkee

     This command retrieves the current revision of the ``csh''
     sources and places them within the ``csh'' directory.  The
     ``make'' command within that directory will then build the
     ``csh'' executable.

               eexxaammppllee%% ccvvss cchheecckkoouutt --rrSSuunnOOSS ccsshh
               eexxaammppllee%% ccdd ccsshh



Sprite v1.0               20 July 1989                         16






CVS                  UNKNOWN MANUAL SECTION                   CVS



               eexxaammppllee%% mmaakkee

     These commands get the current SunOS revision of ``csh'' and
     builds the executable.

               eexxaammppllee%% ccvvss cchheecckkoouutt ddaattee
               eexxaammppllee%% ccdd ddaattee
               eexxaammppllee%% mmaakkee ddaattee

     These commands checkout the current revision of the ``date''
     command, along with the Makefile that is required to build
     the ``date'' executable.  The ``make'' command includes the
     target ``date'', since this Makefile is used to build much
     more than just ``date'' by default.

               eexxaammppllee%% ccvvss cchheecckkoouutt --qq ssyyss

     Gets a copy of the current kernel sources, including the
     entire kernel directory hierarchy.  The --qq option suppresses
     the message displayed as each directory is descended.

               eexxaammppllee%% ccvvss cchheecckkoouutt --pp --qq --ff --rrSSuunnOOSS ssyyss

     Gets an _e_x_a_c_t copy of the current revision SunOS kernel
     sources.  The --ff option forces only files that have the
     ``SunOS'' tag to be retrieved, not including files locally
     added to the kernel sources.  The --pp option prunes empty
     directories, thereby not including directories that have
     been locally added to the kernel source hierarchy.

               eexxaammppllee%% ccvvss cchheecckkoouutt --pp --DD ''AAuugguusstt 1100,, 11998899 1144::4400'' ssyyss

     The exact copy of the kernel sources as of the specified
     date and time is retrieved.  The date is a free-form
     strings, as specified in rrccss(l).

               eexxaammppllee%% ccvvss ddiiffff --cc
               eexxaammppllee%% ccvvss ccoommmmiitt --aa --mm ''ffiixxeedd NNUULLLL ppooiinntteerr ddeerreeffeerreennccee''

     The ddiiffff command displays a context diff of all the changes
     that you have made to the sources within the current direc-
     tory.  Only those files thaty you have changed are
     displayed.  The ccoommmmiitt command makes these changes permanent
     within the source repository so that others can benefit from
     your fix.

               eexxaammppllee%% ccvvss ddiiffff --cc --rrSSuunnOOSS ffiillee..cc
               eexxaammppllee%% ccvvss ddiiffff --cc --rr11..99 --rr11..1111 ffiillee..cc
               eexxaammppllee%% ccvvss ddiiffff --cc --rr11..2222 ffiillee..cc

     Examples of how the ddiiffff command can be used.  The first
     example displays the differences between the SunOS version



Sprite v1.0               20 July 1989                         17






CVS                  UNKNOWN MANUAL SECTION                   CVS



     of the file and your checked out version.  The second exam-
     ple shows the differences between two specific revisions of
     the RCS file.  The final example diffs the currently checked
     out file against a specific revision of the RCS file.

               eexxaammppllee%% ccvvss ttaagg PPrriissmmaaOOSS11__00 ccsshh
               eexxaammppllee%% ccvvss ttaagg PPrriissmmaaOOSS11__00 bbiinn
               eexxaammppllee%% ccvvss ttaagg tteesstt__kkeerrnneell ssyyss
               eexxaammppllee%% ccvvss ttaagg --dd tteesstt__kkeerrnneell ssyyss
               eexxaammppllee%% ccvvss ttaagg --qq --ff --rrSSuunnOOSS SSUUNNOOSS ..
               eexxaammppllee%% ccvvss ttaagg --DD ''JJuunnee 3300,, 11998899'' JJUUNNEE__KKEERRNNEELL ssyyss



FFIILLEESS
     CVS.adm
          A directory created by the cchheecckkoouutt command within each
          directory that contains checked out source files.  This
          directory holds all the ccvvss administration files for an
          individual's private copy of the sources.  In general,
          these files should not be edited by hand.  ccvvss will do
          that for you.  Be sure to _n_e_v_e_r remove this directory
          if you have source files that have been modified and
          need to be committed in the directory that the CVS.adm
          directory administrates.  The files contained in this
          directory are described below.

     CVS.adm/Entries
          Contains the list of files that have been checked out
          in the current directory along with the revision number
          that each checked out file is up-to-date with and a
          timestamp that is used to quickly determine if a file
          has been possibly modified or not.

     CVS.adm/Entries.Backup
          A backup of the previous CVS.adm/Entries file, just in
          case of catastrophe.

     CVS.adm/Entries.Static
          The existence of this file tells ccvvss to only use the
          files contained in the CVS.adm/Entries file when gen-
          erating the list of source files for this directory.
          This allows selected files from a directory in the
          source repository to be checked out and manipulated
          without requiring that the entire source directory be
          used.

     CVS.adm/Mod
          After doing an uuppddaattee command, this file reflects the
          current list of modified source files for the direc-
          tory.




Sprite v1.0               20 July 1989                         18






CVS                  UNKNOWN MANUAL SECTION                   CVS



     CVS.adm/Repository
          Holds the pathname to the respective directory in the
          source repository that these files refer to.  This is
          usually a relative pathname, with the value of the
          CVSROOT environment tacked on the front to produce a
          full pathname.  If the pathname in the
          CVS.adm/Repository file is already a full pathname, the
          CVSROOT value is not tacked on.

     CVS.adm/Checkin.prog
          Contains one line which specifies the program that is
          to be run when any files in the current directory are
          checked in to the source repository with the ccoommmmiitt
          command.  The particular use of this is to rebuild the
          ``modules'' database after a new revision is checked in
          - see mmkkmmoodduulleess(l).

     The following files or directories are created directly in
     the source repository directories as needed.

     CVSROOT.adm
          A directory that should exist in the top-most directory
          as defined by the CVSROOT environment variable.  This
          directory contains administrations files that define
          the global actions for the entire source repository
          beginning at CVSROOT . The files used directly by ccvvss
          in this directory are described below, though you are
          free to add others as you see fit.

     CVSROOT.adm/modules,v
          The RCS file which defines the _m_o_d_u_l_e_s supported within
          this source repository.  The format is as specified in
          the MMOODDUULLEE SSUUPPPPOORRTT section above for more information.

     CVSROOT.adm/loginfo,v
          The RCS file that contains the descriptions of which
          programs to pipe log messages into when ccoommmmiittting
          files.  See the LLOOGGGGIINNGG SSUUPPPPOORRTT section above for more
          information.

     Attic
          When RCS files are removed with the rreemmoovvee command, the
          actual RCS file is moved into the Attic directory where
          it will remain until someone uses the aadddd command to
          restore it as a needed source file.

     #cvs.lock
          A lock directory created by ccvvss when doing sensitive
          changes to the RCS source repository.

     #cvs.tfl._p_i_d
          A lock file created just to test the waters of the RCS



Sprite v1.0               20 July 1989                         19






CVS                  UNKNOWN MANUAL SECTION                   CVS



          source repository directory before committing files.

     #cvs.rfl._p_i_d
          A read lock created when doing the uuppddaattee command.  A
          ccoommmmiitt done by some other user will wait until all
          readers have finished using the directory before
          proceeding.

     #cvs.wfl._p_i_d
          A write lock created by ccoommmmiitt to cause any other
          uuppddaattees in the same source repository directory to
          block until the commit has completed.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
     CVSROOT
          Must be set for most commands.  Should contain the full
          pathname to the root of the ccvvss source repository, that
          is, where the RCS files are kept.

     CVSREAD
          If this is set, cchheecckkoouutt and uuppddaattee will try hard to
          make your private checked out sources read-only.  When
          this is not set, the default behaviour is to make
          read-write files.

     RCSBIN
          Specifies the full pathname where to find RCS programs,
          such as ccoo(l) and ccii(l).  If not set, the default is
          //uussrr//llooccaall//bbiinn.

     EDITOR
          Specifies the editor to use when doing a ccoommmmiitt.  If
          not set, the default editor used is //uussrr//uuccbb//vvii.

AAUUTTHHOORRSS
     Dick Grune
          Original author of the ccvvss shell script version posted
          to ccoommpp..ssoouurrcceess..uunniixx in the volume6 release of
          December, 1986.  Credited with much of the ccvvss conflict
          resolution algorithms.

     Brian Berliner
          Coder and designer of the ccvvss program itself in April,
          1989, based on the original work done by Dick.

     Jeff Polk
          Helped Brian with the design of the ccvvss module and ven-
          dor branch support and author of the cchheecckkiinn(l) shell
          script.

SSEEEE AALLSSOO
     cchheecckkiinn(l), ccii(l), ccoo(l), ddiiffff(1), ggrreepp(1), mmkkmmoodduulleess(l),



Sprite v1.0               20 July 1989                         20






CVS                  UNKNOWN MANUAL SECTION                   CVS



     nnddbbmm(3), ppaattcchh(l), rrccss(l), rrccssddiiffff(l), rrccssmmeerrggee(l), rrlloogg(l),
     rrmm(1), ssoorrtt(1).

BBUUGGSS
















































Sprite v1.0               20 July 1989                         21






