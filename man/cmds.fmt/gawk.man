


GAWK                      User Commands                      GAWK



NNAAMMEE
     gawk - pattern scanning and processing language

SSYYNNOOPPSSIISS
     ggaawwkk [ --aa ] [ --ee ] [ --cc ] [ --CC ] [ --VV ] [ --FF_f_s ] [ --vv
     _v_a_r=_v_a_l ] --ff _p_r_o_g_r_a_m-_f_i_l_e [ ---- ] file ...
     ggaawwkk [ --aa ] [ --ee ] [ --cc ] [ --CC ] [ --VV ] [ --FF_f_s ] [ --vv
     _v_a_r=_v_a_l ] [ ---- ] _p_r_o_g_r_a_m-_t_e_x_t file ...

DDEESSCCRRIIPPTTIIOONN
     _G_a_w_k is the GNU Project's implementation of the AWK program-
     ming language.  It conforms to the definition and descrip-
     tion of the language in _T_h_e _A_W_K _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, by
     Aho, Kernighan, and Weinberger, with the additional features
     defined in the System V Release 4 version of UNIX _a_w_k, and
     some GNU-specific extensions.

     The command line consists of options to _g_a_w_k itself, the AWK
     program text (if not supplied via the --ff option), and values
     to be made available in the AARRGGCC and AARRGGVV pre-defined AWK
     variables.

     _G_a_w_k accepts the following options, which should be avail-
     able on any implementation of the AWK language.

     --FF_f_s Use _f_s for the input field separator (the value of the
          FFSS predefined variable).

     --vv _v_a_r=_v_a_l
          Assign the value _v_a_l, to the variable _v_a_r, before exe-
          cution of the program begins.  Such variable values are
          available to the BBEEGGIINN block of an AWK program.

     --ff _p_r_o_g_r_a_m-_f_i_l_e
          Read the AWK program source from the file _p_r_o_g_r_a_m-_f_i_l_e,
          instead of from the first command line argument.  Mul-
          tiple --ff options may be used.

     ----   Signal the end of options. This is useful to allow
          further arguments to the AWK program itself to start
          with a ``-''.  This is mainly for consistency with the
          argument parsing convention used by most other System V
          programs.

     The following options are specific to the GNU implementa-
     tion.

     --aa   Use AWK style regular expressions as described in the
          book.  This is the current default, but may not be when
          the POSIX P1003.2 standard is finalized.  It is orthog-
          onal to --cc.




Free Software Foundation August 24 1989                         1






GAWK                      User Commands                      GAWK



     --ee   Use _e_g_r_e_p(1) style regular expressions as described in
          POSIX standard.  This may become the default when the
          POSIX P1003.2 standard is finalized.  It is orthogonal
          to --cc.

     --cc   Run in _c_o_m_p_a_t_i_b_i_l_i_t_y mode.  In compatibility mode, _g_a_w_k
          behaves identically to UNIX _a_w_k; none of the GNU-
          specific extensions are recognized.

     --CC   Print the short version of the GNU copyright informa-
          tion message on the error output.  This option may
          disappear in a future version of _g_a_w_k.

     --VV   Print version information for this particular copy of
          _g_a_w_k on the error output.  This is useful mainly for
          knowing if the current copy of _g_a_w_k on your system is
          up to date with respect to whatever the Free Software
          Foundation is distributing.  This option may disappear
          in a future version of _g_a_w_k.

     Any other options are flagged as illegal, but are otherwise
     ignored.

     An AWK program consists of a sequence of pattern-action
     statements and optional function definitions.

          _p_a_t_t_e_r_n   {{ _a_c_t_i_o_n _s_t_a_t_e_m_e_n_t_s }}
          ffuunnccttiioonn _n_a_m_e((_p_a_r_a_m_e_t_e_r _l_i_s_t)) {{ _s_t_a_t_e_m_e_n_t_s }}

     _G_a_w_k first reads the program source from the _p_r_o_g_r_a_m-_f_i_l_e(s)
     if specified, or from the first non-option argument on the
     command line.  The --ff option may be used multiple times on
     the command line.  _G_a_w_k will read the program text as if all
     the _p_r_o_g_r_a_m-_f_i_l_es had been concatenated together.  This is
     useful for building libraries of AWK functions, without hav-
     ing to include them in each new AWK program that uses them.
     To use a library function in a file from a program typed in
     on the command line, specify //ddeevv//ttttyy as one of the
     _p_r_o_g_r_a_m-_f_i_l_es, type your program, and end it with a ^^DD
     (control-d).

     The environment variable AAWWKKPPAATTHH specifies a search path to
     use when finding source files named with the --ff option.  If
     this variable does not exist, the default path is
     ""..:://uussrr//lliibb//aawwkk:://uussrr//llooccaall//lliibb//aawwkk"".  If a file name given
     to the --ff option contains a ``/'' character, no path search
     is performed.

     _G_a_w_k compiles the program into an internal form, executes
     the code in the BBEEGGIINN block(s) (if any), and then proceeds
     to read each file named in the AARRGGVV array.  If there are no
     files named on the command line, _g_a_w_k reads the standard



Free Software Foundation August 24 1989                         2






GAWK                      User Commands                      GAWK



     input.

     If a ``file'' named on the command line has the form _v_a_r==_v_a_l
     it is treated as a variable assignment. The variable _v_a_r
     will be assigned the value _v_a_l.  This is most useful for
     dynamically assigning values to the variables AWK uses to
     control how input is broken into fields and records. It is
     also useful for controlling state if multiple passes are
     needed over a single data file.

     For each line in the input, _g_a_w_k tests to see if it matches
     any _p_a_t_t_e_r_n in the AWK program.  For each pattern that the
     line matches, the associated _a_c_t_i_o_n is executed.

VVAARRIIAABBLLEESS AANNDD FFIIEELLDDSS
     AWK variables are dynamic; they come into existence when
     they are first used. Their values are either floating-point
     numbers or strings, depending upon how they are used. AWK
     also has one dimension arrays; multiply dimensioned arrays
     may be simulated.  There are several pre-defined variables
     that AWK sets as a program runs; these will be described as
     needed and summarized below.

     FFiieellddss

     As each input line is read, _g_a_w_k splits the line into
     _f_i_e_l_d_s, using the value of the FFSS variable as the field
     separator.  If FFSS is a single character, fields are
     separated by that character.  Otherwise, FFSS is expected to
     be a full regular expression.  In the special case that FFSS
     is a single blank, fields are separated by runs of blanks
     and/or tabs.  Note that the value of IIGGNNOORREECCAASSEE (see below)
     will also affect how fields are split when FFSS is a regular
     expression.

     Each field in the input line may be referenced by its posi-
     tion, $$11, $$22, and so on.  $$00 is the whole line. The value of
     a field may be assigned to as well.  Fields need not be
     referenced by constants:

          nn == 55
          pprriinntt $$nn

     prints the fifth field in the input line.  The variable NNFF
     is set to the total number of fields in the input line.

     References to non-existent fields (i.e. fields after $$NNFF),
     produce the null-string. However, assigning to a non-
     existent field (e.g., $$((NNFF++22)) == 55) will increase the value
     of NNFF, create any intervening fields with the null string as
     their value, and cause the value of $$00 to be recomputed,




Free Software Foundation August 24 1989                         3






GAWK                      User Commands                      GAWK



     with the fields being separated by the value of OOFFSS.

     BBuuiilltt--iinn VVaarriiaabblleess

     AWK's built-in variables are:

          AARRGGCC the number of command line arguments (does not
               include options to _g_a_w_k, or the program source).

          AARRGGVV array of command line arguments. The array is
               indexed from 0 to AARRGGCC - 1.  Dynamically changing
               the contents of AARRGGVV can control the files used
               for data.

          EENNVVIIRROONN
               An array containing the values of the current
               environment.  The array is indexed by the environ-
               ment variables, each element being the value of
               that variable (e.g., EENNVVIIRROONN[[""HHOOMMEE""]] might be
               //uu//aarrnnoolldd).  Changing this array does not affect
               the environment seen by programs which _g_a_w_k spawns
               via redirection or the ssyysstteemm function.  (This may
               change in a future version of _g_a_w_k.)

          FFIILLEENNAAMMEE
               the name of the current input file.  If no files
               are specified on the command line, the value of
               FFIILLEENNAAMMEE is ``-''.

          FFNNRR  the input record number in the current input file.

          FFSS   the input field separator, a blank by default.

          IIGGNNOORREECCAASSEE
               Controls the case-sensitivity of all regular
               expression operations. If IIGGNNOORREECCAASSEE has a non-
               zero value, then pattern matching in rules, field
               splitting with FFSS, regular expression matching
               with ~~ and !!~~, and the ggssuubb(()), iinnddeexx(()), mmaattcchh(()),
               sspplliitt(()), and ssuubb(()) pre-defined functions will all
               ignore case when doing regular expression opera-
               tions.  Thus, if IIGGNNOORREECCAASSEE is not equal to zero,
               //aaBB// matches all of the strings ""aabb"", ""aaBB"", ""AAbb"",
               and ""AABB"".  As with all AWK variables, the initial
               value of IIGGNNOORREECCAASSEE is zero, so all regular
               expression operations are normally case-sensitive.

          NNFF   the number of fields in the current input record.

          NNRR   the total number of input records seen so far.

          OOFFMMTT the output format for numbers, %%..66gg by default.



Free Software Foundation August 24 1989                         4






GAWK                      User Commands                      GAWK



          OOFFSS  the output field separator, a blank by default.

          OORRSS  the output record separator, by default a newline.

          RRSS   the input record separator, by default a newline.
               RRSS is exceptional in that only the first character
               of its string value is used for separating
               records. If RRSS is set to the null string, then
               records are separated by blank lines.  When RRSS is
               set to the null string, then the newline character
               always acts as a field separator, in addition to
               whatever value FFSS may have.

          RRSSTTAARRTT
               the index of the first character matched by
               mmaattcchh(()); 0 if no match.

          RRLLEENNGGTTHH
               the length of the string matched by mmaattcchh(()); -1 if
               no match.

          SSUUBBSSEEPP
               the character used to separate multiple subscripts
               in array elements, by default ""\\003344"".

     AArrrraayyss

     Arrays are subscripted with an expression between square
     brackets ([[ and ]]).  If the expression is an expression list
     (_e_x_p_r, _e_x_p_r ...) then the array subscript is a string con-
     sisting of the concatenation of the (string) value of each
     expression, separated by the value of the SSUUBBSSEEPP variable.
     This facility is used to simulate multiply dimensioned
     arrays. For example:

          ii == ""AA"" ;; jj == ""BB"" ;; kk == ""CC""
          xx[[ii,, jj,, kk]] == ""hheelllloo,, wwoorrlldd\\nn""

     assigns the string ""hheelllloo,, wwoorrlldd\\nn"" to the element of the
     array xx which is indexed by the string ""AA\\003344BB\\003344CC"". All
     arrays in AWK are associative, i.e. indexed by string
     values.

     The special operator iinn may be used in an iiff or wwhhiillee state-
     ment to see if an array has an index consisting of a partic-
     ular value.

          iiff ((vvaall iinn aarrrraayy))
               pprriinntt aarrrraayy[[vvaall]]

     If the array has multiple subscripts, use ((ii,, jj)) iinn aarrrraayy.




Free Software Foundation August 24 1989                         5






GAWK                      User Commands                      GAWK



     The iinn construct may also be used in a ffoorr loop to iterate
     over all the elements of an array.

     An element may be deleted from an array using the ddeelleettee
     statement.

     VVaarriiaabbllee TTyyppiinngg

     Variables and fields may be (floating point) numbers, or
     strings, or both. How the value of a variable is interpreted
     depends upon its context. If used in a numeric expression,
     it will be treated as a number, if used as a string it will
     be treated as a string.

     To force a variable to be treated as a number, add 0 to it;
     to force it to be treated as a string, concatenate it with
     the null string.

     The AWK language defines comparisons as being done numeri-
     cally if possible, otherwise one or both operands are con-
     verted to strings and a string comparison is performed.

     Uninitialized variables have the numeric value 0 and the
     string value "" (the null, or empty, string).

PPAATTTTEERRNNSS AANNDD AACCTTIIOONNSS
     AWK is a line oriented language. The pattern comes first,
     and then the action. Action statements are enclosed in {{ and
     }}.  Either the pattern may be missing, or the action may be
     missing, but, of course, not both. If the pattern is miss-
     ing, the action will be executed for every single line of
     input.  A missing action is equivalent to

          {{ pprriinntt }}

     which prints the entire line.

     Comments begin with the ``#'' character, and continue until
     the end of the line.  Blank lines may be used to separate
     statements.  Normally, a statement ends with a newline, how-
     ever, this is not the case for lines ending in a ``,'',
     ``{'', ``?'', ``:'', ``&&'', or ``||''.  Lines ending in ddoo
     or eellssee also have their statements automatically continued
     on the following line.  In other cases, a line can be con-
     tinued by ending it with a ``\'', in which case the newline
     will be ignored.

     Multiple statements may be put on one line by separating
     them with a ``;''.  This applies to both the statements
     within the action part of a pattern-action pair (the usual





Free Software Foundation August 24 1989                         6






GAWK                      User Commands                      GAWK



     case), and to the pattern-action statements themselves.

     PPaatttteerrnnss
     AWK patterns may be one of the following:

          BBEEGGIINN
          EENNDD
          //_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n//
          _r_e_l_a_t_i_o_n_a_l _e_x_p_r_e_s_s_i_o_n
          _p_a_t_t_e_r_n &&&& _p_a_t_t_e_r_n
          _p_a_t_t_e_r_n |||| _p_a_t_t_e_r_n
          _p_a_t_t_e_r_n ?? _p_a_t_t_e_r_n :: _p_a_t_t_e_r_n
          ((_p_a_t_t_e_r_n))
          !! _p_a_t_t_e_r_n
          _p_a_t_t_e_r_n_1,, _p_a_t_t_e_r_n_2

     BBEEGGIINN and EENNDD are two special kinds of patterns which are
     not tested against the input.  The action parts of all BBEEGGIINN
     patterns are merged as if all the statements had been writ-
     ten in a single BBEEGGIINN block. They are executed before any of
     the input is read. Similarly, all the EENNDD blocks are merged,
     and executed when all the input is exhausted (or when an
     eexxiitt statement is executed).  BBEEGGIINN and EENNDD patterns cannot
     be combined with other patterns in pattern expressions.
     BBEEGGIINN and EENNDD patterns cannot have missing action parts.

     For //_r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n// patterns, the associated statement
     is executed for each input line that matches the regular
     expression.  Regular expressions are the same as those in
     _e_g_r_e_p(1), and are summarized below.

     A _r_e_l_a_t_i_o_n_a_l _e_x_p_r_e_s_s_i_o_n may use any of the operators defined
     below in the section on actions.  These generally test
     whether certain fields match certain regular expressions.

     The &&&&, ||||, and !! operators are logical AND, logical OR, and
     logical NOT, respectively, as in C.  They do short-circuit
     evaluation, also as in C, and are used for combining more
     primitive pattern expressions. As in most languages,
     parentheses may be used to change the order of evaluation.

     The ??:: operator is like the same operator in C. If the first
     pattern is true then the pattern used for testing is the
     second pattern, otherwise it is the third. Only one of the
     second and third patterns is evaluated.

     The _p_a_t_t_e_r_n_1,, _p_a_t_t_e_r_n_2 form of an expression is called a
     range pattern.  It matches all input lines starting with a
     line that matches _p_a_t_t_e_r_n_1, and continuing until a line that
     matches _p_a_t_t_e_r_n_2, inclusive. It does not combine with any





Free Software Foundation August 24 1989                         7






GAWK                      User Commands                      GAWK



     other sort of pattern expression.

     RReegguullaarr EExxpprreessssiioonnss
     Regular expressions are the extended kind found in _e_g_r_e_p.
     They are composed of characters as follows:

          _c    matches the non-metacharacter _c.

          _\_c   matches the literal character _c.

          ..    matches any character except newline.

          ^^    matches the beginning of a line or a string.

          $$    matches the end of a line or a string.

          [[_a_b_c...]]
               character class, matches any of the characters
               _a_b_c....

          [[^^_a_b_c...]]
               negated character class, matches any character
               except _a_b_c... and newline.

          _r_1||_r_2
               alternation: matches either _r_1 or _r_2.

          _r_1_r_2 concatenation: matches _r_1, and then _r_2.

          _r++   matches one or more _r's.

          _r**   matches zero or more _r's.

          _r??   matches zero or one _r's.

          ((_r))  grouping: matches _r.
     The escape sequences that are valid in string constants (see
     below) are also legal in regular expressions.

     AAccttiioonnss
     Action statements are enclosed in braces, {{ and }}.  Action
     statements consist of the usual assignment, conditional, and
     looping statements found in most languages. The operators,
     control statements, and input/output statements available
     are patterned after those in C.

     OOppeerraattoorrss

     The operators in AWK, in order of increasing precedence, are

          == ++== --== **== //== %%== ^^==
               Assignment. Both absolute assignment ((_v_a_r == _v_a_l_u_e))



Free Software Foundation August 24 1989                         8






GAWK                      User Commands                      GAWK



               and operator-assignment (the other forms) are sup-
               ported.

          ??::   The C conditional expression. This has the form
               _e_x_p_r_1 ?? _e_x_p_r_2 :: _e_x_p_r_3. If _e_x_p_r_1 is true, the value
               of the expression is _e_x_p_r_2, otherwise it is _e_x_p_r_3.
               Only one of _e_x_p_r_2 and _e_x_p_r_3 is evaluated.

          ||||   logical OR.

          &&&&   logical AND.

          ~~ !!~~ regular expression match, negated match.

          << <<== >> >>== !!== ====
               the regular relational operators.

          _b_l_a_n_k
               string concatenation.

          ++ --  addition and subtraction.

          ** // %%
               multiplication, division, and modulus.

          ++ -- !!
               unary plus, unary minus, and logical negation.

          ^^    exponentiation (**** may also be used, and ****== for
               the assignment operator).

          ++++ ----
               increment and decrement, both prefix and postfix.

          $$    field reference.

     CCoonnttrrooll SSttaatteemmeennttss

     The control statements are as follows:

          iiff ((_c_o_n_d_i_t_i_o_n)) _s_t_a_t_e_m_e_n_t [ eellssee _s_t_a_t_e_m_e_n_t ]
          wwhhiillee ((_c_o_n_d_i_t_i_o_n)) _s_t_a_t_e_m_e_n_t
          ddoo _s_t_a_t_e_m_e_n_t wwhhiillee ((_c_o_n_d_i_t_i_o_n))
          ffoorr ((_e_x_p_r_1;; _e_x_p_r_2;; _e_x_p_r_3)) _s_t_a_t_e_m_e_n_t
          ffoorr ((_v_a_r iinn _a_r_r_a_y)) _s_t_a_t_e_m_e_n_t
          bbrreeaakk
          ccoonnttiinnuuee
          ddeelleettee _a_r_r_a_y[[_i_n_d_e_x]]
          eexxiitt [ _e_x_p_r_e_s_s_i_o_n ]
          {{ _s_t_a_t_e_m_e_n_t_s }}





Free Software Foundation August 24 1989                         9






GAWK                      User Commands                      GAWK



     II//OO SSttaatteemmeennttss

     The input/output statements are as follows:

          cclloossee((_f_i_l_e_n_a_m_e))
               close file (or pipe, see below).

          ggeettlliinnee
               set $$00 from next input record; set NNFF, NNRR, FFNNRR.

          ggeettlliinnee <<_f_i_l_e
               set $$00 from next record of _f_i_l_e; set NNFF.

          ggeettlliinnee _v_a_r
               set _v_a_r from next input record; set NNFF, FFNNRR.

          ggeettlliinnee _v_a_r <<_f_i_l_e
               set _v_a_r from next record of _f_i_l_e.

          nneexxtt Stop processing the current input record. The next
               input record is read and processing starts over
               with the first pattern in the AWK program. If the
               end of the input data is reached, the EENNDD
               block(s), if any, are executed.

          pprriinntt
               prints the current record.

          pprriinntt _e_x_p_r-_l_i_s_t
               prints expressions.

          pprriinntt _e_x_p_r-_l_i_s_t >>_f_i_l_e
               prints expressions on _f_i_l_e.

          pprriinnttff _f_m_t, _e_x_p_r-_l_i_s_t
               format and print.

          pprriinnttff _f_m_t, _e_x_p_r-_l_i_s_t >>_f_i_l_e
               format and print on _f_i_l_e.

          ssyysstteemm((_c_m_d-_l_i_n_e))
               execute the command _c_m_d-_l_i_n_e, and return the exit
               status.  (This may not be available on systems
               besides UNIX and GNU.)

     Other input/output redirections are also allowed. For pprriinntt
     and pprriinnttff, >>>>_f_i_l_e appends output to the _f_i_l_e, while || _c_o_m_-
     _m_a_n_d writes on a pipe.  In a similar fashion, _c_o_m_m_a_n_d || ggeett--
     lliinnee pipes into ggeettlliinnee.  GGeettlliinnee will return 0 on end of






Free Software Foundation August 24 1989                        10






GAWK                      User Commands                      GAWK



     file, and -1 on an error.

     TThhee _p_r_i_n_t_f SSttaatteemmeenntt

     The AWK versions of the pprriinnttff and sspprriinnttff (see below) func-
     tions accept the following conversion specification formats:

          %%cc   An ASCII character.  If the argument used for %%cc
               is numeric, it is treated as a character and
               printed.  Otherwise, the argument is assumed to be
               a string, and the only first character of that
               string is printed.

          %%dd   A decimal number (the integer part).

          %%ii   Just like %%dd.

          %%ee   A floating point number of the form
               [[--]]dd..ddddddddddddEE[[++--]]dddd.

          %%ff   A floating point number of the form [[--]]dddddd..dddddddddddd.

          %%gg   Use ee or ff conversion, whichever is shorter, with
               nonsignificant zeros suppressed.

          %%oo   An unsigned octal number (again, an integer).

          %%ss   A character string.

          %%xx   An unsigned hexadecimal number (an integer).

          %%XX   Like %%xx, but using AABBCCDDEEFF instead of aabbccddeeff.

          %%%%   A single %% character; no argument is converted.

     There are optional, additional parameters that may lie
     between the %% and the control letter:

          --    The expression should be left-justified within its
               field.

          _w_i_d_t_h
               The field should be padded to this width. If the
               number has a leading zero, then the field will be
               padded with zeros.  Otherwise it is padded with
               blanks.

          .._p_r_e_c
               A number indicating the maximum width of strings
               or digits to the right of the decimal point.

     The dynamic _w_i_d_t_h and _p_r_e_c capabilities of the C library



Free Software Foundation August 24 1989                        11






GAWK                      User Commands                      GAWK



     pprriinnttff routines are not supported.  However, they may be
     simulated by using the AWK concatenation operation to build
     up a format specification dynamically.

     SSppeecciiaall FFiillee NNaammeess

     When doing I/O redirection from either pprriinntt or pprriinnttff into
     a file, or via ggeettlliinnee from a file, _g_a_w_k recognizes certain
     special filenames internally.  These filenames allow access
     to open file descriptors inherited from _g_a_w_k's parent pro-
     cess (usually the shell).  The filenames are:

          //ddeevv//ssttddiinn
               The standard input.

          //ddeevv//ssttddoouutt
               The standard output.

          //ddeevv//ssttddeerrrr
               The standard error output.

          //ddeevv//ffdd//_n
               The file denoted by the open file descriptor _n.

     These are particularly useful for error messages. For exam-
     ple:

          pprriinntt ""YYoouu bblleeww iitt!!"" >> ""//ddeevv//ssttddeerrrr""

     whereas you would otherwise have to use

          pprriinntt ""YYoouu bblleeww iitt!!"" || ""ccaatt 11>>&&22""

     These file names may also be used on the command line to
     name data files.

     NNuummeerriicc FFuunnccttiioonnss

     AWK has the following pre-defined arithmetic functions:

          aattaann22((_y,, _x))
               returns the arctangent of _y/_x in radians.

          ccooss((_e_x_p_r))
               returns the cosine in radians.

          eexxpp((_e_x_p_r))
               the exponential function.

          iinntt((_e_x_p_r))
               truncates to integer.




Free Software Foundation August 24 1989                        12






GAWK                      User Commands                      GAWK



          lloogg((_e_x_p_r))
               the natural logarithm function.

          rraanndd(())
               returns a random number between 0 and 1.

          ssiinn((_e_x_p_r))
               returns the sine in radians.

          ssqqrrtt((_e_x_p_r))
               the square root function.

          ssrraanndd((_e_x_p_r))
               use _e_x_p_r as a new seed for the random number gen-
               erator. If no _e_x_p_r is provided, the time of day
               will be used.  The return value is the previous
               seed for the random number generator.

     SSttrriinngg FFuunnccttiioonnss

     AWK has the following pre-defined string functions:

          ggssuubb((_r,, _s,, _t))
               for each substring matching the regular expression
               _r in the string _t, substitute the string _s, and
               return the number of substitutions.  If _t is not
               supplied, use $$00.

          iinnddeexx((_s,, _t))
               returns the index of the string _t in the string _s,
               or 0 if _t is not present.

          lleennggtthh((_s))
               returns the length of the string _s.

          mmaattcchh((_s,, _r))
               returns the position in _s where the regular
               expression _r occurs, or 0 if _r is not present, and
               sets the values of RRSSTTAARRTT and RRLLEENNGGTTHH.

          sspplliitt((_s,, _a,, _r))
               splits the string _s into the array _a on the regu-
               lar expression _r, and returns the number of
               fields. If _r is omitted, FFSS is used instead.

          sspprriinnttff((_f_m_t,, _e_x_p_r-_l_i_s_t))
               prints _e_x_p_r-_l_i_s_t according to _f_m_t, and returns the
               resulting string.

          ssuubb((_r,, _s,, _t))
               this is just like ggssuubb, but only the first match-
               ing substring is replaced.



Free Software Foundation August 24 1989                        13






GAWK                      User Commands                      GAWK



          ssuubbssttrr((_s,, _i,, _n))
               returns the _n-character substring of _s starting at
               _i.  If _n is omitted, the rest of _s is used.

          ttoolloowweerr((_s_t_r))
               returns a copy of the string _s_t_r, with all the
               upper-case characters in _s_t_r translated to their
               corresponding lower-case counterparts.  Non-
               alphabetic characters are left unchanged.

          ttoouuppppeerr((_s_t_r))
               returns a copy of the string _s_t_r, with all the
               lower-case characters in _s_t_r translated to their
               corresponding upper-case counterparts.  Non-
               alphabetic characters are left unchanged.

     SSttrriinngg CCoonnssttaannttss

     String constants in AWK are sequences of characters enclosed
     between double quotes (""). Within strings, certain _e_s_c_a_p_e
     _s_e_q_u_e_n_c_e_s are recognized, as in C. These are:

          \\\\   A literal backslash.

          \\aa   The ``alert'' character; usually the ASCII BEL
               character.

          \\bb   backspace.

          \\ff   form-feed.

          \\nn   new line.

          \\rr   carriage return.

          \\tt   horizontal tab.

          \\vv   vertical tab.

          \\xx_h_e_x _d_i_g_i_t_s
               The character represented by the string of hexade-
               cimal digits following the \\xx.  As in ANSI C, all
               following hexadecimal digits are considered part
               of the escape sequence.  (This feature should tell
               us something about language design by committee.)
               E.g., "\x1B" is the ASCII ESC (escape) character.

          \\_d_d_d The character represented by the 1-, 2-, or 3-
               digit sequence of octal digits. E.g. "\033" is the
               ASCII ESC (escape) character.

          \\_c   The literal character _c.



Free Software Foundation August 24 1989                        14






GAWK                      User Commands                      GAWK



     The escape sequences may also be used inside constant regu-
     lar expressions (e.g., //[[ \\tt\\ff\\nn\\rr\\vv]]// matches whitespace
     characters).

FFUUNNCCTTIIOONNSS
     Functions in AWK are defined as follows:

          ffuunnccttiioonn _n_a_m_e((_p_a_r_a_m_e_t_e_r _l_i_s_t)) {{ _s_t_a_t_e_m_e_n_t_s }}

     Functions are executed when called from within the action
     parts of regular pattern-action statements. Actual parame-
     ters supplied in the function call are used to instantiate
     the formal parameters declared in the function.  Arrays are
     passed by reference, other variables are passed by value.

     Since functions were not originally part of the AWK
     language, the provision for local variables is rather
     clumsy: they are declared as extra parameters in the parame-
     ter list. The convention is to separate local variables from
     real parameters by extra spaces in the parameter list. For
     example:

          ffuunnccttiioonn  ff((pp,, qq,,     aa,, bb)) {{ ## aa && bb aarree llooccaall
                         .......... }}

          //aabbcc//     {{ ...... ;; ff((11,, 22)) ;; ...... }}

     The left parenthesis in a function call is required to
     immediately follow the function name, without any interven-
     ing white space.  This is to avoid a syntactic ambiguity
     with the concatenation operator.  This restriction does not
     apply to the built-in functions listed above.

     Functions may call each other and may be recursive.  Func-
     tion parameters used as local variables are initialized to
     the null string and the number zero upon function invoca-
     tion.

     The word ffuunncc may be used in place of ffuunnccttiioonn.

EEXXAAMMPPLLEESS
     Print and sort the login names of all users:

          BBEEGGIINN     {{ FFSS == ""::"" }}
               {{ pprriinntt $$11 || ""ssoorrtt"" }}

     Count lines in a file:

               {{ nnlliinneess++++ }}
          EENNDD  {{ pprriinntt nnlliinneess }}

     Precede each line by its number in the file:



Free Software Foundation August 24 1989                        15






GAWK                      User Commands                      GAWK



          {{ pprriinntt FFNNRR,, $$00 }}

     Concatenate and line number (a variation on a theme):

          {{ pprriinntt NNRR,, $$00 }}

SSEEEE AALLSSOO
     _e_g_r_e_p(1)

     _T_h_e _A_W_K _P_r_o_g_r_a_m_m_i_n_g _L_a_n_g_u_a_g_e, Alfred V. Aho, Brian W. Ker-
     nighan, Peter J. Weinberger, Addison-Wesley, 1988. ISBN 0-
     201-07981-X.

     _T_h_e _G_A_W_K _M_a_n_u_a_l, published by the Free Software Foundation,
     1989.

SSYYSSTTEEMM VV RREELLEEAASSEE 44 CCOOMMPPAATTIIBBIILLIITTYY
     A primary goal for _g_a_w_k is compatibility with the latest
     version of UNIX _a_w_k.  To this end, _g_a_w_k incorporates the
     following user visible features which are not described in
     the AWK book, but are part of _a_w_k in System V Release 4.

     The --vv option for assigning variables before program execu-
     tion starts is new.  The book indicates that command line
     variable assignment happens when _a_w_k would otherwise open
     the argument as a file, which is after the BBEEGGIINN block is
     executed.  However, in earlier implementations, when such an
     assignment appeared before any file names, the assignment
     would happen _b_e_f_o_r_e the BBEEGGIINN block was run.  Applications
     came to depend on this ``feature.'' When _a_w_k was changed to
     match its documentation, this option was added to accomodate
     applications that depended upon the old behaviour.

     When processing arguments, _g_a_w_k uses the special option
     ``----'' to signal the end of arguments, and warns about, but
     otherwise ignores, undefined options.

     The AWK book does not define the return value of ssrraanndd(()).
     The System V Release 4 version of UNIX _a_w_k has it return the
     seed it was using, to allow keeping track of random number
     sequences. Therefore ssrraanndd(()) in _g_a_w_k also returns its
     current seed.

     Other new features are: The use of multiple --ff options; the
     EENNVVIIRROONN array; the \\aa, and \\vv, \\xx escape sequences; the
     ttoolloowweerr and ttoouuppppeerr built-in functions; and the ANSI C
     conversion specifications in pprriinnttff.

GGNNUU EEXXTTEENNSSIIOONNSS
     _G_a_w_k has some extensions to System V _a_w_k.  They are
     described in this section.  All the extensions described
     here can be disabled by compiling _g_a_w_k with --DDSSTTRRIICCTT, or by



Free Software Foundation August 24 1989                        16






GAWK                      User Commands                      GAWK



     invoking _g_a_w_k with the --cc option.  If the underlying operat-
     ing system supports the //ddeevv//ffdd directory and corresponding
     files, then _g_a_w_k can be compiled with --DDNNOO__DDEEVV__FFDD to disable
     the special filename processing.

     The following features of _g_a_w_k are not available in System V
     _a_w_k.

          o+    The special file names available for I/O redirec-
               tion are not recognized.

          o+    The IIGGNNOORREECCAASSEE variable and its side-effects are
               not available.

          o+    No path search is performed for files named via
               the --ff option.  Therefore the AAWWKKPPAATTHH environment
               variable is not special.

          o+    The --aa, --ee, --cc, --CC, and --VV command line options.

     The AWK book does not define the return value of the cclloossee
     function.  _G_a_w_k's cclloossee returns the value from _f_c_l_o_s_e(3), or
     _p_c_l_o_s_e(3), when closing a file or pipe, respectively.

     When _g_a_w_k is invoked with the --cc option, if the _f_s argument
     to the --FF option is ``t'', then FFSS will be set to the tab
     character.  Since this is a rather ugly special case, it is
     not the default behavior.

BBUUGGSS
     The --FF option is not necessary given the command line vari-
     able assignment feature; it remains only for backwards com-
     patibility.

     There are now too many options.  Fortunately, most of them
     are rarely needed.

AAUUTTHHOORRSS
     The original version of UNIX _a_w_k was designed and imple-
     mented by Alfred Aho, Peter Weinberger, and Brian Kernighan
     of AT&T Bell Labs. Brian Kernighan continues to maintain and
     enhance it.

     Paul Rubin and Jay Fenlason, of the Free Software Founda-
     tion, wrote _g_a_w_k, to be compatible with the original version
     of _a_w_k distributed in Seventh Edition UNIX.  John Woods con-
     tributed a number of bug fixes.  David Trueman of Dalhousie
     University, with contributions from Arnold Robbins at Emory
     University, made _g_a_w_k compatible with the new version of
     UNIX _a_w_k.





Free Software Foundation August 24 1989                        17






GAWK                      User Commands                      GAWK



AACCKKNNOOWWLLEEDDGGEEMMEENNTTSS
     Brian Kernighan of Bell Labs provided valuable assistance
     during testing and debugging.  We thank him.




















































Free Software Foundation August 24 1989                        18



