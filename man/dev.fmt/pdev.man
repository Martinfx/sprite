


PDEV                         Devices                         PDEV



_________________________________________________________________

NNAAMMEE
     Pseudo-devices - files controlled by server processes.

_________________________________________________________________

IINNTTRROODDUUCCTTIIOONN
     A pseudo-device is a special file that is  controlled  by  a
     user-level  process,  which  is  called  its _s_e_r_v_e_r.  To all
     other  processes,  called  _c_l_i_e_n_t_s,  the  pseudo-device   is
     accessed  like  an  ordinary  file  or  device using regular
     Sprite system calls.  This allows  user-level  processes  to
     emulate  a  file  or  device with arbitrary characteristics.
     Pseudo-devices are used in Sprite  for  terminal  emulation,
     access  to Internet protocols, the stream communication used
     by the window system, and for the user-level  implementation
     of other services.

     This document describes how to write  server  programs  that
     control  pseudo-devices  using  the  raw  kernel  interface.
     There is also a Pdev library package that takes care of most
     of these details.  See the Pdev man page for details.

     A pseudo-device server is much like an RPC server; it  waits
     for  requests, performs some task, and returns results.  The
     server has a _s_e_r_v_i_c_e _s_t_r_e_a_m for each client that has  opened
     the  pseudo-device.  Each time the client makes an operation
     on the pseudo-device the kernel maps this  into  a  request-
     response  exchange  over  the service stream.  The remaining
     sections describe this protocol in more detail.  (The header
     file /sprite/lib/include/dev/pdev.h contains the type defin-
     itions repeated here, and describes the Fs_IOControl() calls
     mentioned here in more detail.)

CCOONNTTRROOLL SSTTRREEAAMM
     The server of a pseudo-device is established by opening  the
     pseudo-device  with  the O_MASTER flag.  This returns a _c_o_n_-
     _t_r_o_l _s_t_r_e_a_m to the server process.  The  server  listens  on
     the  control stream for messages issued when client open the
     pseudo-device.

       #include <sys/file.h>
       #include <dev/pdev.h>

       cntrlStreamID = open("_p_s_e_u_d_o-_d_e_v_i_c_e", O_MASTER | O_RDONLY, 0666);

     The server's open  call  will  fail  with  the  FS_FILE_BUSY
     status  if there is already a server process controlling the
     pseudo device.  Similarly, a client's open  will  fail  with
     DEV_OFFLINE  if  there  is no server process controlling the
     pseudo-device.

     The server establishes contact with a client in a  two  part



Sprite v.1.0        Printed:  August 14, 1990                   1






PDEV                         Devices                         PDEV



     process.  First, it reads a Pdev_Notify message off the con-
     trol stream that indicates the streamID of the  new  service
     stream  used  to communicate with the client.  In the second
     phase, the server responds to an initial  PDEV_OPEN  request
     on the new service stream.  The server's response determines
     if the client's open operation will succeed or fail.   Refer
     to  the  following  section on the request-response protocol
     for examples that use the control stream and  handle  client
     requests.


RREEQQUUEESSTT--RREESSPPOONNSSEE
     Whenever a client invokes an operation on the  pseudo-device
     (Fs_Read,  Fs_Write, Fs_IOControl, Fs_Close) the kernel for-
     wards it to the server process so the server  can  implement
     it  in  any  way  it chooses.  This is done using a request-
     response protocol much like a Remote Procedure  Call  (RPC).
     The  kernel  packages  up the parameters of the system call,
     passes them to the server  process  in  a  _r_e_q_u_e_s_t  _m_e_s_s_a_g_e,
     blocks the client process until a _r_e_p_l_y _m_e_s_s_a_g_e is returned,
     and unpackages the return parameters from the reply message.
     This is transparent to the client, but not to the server.

     This is the format of the request and reply messages:

     typedef struct {
         unsigned int magic;       /* PDEV_REQUEST_MAGIC or PFS_REQUEST_MAGIC */
         int operation;            /* What action is requested. */
         int messageSize;          /* The complete size of the request header
                                    * plus data, plus padding for alignment */
         int requestSize;          /* Size of data following this header */
         int replySize;            /* Max size of the reply data expected. */
         int dataOffset;           /* Offset of data from start of header */
     } Pdev_RequestHdr;

     typedef struct {
         Pdev_RequestHdr hdr;      /* with PDEV_REQUEST_MAGIC */
         union {                   /* Additional parameters to the operation. */
             Pdev_OpenParam open;
             Pdev_RWParam read;
             Pdev_RWParam write;
             Pdev_IOCParam ioctl;
             Pdev_SetAttrParam setAttr;
         } param;
         /*
          * Data, if any, follows.
          */
     } Pdev_Request;

     typedef struct Pdev_Reply {
         unsigned int magic;       /* == PDEV_REPLY_MAGIC */
         int status;               /* Return status of remote call */



Sprite v.1.0        Printed:  August 14, 1990                   2






PDEV                         Devices                         PDEV



         int selectBits;           /* Return select state bits */
         int replySize;            /* Size of the data in replyBuf, if any */
         Address replyBuf;         /* Server space address of reply data */
         int reserved;             /* Room for future expansion */
     } Pdev_Reply;


     The server does not read the request messages directly  from
     the  service  stream.   Instead,  there  is a _r_e_q_u_e_s_t _b_u_f_f_e_r
     associated with each service stream that is in the  server's
     own   address  space.   The  kernel  puts  request  messages
     directly into this buffer.  Access to  the  buffer  is  syn-
     chronized  using  two pointers, _f_i_r_s_t_B_y_t_e and _l_a_s_t_B_y_t_e.  The
     server reads the values of these pointers from  the  service
     stream,  and  can safely examine the request(s) found in the
     request buffer between firstByte  and  lastByte.   When  the
     server  is done with requests it updates firstByte by making
     an Fs_IOControl() call (IOC_PDEV_SET_PTRS)  on  the  request
     stream.

     The kernel fills the request buffer circularly,  and  it  is
     possible  that  more  than one request will be found between
     firstByte and lastByte.   This  occurs  if  write-behind  is
     enabled (see below), or if the client process forks and both
     processes use their duplicated stream to the  pseudo-device.
     As  a  convenience  to  servers,  the  kernel  never wraps a
     request message  around  the  end  of  the  request  buffer.
     Instead,  if  the  request  buffer fills up the kernel waits
     until the server has  processed  all  the  request  messages
     before  resetting and adding messages starting at the begin-
     ning of the buffer.

     Three example procedures follow.   The  first,  GetClient(),
     reads  the control stream and sets up the new request stream
     and its associated request  buffer.   The  second,  Serve(),
     illustrates  the  use  of  _f_i_r_s_t_B_y_t_e and _l_a_s_t_B_y_t_e.  The last
     one, Reply(), uses Fs_IOControl to return the reply message.
     Fuller  examples  can be found in the Pdev library code, see
     /sprite/src/lib/c/etc/pdev.c.

     /*
      * _G_e_t_C_l_i_e_n_t _r_e_t_u_r_n_s _t_h_e _s_t_r_e_a_m_I_D _f_o_r _a _n_e_w _r_e_q_u_e_s_t _s_t_r_e_a_m.
      */
     int
     GetClient(cntrlStreamID, reqBufSize)
         int cntrlStreamID;
         int reqBufSize;
     {
         Pdev_SetBufArgs setBuf;
         Pdev_Notify notify;
         int amountRead;
         int newStreamID;



Sprite v.1.0        Printed:  August 14, 1990                   3






PDEV                         Devices                         PDEV



         /*
          * _R_e_a_d _t_h_e _c_o_n_t_r_o_l _s_t_r_e_a_m _t_o _g_e_t _a _n_e_w _r_e_q_u_e_s_t _s_t_r_e_a_m.
          * (_Y_o_u _s_h_o_u_l_d _c_h_e_c_k _t_h_e _r_e_t_u_r_n _f_r_o_m _F_s__R_e_a_d _a_n_d _v_e_r_i_f_y
          *  _t_h_e _m_a_g_i_c _n_u_m_b_e_r _i_n _t_h_e _P_d_e_v__N_o_t_i_f_y _s_t_r_u_c_t_u_r_e.)
          */
         Fs_Read(cntrlStreamID, sizeof(Pdev_Notify), (Address) &notify, &amountRead);
         newStreamID = notify.streamID;
         /*
          * _A_l_l_o_c_a_t_e _t_h_e _r_e_q_u_e_s_t _b_u_f_f_e_r, _a_n_d _t_e_l_l _t_h_e _k_e_r_n_e_l _a_b_o_u_t _i_t.
          */
         setBuf.requestBufAddr = Mem_Alloc(reqBufSize);
         setBuf.requestBufSize = reqBufSize;
         setBuf.readBufAddr = 0;
         setBuf.readBufSize = 0;
         Fs_IOControl(newStreamID, IOC_PDEV_SET_BUF, sizeof(Pdev_SetBufArgs),
                 (Address)&setBuf, 0, 0);
         return(newStreamID);
     }

     Serve(requestStream, requestBuffer)
         int requestStream;
         Address requestBuffer;
     {
         Pdev_BufPtrs bufPtrs;
         int amountRead;
         Pdev_Request *requestMsg;

         /*
          * _R_e_a_d _t_h_e _f_i_r_s_t_B_y_t_e _a_n_d _l_a_s_t_B_y_t_e _p_o_i_n_t_e_r_s.
          * (_Y_o_u _s_h_o_u_l_d _c_h_e_c_k _t_h_e _r_e_t_u_r_n _f_r_o_m _F_s__R_e_a_d _a_n_d _v_e_r_i_f_y
          *  _t_h_e _m_a_g_i_c _n_u_m_b_e_r _i_n _t_h_e _P_d_e_v__B_u_f_P_t_r_s _s_t_r_u_c_t_u_r_e.)
          */
         Fs_Read(requestStreamID, sizeof(Pdev_BufPtrs), &bufPtrs, &amountRead);
         while (bufPtrs.requestFirstByte < bufPtrs.requestLastByte) {
                 /*
                  * _C_a_s_t _a _p_o_i_n_t_e_r _t_o _t_h_e _r_e_q_u_e_s_t _m_e_s_s_a_g_e.
                  * (_Y_o_u _s_h_o_u_l_d _v_e_r_i_f_y _t_h_e _m_a_g_i_c _n_u_m_b_e_r _i_n _t_h_e _P_d_e_v__R_e_q_u_e_s_t.)
                  */
                 requestMsg = (Pdev_Request *)&requestBuffer[bufPtrs.requestFirstByte];
                 switch (requestMsg->hdr.operation) {
                 /*
                  * _S_w_i_t_c_h _o_u_t _t_o _o_p_e_r_a_t_i_o_n _s_p_e_c_i_f_i_c _c_o_d_e _h_e_r_e...
                  */
                 }
                 bufPtrs.requestFirstByte += requestMsg->hdr.messageSize;
         }
         /*
          * _M_o_v_e _t_h_e _f_i_r_s_t_B_y_t_e _p_o_i_n_t_e_r _p_a_s_t _t_h_e _p_r_o_c_e_s_s_e_d _r_e_q_u_e_s_t _m_e_s_s_a_g_e_s.
          */
         Fs_IOControl(requestStreamID, IOC_PDEV_SET_PTRS, sizeof(Pdev_BufPtrs), &bufPtrs, 0, 0);
     }




Sprite v.1.0        Printed:  August 14, 1990                   4






PDEV                         Devices                         PDEV



     Reply(requestStream, status, selectBits, replyBuf)
         int requestStream;
         ReturnStatus status;
         Address replyBuf;
     {
         Pdev_Reply reply;
         /*
          * _F_o_r_m_a_t _a_n_d _r_e_t_u_r_n _t_h_e _r_e_p_l_y _m_e_s_s_a_g_e.
          */
         reply.magic = PDEV_REPLY_MAGIC;
         reply.status = status;
         reply.selectBits = selectBits;
         reply.replySize = replySize;
         reply.replyBuf = replyBuf;
         Fs_IOControl(requestStream, IOC_PDEV_REPLY, sizeof(Pdev_Reply), (Address)&reply, 0, 0);
     }

     Let's review before moving on to select,  write-behind,  and
     read  buffering.   The  control  stream is returned when the
     server opens the pseudo-device using the O_MASTER  flag.   A
     service  stream  is created each time a client process opens
     the pseudo-device, and it is used by the  server  to  handle
     requests  from  that  client.   The server reads the control
     stream to get new service stream IDs.  The  kernel  forwards
     client operations on the pseudo-device to the server using a
     request-response protocol.   The  protocol  uses  a  request
     buffer in the server's address space, and an associated pair
     of pointers, firstByte and lastByte.  There is  one  request
     buffer  and pair of pointers per service stream.  The server
     reads new values of firstByte and lastByte from the  service
     stream.   After  it is done with the request(s) found in the
     request  buffer   the   server   updates   firstByte   using
     IOC_PDEV_SET_PTRS.    Replies   are  returned  with  another
     Fs_IOControl(), IOC_PDEV_REPLY.

SSEELLEECCTT AANNDD AASSYYNNCCHHRROONNOOUUSS II//OO
     Note that the select  operation  is  not  forwarded  to  the
     server.   It  is too costly to switch out to the server pro-
     cess each time a client process makes a select that includes
     a  stream to a pseudo-device.  Instead, the kernel maintains
     some select bits for each request stream (one bit  each  for
     readability,  writability,  and  exceptional conditions) and
     checks this state itself.  The server updates the state bits
     each time it replies, or by making by using IOC_PDEV_READY.

     The sever can optimize writes to the pseudo-device  by  ena-
     bling  write-behind.   With  write-behind enabled the kernel
     does not block the client waiting for a  reply  to  a  write
     request.   Instead,  the write is assumed to have succeeded,
     and the client can  continue  to  write  until  the  request
     buffer  fills  up.   This  reduces  the  number  of  context
     switches made when handling writes to be proportional to the



Sprite v.1.0        Printed:  August 14, 1990                   5






PDEV                         Devices                         PDEV



     amount  of  data  written,  instead  of  proportional to the
     number of write calls by the  client.   If  write-behind  is
     enabled    the   operation   code   for   writes   will   be
     PPDDEEVV__WWRRIITTEE__AASSYYNNCC  instead  of  PPDDEEVV__WWRRIITTEE.   Note  that  the
     server has to accept all data written (there is no opportun-
     ity for an error return), and it does not return a reply  to
     write   requests.    Write-behind   is   enabled  using  the
     IOC_PDEV_WRITE_BEHIND Fs_IOControl() call.  The input buffer
     for this Fs_IOControl() should contain a boolean which indi-
     cates whether or not write behind is enabled.

     The server can optimize  reads  from  the  pseudo-device  by
     using  a  read buffer.  The read buffer is used in a similar
     way as the request buffer.  In this case the server  process
     adds  data  to  the read buffer as it becomes available, and
     the kernel removes data in response to client read requests.
     Again,  this  reduces  the number of context switches to the
     server process.  Like the request buffer, the read buffer is
     in  the server's address space.  The IOC_PDEV_SET_BUF iocon-
     trol() call is used to  declare  both  buffers.   Its  input
     buffer  contains  a Pdev_SetBufArgs structure.  Synchroniza-
     tion over the read buffer is also done  with  _f_i_r_s_t_B_y_t_e  and
     _l_a_s_t_B_y_t_e pointers.  (The Pdev_BufPtrs structure that is read
     from the service stream contains a  firstByte-lastByte  pair
     for  both  the request and read buffers.) The kernel updates
     readFirstByte as the client  process  reads  data,  and  the
     server  process  updates readLastByte as its adds data.  The
     IOC_PDEV_SET_PTR iocontrol() call is used by the  server  to
     set  both  readLastByte  and requestFirstByte.  An important
     convention is that -1 (minus one) means  ``no  change''  and
     can  safely be passed in for either readLastByte or request-
     FirstByte.  Another important convention is that the  server
     should  reset  and  begin  filling  the read buffer from the
     beginning after it empties.  The server  knows  when  it  is
     empty  when it reads (-1,-1) for readFirstByte and readLast-
     Byte.

RREEGGUULLAARR OOPPEERRAATTIIOONNSS
     The following short sections describes the different request
     messages  that the server will receive.  They each have some
     extra parameters, and may require  special  actions  on  the
     part of the server.

     PDEV_OPEN

            typedef struct Pdev_OpenParam {
              int flags;                /* Flags from the Fs_Open call */
              Proc_PID pid;             /* Client's process ID */
              int hostID;               /* Host ID where client is from */
              int uid;                  /* User ID of the client process */
              Fmt_Format format;        /* Defines byte order of client machine */
              int reserved;             /* Reserved for future expansion */



Sprite v.1.0        Printed:  August 14, 1990                   6






PDEV                         Devices                         PDEV



            } Pdev_OpenParam;

          This is the first request to arrive on  a  new  service
          stream  when  a  client  opens the pseudo-device.  (The
          kernel waits until the request buffer is  declared,  of
          course, before issuing this request.) The client's open
          call will block  until  the  server  responds  to  this
          request.   The reply status returned by the server will
          be the return status of the Fs_Open call by the client.
          The  request parameters include a process ID and a user
          ID of the client so the server can  do  authentication.
          The format parameter is used in conjuction with library
          routines to handle byte swapping of  data  blocks  sent
          and received with the PDEV_IOCTL command.


     PDEV_CLOSE
          A client has closed the device. This is the  last  mes-
          sage  that  will  arrive  on  the service stream so the
          server should close the service stream.  There  are  no
          close specific parameters in the request header.


     PDEV_READ

            typedef struct {
              int offset;               /* Read/Write byte offset */
              unsigned int familyID;    /* Process group ID */
              Proc_PID procID;          /* Process ID */
              int reserved;             /* Extra */
            } Pdev_RWParam;

          A client is requesting request.replySize bytes of  data
          from  the  pseudo-device.   The read request parameters
          include a byte offset at which  the  read  should  take
          place,  and the process's familyID which can be used to
          enforce the notion of a controlling process  group  for
          the   pseudo-device.    The  amount  of  data  actually
          returned should be  set  in  reply.replySize,  and  the
          status  of  the read should be set in reply.status.  An
          end-of-file  on  the  pseudo-device  is  indicated   by
          returning  zero bytes and a SUCCESS status.  If no data
          is   available   the   server   should    return    the
          FS_WOULD_BLOCK  status.   In  this case the kernel will
          block the client process until the server indicates the
          pseudo-device  is readable by making the IOC_PDEV_READY
          iocontrol() call:

              bits = FS_WRITABLE | FS_READABLE;/* _a_s _a_p_p_r_o_p_r_i_a_t_e... */
              status = Fs_IOControl(streamID, IOC_PDEV_READY, sizeof(int),
                                        (Address)&bits, 0, 0;




Sprite v.1.0        Printed:  August 14, 1990                   7






PDEV                         Devices                         PDEV



          This will unblock the client process and cause  another
          FS_PDEV_READ request to arrive on the service stream.

          Note that the server will not see PDEV_READ requests if
          it  has  enabled  read-ahead.  Read-ahead is implicitly
          enabled if the IOC_PDEV_SET_BUF iocontrol() call  indi-
          cates a non-zero sized read-ahead buffer.


     PDEV_WRITE
          A client is writing data  to  the  pseudo-device.   The
          amount   of   data   being   written  is  indicated  in
          request.requestSize, and the write parameters  are  the
          same  as  those for read: they include an offset, and a
          familyID, and a processID.  The  data  written  follows
          the  request header immediately.  The reply information
          on a synchronous write is  an  integer  containing  the
          number of bytes accepted by the server.  The server can
          accept some (or none) of  the  data  being  written  by
          returning   FS_WOULD_BLOCK  and  the  number  of  bytes
          accepted.  The server unblocks the client  process  (as
          described    above    for   FS_PDEV_READ)   using   the
          IOC_PDEV_READY iocontrol().

          The semantics of returning FS_WOULD_BLOCK are important
          because the Sprite kernel takes care of blocking client
          processes and retrying write operations until the  full
          amount  of  data  is  transferred to the pseudo-device,
          unless the stream is set to  non-blocking,  of  course.
          To  repeat,  the  write  service  routine should return
          FS_WOULD_BLOCK if it doesn't accept all the data  given
          to it.


     PDEV_WRITE_SYNC
          If write-behind is enabled then this operation code  is
          issued  instead  of  PPDDEEVV__WWRRIITTEE.  The message format is
          the same for both synchronous and asynchronous  writes.
          The  important  difference  is  that  the server has to
          accept all of the data and it does not return a  reply.
          Thus asynchronous writes implicitly succeed.


     PDEV_IOCONTROL

              typedef struct {
                                        int command;/* iocontrol() command #. */
                                        unsigned int familyID;/* Can be used to enforce controlling tty */
                                        Proc_PID procID;/* Process ID of client */
                                        int byteOrder;/* Defines client's byte ordering */
                                        int reserved;/* Extra */
              } Pdev_IOCParam;



Sprite v.1.0        Printed:  August 14, 1990                   8






PDEV                         Devices                         PDEV



          A client is doing some device-specific operation.   The
          Fs_IOControl  parameters  include the client's command,
          an inBuffer, and an outBuffer.  The server  process  is
          free  to  define  and implement any command it desires.
          For example, the Internet protocol pseudo-devices  sup-
          ports  commands  to  bind  to addresses, accept connec-
          tions, etc.

BBYYTTEE OORRDDEERRIINNGG IISSSSUUEESS
     In order to correctly support clients executing on  machines
     with  a  different  byte order than their server, the format
     field is used to define the client's byte order.  A  set  of
     library routines is available to byte swap the block of data
     that follows the  PDEV_IOCTL  message  header.   It  is  the
     servers  responsibility to byte swap the input data block of
     the PDEV_IOCTL command, and to byte  swap  the  return  data
     block.   This  is not an issue with reads and writes because
     the data is assumed to be a string of characters.


PPSSEEUUDDOO--FFIILLEE--SSYYSSTTEEMM SSUUPPPPOORRTT
     Pseudo-device connections  can  be  made  into  pseudo-file-
     systems  when  files  in  the pseudo-file-system are opened.
     The pseudo-device connection is exactly as described in this
     manual,  except  that  the connection is created differently
     using the IIOOCC__PPFFSS__OOPPEENN  command  on  the  pseudo-file-system
     naming  service  stream.   (See  the  devices pfs man page.)
     Additionally, however, there are two  operations  concerning
     attributes  that appear in the request stream.  These opera-
     tions are only made on pseudo-device connections to  pseudo-
     file-system servers.


     PDEV_GET_ATTR
          This is used to get the  attributes  of  a  file  in  a
          pseudo-file-system.   There  are no extra input parame-
          ters  to  this  call.   The   returned   data   is   an
          FFss__AAttttrriibbuutteess record.


     PDEV_SET_ATTR

          typedef struct {
              int flags;                /* Which attributes to set */
              int uid;                  /* User ID */
              int gid;                  /* Group ID */
          } Pdev_SetAttrParam;

     This is used to set  certain  attributes  of  a  file  in  a
     pseudo-file-system.  The ffllaaggss parameter is a combination of
     FFSS__SSEETT__TTIIMMEESS, FFSS__SSEETT__MMOODDEE,  FFSS__SSEETT__OOWWNNEERR,  FFSS__SSEETT__FFIILLEE__TTYYPPEE,
     FFSS__SSEETT__DDEEVVIICCEE  that  indicates  what attributes to set.  The



Sprite v.1.0        Printed:  August 14, 1990                   9






PDEV                         Devices                         PDEV



     uuiidd and ggiidd identify the calling process and should be  used
     to  check  permissions.   A FFss__AAttttrriibbuutteess record follows the
     request message header  and  contains  the  new  attributes.
     There is no return data for this call.


SSEERRVVEERR II//OO CCOONNTTRROOLLSS
     The server uses a number of IOC_PDEV  iocontrol()  calls  to
     implement  its part of the request-response protocol.  These
     are summarized here, although the  header  file  pdev.h  can
     also be consulted.

     IOC_PDEV_SET_BUF
          This is used to  tell  the  kernel  where  the  request
          buffer  and  read  ahead buffer (if any) are. The input
          buffer should contain a Pdev_SetBufArgs struct.

     IOC_PDEV_WRITE_BEHIND
          Set  (Unset)  write-behind  buffering  in  the  request
          buffer.   The  single  input argument is a pointer to a
          Boolean; TRUE enables write-behind, FALSE inhibits  it.
          The default is no write-behind.

     IOC_PDEV_BIG_WRITES
          Set (Unset) the ability of the client to write a  chunk
          larger  than will fit into the request buffer.  This is
          to support UDP socket semantics that prevent  a  client
          from  writing  more than the declared packet size.  The
          input buffer should reference a Boolean;  TRUE  enables
          big  writes  (which  is the default) FALSE prevents big
          writes.  The default is to  allow  big  writes.   Large
          client  write requests are broken up by the server into
          write requests that will fit into the  request  buffer.
          The  request  stream  is  locked during this so that no
          other client operations can slip in.

     IOC_PDEV_SET_PTRS
          This is used  to  update  the  firstByte  and  lastByte
          pointers  into the request and read ahead buffers.  The
          input buffer is a Pdev_BufPtrs structure.

     IOC_PDEV_REPLY
          This is used to send a reply to a request.   The  input
          buffer contains a Pdev_Reply.  This includes an address
          (in the server's space) of a  buffer  containing  reply
          data, if any.

     IOC_PDEV_READY
          The server uses this to  notify  the  kernel  that  the
          pseudo-device  is  ready for I/O now.  The input buffer
          should contain an  int  with  an  or'd  combination  of
          FS_READABLE, FS_WRITABLE, or FS_EXCEPTION.



Sprite v.1.0        Printed:  August 14, 1990                  10






PDEV                         Devices                         PDEV



     IOC_PDEV_SIGNAL_OWNER
          The server uses this to signal the  owning  process  or
          process  group.   The  input  buffer  is  a PPddeevv__SSiiggnnaall
          record containing a ssiiggnnaall and ccooddee field.   The  owner
          gets  established  by  a IOC_SET_OWNER operation on the
          client end of the pseudo-device connection.


FFIILLEESS
     /sprite/lib/include/dev/pdev.h-pseudo-device definitions

SSEEEE AALLSSOO
     Pdev, pfs, Fs_Open, Fs_Close, Fs_Read, Fs_Write,  Fs_Select,
     Fs_IOControl, Fs_EventHandlerCreate, Bit

KKEEYYWWOORRDDSS
     pseudo-device, device, server, client, read,  write,  iocon-
     trol





































Sprite v.1.0        Printed:  August 14, 1990                  11



