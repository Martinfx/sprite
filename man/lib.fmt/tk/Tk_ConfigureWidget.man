


Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



_________________________________________________________________

NNAAMMEE
     Tk_ConfigureWidget, Tk_Offset,  Tk_ConfigureInfo  -  process
     configuration options for widgets

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ttkk..hh>>

     int
     TTkk__CCoonnffiigguurreeWWiiddggeett((_i_n_t_e_r_p, _t_k_w_i_n, _s_p_e_c_s, _a_r_g_c, _a_r_g_v, _w_i_d_g_R_e_c, _f_l_a_g_s))

     int
     TTkk__OOffffsseett((_t_y_p_e, _f_i_e_l_d))

     int
     TTkk__CCoonnffiigguurreeIInnffoo((_i_n_t_e_r_p, _t_k_w_i_n, _s_p_e_c_s, _w_i_d_g_R_e_c, _a_r_g_v_N_a_m_e, _f_l_a_g_s))

AARRGGUUMMEENNTTSS
     Tcl_Interp      *_i_n_t_e_r_p    (in)      Interpreter to use  for
                                          returning   error  mes-
                                          sages.

     Tk_Window       _t_k_w_i_n      (in)      Window     used      to
                                          represent        widget
                                          (needed  to  set  up  X
                                          resources).

     Tk_ConfigSpec   *_s_p_e_c_s     (in)      Pointer to table speci-
                                          fying  legal configura-
                                          tion options  for  this
                                          widget.

     int             _a_r_g_c       (in)      Number of arguments  in
                                          _a_r_g_v.

     char            **_a_r_g_v     (in)      Command-line    options
                                          for configuring widget.

     char            *_w_i_d_g_R_e_c   (in/out)  Points to widget record
                                          structure.   Fields  in
                                          this   structure    get
                                          modified             by
                                          TTkk__CCoonnffiigguurreeWWiiddggeett   to
                                          hold      configuration
                                          information.

     int             _f_l_a_g_s      (in)      If  non-zero,  then  it
                                          specifies  one  or more
                                          flags that control  the
                                          processing   of  confi-
                                          guration   information.



Sprite v.1.0       Printed:  September 5, 1991                  1






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



                                          Different  flags may be
                                          OR'ed  together.    The
                                          only   flag   currently
                                          defined              is
                                          TK_CONFIG_ARGV_ONLY.

     char            *_a_r_g_v_N_a_m_e  (in)      The name  used  on  Tcl
                                          command  lines to refer
                                          to a particular  option
                                          (e.g.  when  creating a
                                          widget or invoking  the
                                          ccoonnffiigguurree  widget  com-
                                          mand).   If   non-NULL,
                                          then   information   is
                                          returned only for  this
                                          option.   If NULL, then
                                          information is returned
                                          for    all    available
                                          options.

     type name       _t_y_p_e       (in)      The name of the type of
                                          a widget record.

     field name      _f_i_e_l_d      (in)      The name of a field  in
                                          records of type _t_y_p_e.

_________________________________________________________________

DDEESSCCRRIIPPTTIIOONN
     TTkk__CCoonnffiigguurreeWWiiddggeett is called to configure various aspects of
     a  widget,  such as colors, fonts, border width, etc.  It is
     intended as a convenience procedure to reduce the amount  of
     code  that  must be written in individual widget managers to
     handle configuration information.  It is  typically  invoked
     when  widgets are created, and again when the ccoonnffiigguurree com-
     mand is invoked for a widget.  TTkk__CCoonnffiigguurreeWWiiddggeett  processes
     a  table (_s_p_e_c_s) specifying the configuration options needed
     by this widget.  For each entry in _s_p_e_c_s, TTkk__CCoonnffiigguurreeWWiiddggeett
     checks for an _a_r_g_v value that matches the entry;  if none is
     found, it checks in the option database for  an  appropriate
     value,  and  if  none  is found then it uses a default value
     from _s_p_e_c_s.  The value is used to locate an  X  resource  or
     other  value  and  store  information  about that value in a
     field of _w_i_d_g_R_e_c where the widget code can access it.

     TTkk__CCoonnffiigguurreeWWiiddggeett normally returns  the  value  TCL_OK;  in
     this  case  it  does  not modify _i_n_t_e_r_p.  If an error occurs
     then TCL_ERROR is returned and TTkk__CCoonnffiigguurreeWWiiddggeett will leave
     an  error  message  in  _i_n_t_e_r_p->_r_e_s_u_l_t  in  the standard Tcl
     fashion.  In the event of  an  error  return,  some  of  the
     fields  of _w_i_d_g_R_e_c could already have been modified, if con-
     figuration information for them was  successfully  processed
     before the error occurred.




Sprite v.1.0       Printed:  September 5, 1991                  2






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



     The _s_p_e_c_s array specifies the kinds of configuration options
     expected  by  the widget.  Each of its entries specifies one
     configuration option and has the following structure:

          ttyyppeeddeeff ssttrruucctt {
              iinntt _t_y_p_e;
              cchhaarr*_a_r_g_v_N_a_m_e;
              cchhaarr*_d_b_N_a_m_e;
              cchhaarr*_d_b_C_l_a_s_s;
              cchhaarr*_d_e_f_V_a_l_u_e;
              iinntt offset;
              iinntt flags;
          }} TTkk__CCoonnffiiggSSppeecc;;

     The _t_y_p_e field indicates what type of  configuration  option
     this   is  (e.g.  TK_CONFIG_COLOR  for  a  color  value,  or
     TK_CONFIG_INT for an integer value).  The _t_y_p_e  field  indi-
     cates  how  to  use  the  value  of the option (more on this
     below).  The _a_r_g_v_N_a_m_e field is a string such as ``-font'' or
     ``-bg'',  which  is  compared  with  the  values in _a_r_g_v (if
     _a_r_g_v_N_a_m_e is NULL it means this  is  a  grouped  entry;   see
     GROUPED  ENTRIES  below).  The _d_b_N_a_m_e and _d_b_C_l_a_s_s fields are
     used to look up a value for this option in the option  data-
     base.  The _d_e_f_V_a_l_u_e field specifies a default value for this
     configuration option if no value is specified in either _a_r_g_v
     or  the  option database.  _O_f_f_s_e_t indicates where in _w_i_d_g_R_e_c
     to store information about this option, and  _f_l_a_g_s  contains
     additional  information  to  control  the processing of this
     configuration option (more on this below).

     TTkk__CCoonnffiigguurreeWWiiddggeett first processes _a_r_g_v  to  see  which  (if
     any)  configuration  options are specified there.  _A_r_g_v must
     contain an even number of fields;  the first of each pair of
     fields  must  match  the  _a_r_g_v_N_a_m_e  of  some  entry in _s_p_e_c_s
     (unique abbreviations are acceptable), and the second  field
     of  the  pair  contains  the  value  for  that configuration
     option.  If there are entries in _s_p_e_c for which  there  were
     no  matching  entries  in  _a_r_g_v, TTkk__CCoonnffiigguurreeWWiiddggeett uses the
     _d_b_N_a_m_e and _d_b_C_l_a_s_s fields of the _s_p_e_c_s entry  to  probe  the
     option  database;   if  a value is found, then it is used as
     the value for the option.  Finally, if no entry is found  in
     the  option  database, the _d_e_f_V_a_l_u_e field of the _s_p_e_c_s entry
     is used as the value for the configuration option.   If  the
     _d_e_f_V_a_l_u_e  is  NULL  then  there is no default value and this
     _s_p_e_c_s entry will be ignored if no value is specified in _a_r_g_v
     or the option database.

     Once a string value has been determined for a  configuration
     option,  TTkk__CCoonnffiigguurreeWWiiddggeett translates the string value into
     a  more  useful  form,  such  as  a   color   if   _t_y_p_e   is
     TK_CONFIG_COLOR  or  an  integer  if  _t_y_p_e is TK_CONFIG_INT.
     This value is then  stored  in  the  record  pointed  to  by



Sprite v.1.0       Printed:  September 5, 1991                  3






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



     _w_i_d_g_R_e_c.   This  record  is  assumed  to contain information
     relevant to the manager of the widget;  its  exact  type  is
     unknown  to  TTkk__CCoonnffiigguurreeWWiiddggeett.   The  _o_f_f_s_e_t field of each
     _s_p_e_c_s entry indicates where in _w_i_d_g_R_e_c to store the informa-
     tion  about  this  configuration option.  You should use the
     TTkk__OOffffsseett macro to generate _o_f_f_s_e_t values (see below  for  a
     description   of  TTkk__OOffffsseett).   The  location  indicated  by
     _w_i_d_g_R_e_c and _o_f_f_s_e_t will be referred to as the ``target''  in
     the descriptions below.

     The _t_y_p_e field of each entry in _s_p_e_c_s determines what to  do
     with  the  string  value  of that configuration option.  The
     legal values for _t_y_p_e, and the corresponding actions, are:

     TTKK__CCOONNFFIIGG__EENNDD
          Marks the end of the table.  The last  entry  in  _s_p_e_c_s
          must  have  this  type;   all  of  its other fields are
          ignored and it will never match any arguments.

     TTKK__CCOONNFFIIGG__BBOOOOLLEEAANN
          The value must be an ASCII string specifying a  boolean
          value.   Any of the values ``true'', ``yes'', or ``1'',
          or an abbreviation of one of these values, means  true;
          any  of  the  values ``false'', ``no'', or ``0'', or an
          abbreviation of one of these values, means false.   The
          target  is  expected to be an integer;  for true values
          it will be set to 1 and for false values it will be set
          to 0.

     TTKK__CCOONNFFIIGG__IINNTT
          The value must be an ASCII integer string in the format
          accepted  by ssttrrttooll (e.g. ``0'' and ``0x'' prefixes may
          be  used  to  specify  octal  or  hexadecimal  numbers,
          respectively).   The  string is converted to an integer
          value and the integer is stored in the target.

     TTKK__CCOONNFFIIGG__DDOOUUBBLLEE
          The value must be an ASCII floating-point number in the
          format  accepted by ssttrrttooll.  The string is converted to
          a ddoouubbllee value, and the value is stored in the target.

     TTKK__CCOONNFFIIGG__SSTTRRIINNGG
          A copy of the value is made by allocating memory  space  |
          with   mmaalllloocc   and   copying   the   value   into  the  |
          dynamically-allocated space.   A  pointer  to  the  new  |
          string  is stored in the target.  If the previous value  |
          of the target wasn't NULL, then it is freed by  passing  |
          it to ffrreeee.

     TTKK__CCOONNFFIIGG__UUIIDD
          The value is translated to a TTkk__UUiidd (by passing  it  to
          TTkk__GGeettUUiidd).   The  resulting  value  is  stored  in the



Sprite v.1.0       Printed:  September 5, 1991                  4






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



          target.

     TTKK__CCOONNFFIIGG__CCOOLLOORR
          The value must be an ASCII string identifying  a  color
          in  a  form  suitable  for passing to TTkk__GGeettCCoolloorr.  The
          value  is  converted  to  an  (XXCCoolloorr  **)  by   calling
          TTkk__GGeettCCoolloorr and the result is stored in the target.  If
          the previous value of the target wasn't NULL,  then  it
          is freed by passing it to TTkk__FFrreeeeCCoolloorr.

     TTKK__CCOONNFFIIGG__FFOONNTT
          The value must be an ASCII string identifying a font in
          a  form  suitable for passing to TTkk__GGeettFFoonnttSSttrruucctt.  The
          value is converted to an  (XXFFoonnttSSttrruucctt  **)  by  calling
          TTkk__GGeettFFoonnttSSttrruucctt  and  the result is stored in the tar-
          get.  If the previous value of the target wasn't  NULL,
          then it is freed by passing it to TTkk__FFrreeeeFFoonnttSSttrruucctt.

     TTKK__CCOONNFFIIGG__BBIITTMMAAPP
          The value must be an ASCII string identifying a  bitmap
          in  a  form  suitable for passing to TTkk__GGeettBBiittmmaapp.  The
          value is converted to a PPiixxmmaapp by calling  TTkk__GGeettBBiittmmaapp
          and  the result is stored in the target.  If the previ-
          ous value of the target wasn't NNoonnee, then it  is  freed
          by passing it to TTkk__FFrreeeeBBiittmmaapp.

     TTKK__CCOONNFFIIGG__BBOORRDDEERR
          The value must be an ASCII string identifying a  border
          color in a form suitable for passing to TTkk__GGeett33DDBBoorrddeerr.
          The value is converted to a (TTkk__33DDBBoorrddeerr **) by  calling
          TTkk__GGeett33DDBBoorrddeerr  and the result is stored in the target.
          If the previous value of the target wasn't  NULL,  then
          it is freed by passing it to TTkk__FFrreeee33DDBBoorrddeerr.

     TTKK__CCOONNFFIIGG__RREELLIIEEFF
          The value must be an ASCII string identifying a  relief
          in  a  form  suitable for passing to TTkk__GGeettRReelliieeff.  The
          value is converted to an integer relief value  by  cal-
          ling  TTkk__GGeettRReelliieeff and the result is stored in the tar-
          get.

     TTKK__CCOONNFFIIGG__CCUURRSSOORR
          The value must be an ASCII string identifying a  cursor
          in  a  form  suitable for passing to TTkk__GGeettCCuurrssoorr.  The
          value is converted to a CCuurrssoorr by calling  TTkk__GGeettCCuurrssoorr
          and  the result is stored in the target.  If the previ-
          ous value of the target wasn't NNoonnee, then it  is  freed
          by passing it to TTkk__FFrreeeeCCuurrssoorr.

     TTKK__CCOONNFFIIGG__SSYYNNOONNYYMM
          This _t_y_p_e value identifies  special  entries  in  _s_p_e_c_s
          that  are synonyms for other entries.  If an _a_r_g_v value



Sprite v.1.0       Printed:  September 5, 1991                  5






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



          matches the _a_r_g_v_N_a_m_e of a TK_CONFIG_SYNONYM entry,  the
          entry  isn't used directly. Instead, TTkk__CCoonnffiigguurreeWWiiddggeett
          searches _s_p_e_c_s for another entry whose _a_r_g_v_N_a_m_e is  the
          same  as  the  _d_b_N_a_m_e  field  in  the TK_CONFIG_SYNONYM
          entry;  this new entry is used just as if its  _a_r_g_v_N_a_m_e
          had  matched  the  _a_r_g_v  value.   The synonym mechanism
          allows multiple _a_r_g_v values to be  used  for  a  single
          configuration   option,  such  as  ``-background''  and
          ``-bg''.


GGRROOUUPPEEDD EENNTTRRIIEESS
     In some cases it is useful to  generate  multiple  resources
     from  a  single  configuration  value.  For example, a color
     name might be used both to generate the background color for
     a  widget  (using  TK_CONFIG_COLOR)  and  to  generate a 3-D
     border to draw around the widget  (using  TK_CONFIG_BORDER).
     In  cases  like  this it is possible to specify that several
     consecutive entries in _s_p_e_c_s are to be treated as  a  group.
     The  first  entry  is  used  to determine a value (using its
     _a_r_g_v_N_a_m_e, _d_b_N_a_m_e, _d_b_C_l_a_s_s, and _d_e_f_V_a_l_u_e fields).  The  value
     will  be  processed several times (one for each entry in the
     group), generating multiple different resources and  modify-
     ing  multiple  targets  within _w_i_d_g_R_e_c.  Each of the entries
     after the first must have  a  NULL  value  in  its  _a_r_g_v_N_a_m_e
     field;   this indicates that the entry is to be grouped with
     the entry that precedes it.  Only the _t_y_p_e and _o_f_f_s_e_t fields
     are used from these follow-on entries.


FFLLAAGGSS
     The _f_l_a_g_s argument passed to TTkk__CCoonnffiigguurreeWWiiddggeett is  used  in
     conjunction  with  the  _s_p_e_c_F_l_a_g_s  fields  in the entries of
     _s_p_e_c_s to provide additional control over the  processing  of
     configuration  options.  These values are used in three dif-
     ferent ways as described below.

     First, if the _f_l_a_g_s argument to TTkk__CCoonnffiigguurreeWWiiddggeett  has  the
     TK_CONFIG_ARGV_ONLY     bit     set     (i.e.,    _f_l_a_g_s    |
     TK_CONFIG_ARGV_ONLY != 0),  then  the  option  database  and
     _d_e_f_V_a_l_u_e  fields are not used.  In this case, if an entry in
     _s_p_e_c_s doesn't match a field in _a_r_g_v  then  nothing  happens:
     the  corresponding  target  isn't modified.  This feature is
     useful when the goal  is  to  modify  certain  configuration
     options while leaving others in their current state, such as
     when a ccoonnffiigguurree widget command is being processed.

     Second, it is possible to specify different  default  values
     for monochrome and color displays.  This is done by creating
     two entries in _s_p_e_c_s that are  identical  except  for  their
     _d_e_f_V_a_l_u_e  and  _s_p_e_c_F_l_a_g_s  fields.  One entry should have the
     value TK_CONFIG_MONO_ONLY in its _s_p_e_c_F_l_a_g_s and  the  default



Sprite v.1.0       Printed:  September 5, 1991                  6






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



     value  for  monochrome  displays in its _d_e_f_V_a_l_u_e;  the other
     entry entry should have the  value  TK_CONFIG_COLOR_ONLY  in
     its   _s_p_e_c_F_l_a_g_s  and  the  appropriate  _d_e_f_V_a_l_u_e  for  color
     displays.  The general rule is that any _s_p_e_c_s entry with the
     TK_CONFIG_COLOR_ONLY  bit  set  in _s_p_e_c_F_l_a_g_s will be ignored
     when processing options for a window on a monochrome display
     (the  _t_k_w_i_n argument to TTkk__CCoonnffiigguurreeWWiiddggeett is used to deter-
     mine the type of display).  Similarly, any _s_p_e_c_s entry  with
     TK_CONFIG_MONO_ONLY  will  be  ignored  when  dealing with a
     color display.

     Third, it is possible to use _f_l_a_g_s and _s_p_e_c_F_l_a_g_s together to
     selectively  disable  some  entries.   This  feature  is not
     needed very often.  It is  useful  in  cases  where  several
     similar  kinds  of widgets are implemented in one place.  It
     allows a single _s_p_e_c_s table to be created with all the  con-
     figuration  options for all the widget types.  When process-
     ing a particular widget type, only entries relevant to  that
     type  will  be used.  This effect is achieved by setting the
     high-order bits (those in positions equal to or greater than
     TK_CONFIG_USER_BIT)  in  _s_p_e_c_F_l_a_g_s  values  or in _f_l_a_g_s.  In
     order for a particular entry in _s_p_e_c_s to be used, its  high-
     order  bits  must  match  exactly the high-order bits of the
     _f_l_a_g_s value passed to TTkk__CCoonnffiigguurreeWWiiddggeett.  If a _s_p_e_c_s  table
     is  being  used  for N different widget types, then N of the
     high-order bits will be used.  Each _s_p_e_c_s  entry  will  have
     one  of  more  of  those  bits set in its _s_p_e_c_F_l_a_g_s field to
     indicate the widget types for which  this  entry  is  valid.
     When  calling  TTkk__CCoonnffiigguurreeWWiiddggeett,  _f_l_a_g_s will have a single
     one of these bits set to select the entries for the  desired
     widget type.  For a working example of this feature, see the
     code in tkButton.c.


TTKK__OOFFFFSSEETT
     The TTkk__OOffffsseett macro is provided as a safe way of  generating
     the  _o_f_f_s_e_t  values for entries in Tk_ConfigSpec structures.
     It takes two arguments:  the name of a type of  record,  and
     the  name  of  a  field in that record.  It returns the byte
     offset of the named field in records of the given type.


TTKK__CCOONNFFIIGGUURREEIINNFFOO
     The TTkk__CCoonnffiigguurreeIInnffoo procedure may be used to obtain  infor-
     mation  about  one or all of the options for a given widget.
     Given a token for a window (_t_k_w_i_n), a table  describing  the
     configuration  options  for  a  class  of widgets (_s_p_e_c_s), a
     pointer to a widget record containing the  current  informa-
     tion  for  a widget (_w_i_d_g_R_e_c), and a NULL _a_r_g_v_N_a_m_e argument,
     TTkk__CCoonnffiigguurreeIInnffoo generates a string describing  all  of  the
     configuration  options for the window.  The string is placed
     in _i_n_t_e_r_p->_r_e_s_u_l_t.  Under normal  circumstances  it  returns



Sprite v.1.0       Printed:  September 5, 1991                  7






Tk_ConfigureWidget    UNKNOWN SECTION (tk)     Tk_ConfigureWidget



     TCL_OK;   if  an  error occurs then it returns TCL_ERROR and
     _i_n_t_e_r_p->_r_e_s_u_l_t contains an error message.

     If _a_r_g_v_N_a_m_e is NULL, then the value left  in  _i_n_t_e_r_p->_r_e_s_u_l_t
     by  TTkk__CCoonnffiigguurreeIInnffoo  consists  of  a  list  of  one or more
     entries, each of which describes  one  configuration  option
     (i.e. one entry in _s_p_e_c_s).  Each entry in the list will con-
     tain either two or five values.  If the corresponding  entry
     in _s_p_e_c_s has type TK_CONFIG_SYNONYM, then the list will con-
     tain two values:  the _a_r_g_v_N_a_m_e for the entry and the  _d_b_N_a_m_e
     (synonym  name).   Otherwise  the  list  will  contain  five
     values:  _a_r_g_v_N_a_m_e, _d_b_N_a_m_e, _d_b_C_l_a_s_s,  _d_e_f_V_a_l_u_e,  and  current
     value.   The  current value is computed from the appropriate
     field of _w_i_d_g_R_e_c by calling procedures like TTkk__NNaammeeOOffCCoolloorr.

     If the _a_r_g_v_N_a_m_e argument to  TTkk__CCoonnffiigguurreeIInnffoo  is  non-NULL,
     then  it  indicates  a  single  option,  and  information is
     returned  only  for  that  option.   The  string  placed  in
     _i_n_t_e_r_p->_r_e_s_u_l_t  will be a list containing two or five values
     as  described  above;   this  will  be  identical   to   the
     corresponding  sublist  that  would  have  been  returned if
     _a_r_g_v_N_a_m_e had been NULL.

     The _f_l_a_g_s argument to TTkk__CCoonnffiigguurreeIInnffoo is used  to  restrict
     the    _s_p_e_c_s    entries    to    consider,   just   as   for
     TTkk__CCoonnffiigguurreeWWiiddggeett.


EEXXAAMMPPLLEESS
     Although the explanation  of  TTkk__CCoonnffiigguurreeWWiiddggeett  is  fairly
     complicated,  its actual use is pretty straightforward (once
     you know how).  The easiest way to get started  is  to  copy
     the  code  from an existing widget.  The library implementa-
     tion of frames (tkFrame.c) has a simple configuration table,
     and the library implementation of buttons (tkButton.c) has a
     much more complex table that uses all  the  fancy  _s_p_e_c_F_l_a_g_s
     mechanisms.


KKEEYYWWOORRDDSS
     bitmap, border, color, configuration options, cursor,  font,
     relief, synonym, uid













Sprite v.1.0       Printed:  September 5, 1991                  8



