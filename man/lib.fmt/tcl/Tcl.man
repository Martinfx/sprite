


Tcl                   C Library Procedures                    Tcl



_________________________________________________________________

NNAAMMEE
     Tcl - overview of tool command language facilities
_________________________________________________________________


IINNTTRROODDUUCCTTIIOONN
     Tcl stands for ``tool command language'' and  is  pronounced
     ``tickle.''  It  is  actually  two  things: a language and a
     library.  First, Tcl is a simple textual language,  intended
     primarily  for issuing commands to interactive programs such
     as text editors, debuggers, illustrators,  and  shells.   It
     has  a  simple syntax and is also programmable, so Tcl users
     can write command procedures to provide more  powerful  com-
     mands than those in the built-in set.

     Second, Tcl is a library package that  can  be  embedded  in
     application  programs.  The Tcl library consists of a parser
     for the Tcl language, routines to implement the Tcl built-in
     commands,  and  procedures  that  allow  each application to
     extend Tcl with additional commands specific to that  appli-
     cation.   The application program generates Tcl commands and
     passes them to the Tcl parser for execution.   Commands  may
     be  generated by reading characters from an input source, or
     by  associating  command  strings  with  elements   of   the
     application's user interface, such as menu entries, buttons,
     or keystrokes.  When the Tcl library  receives  commands  it
     parses them into component fields and executes built-in com-
     mands directly.  For commands implemented  by  the  applica-
     tion,  Tcl calls back to the application to execute the com-
     mands.  In many cases commands will invoke recursive invoca-
     tions  of  the  Tcl  interpreter  by  passing  in additional
     strings to execute (procedures, looping commands, and condi-
     tional commands all work in this way).

     An application program gains three advantages by  using  Tcl
     for  its  command  language.  First, Tcl provides a standard
     syntax:  once users know Tcl, they will  be  able  to  issue
     commands  easily  to any Tcl-based application.  Second, Tcl
     provides programmability.  All a Tcl application needs to do
     is  to  implement  a few application-specific low-level com-
     mands.  Tcl provides many utility commands  plus  a  general
     programming  interface  for building up complex command pro-
     cedures.  By using Tcl, applications need  not  re-implement
     these features.  Third, Tcl can be used as a common language  |
     for communicating between  applications.   Inter-application  |
     communication is not built into the Tcl core described here,  |
     but various add-on libraries, such as the Tk toolkit,  allow  |
     applications to issue commands to each other.  This makes it  |
     possible for applications to  work  together  in  much  more  |
     powerful ways than was previously possible.



Sprite v1.0                                                     1






Tcl                   C Library Procedures                    Tcl



     This manual page focuses primarily on the Tcl language.   It
     describes the language syntax and the built-in commands that
     will be available in any  application  based  on  Tcl.   The
     individual  library  procedures are described in more detail
     in separate manual pages, one per procedure.


IINNTTEERRPPRREETTEERRSS
     The central data structure in Tcl is an interpreter (C  type
     ``Tcl_Interp'').   An  interpreter consists of a set of com-
     mand bindings, a set of variable values,  and  a  few  other
     miscellaneous  pieces  of state.  Each Tcl command is inter-
     preted in the context of  a  particular  interpreter.   Some
     Tcl-based  applications  will maintain multiple interpreters
     simultaneously, each associated with a different  widget  or
     portion  of  the  application.   Interpreters are relatively
     lightweight structures.  They can  be  created  and  deleted
     quickly,  so application programmers should feel free to use
     multiple interpreters if that  simplifies  the  application.
     Eventually Tcl will provide a mechanism for sending Tcl com-
     mands and results back and forth between interpreters,  even
     if the interpreters are managed by different processes.


DDAATTAA TTYYPPEESS
     Tcl supports only one type of data:  strings.  All commands,
     all  arguments  to  commands,  all  command results, and all
     variable values are strings.  Where commands require numeric
     arguments  or  return  numeric  results,  the  arguments and
     results are passed as strings.  Many commands  expect  their
     string arguments to have certain formats, but this interpre-
     tation is up to the individual commands.  For example, argu-
     ments  often contain Tcl command strings, which may get exe-
     cuted as part of the commands.  The easiest  way  to  under-
     stand  the Tcl interpreter is to remember that everything is
     just an operation on a string.  In many cases Tcl constructs
     will  look  similar to more structured constructs from other
     languages.  However, the Tcl constructs are  not  structured
     at  all; they are just strings of characters, and this gives
     them a different behavior than the structures they may  look
     like.

     Although the exact interpretation of a Tcl string depends on
     who  is  doing  the  interpretation,  there are three common
     forms that strings take:  commands, expressions, and  lists.
     The  major  sections below discuss these three forms in more
     detail.


BBAASSIICC CCOOMMMMAANNDD SSYYNNTTAAXX
     The Tcl language has syntactic similarities to both the Unix
     shells and Lisp.  However, the interpretation of commands is



Sprite v1.0                                                     2






Tcl                   C Library Procedures                    Tcl



     different in Tcl than in either of those other two  systems.
     A  Tcl  command  string  consists  of  one  or more commands
     separated by newline characters or semi-colons.   Each  com-
     mand  consists  of a collection of fields separated by white
     space (spaces or tabs).  The first field must be the name of
     a  command, and the additional fields, if any, are arguments
     that will be passed to that command.  For example, the  com-
     mand

          sseett aa 2222
     has three fields:  the first, sseett, is the name of a Tcl com-
     mand,  and  the  last two, aa and 2222, will be passed as argu-
     ments to the sseett command.  The command name may refer either
     to  a  built-in Tcl command, an application-specific command
     bound in with the library procedure TTccll__CCrreeaatteeCCoommmmaanndd, or  a
     command  procedure  defined  with the pprroocc built-in command.
     Arguments are passed literally as text strings.   Individual
     commands  may  interpret  those  strings in any fashion they
     wish.  The sseett command, for example, will  treat  its  first
     argument  as  the name of a variable and its second argument
     as a string value to assign to  that  variable.   For  other
     commands  arguments  may  be interpreted as integers, lists,
     file names, or Tcl commands.

     Command names should normally be typed completely  (e.g.  no  |
     abbreviations).   However,  if  the  Tcl  interpreter cannot  |
     locate a command it invokes a special command named  uunnkknnoowwnn  |
     which  attempts to find or create the command.  For example,  |
     at many sites uunnkknnoowwnn will  search  through  library  direc-  |
     tories  for  the desired command and create it as a Tcl pro-  |
     cedure if it is found.  The uunnkknnoowwnn command  often  provides  |
     automatic  completion  of  abbreviated commands, but usually  |
     only for commands that were typed interactively.  It's prob-  |
     ably  a bad idea to use abbreviations in command scripts and  |
     other forms that will be re-used over time:  changes to  the  |
     command  set  may  cause  abbreviations to become ambiguous,  |
     resulting in scripts that no longer work.


CCOOMMMMEENNTTSS
     If the first non-blank character in a  command  is  ##,  then
     everything  from the ## up through the next newline character
     is treated as a comment  and  ignored.   When  comments  are
     embedded  inside  nested  commands  (e.g. fields enclosed in
     braces) they must  have  properly-matched  braces  (this  is
     necessary  because  when Tcl parses the top-level command it
     doesn't yet know that the nested field will  be  used  as  a
     command so it cannot process the nested comment character as
     a comment).






Sprite v1.0                                                     3






Tcl                   C Library Procedures                    Tcl



GGRROOUUPPIINNGG AARRGGUUMMEENNTTSS WWIITTHH DDOOUUBBLLEE--QQUUOOTTEESS
     Normally each argument field ends at the next  white  space,
     but  double-quotes  may  be  used  to  create arguments with
     embedded space.  If an argument field begins with a  double-
     quote,  then  the  argument  isn't terminated by white space
     (including newlines) or a semi-colon (see below for informa-
     tion  on  semi-colons);  instead it ends at the next double-
     quote character.  The double-quotes are not included in  the
     resulting argument.  For example, the command

          sseett aa ""TThhiiss iiss aa ssiinnggllee aarrgguummeenntt""
     will pass two arguments to sseett:  aa  and  TThhiiss  iiss  aa  ssiinnggllee
     aarrgguummeenntt.    Within  double-quotes,  command  substitutions,
     variable substitutions, and  backslash  substitutions  still
     occur, as described below.  If the first character of a com-
     mand field is not a quote, then quotes  receive  no  special
     interpretation in the parsing of that field.


GGRROOUUPPIINNGG AARRGGUUMMEENNTTSS WWIITTHH BBRRAACCEESS
     Curly braces may also be used for grouping arguments.   They
     are  similar  to  quotes except for two differences.  First,
     they nest; this makes them easier  to  use  for  complicated
     arguments like nested Tcl command strings.  Second, the sub-
     stitutions described  below  for  commands,  variables,  and
     backslashes do _n_o_t occur in arguments enclosed in braces, so
     braces can be used to prevent substitutions where  they  are
     undesirable.  If an argument field begins with a left brace,
     then the argument ends at the  matching  right  brace.   Tcl
     will  strip  off  the outermost layer of braces and pass the
     information between the braces to the  command  without  any
     further modification.  For example, in the command

          sseett aa {{xxyyzz aa {{bb cc dd}}}}
     the sseett command will receive two arguments: aa and xxyyzz aa {{bb cc
     dd}}.

     When braces or quotes are in effect, the matching  brace  or
     quote  need not be on the same line as the starting quote or
     brace; in this case the newline  will  be  included  in  the
     argument  field  along  with  any other characters up to the
     matching brace or quote.   For  example,  the  eevvaall  command
     takes  one argument, which is a command string; eevvaall invokes
     the Tcl interpreter to execute the command string.  The com-
     mand

          eevvaall {{
               sseett aa 2222
               sseett bb 3333
          }}
     will assign the value 2222 to aa and 3333 to bb.




Sprite v1.0                                                     4






Tcl                   C Library Procedures                    Tcl



     If the first character of a command  field  is  not  a  left
     brace,  then neither left nor right braces in the field will
     be treated specially (except as part of  variable  substitu-
     tion; see below).


CCOOMMMMAANNDD SSUUBBSSTTIITTUUTTIIOONN WWIITTHH BBRRAACCKKEETTSS
     If an open bracket occurs in a field of a command, then com-
     mand  substitution  occurs  (except  for  fields enclosed in
     braces).  All of the text up to the matching  close  bracket
     is  treated as a Tcl command and executed immediately.  Then
     the result of that command is substituted for the  bracketed
     text.  For example, consider the command

          sseett aa [[sseett bb]]
     When the sseett command has only a single argument, it  is  the
     name  of  a  variable  and  sseett returns the contents of that
     variable.  In this case, if variable bb has  the  value  ffoooo,
     then the command above is equivalent to the command

          sseett aa ffoooo
     Brackets can be used in more complex ways.  For example,  if
     the  variable bb has the value ffoooo and the variable cc has the
     value ggoorrpp, then the command

          sseett aa xxyyzz[[sseett bb]]..[[sseett cc]]
     is equivalent to the command

          sseett aa xxyyzzffoooo..ggoorrpp
     A bracketed command may contain multiple commands  separated  |
     by  newlines  or  semi-colons in the usual fashion.  In this  |
     case the value of the last command is used for substitution.  |
     For example, the command                                      |

          sseett aa xx[[sseett bb 2222                                         |
          eexxpprr $$bb++22]]xx                                              |
     is equivalent to the command                                  |

          sseett aa xx2244xx                                               |
     If a field is enclosed in braces then the brackets  and  the
     characters  between them are not interpreted specially; they
     are passed through to the argument verbatim.


VVAARRIIAABBLLEE SSUUBBSSTTIITTUUTTIIOONN WWIITTHH $$
     The dollar sign ($$) may be used as a special shorthand  form
     for  substituting variable values.  If $$ appears in an argu-
     ment that isn't enclosed in braces then  variable  substitu-
     tion  will  occur.   The  characters  after the $$, up to the
     first character that isn't a number, letter, or  underscore,
     are  taken  as  a variable name and the string value of that
     variable is substituted  for  the  name.   For  example,  if  |



Sprite v1.0                                                     5






Tcl                   C Library Procedures                    Tcl



     variable ffoooo has the value tteesstt, then the command             |

          sseett aa $$ffoooo..cc                                             |
     is equivalent to the command                                  |

          sseett aa tteesstt..cc                                             |

     There are two special forms for variable  substitution.   If  |
     the next character after the name of the variable is an open  |
     parenthesis, then the variable is assumed  to  be  an  array  |
     name, and all of the characters between the open parenthesis  |
     and the next close parenthesis are taken as  an  index  into  |
     the array.  Command substitutions and variable substitutions  |
     are performed on the  information  between  the  parentheses  |
     before it is used as an index.  For example, if the variable  |
     xx is an array with one element named ffiirrsstt and value 8877  and  |
     another element named 1144 and value mmoorree, then the command     |

          sseett aa xxyyzz$$xx((ffiirrsstt))zzyyxx                                    |
     is equivalent to the command                                  |

          sseett aa xxyyzz8877zzyyxx                                           |
     If the variable iinnddeexx has the value 1144, then the command      |

          sseett aa xxyyzz$$xx(($$iinnddeexx))zzyyxx                                   |
     is equivalent to the command                                  |

          sseett aa xxyyzzmmoorreezzyyxx                                         |
     For more information on arrays,  see  VARIABLES  AND  ARRAYS  |
     below.                                                        |

     The second special form for variables occurs when the dollar  |
     sign  is  followed by an open curly brace.  In this case the  |
     variable name consists of all the characters up to the  next  |
     curly  brace.   Array  references  are  not possible in this  |
     form:  the name between braces is  assumed  to  refer  to  a  |
     scalar variable.  For example, if variable ffoooo has the value  |
     tteesstt, then the command                                        |

          sseett aa aabbcc$${{ffoooo}}bbaarr                                       |
     is equivalent to the command                                  |

          sseett aa aabbcctteessttbbaarr                                         |
     Variable substitution does not occur in arguments  that  are
     enclosed  in  braces:  the dollar sign and variable name are
     passed through to the argument verbatim.

     The dollar sign abbreviation is simply a shorthand form.  $$aa
     is  completely  equivalent  to  [[sseett aa]]; it is provided as a
     convenience to reduce typing.





Sprite v1.0                                                     6






Tcl                   C Library Procedures                    Tcl



SSEEPPAARRAATTIINNGG CCOOMMMMAANNDDSS WWIITTHH SSEEMMII--CCOOLLOONNSS
     Normally, each command occupies one  line  (the  command  is
     terminated  by  a  newline  character).  However, semi-colon
     (``;'') is treated as a command separator character;  multi-
     ple  commands  may  be placed on one line by separating them
     with a semi-colon.  Semi-colons are not treated  as  command
     separators  if  they  appear  within curly braces or double-
     quotes.


BBAACCKKSSLLAASSHH SSUUBBSSTTIITTUUTTIIOONN
     Backslashes may be used to  insert  non-printing  characters
     into  command  fields  and also to insert special characters
     like braces and brackets  into  fields  without  them  being
     interpreted  specially  as  described  above.  The backslash
     sequences understood  by  the  Tcl  interpreter  are  listed
     below.   In each case, the backslash sequence is replaced by
     the given character:

     \\bb                  Backspace (0x8).

     \\ff                  Form feed (0xc).

     \\nn                  Newline (0xa).

     \\rr                  Carriage-return (0xd).

     \\tt                  Tab (0x9).

     \\vv                  Vertical tab (0xb).

     \\{{                  Left brace (``{'').

     \\}}                  Right brace (``}'').

     \\[[                  Open bracket (``['').

     \\]]                  Close bracket (``]'').

     \\$$                  Dollar sign (``$'').

     \\<<ssppaaccee>>            Space (`` ''): doesn't  terminate  argu-
                         ment.

     \\;;                  Semi-colon: doesn't terminate command.

     \\""                  Double-quote.

     \\<<nneewwlliinnee>>          Nothing:  this joins two lines  together
                         into  a  single  line.   This  backslash
                         feature is unique in  that  it  will  be
                         applied  even  when  the sequence occurs



Sprite v1.0                                                     7






Tcl                   C Library Procedures                    Tcl



                         within braces.

     \\\\                  Backslash (``\'').

     \\_d_d_d                The digits _d_d_d (one, two,  or  three  of
                         them)  give the octal value of the char-
                         acter.   Null  characters  may  not   be
                         embedded  in  command  fields; if _d_d_d is
                         zero  then  the  backslash  sequence  is
                         ignored   (i.e.  it  maps  to  an  empty
                         string).

     For example, in the command

          sseett aa \\{{xx\\[[\\ yyzz\\114411
     the second argument to sseett will be ``{{xx[[ yyzzaa''.

     If a backslash is followed by something other  than  one  of
     the options described above, then the backslash is transmit-
     ted to the argument field without  any  special  processing,
     and  the  Tcl  scanner  continues normal processing with the
     next character.  For example, in the command

          sseett \\**aa \\\\\\{{ffoooo
     The first argument to sseett will be \\**aa and the  second  argu-
     ment will be \\{{ffoooo.

     If  an  argument  is  enclosed  in  braces,  then  backslash
     sequences inside the argument are parsed but no substitution
     occurs  (except  for  backslash-newline):    the   backslash
     sequence  is  passed  through to the argument as is, without
     making any special interpretation of the characters  in  the
     backslash  sequence.   In particular, backslashed braces are
     not counted in locating the matching right brace  that  ter-
     minates the argument.  For example, in the command

          sseett aa {{\\{{aabbcc}}
     the second argument to sseett will be \\{{aabbcc.

     This backslash mechanism is not sufficient to generate abso-
     lutely  any argument structure; it only covers the most com-
     mon cases.  To produce particularly complicated arguments it
     is  probably  easiest  to  use the ffoorrmmaatt command along with
     command substitution.


CCOOMMMMAANNDD SSUUMMMMAARRYY
     [1]  A command is just a string.

     [2]  Within a string commands are separated by  newlines  or
          semi-colons (unless the newline or semi-colon is within
          braces or brackets or is backslashed).



Sprite v1.0                                                     8






Tcl                   C Library Procedures                    Tcl



     [3]  A command consists of fields.  The first field  is  the
          name of the command.  The other fields are strings that
          are passed to that command as arguments.

     [4]  Fields are normally separated by white space.

     [5]  Double-quotes allow  white  space  and  semi-colons  to
          appear within a single argument.  Command substitution,
          variable substitution, and backslash substitution still
          occur inside quotes.

     [6]  Braces defer interpretation of special characters.   If
          a  field  begins with a left brace, then it consists of
          everything between the  left  brace  and  the  matching
          right  brace. The braces themselves are not included in
          the argument.  No further processing  is  done  on  the
          information  between  the braces except that backslash-
          newline sequences are eliminated.

     [7]  If a field doesn't begin with a brace  then  backslash,
          variable,  and  command  substitution  are  done on the
          field.  Only a single level of processing is done:  the
          results  of  one substitution are not scanned again for
          further substitutions or any other  special  treatment.
          Substitution  can  occur  on  any  field  of a command,
          including the command name as well as the arguments.

     [8]  If the first non-blank character of a command is  a  ##,
          everything  from  the  ## up through the next newline is
          treated as a comment and ignored.


EEXXPPRREESSSSIIOONNSS
     The second major interpretation applied to strings in Tcl is  |
     as  expressions.   Several  commands, such as eexxpprr, ffoorr, and  |
     iiff, treat one or more of their arguments as expressions  and  |
     call    the   Tcl   expression   processors   (TTccll__EExxpprrLLoonngg,  |
     TTccll__EExxpprrBBoooolleeaann, etc.) to evaluate them.  The operators per-  |
     mitted in Tcl expressions are a subset of the operators per-  |
     mitted in C expressions, and they have the same meaning  and  |
     precedence  as  the  corresponding C operators.  Expressions  |
     almost always yield numeric results  (integer  or  floating-  |
     point values).  For example, the expression                   |

          88..22 ++ 66                                                  |
     evaluates to 14.2.  Tcl expressions differ  from  C  expres-  |
     sions  in  the  way that operands are specified, and in that  |
     Tcl expressions support non-numeric operands and string com-  |
     parisons.                                                     |

     A Tcl expression consists  of  a  combination  of  operands,  |
     operators, and parentheses.  White space may be used between  |



Sprite v1.0                                                     9






Tcl                   C Library Procedures                    Tcl



     the operands and operators and parentheses; it is ignored by  |
     the  expression  processor.   Where  possible,  operands are  |
     interpreted as integer values.  Integer values may be speci-  |
     fied  in  decimal  (the normal case), in octal (if the first  |
     character of the operand is 00), or in  hexadecimal  (if  the  |
     first  two characters of the operand are 00xx).  If an operand  |
     does not have one of the integer formats given  above,  then  |
     it  is  treated as a floating-point number if that is possi-  |
     ble.  Floating-point numbers may be specified in any of  the  |
     ways  accepted  by an ANSI-compliant C compiler (except that  |
     the ``f'', ``F'', ``l'', and ``L'' suffixes will not be per-  |
     mitted in most installations).  For example, all of the fol-  |
     lowing are valid  floating-point  numbers:   2.1,  3.,  6e4,  |
     7.91e+16.  If no numeric interpretation is possible, then an  |
     operand is left as a string  (and  only  a  limited  set  of  |
     operators may be applied to it).                              |

     Operands may be specified in any of the following ways:       |

     [1]                                                                ||
          As an numeric value, either integer or floating-point.   |

     [2]                                                                ||
          As  a  Tcl  variable,  using  standard $$ notation.  The  |
          variable's value will be used as the operand.            |

     [3]                                                                ||
          As  a string enclosed in double-quotes.  The expression  |
          parser will perform backslash,  variable,  and  command  |
          substitutions  on  the  information between the quotes,  |
          and use the resulting value as the operand               |

     [4]                                                                ||
          As a string enclosed in braces.  The characters between  |
          the open brace and matching close brace will be used as  |
          the operand without any substitutions.                   |

     [5]                                                                ||
          As  a  Tcl  command  enclosed in brackets.  The command  |
          will be executed and its result will  be  used  as  the  |
          operand.                                                 |

     Where  substitutions  occur  above   (e.g.   inside   quoted  |
     strings),  they  are  performed by the expression processor.  |
     However, an additional layer  of  substitution  may  already  |
     have been performed by the command parser before the expres-  |
     sion processor was called.  As discussed below, it  is  usu-  |
     ally  best  to  enclose expressions in braces to prevent the  |
     command parser from performing  substitutions  on  the  con-  |
     tents.                                                        |

     For  some  examples  of  simple  expressions,  suppose   the  |



Sprite v1.0                                                    10






Tcl                   C Library Procedures                    Tcl



     variable  aa has the value 3 and the variable bb has the value  |
     6.  Then the expression on the left  side  of  each  of  the  |
     lines  below will evaluate to the value on the right side of  |
     the line:                                                     |

          33..11 ++ $$aa                66..11                              |
          22 ++ ""$$aa..$$bb""             55..66                              |
          44**[[lllleennggtthh ""66 22""]]       88                                |
          {{wwoorrdd oonnee}} << ""wwoorrdd $$aa""  00                                |

     The valid operators are listed below, grouped in  decreasing  |
     order of precedence:                                          |

     --  ~~  !!                                                            ||
                         Unary  minus, bit-wise NOT, logical NOT.  |
                         None of these operands may be applied to  |
                         string operands, and bit-wise NOT may be  |
                         applied only to integers.                 |

     **  //  %%                                                            ||
                         Multiply,  divide,  remainder.   None of  |
                         these operands may be applied to  string  |
                         operands,  and  remainder may be applied  |
                         only to integers.                         |

     ++  --                                                               ||
                         Add and subtract.  Valid for any numeric  |
                         operands.                                 |

     <<<<  >>>>                                                             ||
                         Left and right shift.  Valid for integer  |
                         operands only.                            |

     <<  >>  <<==  >>==                                                       ||
                         Boolean  less,  greater,  less  than  or  |
                         equal, and greater than or equal.   Each  |
                         operator  produces 1 if the condition is  |
                         true, 0 otherwise.  These operators  may  |
                         be applied to strings as well as numeric  |
                         operands,  in  which  case  string  com-  |
                         parison is used.                          |

     ====  !!==                                                             ||
                         Boolean   equal  and  not  equal.   Each  |
                         operator  produces  a  zero/one  result.  |
                         Valid for all operand types.              |

     &&                                                                  ||
                         Bit-wise   AND.    Valid   for   integer  |
                         operands only.                            |

     ^^                                                                  ||



Sprite v1.0                                                    11






Tcl                   C Library Procedures                    Tcl



                         Bit-wise   exclusive   OR.    Valid  for  |
                         integer operands only.                    |

     ||                                                                  ||
                         Bit-wise OR.  Valid for integer operands  |
                         only.                                     |

     &&&&                                                                 ||
                         Logical  AND.   Produces  a  1 result if  |
                         both operands are non-zero, 0 otherwise.  |
                         Valid    for   numeric   operands   only  |
                         (integers or floating-point).             |

     ||||                                                                 ||
                         Logical OR.  Produces a 0 result if both  |
                         operands are zero, 1  otherwise.   Valid  |
                         for  numeric  operands only (integers or  |
                         floating-point).                          |

     _x??_y::_z                                                              ||
                         If-then-else,  as  in C.  If _x evaluates  |
                         to non-zero,  then  the  result  is  the  |
                         value of _y.  Otherwise the result is the  |
                         value of _z.  The _x operand must  have  a  |
                         numeric value.                            |

     See the C manual for more details on the results produced by  |
     each  operator.   All of the binary operators group left-to-  |
     right within the same precedence level.   For  example,  the  |
     expression                                                    |

          44**22 << 77                                                  |
     evaluates to 0.                                               |

     The &&&&, ||||, and ??:: operators have ``lazy evaluation'',  just  |
     as in C, which means that operands are not evaluated if they  |
     are not needed to determine the outcome.  For example, in     |

          $$vv ?? [[aa]] :: [[bb]]                                           |
     only one of [[aa]] or [[bb]] will actually be evaluated, depending  |
     on the value of $$vv.                                           |

     All internal computations involving integers are  done  with  |
     the  C  type  _l_o_n_g,  and all internal computations involving  |
     floating-point are done with the C type _d_o_u_b_l_e.   When  con-  |
     verting  a  string  to  floating-point, exponent overflow is  |
     detected and results in a  Tcl  error.   For  conversion  to  |
     integer  from  string,  detection of overflow depends on the  |
     behavior of some routines in the  local  C  library,  so  it  |
     should be regarded as unreliable.  In any case, overflow and  |
     underflow are generally not detected reliably for intermedi-  |
     ate results.                                                  |



Sprite v1.0                                                    12






Tcl                   C Library Procedures                    Tcl



     Conversion  among  internal  representations  for   integer,  |
     floating-point, and string operands is done automatically as  |
     needed.  For  arithmetic  computations,  integers  are  used  |
     until  some floating-point number is introduced, after which  |
     floating-point is used.  For example,                         |

          55 // 44                                                    |
     yields the result 1, while                                    |

          55 // 44..00                                                  |
          55 // (( [[ssttrriinngg lleennggtthh ""aabbccdd""]] ++ 00..00 ))                     |
     both yield the result 1.25.                                   |

     String values may be used  as  operands  of  the  comparison  |
     operators,  although  the  expression  evaluator tries to do  |
     comparisons as integer or floating-point when  it  can.   If  |
     one  of  the  operands  of  a comparison is a string and the  |
     other has a numeric value, the numeric operand is  converted  |
     back to a string using the C _s_p_r_i_n_t_f format specifier %%dd for  |
     integers and %%gg for floating-point values.  For example, the  |
     expressions                                                   |

          ""00xx0033"" >> ""22""                                             |
          ""00yy"" << ""00xx1122""                                            |
     both evaluate to 1.  The  first  comparison  is  done  using  |
     integer comparison, and the second is done using string com-  |
     parison after the second operand is converted to the  string  |
     ``18''.

     In general it is safest to enclose an expression  in  braces
     when entering it in a command:  otherwise, if the expression
     contains any white space then the Tcl interpreter will split
     it among several arguments.  For example, the command

          eexxpprr $$aa ++ $$bb
     results in three arguments being passed to eexxpprr:  $$aa, ++, and
     $$bb.  In addition, if the expression isn't in braces then the
     Tcl interpreter will perform variable and command  substitu-
     tion  immediately  (it  will  happen  in  the command parser
     rather than in the expression parser).  In  many  cases  the
     expression  is  being passed to a command that will evaluate
     the expression later (or even many times  if,  for  example,
     the expression is to be used to decide when to exit a loop).
     Usually the desired goal is to re-do the variable or command
     substitutions  each time the expression is evaluated, rather
     than once and for all at the beginning.   For  example,  the
     command

          ffoorr {{sseett ii 11}} $$ii<<==1100 {{iinnccrr ii}} {{......}}*** WRONG ***
     is probably intended to iterate over all values of ii from  1
     to  10.   After  each iteration of the body of the loop, ffoorr
     will pass its second argument to the expression evaluator to



Sprite v1.0                                                    13






Tcl                   C Library Procedures                    Tcl



     see  whether  or not to continue processing.  Unfortunately,
     in this case the value of ii in the second argument  will  be
     substituted once and for all when the ffoorr command is parsed.
     If ii was 0 before the ffoorr command  was  invoked  then  ffoorr's
     second  argument will be 00<<==1100 which will always evaluate to
     1, even though ii's value eventually becomes greater than 10.
     In  the  above case the loop will never terminate.  Instead,
     the expression should be placed in braces:

          ffoorr {{sseett ii 11}} {{$$ii<<==1100}} {{iinnccrr ii}} {{......}}*** RIGHT ***
     This causes the substitution of ii's value to be delayed;  it
     will be re-done each time the expression is evaluated, which
     is the desired result.


LLIISSTTSS
     The third major way that strings are interpreted in  Tcl  is
     as  lists.   A list is just a string with a list-like struc-
     ture consisting of fields separated  by  white  space.   For
     example, the string

          AAll SSuuee AAnnnnee JJoohhnn
     is a list with four elements or fields.  Lists have the same
     basic  structure  as  command strings, except that a newline
     character in a list is treated as  a  field  separator  just
     like  space  or  tab.  Conventions for braces and quotes and
     backslashes are the same for lists  as  for  commands.   For
     example, the string

          aa bb\\ cc {{dd ee {{ff gg hh}}}}
     is a list with three elements:  aa, bb cc, and dd  ee  {{ff  gg  hh}}.
     Whenever an element is extracted from a list, the same rules
     about braces and quotes and backslashes are applied  as  for
     commands.   Thus in the example above when the third element
     is extracted from the list, the result is

          dd ee {{ff gg hh}}
     (when the field was extracted,  all  that  happened  was  to
     strip off the outermost layer of braces).  Command substitu-
     tion and variable substitution are never made on a list  (at
     least,  not  by  the  list-processing commands; the list can
     always be passed to the Tcl interpreter for evaluation).

     The Tcl commands ccoonnccaatt, ffoorreeaacchh, llaappppeenndd, lliinnddeexx,  lliinnsseerrtt,  |
     lliisstt,  lllleennggtthh,  llrraannggee,  llrreeppllaaccee, llsseeaarrcchh, and llssoorrtt allow  |
     you to build lists, extract elements from them, search them,
     and perform other list-related functions.


RREEGGUULLAARR EEXXPPRREESSSSIIOONNSS
     Tcl provides two commands that support string matching using  |
     eeggrreepp-style regular expressions: rreeggeexxpp and rreeggssuubb.  Regular  |



Sprite v1.0                                                    14






Tcl                   C Library Procedures                    Tcl



     expressions are implemented using Henry  Spencer's  package,  |
     and  the  description of regular expressions below is copied  |
     verbatim from his manual entry.                               |

     A regular expression is zero or more _b_r_a_n_c_h_e_s, separated  by  |
     ``|''.    It  matches  anything  that  matches  one  of  the  |
     branches.                                                     |

     A branch is zero or more _p_i_e_c_e_s, concatenated.  It matches a  |
     match  for  the  first,  followed by a match for the second,  |
     etc.                                                          |

     A piece is an _a_t_o_m possibly followed  by  ``*'',  ``+'',  or  |
     ``?''.  An atom followed by ``*'' matches a sequence of 0 or  |
     more matches of the atom.  An atom followed by ``+'' matches  |
     a  sequence  of 1 or more matches of the atom.  An atom fol-  |
     lowed by ``?'' matches a match of  the  atom,  or  the  null  |
     string.                                                       |

     An atom is a regular expression in parentheses  (matching  a  |
     match  for  the  regular  expression),  a _r_a_n_g_e (see below),  |
     ``.'' (matching any single character), ``^''  (matching  the  |
     null  string  at  the  beginning of the input string), ``$''  |
     (matching the null string at the end of the input string), a  |
     ``\''  followed by a single character (matching that charac-  |
     ter), or a  single  character  with  no  other  significance  |
     (matching that character).                                    |

     A _r_a_n_g_e is a sequence of characters enclosed in ``[]''.   It  |
     normally matches any single character from the sequence.  If  |
     the sequence begins with ``^'', it matches any single  char-  |
     acter  _n_o_t from the rest of the sequence.  If two characters  |
     in the sequence are separated by ``-'',  this  is  shorthand  |
     for  the  full  list  of ASCII characters between them (e.g.  |
     ``[0-9]'' matches any decimal digit).  To include a  literal  |
     ``]''  in the sequence, make it the first character (follow-  |
     ing a possible ``^'').  To include a literal ``-'', make  it  |
     the first or last character.                                  |

     If a regular expression could match two different parts of a  |
     string,  it  will  match  the one which begins earliest.  If  |
     both begin in the same place but match different lengths, or  |
     match  the same length in different ways, life gets messier,  |
     as follows.                                                   |

     In general, the possibilities in a list of branches are con-  |
     sidered in left-to-right order, the possibilities for ``*'',  |
     ``+'', and ``?'' are considered longest-first,  nested  con-  |
     structs  are  considered  from  the  outermost  in, and con-  |
     catenated constructs  are  considered  leftmost-first.   The  |
     match  that will be chosen is the one that uses the earliest  |
     possibility in the first choice that has  to  be  made.   If  |



Sprite v1.0                                                    15






Tcl                   C Library Procedures                    Tcl



     there  is more than one choice, the next will be made in the  |
     same manner (earliest possibility) subject to  the  decision  |
     on the first choice.  And so forth.                           |

     For example, ``(ab|a)b*c'' could match ``abc'' in one of two  |
     ways.   The  first choice is between ``ab'' and ``a''; since  |
     ``ab'' is earlier, and does lead  to  a  successful  overall  |
     match, it is chosen.  Since the ``b'' is already spoken for,  |
     the  ``b*''  must  match  its  last  possibility-the   empty  |
     string-since it must respect the earlier choice.              |

     In the particular case where no ``|''s are present and there  |
     is  only  one ``*'', ``+'', or ``?'', the net effect is that  |
     the longest possible match  will  be  chosen.   So  ``ab*'',  |
     presented with ``xabbbby'', will match ``abbbb''.  Note that  |
     if ``ab*'' is tried against  ``xabyabbbz'',  it  will  match  |
     ``ab''  just  after  ``x'', due to the begins-earliest rule.  |
     (In effect, the decision on where to start the match is  the  |
     first  choice  to  be  made,  hence  subsequent choices must  |
     respect it even if this leads them to less-preferred  alter-  |
     natives.)


CCOOMMMMAANNDD RREESSUULLTTSS
     Each command produces two results:  a  code  and  a  string.
     The  code  indicates  whether the command completed success-
     fully or not, and the string gives  additional  information.
     The valid codes are defined in tcl.h, and are:

          TTCCLL__OOKK              This is the normal return code, and
                              indicates  that  the  command  com-
                              pleted  successfully.   The  string
                              gives the command's return value.

          TTCCLL__EERRRROORR           Indicates that an  error  occurred;
                              the string gives a message describ-
                              ing the error.   In  addition,  the  |
                              global variable eerrrroorrIInnffoo will con-  |
                              tain   human-readable   information  |
                              describing  which commands and pro-  |
                              cedures were  being  executed  when  |
                              the  error occurred, and the global  |
                              variable  eerrrroorrCCooddee  will   contain  |
                              machine-readable  details about the  |
                              error, if they are available.   See  |
                              the   section   BUILT-IN  VARIABLES  |
                              below for more information.

          TTCCLL__RREETTUURRNN          Indicates that the  rreettuurrnn  command
                              has  been  invoked,  and  that  the
                              current  procedure  (or   top-level
                              command  or  ssoouurrccee command) should



Sprite v1.0                                                    16






Tcl                   C Library Procedures                    Tcl



                              return  immediately.   The   string
                              gives the return value for the pro-
                              cedure or command.

          TTCCLL__BBRREEAAKK           Indicates that  the  bbrreeaakk  command
                              has  been invoked, so the innermost
                              loop should abort immediately.  The
                              string should always be empty.

          TTCCLL__CCOONNTTIINNUUEE        Indicates that the ccoonnttiinnuuee command
                              has  been invoked, so the innermost
                              loop  should  go  on  to  the  next
                              iteration.    The   string   should
                              always be empty.
     Tcl programmers do not normally need to think  about  return
     codes,  since TCL_OK is almost always returned.  If anything
     else is returned by a  command,  then  the  Tcl  interpreter
     immediately  stops  processing  commands  and returns to its
     caller.  If there are several nested invocations of the  Tcl
     interpreter  in progress, then each nested command will usu-
     ally return the error to its caller,  until  eventually  the
     error  is  reported  to the top-level application code.  The
     application will then display  the  error  message  for  the
     user.

     In a few cases, some commands will handle certain  ``error''
     conditions  themselves  and  not  return  them upwards.  For
     example, the ffoorr command checks for the TCL_BREAK  code;  if
     it occurs, then ffoorr stops executing the body of the loop and
     returns TCL_OK to its caller.  The ffoorr command also  handles
     TCL_CONTINUE  codes  and  the  procedure interpreter handles
     TCL_RETURN codes.  The ccaattcchh command allows Tcl programs  to
     catch  errors  and  handle  them  without  aborting  command
     interpretation any further.


PPRROOCCEEDDUURREESS
     Tcl allows you to extend the command interface  by  defining
     procedures.   A  Tcl  procedure can be invoked just like any
     other Tcl command (it has a name and it receives one or more
     arguments).   The  only  difference is that its body isn't a
     piece of C code linked into the program; it is a string con-
     taining  one  or more other Tcl commands.  See the pprroocc com-
     mand for information on how to define  procedures  and  what
     happens when they are invoked.


VVAARRIIAABBLLEESS -- SSCCAALLAARRSS AANNDD AARRRRAAYYSS
     Tcl allows the definition of variables and the use of  their  |
     values either through $$-style variable substitution, the sseett  |
     command, or a few other mechanisms.  Variables need  not  be  |
     declared:  a new variable will automatically be created each  |



Sprite v1.0                                                    17






Tcl                   C Library Procedures                    Tcl



     time a new variable name is used.                             |

     Tcl supports two types of variables:  scalars and arrays.  A  |
     scalar  variable  has a single value, whereas an array vari-  |
     able can have any number  of  elements,  each  with  a  name  |
     (called  its  ``index'')  and a value.  Array indexes may be  |
     arbitrary strings; they need not  be  numeric.   Parentheses  |
     are used refer to array elements in Tcl commands.  For exam-  |
     ple, the command                                              |

          sseett xx((ffiirrsstt)) 4444                                          |
     will modify the element of xx whose index is  ffiirrsstt  so  that  |
     its  new  value  is 4444.  Two-dimensional arrays can be simu-  |
     lated in Tcl by using indexes  that  contain  multiple  con-  |
     catenated values.  For example, the commands                  |

          sseett aa((22,,33)) 11                                             |
          sseett aa((33,,66)) 22                                             |
     set the elements of aa whose indexes are 22,,33 and 33,,66.          |

     In general, array elements may be used anywhere in Tcl  that  |
     scalar variables may be used.  If an array is defined with a  |
     particular name, then there may not  be  a  scalar  variable  |
     with  the  same name.  Similarly, if there is a scalar vari-  |
     able with a particular name then it is not possible to  make  |
     array references to the variable.  To convert a scalar vari-  |
     able to an array or vice versa, remove the existing variable  |
     with the uunnsseett command.                                       |

     The aarrrraayy command provides several features for dealing with  |
     arrays,  such  as  querying the names of all the elements of  |
     the array and searching through the array one element  at  a  |
     time.

     Variables may be either global or local.  If a variable name
     is  used  when  a  procedure  isn't  being executed, then it
     automatically refers to a global variable.   Variable  names
     used  within  a  procedure normally refer to local variables
     associated with that invocation  of  the  procedure.   Local
     variables  are deleted whenever a procedure exits.  The gglloo--
     bbaall command may be used to request that a name  refer  to  a
     global  variable  for  the duration of the current procedure
     (this is somewhat analogous to eexxtteerrnn in C).


BBUUIILLTT--IINN CCOOMMMMAANNDDSS
     The Tcl library provides the  following  built-in  commands,
     which  will  be  available in any application using Tcl.  In
     addition to these built-in commands, there may be additional
     commands  defined by each application, plus commands defined
     as Tcl  procedures.   In  the  command  syntax  descriptions
     below, words in boldface are literals that you type verbatim



Sprite v1.0                                                    18






Tcl                   C Library Procedures                    Tcl



     to Tcl.  Words in italics are meta-symbols;  they  serve  as
     names  for  any  of  a  range  of  values that you can type.
     Optional arguments or groups of arguments are  indicated  by
     enclosing  them in question-marks.  Ellipses (``...'') indi-
     cate that any number of additional arguments  or  groups  of
     arguments  may  appear,  in the same format as the preceding
     argument(s).

     aappppeenndd _v_a_r_N_a_m_e _v_a_l_u_e ?_v_a_l_u_e _v_a_l_u_e ...?
          Append all of the _v_a_l_u_e arguments to the current  value  |
          of  variable  _v_a_r_N_a_m_e.  If _v_a_r_N_a_m_e doesn't exist, it is  |
          given a value equal to the  concatenation  of  all  the  |
          _v_a_l_u_e  arguments.   This  command provides an efficient  |
          way to build  up  long  variables  incrementally.   For  |
          example,  ``aappppeenndd  aa  $$bb'' is much more efficient than  |
          ``sseett aa $$aa$$bb'' if $$aa is long.

     aarrrraayy _o_p_t_i_o_n _a_r_r_a_y_N_a_m_e ?_a_r_g _a_r_g ...?
          This command performs one of several operations on  the  |
          variable  given  by  _a_r_r_a_y_N_a_m_e.   _A_r_r_a_y_N_a_m_e must be the  |
          name of an existing array variable.  The  _o_p_t_i_o_n  argu-  |
          ment  determines what action is carried out by the com-  |
          mand.  The legal _o_p_t_i_o_n_s  (which  may  be  abbreviated)  |
          are:                                                     |

          aarrrraayy aannyymmoorree _a_r_r_a_y_N_a_m_e _s_e_a_r_c_h_I_d                              ||
               Returns  1  if there are any more elements left to  |
               be processed in an array search, 0 if all elements  |
               have  already  been  returned.  _S_e_a_r_c_h_I_d indicates  |
               which search on _a_r_r_a_y_N_a_m_e to check, and must  have  |
               been  the  return value from a previous invocation  |
               of aarrrraayy ssttaarrttsseeaarrcchh.  This option is particularly  |
               useful  if  an  array has an element with an empty  |
               name, since the return value from  aarrrraayy  nneexxtteellee--  |
               mmeenntt  won't  indicate  whether the search has been  |
               completed.                                          |

          aarrrraayy ddoonneesseeaarrcchh _a_r_r_a_y_N_a_m_e _s_e_a_r_c_h_I_d                           ||
               This  command  terminates an array search and des-  |
               troys all the state associated with  that  search.  |
               _S_e_a_r_c_h_I_d  indicates  which  search on _a_r_r_a_y_N_a_m_e to  |
               destroy, and must have been the return value  from  |
               a   previous   invocation  of  aarrrraayy  ssttaarrttsseeaarrcchh.  |
               Returns an empty string.                            |

          aarrrraayy nnaammeess _a_r_r_a_y_N_a_m_e                                         ||
               Returns  a list containing the names of all of the  |
               elements in the array.  If there are  no  elements  |
               in the array then an empty string is returned.      |

          aarrrraayy nneexxtteelleemmeenntt _a_r_r_a_y_N_a_m_e _s_e_a_r_c_h_I_d                          ||
               Returns the name of the next element in _a_r_r_a_y_N_a_m_e,  |



Sprite v1.0                                                    19






Tcl                   C Library Procedures                    Tcl



               or an empty string if all  elements  of  _a_r_r_a_y_N_a_m_e  |
               have  already  been  returned in this search.  The  |
               _s_e_a_r_c_h_I_d argument identifies the search, and  must  |
               have been the return value of an aarrrraayy ssttaarrttsseeaarrcchh  |
               command.  Warning:  if elements are  added  to  or  |
               deleted  from  the  array,  then  all searches are  |
               automatically  terminated   just   as   if   aarrrraayy  |
               ddoonneesseeaarrcchh had been invoked; this will cause aarrrraayy  |
               nneexxtteelleemmeenntt operations to fail for those searches.  |

          aarrrraayy ssiizzee _a_r_r_a_y_N_a_m_e                                          ||
               Returns a decimal string giving the number of ele-  |
               ments in the array.                                 |

          aarrrraayy ssttaarrttsseeaarrcchh _a_r_r_a_y_N_a_m_e                                   ||
               This  command  initializes  an  element-by-element  |
               search through the array given by _a_r_r_a_y_N_a_m_e,  such  |
               that  invocations of the aarrrraayy nneexxtteelleemmeenntt command  |
               will return the names of the  individual  elements  |
               in the array.  When the search has been completed,  |
               the aarrrraayy ddoonneesseeaarrcchh command  should  be  invoked.  |
               The  return value is a search identifier that must  |
               be used in aarrrraayy nneexxtteelleemmeenntt and aarrrraayy  ddoonneesseeaarrcchh  |
               commands; it allows multiple searches to be under-  |
               way simultaneously for the same array.

     bbrreeaakk
          This command may be invoked only inside the body  of  a
          loop  command  such  as  ffoorr  or  ffoorreeaacchh or wwhhiillee.  It
          returns a TCL_BREAK code to signal the  innermost  con-
          taining loop command to return immediately.

     ccaassee _s_t_r_i_n_g ?iinn? _p_a_t_L_i_s_t _b_o_d_y ?_p_a_t_L_i_s_t _b_o_d_y ...?

     ccaassee _s_t_r_i_n_g ?iinn? {_p_a_t_L_i_s_t _b_o_d_y ?_p_a_t_L_i_s_t _b_o_d_y ...?}
          Match _s_t_r_i_n_g against each of the _p_a_t_L_i_s_t  arguments  in
          order.   If  one  matches,  then evaluate the following
          _b_o_d_y argument by passing  it  recursively  to  the  Tcl
          interpreter,  and return the result of that evaluation.
          Each _p_a_t_L_i_s_t argument consists of a single  pattern  or
          list  of patterns.  Each pattern may contain any of the
          wild-cards described under ssttrriinngg mmaattcchh.  If a  _p_a_t_L_i_s_t
          argument  is  ddeeffaauulltt,  the  corresponding body will be
          evaluated if no _p_a_t_L_i_s_t matches _s_t_r_i_n_g.  If no  _p_a_t_L_i_s_t
          argument  matches  _s_t_r_i_n_g and no default is given, then
          the ccaassee command returns an empty string.

          Two syntaxes are provided.  The first uses  a  separate
          argument  for  each  of the patterns and commands; this
          form is convenient if substitutions are desired on some
          of  the  patterns  or commands.  The second form places  |
          all of the patterns and commands together into a single  |



Sprite v1.0                                                    20






Tcl                   C Library Procedures                    Tcl



          argument; the argument must have proper list structure,  |
          with the elements of the list being  the  patterns  and  |
          commands.   The  second form makes it easy to construct  |
          multi-line case commands, since the braces  around  the  |
          whole  list  make it unnecessary to include a backslash  |
          at the end of each line.  Since the  _p_a_t_L_i_s_t  arguments  |
          are  in  braces in the second form, no command or vari-  |
          able substitutions are performed on them;   this  makes  |
          the  behavior  of  the  second  form different than the  |
          first form in some cases.                                |

          Below are some examples of ccaassee commands:                |

               ccaassee aabbcc iinn {{aa bb}} {{ffoorrmmaatt 11}} ddeeffaauulltt {{ffoorrmmaatt 22}} aa** {{ffoorrmmaatt 33}}|
          will return 33,                                           |

               ccaassee aa iinn {{                                         |
                 {{aa bb}} {{ffoorrmmaatt 11}}                                  |
                 ddeeffaauulltt {{ffoorrmmaatt 22}}                                |
                 aa** {{ffoorrmmaatt 33}}                                     |
               }}                                                   |
          will return 11, and                                       |

               ccaassee xxyyzz {{                                          |
                 {{aa bb}}                                             |
                   {{ffoorrmmaatt 11}}                                      |
                 ddeeffaauulltt                                           |
                   {{ffoorrmmaatt 22}}                                      |
                 aa**                                                |
                   {{ffoorrmmaatt 33}}                                      |
               }}                                                   |
          will return 22.

     ccaattcchh _c_o_m_m_a_n_d ?_v_a_r_N_a_m_e?
          The ccaattcchh command may be used to  prevent  errors  from
          aborting  command  interpretation.  CCaattcchh calls the Tcl
          interpreter recursively to execute _c_o_m_m_a_n_d, and  always
          returns  a  TCL_OK  code, regardless of any errors that
          might occur while executing _c_o_m_m_a_n_d.  The return  value
          from ccaattcchh is a decimal string giving the code returned
          by the Tcl interpreter after executing  _c_o_m_m_a_n_d.   This
          will  be 00 (TCL_OK) if there were no errors in _c_o_m_m_a_n_d;
          otherwise it will have a non-zero  value  corresponding
          to  one  of the exceptional return codes (see tcl.h for
          the definitions of code values).  If the _v_a_r_N_a_m_e  argu-
          ment  is  given,  then it gives the name of a variable;
          ccaattcchh will set the value of the variable to the  string
          returned from _c_o_m_m_a_n_d (either a result or an error mes-
          sage).

     ccdd ?_d_i_r_N_a_m_e?
          Change the current working directory to _d_i_r_N_a_m_e, or  to  |



Sprite v1.0                                                    21






Tcl                   C Library Procedures                    Tcl



          the  home  directory (as specified in the HOME environ-  |
          ment variable) if _d_i_r_N_a_m_e is  not  given.   If  _d_i_r_N_a_m_e  |
          starts  with  a  tilde, then tilde-expansion is done as  |
          described for TTccll__TTiillddeeSSuubbsstt.  Returns an empty string.  |
          This command can potentially be disruptive to an appli-  |
          cation, so it may be removed in some applications.       |

     cclloossee _f_i_l_e_I_d                                                       ||
          Closes  the  file  given by _f_i_l_e_I_d.  _F_i_l_e_I_d must be the  |
          return value from a previous  invocation  of  the  ooppeenn  |
          command;  after  this  command,  it  should not be used  |
          anymore.   If  _f_i_l_e_I_d  refers  to  a  command  pipeline  |
          instead of a file, then cclloossee waits for the children to  |
          complete.  The normal result  of  this  command  is  an  |
          empty  string,  but  errors  are  returned if there are  |
          problems in closing the file or waiting for children to  |
          complete.

     ccoonnccaatt _a_r_g ?_a_r_g ...?
          This command treats each argument as a  list  and  con-
          catenates  them  into  a  single  list.  It permits any
          number of arguments.  For example, the command

               ccoonnccaatt aa bb {{cc dd ee}} {{ff {{gg hh}}}}
          will return

               aa bb cc dd ee ff {{gg hh}}
          as its result.

     ccoonnttiinnuuee
          This command may be invoked only inside the body  of  a
          loop  command  such  as  ffoorr  or  ffoorreeaacchh or wwhhiillee.  It
          returns a  TCL_CONTINUE code to  signal  the  innermost
          containing  loop  command  to skip the remainder of the
          loop's body but continue with the next iteration of the
          loop.

     eeooff _f_i_l_e_I_d
          Returns 1 if an end-of-file condition has  occurred  on  |
          _f_i_l_e_I_d,  0 otherwise.  _F_i_l_e_I_d must have been the return  |
          value from a previous call to ooppeenn, or it may be ssttddiinn,  |
          ssttddoouutt,  or  ssttddeerrrr to refer to one of the standard I/O  |
          channels.

     eerrrroorr _m_e_s_s_a_g_e ?_i_n_f_o? ?_c_o_d_e?
          Returns  a  TCL_ERROR  code,   which   causes   command
          interpretation to be unwound.  _M_e_s_s_a_g_e is a string that
          is returned to the application to  indicate  what  went
          wrong.

          If the _i_n_f_o argument is provided and is  non-empty,  it
          is  used  to  initialize the global variable eerrrroorrIInnffoo.



Sprite v1.0                                                    22






Tcl                   C Library Procedures                    Tcl



          eerrrroorrIInnffoo is used to accumulate a stack trace  of  what
          was  in progress when an error occurred; as nested com-
          mands unwind, the Tcl interpreter adds  information  to
          eerrrroorrIInnffoo.  If the _i_n_f_o argument is present, it is used
          to initialize eerrrroorrIInnffoo  and  the  first  increment  of
          unwind  information will not be added by the Tcl inter-
          preter.  In other words,  the  command  containing  the
          eerrrroorr  command  will  not  appear  in eerrrroorrIInnffoo; in its
          place will be _i_n_f_o.  This feature  is  most  useful  in
          conjunction  with  the ccaattcchh command: if a caught error
          cannot be handled successfully, _i_n_f_o  can  be  used  to
          return  a  stack trace reflecting the original point of
          occurrence of the error:

               ccaattcchh {{......}} eerrrrMMssgg
               sseett ssaavveeddIInnffoo $$eerrrroorrIInnffoo
               ......
               eerrrroorr $$eerrrrMMssgg $$ssaavveeddIInnffoo

          If the _c_o_d_e argument is  present,  then  its  value  is  |
          stored in the eerrrroorrCCooddee global variable.  This variable  |
          is intended to hold a machine-readable  description  of  |
          the error in cases where such information is available;  |
          see the section BUILT-IN VARIABLES below  for  informa-  |
          tion  on  the  proper  format for the variable.  If the  |
          _c_o_d_e  argument  is  not  present,  then  eerrrroorrCCooddee   is  |
          automatically  reset to ``NONE'' by the Tcl interpreter  |
          as part of processing the error generated by  the  com-  |
          mand.

     eevvaall _a_r_g ?_a_r_g ...?
          EEvvaall  takes  one  or  more  arguments,  which  together
          comprise  a  Tcl command (or collection of Tcl commands
          separated by newlines in the  usual  way).   EEvvaall  con-
          catenates  all its arguments in the same fashion as the
          ccoonnccaatt command, passes the concatenated string  to  the
          Tcl  interpreter recursively, and returns the result of
          that evaluation (or any error generated by it).

     eexxeecc _a_r_g ?_a_r_g ...?
          This command treats its arguments as the  specification  |
          of  one  or  more  UNIX  commands  to  execute  as sub-  |
          processes.  The commands take the form  of  a  standard  |
          shell  pipeline;  ``|''  arguments separate commands in  |
          the pipeline and cause standard output of the preceding  |
          command  to  be  piped  into standard input of the next  |
          command.                                                 |

          Under normal conditions the result of the eexxeecc  command  |
          consists  of  the  standard output produced by the last  |
          command in the pipeline.  If any of the commands in the  |
          pipeline  exit  abnormally  or are killed or suspended,  |



Sprite v1.0                                                    23






Tcl                   C Library Procedures                    Tcl



          then eexxeecc will return an error and  the  error  message  |
          will  include  the  pipeline's output followed by error  |
          messages  describing  the  abnormal  terminations;  the  |
          eerrrroorrCCooddee  variable will contain additional information  |
          about the last abnormal  termination  encountered.   If  |
          any  of the commands writes to its standard error file,  |
          then eexxeecc will return an error, and the  error  message  |
          will  include  the  pipeline's output, followed by mes-  |
          sages about abnormal terminations (if any), followed by  |
          the standard error output.                               |

          If the last character of the result or error message is  |
          a  newline  then  that  character  is  deleted from the  |
          result or error message for consistency with normal Tcl  |
          return values.                                           |

          If an _a_r_g has the value ``>'' then the following  argu-  |
          ment  is  taken  as the name of a file and the standard  |
          output  of  the  last  command  in  the   pipeline   is  |
          redirected  to  the  file.  In this situation eexxeecc will  |
          normally return an empty string.                         |

          If an _a_r_g has the value ``<'' then the following  argu-  |
          ment is taken as the name of a file to use for standard  |
          input to the first command  in  the  pipeline.   If  an  |
          argument  has the value ``<<'' then the following argu-  |
          ment is taken as an immediate value to be passed to the  |
          first  command as standard input.  If there is no ``<''  |
          or ``<<'' argument then  the  standard  input  for  the  |
          first  command  in  the  pipeline  is  taken  from  the  |
          application's current standard input.                    |

          If the last _a_r_g is ``&'' then the command will be  exe-  |
          cuted  in background.  In this case the standard output  |
          from the last command in the pipeline will  go  to  the  |
          application's  standard output unless redirected in the  |
          command, and error output from all the commands in  the  |
          pipeline  will  go  to the application's standard error  |
          file.                                                    |

          Each _a_r_g becomes one word for  a  command,  except  for  |
          ``|'',  ``<'',  ``<<'', ``>'', and ``&'' arguments, and  |
          the arguments that follow  ``<'',  ``<<'',  and  ``>''.  |
          The  first word in each command is taken as the command  |
          name; tilde-substitution is performed on  it,  and  the  |
          directories   in  the  PATH  environment  variable  are  |
          searched for an  executable  by  the  given  name.   No  |
          ``glob''  expansion  or  other shell-like substitutions  |
          are performed on the arguments to commands.              |

     eexxiitt ?returnCode?                                                  ||
          Terminate  the  process,  returning  _r_e_t_u_r_n_C_o_d_e  to the  |



Sprite v1.0                                                    24






Tcl                   C Library Procedures                    Tcl



          parent as the exit status.  If _r_e_t_u_r_n_C_o_d_e isn't  speci-  |
          fied then it defaults to 0.

     eexxpprr _a_r_g
          Calls the expression processor  to  evaluate  _a_r_g,  and
          returns  the  result  as  a  string.   See  the section
          EXPRESSIONS above.

     ffiillee _o_p_t_i_o_n _n_a_m_e ?_a_r_g _a_r_g ...?
          Operate on a file or a file name.  _N_a_m_e is the name  of  |
          a file; if it starts with a tilde, then tilde substitu-  |
          tion is done before  executing  the  command  (see  the  |
          manual  entry  for TTccll__TTiillddeeSSuubbsstt for details).  _O_p_t_i_o_n  |
          indicates what to do with the file  name.   Any  unique  |
          abbreviation  for  _o_p_t_i_o_n  is  acceptable.   The  valid  |
          options are:                                             |

          ffiillee aattiimmee _n_a_m_e                                               ||
               Return  a  decimal string giving the time at which  |
               file _n_a_m_e was last accessed.  The time is measured  |
               in  the  standard  UNIX  fashion as seconds from a  |
               fixed starting time (often January 1,  1970).   If  |
               the  file  doesn't exist or its access time cannot  |
               be queried then an error is generated.              |

          ffiillee ddiirrnnaammee _n_a_m_e                                             ||
               Return all of the characters in _n_a_m_e up to but not  |
               including the last slash character.  If there  are  |
               no slashes in _n_a_m_e then return ``.''.  If the last  |
               slash in _n_a_m_e is its first character, then  return  |
               ``/''.                                              |

          ffiillee eexxeeccuuttaabbllee _n_a_m_e                                          ||
               Return 11 if file _n_a_m_e is executable by the current  |
               user, 00 otherwise.                                  |

          ffiillee eexxiissttss _n_a_m_e                                              ||
               Return  11 if file _n_a_m_e exists and the current user  |
               has search privileges for the directories  leading  |
               to it, 00 otherwise.                                 |

          ffiillee eexxtteennssiioonn _n_a_m_e                                           ||
               Return  all  of  the  characters in _n_a_m_e after and  |
               including the last dot in _n_a_m_e.  If  there  is  no  |
               dot in _n_a_m_e then return the empty string.           |

          ffiillee iissddiirreeccttoorryy _n_a_m_e                                         ||
               Return 11 if file _n_a_m_e is a directory, 00 otherwise.  |

          ffiillee iissffiillee _n_a_m_e                                              ||
               Return  11 if file _n_a_m_e is a regular file, 00 other-  |
               wise.                                               |



Sprite v1.0                                                    25






Tcl                   C Library Procedures                    Tcl



          ffiillee llssttaatt _n_a_m_e _v_a_r_N_a_m_e                                       ||
               Same  as  ssttaatt  option (see below) except uses the  |
               _l_s_t_a_t kernel call instead  of  _s_t_a_t.   This  means  |
               that  if _n_a_m_e refers to a symbolic link the infor-  |
               mation returned in _v_a_r_N_a_m_e is for the link  rather  |
               than the file it refers to.  On systems that don't  |
               support symbolic links this option behaves exactly  |
               the same as the ssttaatt option.                        |

          ffiillee mmttiimmee _n_a_m_e                                               ||
               Return  a  decimal string giving the time at which  |
               file _n_a_m_e was last modified.  The time is measured  |
               in  the  standard  UNIX  fashion as seconds from a  |
               fixed starting time (often January 1,  1970).   If  |
               the file doesn't exist or its modified time cannot  |
               be queried then an error is generated.              |

          ffiillee oowwnneedd _n_a_m_e                                               ||
               Return  11  if  file  _n_a_m_e  is owned by the current  |
               user, 00 otherwise.                                  |

          ffiillee rreeaaddaabbllee _n_a_m_e                                            ||
               Return  11  if file _n_a_m_e is readable by the current  |
               user, 00 otherwise.                                  |

          ffiillee rreeaaddlliinnkk _n_a_m_e                                            ||
               Returns  the  value  of the symbolic link given by  |
               _n_a_m_e (i.e. the name of the file it points to).  If  |
               _n_a_m_e  isn't a symbolic link or its value cannot be  |
               read, then an error is returned.  On systems  that  |
               don't  support symbolic links this option is unde-  |
               fined.                                              |

          ffiillee rroooottnnaammee _n_a_m_e                                            ||
               Return all of the characters in _n_a_m_e up to but not  |
               including the last ``.'' character  in  the  name.  |
               If _n_a_m_e doesn't contain a dot, then return _n_a_m_e.    |

          ffiillee ssiizzee _n_a_m_e                                                ||
               Return  a  decimal  string giving the size of file  |
               _n_a_m_e in bytes.  If the file doesn't exist  or  its  |
               size cannot be queried then an error is generated.  |

          ffiillee ssttaatt  _n_a_m_e _v_a_r_N_a_m_e                                       ||
               Invoke  the  ssttaatt kernel call on _n_a_m_e, and use the  |
               variable given  by  _v_a_r_N_a_m_e  to  hold  information  |
               returned from the kernel call.  _V_a_r_N_a_m_e is treated  |
               as an array variable, and the  following  elements  |
               of  that variable are set: aattiimmee, ccttiimmee, ddeevv, ggiidd,  |
               iinnoo, mmooddee, mmttiimmee, nnlliinnkk, ssiizzee,  ttyyppee,  uuiidd.   Each  |
               element  except  ttyyppee is a decimal string with the  |
               value of the corresponding  field  from  the  ssttaatt  |



Sprite v1.0                                                    26






Tcl                   C Library Procedures                    Tcl



               return  structure;  see  the manual entry for ssttaatt  |
               for details on the meanings of  the  values.   The  |
               ttyyppee  element  gives  the  type of the file in the  |
               same form returned by the command ffiillee ttyyppee.  This  |
               command returns an empty string.                    |

          ffiillee ttaaiill _n_a_m_e                                                ||
               Return  all  of  the  characters in _n_a_m_e after the  |
               last slash.  If  _n_a_m_e  contains  no  slashes  then  |
               return _n_a_m_e.                                        |

          ffiillee ttyyppee _n_a_m_e                                                ||
               Returns  a  string  giving  the type of file _n_a_m_e,  |
               which will be  one  of  ffiillee,  ddiirreeccttoorryy,  cchhaarraacc--  |
               tteerrSSppeecciiaall, bblloocckkSSppeecciiaall, ffiiffoo, lliinnkk, or ssoocckkeett.    |

          ffiillee wwrriittaabbllee _n_a_m_e                                            ||
               Return  11  if file _n_a_m_e is writable by the current  |
               user, 00 otherwise.                                  |

                                                                        ||
          The  ffiillee  commands  that  return 0/1 results are often  |
          used in conditional or looping commands, for example:    |

               iiff {{!![[ffiillee eexxiissttss ffoooo]]}} tthheenn {{eerrrroorr {{bbaadd ffiillee nnaammee}}}} eellssee {{......}}|

     fflluusshh _f_i_l_e_I_d
          Flushes any output that has been buffered  for  _f_i_l_e_I_d.  |
          _F_i_l_e_I_d  must have been the return value from a previous  |
          call to ooppeenn, or it may be ssttddoouutt or ssttddeerrrr  to  access  |
          one  of  the  standard  I/O streams; it must refer to a  |
          file that was opened for writing.  This command returns  |
          an empty string.

     ffoorr _s_t_a_r_t _t_e_s_t _n_e_x_t _b_o_d_y
          FFoorr is a looping command, similar in structure to the C
          ffoorr  statement.   The  _s_t_a_r_t,  _n_e_x_t, and _b_o_d_y arguments
          must be Tcl command strings, and _t_e_s_t is an  expression
          string.   The  ffoorr command first invokes the Tcl inter-
          preter to execute _s_t_a_r_t.  Then it repeatedly  evaluates
          _t_e_s_t  as  an  expression;  if the result is non-zero it
          invokes the Tcl interpreter on _b_o_d_y, then  invokes  the
          Tcl  interpreter  on  _n_e_x_t, then repeats the loop.  The
          command terminates when _t_e_s_t evaluates to 0.  If a ccoonn--
          ttiinnuuee command is invoked within _b_o_d_y then any remaining
          commands in the current execution of _b_o_d_y are  skipped;
          processing continues by invoking the Tcl interpreter on
          _n_e_x_t, then evaluating _t_e_s_t, and so on.  If a bbrreeaakk com-
          mand  is invoked within _b_o_d_y or _n_e_x_t, then the ffoorr com-
          mand will return immediately.  The operation  of  bbrreeaakk
          and  ccoonnttiinnuuee  are  similar to the corresponding state-
          ments in C.  FFoorr returns an empty string.



Sprite v1.0                                                    27






Tcl                   C Library Procedures                    Tcl



     ffoorreeaacchh _v_a_r_n_a_m_e _l_i_s_t _b_o_d_y
          In this command, _v_a_r_n_a_m_e is the  name  of  a  variable,
          _l_i_s_t is a list of values to assign to _v_a_r_n_a_m_e, and _b_o_d_y
          is a collection of Tcl commands.   For  each  field  in
          _l_i_s_t (in order from left to right), ffoorreeaacchh assigns the
          contents of the field to _v_a_r_n_a_m_e (as if the lliinnddeexx com-
          mand  had  been  used to extract the field), then calls
          the Tcl interpreter to execute  _b_o_d_y.   The  bbrreeaakk  and
          ccoonnttiinnuuee  statements  may  be invoked inside _b_o_d_y, with
          the same effect as in the ffoorr command.  FFoorreeaacchh returns
          an empty string.

     ffoorrmmaatt _f_o_r_m_a_t_S_t_r_i_n_g ?_a_r_g _a_r_g ...?
          This command generates a formatted string in  the  same
          way  as the C sspprriinnttff procedure (it uses sspprriinnttff in its
          implementation).  _F_o_r_m_a_t_S_t_r_i_n_g indicates how to  format
          the result, using %% fields as in sspprriinnttff, and the addi-
          tional arguments, if any, provide values to be  substi-
          tuted  into the result.  All of the sspprriinnttff options are
          valid; see the sspprriinnttff man page for details.  Each  _a_r_g
          must  match  the expected type from the %% field in _f_o_r_-
          _m_a_t_S_t_r_i_n_g; the ffoorrmmaatt command converts each argument to
          the correct type (floating, integer, etc.) before pass-
          ing it to sspprriinnttff for  formatting.   The  only  unusual
          conversion is for %%cc; in this case the argument must be
          a decimal string, which will then be converted  to  the
          corresponding   ASCII  character  value.   FFoorrmmaatt  does
          backslash substitution on its _f_o_r_m_a_t_S_t_r_i_n_g argument, so
          backslash  sequences  in  _f_o_r_m_a_t_S_t_r_i_n_g  will be handled
          correctly even if  the  argument  is  in  braces.   The
          return value from ffoorrmmaatt is the formatted string.

     ggeettss _f_i_l_e_I_d ?_v_a_r_N_a_m_e?
          Reads the next line from the file given by  _f_i_l_e_I_d  and  |
          discards the terminating newline character.  If _v_a_r_N_a_m_e  |
          is specified, then the line is placed in  the  variable  |
          by  that  name  and  the return value is a count of the  |
          number of characters read (not including the  newline).  |
          If  the  end  of the file is reached before reading any  |
          characters then -1 is returned and _v_a_r_N_a_m_e is set to an  |
          empty  string.   If  _v_a_r_N_a_m_e  is not specified then the  |
          return value will be the line (minus the newline  char-  |
          acter)  or  an  empty  string if the end of the file is  |
          reached before reading any characters.  An empty string  |
          will  also be returned if a line contains no characters  |
          except the newline, so eeooff  may  have  to  be  used  to  |
          determine  what really happened.  If the last character  |
          in the file is  not  a  newline  character,  then  ggeettss  |
          behaves  as if there were an additional newline charac-  |
          ter at the end of the file.  _F_i_l_e_I_d must  be  ssttddiinn  or  |
          the  return value from a previous call to ooppeenn; it must  |
          refer to a file that was opened for reading.



Sprite v1.0                                                    28






Tcl                   C Library Procedures                    Tcl



     gglloobb ?--nnooccoommppllaaiinn? _f_i_l_e_n_a_m_e ?_f_i_l_e_n_a_m_e ...?
          This command  performs  filename  globbing,  using  csh
          rules.   The  returned  value  from gglloobb is the list of
          expanded filenames.  If --nnooccoommppllaaiinn is specified as the  |
          first  argument  then  an  empty  list may be returned;  |
          otherwise an error is returned if the expanded list  is  |
          empty.   The  --nnooccoommppllaaiinn  argument  must  be  provided  |
          exactly: an abbreviation will not be accepted.

     gglloobbaall _v_a_r_n_a_m_e ?_v_a_r_n_a_m_e ...?
          This command is ignored unless a Tcl procedure is being
          interpreted.    If  so,  then  it  declares  the  given
          _v_a_r_n_a_m_e's to be  global  variables  rather  than  local
          ones.   For  the duration of the current procedure (and
          only while executing in  the  current  procedure),  any
          reference  to  any  of  the _v_a_r_n_a_m_es will be bound to a
          global variable instead of a local one.

     hhiissttoorryy ?_o_p_t_i_o_n? ?_a_r_g _a_r_g ...?
          Note:  this command may not be available  in  all  Tcl-
          based applications.  Typically, only those that receive
          command input in a typescript form  will  support  his-
          tory.   The  hhiissttoorryy  command  performs  one of several
          operations  related   to   recently-executed   commands
          recorded  in  a  history  list.  Each of these recorded
          commands is referred to as an ``event''.  When specify-
          ing  an  event  to  the  hhiissttoorryy command, the following
          forms may be used:

          [1]  A number:  if positive, it  refers  to  the  event
               with that number (all events are numbered starting
               at 1).  If the number is negative, it  selects  an
               event  relative to the current event (--11 refers to
               the previous event, --22 to the one before that, and
               so on).

          [2]  A string:  selects  the  most  recent  event  that
               matches  the  string.   An  event is considered to
               match the string either if the string is the  same
               as  the  first  characters of the event, or if the
               string matches the  event  in  the  sense  of  the
               ssttrriinngg mmaattcchh command.

          The hhiissttoorryy command  can  take  any  of  the  following
          forms:

          hhiissttoorryy
               Same as hhiissttoorryy iinnffoo, described below.              |

          hhiissttoorryy aadddd _c_o_m_m_a_n_d ?eexxeecc?
               Add the _c_o_m_m_a_n_d argument to the history list as  a
               new  event.  If eexxeecc is specified (or abbreviated)



Sprite v1.0                                                    29






Tcl                   C Library Procedures                    Tcl



               then the command is also executed and  its  result
               is  returned.   If  eexxeecc  isn't  specified then an
               empty string is returned as result.

          hhiissttoorryy cchhaannggee _n_e_w_V_a_l_u_e ?_e_v_e_n_t?
               Replace the  value  recorded  for  an  event  with
               _n_e_w_V_a_l_u_e.   _E_v_e_n_t  specifies the event to replace,
               and defaults to the _c_u_r_r_e_n_t event (not event  --11).
               This  command is intended for use in commands that
               implement new forms of  history  substitution  and
               wish  to  replace the current event (which invokes
               the substitution) with the command created through
               substitution.    The  return  value  is  an  empty
               string.

          hhiissttoorryy eevveenntt ?_e_v_e_n_t?
               Returns the value of the  event  given  by  _e_v_e_n_t.
               _E_v_e_n_t defaults to --11.  This command causes history
               revision to occur: see below for details.

          hhiissttoorryy iinnffoo ?_c_o_u_n_t?
               Returns a formatted string (intended for humans to
               read)  giving  the  event  number and contents for
               each of the events in the history list except  the
               current  event.   If  _c_o_u_n_t is specified then only
               the most recent _c_o_u_n_t events are returned.

          hhiissttoorryy kkeeeepp _c_o_u_n_t
               This command may be used to change the size of the
               history  list  to  _c_o_u_n_t  events.   Initially,  20
               events are retained in  the  history  list.   This
               command returns an empty string.

          hhiissttoorryy nneexxttiidd
               Returns  the  number  of  the  next  event  to  be
               recorded  in  the  history list.  It is useful for
               things like printing the event number in  command-
               line prompts.

          hhiissttoorryy rreeddoo ?_e_v_e_n_t?
               Re-execute the  command  indicated  by  _e_v_e_n_t  and
               return  its  result.   _E_v_e_n_t defaults to --11.  This
               command results in history  revision:   see  below
               for details.

          hhiissttoorryy ssuubbssttiittuuttee _o_l_d _n_e_w ?_e_v_e_n_t?
               Retrieve  the  command  given  by  _e_v_e_n_t  (--11   by
               default), replace any occurrences of _o_l_d by _n_e_w in
               the command (only  simple  character  equality  is
               supported;  no  wild cards), execute the resulting
               command, and return the result of that  execution.
               This  command  results  in  history revision:  see



Sprite v1.0                                                    30






Tcl                   C Library Procedures                    Tcl



               below for details.

          hhiissttoorryy wwoorrddss _s_e_l_e_c_t_o_r ?_e_v_e_n_t?
               Retrieve from the command given by  _e_v_e_n_t  (--11  by
               default)  the  words given by _s_e_l_e_c_t_o_r, and return
               those words in a string separated by spaces.   The
               sseelleeccttoorr  argument  has  three  forms.  If it is a
               single number then it selects the  word  given  by
               that  number  (00  for  the command name, 11 for its
               first argument, and so on).  If it consists of two
               numbers  separated  by a dash, then it selects all
               the arguments between those two.  Otherwise sseelleecc--
               ttoorr  is  treated  as a pattern; all words matching
               that pattern (in the sense of  ssttrriinngg  mmaattcchh)  are
               returned.   In  the numeric forms $$ may be used to
               select the last word of a command.   For  example,
               suppose  the  most  recent  command in the history
               list is

                    ffoorrmmaatt  {{%%ss iiss %%dd yyeeaarrss oolldd}} AAlliiccee [[eexxpprr $$aaggeeIInnMMoonntthhss//1122]]
               Below are some history commands  and  the  results
               they would produce:

                    Command_______          Result______

                    hhiissttoorryy wwoorrddss $$ [[eexxpprr $$aaggeeIInnMMoonntthhss//1122]]
                    hhiissttoorryy wwoorrddss 11--22{{%%ss iiss %%dd yyeeaarrss  oolldd}} AAlliiccee
                    hhiissttoorryy wwoorrddss **aa**oo**{{%%ss iiss %%dd yyeeaarrss oolldd}} [[eexxpprr $$aaggeeIInnMMoonntthhss//1122]]
               HHiissttoorryy wwoorrddss results in  history  revision:   see
               below for details.
          The history options eevveenntt, rreeddoo, ssuubbssttiittuuttee, and  wwoorrddss
          result  in  ``history  revision''.   When  one of these
          options is invoked then the current event  is  modified
          to  eliminate  the  history command and replace it with
          the result of the history command.  For  example,  sup-
          pose  that  the most recent command in the history list
          is

               sseett aa [[eexxpprr $$bb++22]]
          and suppose that the next command invoked is one of the
          ones  on the left side of the table below.  The command
          actually recorded in the  history  event  will  be  the
          corresponding one on the right side of the table.

               Command Typed_____________    Command Recorded________________

               hhiissttoorryy         sseett aa [[eexxpprr $$bb++22]]
               hhiissttoorryy ss aa bb   sseett bb [[eexxpprr $$bb++22]]
               sseett cc [[hhiissttoorryy ww 22]]sseett cc [[eexxpprr $$bb++22]]
          History revision is  needed  because  event  specifiers  |
          like --11 are only valid at a particular time:  once more  |
          events have been added to the history list a  different  |



Sprite v1.0                                                    31






Tcl                   C Library Procedures                    Tcl



          event  specifier  would  be  needed.   History revision  |
          occurs even when hhiissttoorryy is invoked indirectly from the  |
          current event (e.g. a user types a command that invokes  |
          a Tcl procedure that invokes hhiissttoorryy):   the  top-level  |
          command  whose  execution eventually resulted in a hhiiss--  |
          ttoorryy command is replaced.  If you wish to  invoke  com-  |
          mands  like hhiissttoorryy wwoorrddss without history revision, you  |
          can use hhiissttoorryy eevveenntt to save the current history event  |
          and then use hhiissttoorryy cchhaannggee to restore it later.

     iiff _t_e_s_t ?tthheenn? _t_r_u_e_B_o_d_y ?eellssee? ?_f_a_l_s_e_B_o_d_y?
          The _i_f command evaluates _t_e_s_t as an expression (in  the
          same  way that eexxpprr evaluates its argument).  The value
          of the expression must be numeric; if  it  is  non-zero
          then _t_r_u_e_B_o_d_y is called by passing it to the Tcl inter-
          preter.  Otherwise _f_a_l_s_e_B_o_d_y is executed by passing  it
          to  the  Tcl  interpreter.  The tthheenn and eellssee arguments
          are optional ``noise words'' to make the command easier
          to  read.   _F_a_l_s_e_B_o_d_y  is  also  optional;  if it isn't
          specified then the command does nothing if _t_e_s_t  evalu-
          ates to zero.  The return value from iiff is the value of
          the last command executed in _t_r_u_e_B_o_d_y or _f_a_l_s_e_B_o_d_y,  or
          the  empty  string if _t_e_s_t evaluates to zero and _f_a_l_s_e_-
          _B_o_d_y isn't specified.

     iinnccrr _v_a_r_N_a_m_e ?_i_n_c_r_e_m_e_n_t?
          Increment the value stored in the variable  whose  name  |
          is   _v_a_r_N_a_m_e.   The  value  of  the  variable  must  be  |
          integral.  If _i_n_c_r_e_m_e_n_t  is  supplied  then  its  value  |
          (which  must  be  an  integer) is added to the value of  |
          variable _v_a_r_N_a_m_e;  otherwise 1  is  added  to  _v_a_r_N_a_m_e.  |
          The new value is stored as a decimal string in variable  |
          _v_a_r_N_a_m_e and also returned as result.

     iinnffoo _o_p_t_i_o_n ?_a_r_g _a_r_g ...?
          Provide information about various internals to the  Tcl
          interpreter.  The legal _o_p_t_i_o_n's (which may be abbrevi-
          ated) are:

          iinnffoo aarrggss _p_r_o_c_n_a_m_e
               Returns a list containing the names of  the  argu-
               ments  to  procedure _p_r_o_c_n_a_m_e, in order.  _P_r_o_c_n_a_m_e
               must be the name of a Tcl command procedure.

          iinnffoo bbooddyy _p_r_o_c_n_a_m_e
               Returns the body of procedure _p_r_o_c_n_a_m_e.   _P_r_o_c_n_a_m_e
               must be the name of a Tcl command procedure.

          iinnffoo ccmmddccoouunntt
               Returns a count of the total  number  of  commands
               that have been invoked in this interpreter.




Sprite v1.0                                                    32






Tcl                   C Library Procedures                    Tcl



          iinnffoo ccoommmmaannddss ?_p_a_t_t_e_r_n?
               If _p_a_t_t_e_r_n isn't  specified,  returns  a  list  of
               names  of all the Tcl commands, including both the
               built-in commands written in  C  and  the  command
               procedures  defined  using  the  pprroocc command.  If
               _p_a_t_t_e_r_n is specified, only  those  names  matching
               _p_a_t_t_e_r_n  are  returned.   Matching  is  determined
               using the same rules as for ssttrriinngg mmaattcchh.

          iinnffoo ddeeffaauulltt _p_r_o_c_n_a_m_e _a_r_g _v_a_r_n_a_m_e
               _P_r_o_c_n_a_m_e must be the name of a  Tcl  command  pro-
               cedure  and _a_r_g must be the name of an argument to
               that procedure.  If _a_r_g  doesn't  have  a  default
               value  then  the  command returns 00.  Otherwise it
               returns 11 and places the default value of _a_r_g into
               variable _v_a_r_n_a_m_e.

          iinnffoo eexxiissttss _v_a_r_N_a_m_e
               Returns 11 if the variable named _v_a_r_N_a_m_e exists  in
               the  current  context (either as a global or local
               variable), returns 00 otherwise.

          iinnffoo gglloobbaallss ?_p_a_t_t_e_r_n?
               If _p_a_t_t_e_r_n isn't specified, returns a list of  all
               the  names  of currently-defined global variables.
               If _p_a_t_t_e_r_n is specified, only those names matching
               _p_a_t_t_e_r_n  are  returned.   Matching  is  determined
               using the same rules as for ssttrriinngg mmaattcchh.

          iinnffoo lleevveell ?_n_u_m_b_e_r?
               If _n_u_m_b_e_r is not specified, this command returns a
               number giving the stack level of the invoking pro-
               cedure, or 0 if the command  is  invoked  at  top-
               level.  If _n_u_m_b_e_r is specified, then the result is
               a list consisting of the name  and  arguments  for
               the  procedure  call at level _n_u_m_b_e_r on the stack.
               If _n_u_m_b_e_r is positive then it selects a particular
               stack  level (1 refers to the top-most active pro-
               cedure, 2 to the procedure it called, and so  on);
               otherwise it gives a level relative to the current
               level (0 refers to the current  procedure,  -1  to
               its  caller,  and so on).  See the uupplleevveell command
               for more information on what stack levels mean.

          iinnffoo lliibbrraarryy
               Returns the name of the library directory in which  |
               standard  Tcl  scripts are stored.  If there is no  |
               such directory defined for the  current  installa-  |
               tion  then an error is generated.  See the lliibbrraarryy  |
               manual entry for details of  the  facilities  pro-  |
               vided  by  the  Tcl script library.  Normally each  |
               application will have its own application-specific  |



Sprite v1.0                                                    33






Tcl                   C Library Procedures                    Tcl



               script  library  in  addition  to  the  Tcl script  |
               library;  I suggest that each  application  set  a  |
               global  variable  with  a  name  like  $$_a_p_pLLiibbrraarryy  |
               (where _a_p_p is the application's name) to hold  the  |
               location of that application's library directory.

          iinnffoo llooccaallss ?_p_a_t_t_e_r_n?
               If _p_a_t_t_e_r_n isn't specified, returns a list of  all
               the  names  of  currently-defined local variables,
               including arguments to the current  procedure,  if
               any.   Variables defined with the gglloobbaall and uuppvvaarr  |
               commands will not  be  returned.   If  _p_a_t_t_e_r_n  is
               specified,  only  those names matching _p_a_t_t_e_r_n are
               returned.  Matching is determined using  the  same
               rules as for ssttrriinngg mmaattcchh.

          iinnffoo pprrooccss ?_p_a_t_t_e_r_n?
               If _p_a_t_t_e_r_n isn't specified, returns a list of  all
               the  names  of Tcl command procedures.  If _p_a_t_t_e_r_n
               is specified, only those  names  matching  _p_a_t_t_e_r_n
               are  returned.   Matching  is determined using the
               same rules as for ssttrriinngg mmaattcchh.

          iinnffoo ssccrriipptt
               If a Tcl script file is currently being  evaluated  |
               (i.e.  there  is  a call to TTccll__EEvvaallFFiillee active or  |
               there is an active invocation of the  ssoouurrccee  com-  |
               mand),  then  this command returns the name of the  |
               innermost file  being  processed.   Otherwise  the  |
               command returns an empty string.

          iinnffoo ttccllvveerrssiioonn
               Returns the version number for this version of Tcl
               in  the  form  _x._y,  where  changes to _x represent
               major changes with probable incompatibilities  and
               changes  to _y represent small enhancements and bug
               fixes that retain backward compatibility.

          iinnffoo vvaarrss ?_p_a_t_t_e_r_n?
               If _p_a_t_t_e_r_n isn't specified, returns a list of  all
               the  names of currently-visible variables, includ-
               ing both locals and currently-visible globals.  If
               _p_a_t_t_e_r_n  is  specified,  only those names matching
               _p_a_t_t_e_r_n  are  returned.   Matching  is  determined
               using the same rules as for ssttrriinngg mmaattcchh.

     jjooiinn _l_i_s_t ?_j_o_i_n_S_t_r_i_n_g?
          The _l_i_s_t argument must be a valid Tcl list.  This  com-  |
          mand  returns  the  string formed by joining all of the  |
          elements of _l_i_s_t together  with  _j_o_i_n_S_t_r_i_n_g  separating  |
          each  adjacent  pair of elements.  The _j_o_i_n_S_t_r_i_n_g argu-  |
          ment defaults to a space character.



Sprite v1.0                                                    34






Tcl                   C Library Procedures                    Tcl



     llaappppeenndd _v_a_r_N_a_m_e _v_a_l_u_e ?_v_a_l_u_e _v_a_l_u_e ...?
          Treat the variable given  by  _v_a_r_N_a_m_e  as  a  list  and  |
          append  each  of  the _v_a_l_u_e arguments to that list as a  |
          separate element, with  spaces  between  elements.   If  |
          _v_a_r_N_a_m_e  doesn't  exist,  it  is created as a list with  |
          elements given by  the  _v_a_l_u_e  arguments.   LLaappppeenndd  is  |
          similar  to  aappppeenndd except that the _v_a_l_u_es are appended  |
          as list elements rather than raw  text.   This  command  |
          provides  a  relatively efficient way to build up large  |
          lists.  For example, ``llaappppeenndd  aa  $$bb''  is  much  more  |
          efficient  than ``sseett aa [[ccoonnccaatt $$aa [[lliisstt $$bb]]]]'' when $$aa  |
          is long.                                                 |

     lliinnddeexx _l_i_s_t _i_n_d_e_x                                                  ||
          Treats _l_i_s_t as a Tcl list and returns the _i_n_d_e_x'th ele-  |
          ment from it (0 refers to  the  first  element  of  the  |
          list).   In extracting the element, _l_i_n_d_e_x observes the  |
          same rules concerning braces and quotes and backslashes  |
          as  the Tcl command interpreter; however, variable sub-  |
          stitution and command substitution do  not  occur.   If  |
          _i_n_d_e_x  is  negative  or  greater  than  or equal to the  |
          number of elements in _v_a_l_u_e, then an  empty  string  is  |
          returned.                                                |

     lliinnsseerrtt _l_i_s_t _i_n_d_e_x _e_l_e_m_e_n_t ?_e_l_e_m_e_n_t _e_l_e_m_e_n_t ...?                   ||
          This command produces a new list from _l_i_s_t by inserting  |
          all of the _e_l_e_m_e_n_t arguments just  before  the  _i_n_d_e_xth  |
          element  of  _l_i_s_t.  Each _e_l_e_m_e_n_t argument will become a  |
          separate element of the new list.   If  _i_n_d_e_x  is  less  |
          than  or  equal  to  zero,  then  the  new elements are  |
          inserted at the beginning of the  list.   If  _i_n_d_e_x  is  |
          greater  than or equal to the number of elements in the  |
          list, then the new elements are appended to the list.

     lliisstt _a_r_g ?_a_r_g ...?
          This command returns a list comprised of all the  _a_r_gs.
          Braces  and backslashes get added as necessary, so that
          the iinnddeexx command may be used  on  the  result  to  re-
          extract  the  original arguments, and also so that eevvaall
          may be used to execute the resulting  list,  with  _a_r_g_1
          comprising  the  command's  name  and  the  other  _a_r_gs
          comprising its arguments.  LLiisstt produces slightly  dif-
          ferent  results  than ccoonnccaatt:  ccoonnccaatt removes one level
          of grouping before forming the list, while  lliisstt  works
          directly from the original arguments.  For example, the
          command

               lliisstt aa bb {{cc dd ee}} {{ff {{gg hh}}}}
          will return

               aa bb {{cc dd ee}} {{ff {{gg hh}}}}
          while ccoonnccaatt with the same arguments will return



Sprite v1.0                                                    35






Tcl                   C Library Procedures                    Tcl



               aa bb cc dd ee ff {{gg hh}}

     lllleennggtthh _l_i_s_t                                                       ||
          Treats _l_i_s_t as a list and returns a decimal string giv-  |
          ing the number of elements in it.                        |

     llrraannggee _l_i_s_t _f_i_r_s_t _l_a_s_t                                             ||
          _L_i_s_t  must  be  a  valid  Tcl  list.  This command will  |
          return a new list consisting of elements _f_i_r_s_t  through  |
          _l_a_s_t,  inclusive.  _L_a_s_t may be eenndd (or any abbreviation  |
          of it) to refer to the last element of  the  list.   If  |
          _f_i_r_s_t  is  less  than zero, it is treated as if it were  |
          zero.  If _l_a_s_t is greater than or equal to  the  number  |
          of  elements  in  the list, then it is treated as if it  |
          were eenndd.  If _f_i_r_s_t is greater than _l_a_s_t then an  empty  |
          string  is returned.  Note: ``llrraannggee _l_i_s_t _f_i_r_s_t _f_i_r_s_t''  |
          does not always produce the  same  result  as  ``lliinnddeexx  |
          _l_i_s_t  _f_i_r_s_t'' (although it often does for simple fields  |
          that aren't enclosed in braces); it does, however, pro-  |
          duce  exactly  the  same results as ``lliisstt [[lliinnddeexx _l_i_s_t  |
          _f_i_r_s_t]]''                                                 |

     llrreeppllaaccee _l_i_s_t _f_i_r_s_t _l_a_s_t ?_e_l_e_m_e_n_t _e_l_e_m_e_n_t ...?                     ||
          Returns a new list formed by replacing one or more ele-  |
          ments of _l_i_s_t with the _e_l_e_m_e_n_t arguments.  _F_i_r_s_t  gives  |
          the  index in _l_i_s_t of the first element to be replaced.  |
          If _f_i_r_s_t is less than zero then it refers to the  first  |
          element  of  _l_i_s_t;  the element indicated by _f_i_r_s_t must  |
          exist in the list.  _L_a_s_t gives the index in _l_i_s_t of the  |
          last  element  to be replaced;  it must be greater than  |
          or equal to _f_i_r_s_t.  _L_a_s_t may be eenndd (or  any  abbrevia-  |
          tion of it) to indicate that all elements between _f_i_r_s_t  |
          and the end of the list should be replaced.   The  _e_l_e_-  |
          _m_e_n_t arguments specify zero or more new arguments to be  |
          added to the list in place of those that were  deleted.  |
          Each _e_l_e_m_e_n_t argument will become a separate element of  |
          the list.  If no _e_l_e_m_e_n_t arguments are specified,  then  |
          the elements between _f_i_r_s_t and _l_a_s_t are simply deleted.  |

     llsseeaarrcchh _l_i_s_t _p_a_t_t_e_r_n                                               ||
          Search  the  elements  of  _l_i_s_t  to  see if one of them  |
          matches _p_a_t_t_e_r_n.  If so, the command returns the  index  |
          of  the  first  matching  element.  If not, the command  |
          returns --11.  Pattern matching is done in the  same  way  |
          as for the ssttrriinngg mmaattcchh command.                         |

     llssoorrtt _l_i_s_t                                                         ||
          Sort  the  elements  of  _l_i_s_t,  returning a new list in  |
          sorted order.  ASCII sorting is used, with  the  result  |
          in increasing order.

     ooppeenn _f_i_l_e_N_a_m_e ?_a_c_c_e_s_s?



Sprite v1.0                                                    36






Tcl                   C Library Procedures                    Tcl



          Opens a file and returns an identifier that may be used  |
          in  future invocations of commands like rreeaadd, ppuuttss, and  |
          cclloossee.  _F_i_l_e_N_a_m_e gives the name of the file to open; if  |
          it  starts with a tilde then tilde substitution is per-  |
          formed as described for TTccll__TTiillddeeSSuubbsstt.  If  the  first  |
          character of _f_i_l_e_N_a_m_e is ``|'' then the remaining char-  |
          acters of _f_i_l_e_N_a_m_e are treated as a command pipeline to  |
          invoke,  in  the same style as for eexxeecc.  In this case,  |
          the identifier returned by ooppeenn may be used to write to  |
          the  command's input pipe or read from its output pipe.  |
          The _a_c_c_e_s_s argument indicates the way in which the file  |
          (or  command  pipeline) is to be accessed.  It may have  |
          any of the following values:                             |

          rr                                                             ||
               Open  the  file  for  reading  only; the file must  |
               already exist.                                      |

          rr++                                                            ||
               Open  the  file  for both reading and writing; the  |
               file must already exist.                            |

          ww                                                             ||
               Open the file for writing only.  Truncate it if it  |
               exists.  If it doesn't exist, create a new file.    |

          ww++                                                            ||
               Open  the  file for reading and writing.  Truncate  |
               it if it exists.  If it doesn't  exist,  create  a  |
               new file.                                           |

          aa                                                             ||
               Open  the  file  for  writing only.  The file must  |
               already exist, and the file is positioned so  that  |
               new data is appended to the file.                   |

          aa++                                                            ||
               Open  the  file for reading and writing.  The file  |
               must already exist, and the initial  access  posi-  |
               tion is set to the end of the file.                 |

          _A_c_c_e_s_s defaults to rr.  If a file  is  opened  for  both  |
          reading  and writing, then sseeeekk must be invoked between  |
          a read and a write, or  vice  versa  (this  restriction  |
          does  not apply to command pipelines opened with ooppeenn).  |
          When  _f_i_l_e_N_a_m_e  specifies  a  command  pipeline  and  a  |
          write-only  access  is  used, then standard output from  |
          the pipeline is directed to the current standard output  |
          unless overridden by the command.  When _f_i_l_e_N_a_m_e speci-  |
          fies a command pipeline and a read-only access is used,  |
          then standard input from the pipeline is taken from the  |
          current  standard  input  unless  overridden   by   the  |



Sprite v1.0                                                    37






Tcl                   C Library Procedures                    Tcl



          command.                                                 |

     pprroocc _n_a_m_e _a_r_g_s _b_o_d_y
          The pprroocc command creates a new Tcl  command  procedure,
          _n_a_m_e,  replacing  any  existing  command there may have
          been  by  that  name.   Whenever  the  new  command  is
          invoked,  the  contents of _b_o_d_y will be executed by the
          Tcl interpreter.  _A_r_g_s specifies the  formal  arguments
          to  the  procedure.   It  consists  of a list, possibly
          empty, each of whose elements specifies  one  argument.
          Each  argument specifier is also a list with either one
          or two fields.  If there is only a single field in  the
          specifier,  then  it  is  the  name of the argument; if
          there are two fields, then the first  is  the  argument
          name  and  the second is its default value.  braces and
          backslashes may be used in the  usual  way  to  specify
          complex default values.

          When _n_a_m_e is invoked, a local variable will be  created
          for  each of the formal arguments to the procedure; its
          value will be the value of  corresponding  argument  in
          the  invoking  command or the argument's default value.
          Arguments with default values need not be specified  in
          a  procedure invocation.  However, there must be enough
          actual arguments for  all  the  formal  arguments  that
          don't  have  defaults,  and there must not be any extra
          actual arguments.  There is one special case to  permit
          procedures  with variable numbers of arguments.  If the
          last formal argument has the name aarrggss, then a call  to
          the  procedure  may  contain more actual arguments than
          the procedure has formals.  In this case,  all  of  the
          actual  arguments  starting  at  the  one that would be
          assigned to aarrggss are combined into a list  (as  if  the
          lliisstt  command  had  been  used); this combined value is
          assigned to the local variable aarrggss.

          When _b_o_d_y is being executed,  variable  names  normally
          refer  to  local variables, which are created automati-
          cally when referenced and deleted  when  the  procedure
          returns.   One  local variable is automatically created
          for each of the procedure's  arguments.   Global  vari-
          ables  can only be accessed by invoking the gglloobbaall com-
          mand.

          The pprroocc command returns the null string.  When a  pro-
          cedure  is invoked, the procedure's return value is the
          value specified in a rreettuurrnn command.  If the  procedure
          doesn't  execute  an  explicit  rreettuurrnn, then its return
          value is the value of the last command executed in  the
          procedure's  body.   If an error occurs while executing
          the procedure body, then the procedure-as-a-whole  will
          return that same error.



Sprite v1.0                                                    38






Tcl                   C Library Procedures                    Tcl



     ppuuttss _f_i_l_e_I_d _s_t_r_i_n_g ?nnoonneewwlliinnee?
          Writes the characters given by _s_t_r_i_n_g to the file given  |
          by  _f_i_l_e_I_d.   PPuuttss normally outputs a newline character  |
          after _s_t_r_i_n_g, but this feature  may  be  suppressed  by  |
          specifying  the nnoonneewwlliinnee argument.  Output to files is  |
          buffered internally by Tcl; the fflluusshh  command  may  be  |
          used to force buffered characters to be output.  _F_i_l_e_I_d  |
          must have been the return value from a previous call to  |
          ooppeenn,  or it may be ssttddoouutt or ssttddeerrrr to refer to one of  |
          the standard I/O channels; it must refer to a file that  |
          was opened for writing.                                  |

     ppwwdd                                                                ||
          Returns the path name of the current working directory.  |

     rreeaadd _f_i_l_e_I_d                                                        ||

     rreeaadd _f_i_l_e_I_d nnoonneewwlliinnee                                              ||

     rreeaadd _f_i_l_e_I_d _n_u_m_B_y_t_e_s                                               ||
          In  the first form, all of the remaining bytes are read  |
          from the file given by _f_i_l_e_I_d; they are returned as the  |
          result of the command.  If nnoonneewwlliinnee is specified as an  |
          additional argument, then the  last  character  of  the  |
          file  is  discarded  if  it is a newline.  In the third  |
          form, the extra argument specifies how  many  bytes  to  |
          read;   exactly  this  many  bytes  will  be  read  and  |
          returned, unless there are fewer  than  _n_u_m_B_y_t_e_s  bytes  |
          left in the file; in this case, all the remaining bytes  |
          are returned.  _F_i_l_e_I_d must be ssttddiinn or the return value  |
          from  a  previous call to ooppeenn; it must refer to a file  |
          that was opened for reading.                             |

_s_u_b_M_a_t_c_h_-  |
_V_a_r ...?                                                   |       |
     rreeggeexxpp ?--iinnddiicceess? ?--nnooccaassee? _e_x_p  _s_t_r_i_n_g  ?_m_a_t_c_h_V_a_r?  ?_s_u_b_M_a_t_c_h_V_a_r  ||
          Determines  whether  the regular expression _e_x_p matches  |
          part or all of _s_t_r_i_n_g and returns 1 if it does, 0 if it  |
          doesn't.   See  REGULAR  EXPRESSIONS above for complete  |
          information on the syntax of _e_x_p and how it is  matched  |
          against _s_t_r_i_n_g.                                          |

          If the --nnooccaassee  switch  is  specified  then  upper-case  |
          characters  in  _s_t_r_i_n_g are treated as lower case during  |
          the matching  process.   The  --nnooccaassee  switch  must  be  |
          specified before _e_x_p and may not be abbreviated.         |

          If additional arguments are specified after _s_t_r_i_n_g then  |
          they  are  treated  as the names of variables to use to  |
          return  information  about  which  part(s)  of   _s_t_r_i_n_g  |
          matched  _e_x_p.   _M_a_t_c_h_V_a_r  will  be  set to the range of  |
          _s_t_r_i_n_g that matched all of _e_x_p.  The first  _s_u_b_M_a_t_c_h_V_a_r  |



Sprite v1.0                                                    39






Tcl                   C Library Procedures                    Tcl



          will  contain the characters in _s_t_r_i_n_g that matched the  |
          leftmost parenthesized subexpression  within  _e_x_p,  the  |
          next  _s_u_b_M_a_t_c_h_V_a_r  will  contain  the  characters  that  |
          matched the next  parenthesized  subexpression  to  the  |
          right in _e_x_p, and so on.                                 |

          Normally, _m_a_t_c_h_V_a_r and the _s_u_b_M_a_t_c_h_V_a_rs are set to hold  |
          the  matching  characters from ssttrriinngg.  However, if the  |
          --iinnddiicceess switch is specified then  each  variable  will  |
          contain  a  list  of  two  decimal  strings  giving the  |
          indices in _s_t_r_i_n_g of the first and last  characters  in  |
          the  matching range of characters.  The --iinnddiicceess switch  |
          must be specified before the _e_x_p argument and  may  not  |
          be abbreviated.                                          |

          If there  are  more  _s_u_b_M_a_t_c_h_V_a_r's  than  parenthesized  |
          subexpressions  within  _e_x_p,  or if a particular subex-  |
          pression in _e_x_p doesn't match the string (e.g.  because  |
          it  was  in  a  portion  of  the expression that wasn't  |
          matched), then the corresponding  _s_u_b_M_a_t_c_h_V_a_r  will  be  |
          set  to  ``--11 --11'' if --iinnddiicceess has been specified or to  |
          an empty string otherwise.                               |

     rreeggssuubb ?--aallll? ?--nnooccaassee? _e_x_p _s_t_r_i_n_g _s_u_b_S_p_e_c _v_a_r_N_a_m_e                 ||
          This command matches the regular expression _e_x_p against  |
          _s_t_r_i_n_g using the rules described in REGULAR EXPRESSIONS  |
          above.   If there is no match, then the command returns  |
          0 and does nothing else.  If there is a match, then the  |
          command  returns  1 and also copies _s_t_r_i_n_g to the vari-  |
          able whose name is  given  by  _v_a_r_N_a_m_e.   When  copying  |
          _s_t_r_i_n_g,  the  portion  of  _s_t_r_i_n_g  that  matched _e_x_p is  |
          replaced with _s_u_b_S_p_e_c.  If _s_u_b_S_p_e_c contains a ``&''  or  |
          ``\0'',  then  it  is replaced in the substitution with  |
          the portion of _s_t_r_i_n_g that  matched  _e_x_p.   If  _s_u_b_S_p_e_c  |
          contains  a ``\_n'', where _n is a digit between 1 and 9,  |
          then it is replaced in the substitution with  the  por-  |
          tion  of  _s_t_r_i_n_g  that  matched  the _n-th parenthesized  |
          subexpression of _e_x_p.  Additional  backslashes  may  be  |
          used  in  _s_u_b_S_p_e_c  to prevent special interpretation of  |
          ``&'' or ``\0'' or ``\_n'' or  backslash.   The  use  of  |
          backslashes in _s_u_b_S_p_e_c tends to interact badly with the  |
          Tcl parser's use  of  backslashes,  so  it's  generally  |
          safest  to  enclose  _s_u_b_S_p_e_c  in  braces if it includes  |
          backslashes.  If the --aallll argument is  specified,  then  |
          all  ranges in _s_t_r_i_n_g that match _e_x_p are found and sub-  |
          stitution is performed for each of these ranges;   oth-  |
          erwise  only the first matching range is found and sub-  |
          stituted.  If --aallll is specified, then ``&'' and  ``\_n''  |
          sequences  are  handled for each substitution using the  |
          information  from  the  corresponding  match.   If  the  |
          --nnooccaassee  argument is specified, then upper-case charac-  |
          ters in  _s_t_r_i_n_g  are  converted  to  lower-case  before  |



Sprite v1.0                                                    40






Tcl                   C Library Procedures                    Tcl



          matching against _e_x_p;  however, substitutions specified  |
          by _s_u_b_S_p_e_c use the original unconverted form of _s_t_r_i_n_g.  |
          The  --aallll  and  --nnooccaassee  arguments  must  be  specified  |
          exactly:  no abbreviations are permitted.

     rreennaammee _o_l_d_N_a_m_e _n_e_w_N_a_m_e
          Rename the command that used to be  called  _o_l_d_N_a_m_e  so
          that  it is now called _n_e_w_N_a_m_e.  If _n_e_w_N_a_m_e is an empty
          string (e.g. {}) then _o_l_d_N_a_m_e is deleted.   The  rreennaammee
          command returns an empty string as result.

     rreettuurrnn ?_v_a_l_u_e?
          Return immediately from the current procedure (or  top-
          level  command  or  ssoouurrccee  command), with _v_a_l_u_e as the
          return value.  If _v_a_l_u_e  is  not  specified,  an  empty
          string will be returned as result.

     ssccaann _s_t_r_i_n_g _f_o_r_m_a_t _v_a_r_n_a_m_e_1 ?_v_a_r_n_a_m_e_2 ...?
          This command parses fields from an input string in  the
          same  fashion  as the C ssssccaannff procedure.  _S_t_r_i_n_g gives
          the input to be parsed  and  _f_o_r_m_a_t  indicates  how  to
          parse  it,  using  %%  fields  as in ssssccaannff.  All of the
          ssssccaannff options are valid; see the ssssccaannff man  page  for
          details.   Each  _v_a_r_n_a_m_e  gives the name of a variable;
          when a field is scanned from _s_t_r_i_n_g, the result is con-
          verted   back   into  a  string  and  assigned  to  the
          corresponding _v_a_r_n_a_m_e.  The only unusual conversion  is
          for %%cc.  For %%cc conversions a single character value is
          converted to a decimal string, which is  then  assigned
          to  the  corresponding  _v_a_r_n_a_m_e;  no field width may be  |
          specified for this conversion.                           |

     sseeeekk _f_i_l_e_I_d _o_f_f_s_e_t ?_o_r_i_g_i_n?                                        ||
          Change  the  current  access  position for _f_i_l_e_I_d.  The  |
          _o_f_f_s_e_t and _o_r_i_g_i_n arguments  specify  the  position  at  |
          which  the  next  read  or write will occur for _f_i_l_e_I_d.  |
          _O_f_f_s_e_t must be a number (which  may  be  negative)  and  |
          _o_r_i_g_i_n must be one of the following:                     |

          ssttaarrtt                                                         ||
               The  new access position will be _o_f_f_s_e_t bytes from  |
               the start of the file.                              |

          ccuurrrreenntt                                                       ||
               The  new access position will be _o_f_f_s_e_t bytes from  |
               the current access  position;  a  negative  _o_f_f_s_e_t  |
               moves the access position backwards in the file.    |

          eenndd                                                           ||
               The  new access position will be _o_f_f_s_e_t bytes from  |
               the end of the file.  A negative _o_f_f_s_e_t places the  |
               access  position  before  the  end-of-file,  and a  |



Sprite v1.0                                                    41






Tcl                   C Library Procedures                    Tcl



               positive _o_f_f_s_e_t places the access  position  after  |
               the end-of-file.                                    |

          The _o_r_i_g_i_n argument defaults  to  ssttaarrtt.   _F_i_l_e_I_d  must  |
          have  been  the  return  value  from a previous call to  |
          ooppeenn, or it may be ssttddiinn, ssttddoouutt, or ssttddeerrrr to refer to  |
          one of the standard I/O channels.  This command returns  |
          an empty string.                                         |

     sseett _v_a_r_n_a_m_e ?_v_a_l_u_e?
          Returns the value of variable  _v_a_r_n_a_m_e.   If  _v_a_l_u_e  is
          specified,  then  set  the  value  of _v_a_r_n_a_m_e to _v_a_l_u_e,
          creating a new variable if one doesn't  already  exist,
          and  return  its  value.   If  _v_a_r_N_a_m_e contains an open  |
          parenthesis and ends with a close parenthesis, then  it  |
          refers  to an array element:  the characters before the  |
          open parenthesis are the name of  the  array,  and  the  |
          characters between the parentheses are the index within  |
          the array.  Otherwise _v_a_r_N_a_m_e refers to a scalar  vari-  |
          able.   If  no procedure is active, then _v_a_r_n_a_m_e refers
          to a global variable.  If a procedure is  active,  then
          _v_a_r_n_a_m_e  refers to a parameter or local variable of the
          procedure, unless the _g_l_o_b_a_l command has  been  invoked
          to declare _v_a_r_n_a_m_e to be global.

     ssoouurrccee _f_i_l_e_N_a_m_e
          Read file _f_i_l_e_N_a_m_e and pass the  contents  to  the  Tcl
          interpreter as a sequence of commands to execute in the
          normal fashion.  The return  value  of  ssoouurrccee  is  the
          return  value  of  the  last  command executed from the
          file.  If an error occurs in executing the contents  of
          the  file,  then  the  ssoouurrccee  command will return that
          error.  If a rreettuurrnn command is invoked from within  the
          file, the remainder of the file will be skipped and the
          ssoouurrccee command will return  normally  with  the  result
          from  the  rreettuurrnn  command.   If _f_i_l_e_N_a_m_e starts with a
          tilde, then it is tilde-substituted as described in the
          TTccll__TTiillddeeSSuubbsstt manual entry.

     sspplliitt _s_t_r_i_n_g ?_s_p_l_i_t_C_h_a_r_s?
          Returns a list created  by  splitting  _s_t_r_i_n_g  at  each
          character  that  is  in  the _s_p_l_i_t_C_h_a_r_s argument.  Each
          element of the result list will consist of the  charac-
          ters from _s_t_r_i_n_g between instances of the characters in
          _s_p_l_i_t_C_h_a_r_s.  Empty list elements will be  generated  if
          _s_t_r_i_n_g  contains  adjacent characters in _s_p_l_i_t_C_h_a_r_s, or
          if  the  first  or  last  character  of  _s_t_r_i_n_g  is  in
          _s_p_l_i_t_C_h_a_r_s.  If _s_p_l_i_t_C_h_a_r_s is an empty string then each
          character of _s_t_r_i_n_g becomes a separate element  of  the
          result  list.   _S_p_l_i_t_C_h_a_r_s  defaults  to  the  standard
          white-space characters.  For example,




Sprite v1.0                                                    42






Tcl                   C Library Procedures                    Tcl



               sspplliitt ""ccoommpp..uunniixx..mmiisscc"" ..
          returns ""ccoommpp uunniixx mmiisscc"" and

               sspplliitt ""HHeelllloo wwoorrlldd"" {{}}
          returns ""HH ee ll ll oo {{ }} ww oo rr ll dd"".

     ssttrriinngg _o_p_t_i_o_n _a_r_g ?_a_r_g ...?
          Perform one of several string operations, depending  on
          _o_p_t_i_o_n.   The  legal _o_p_t_i_o_ns (which may be abbreviated)
          are:

          ssttrriinngg ccoommppaarree _s_t_r_i_n_g_1 _s_t_r_i_n_g_2
               Perform  a  character-by-character  comparison  of
               strings _s_t_r_i_n_g_1 and _s_t_r_i_n_g_2 in the same way as the
               C ssttrrccmmpp procedure.  Return -1, 0, or 1, depending
               on whether _s_t_r_i_n_g_1 is lexicographically less than,
               equal to, or greater than _s_t_r_i_n_g_2.

          ssttrriinngg ffiirrsstt _s_t_r_i_n_g_1 _s_t_r_i_n_g_2
               Search _s_t_r_i_n_g_2 for a sequence of  characters  that
               exactly  match  the  characters  in  _s_t_r_i_n_g_1.   If
               found, return the index of the first character  in
               the  first  such  match  within  _s_t_r_i_n_g_2.   If not
               found, return -1.

          ssttrriinngg iinnddeexx _s_t_r_i_n_g _c_h_a_r_I_n_d_e_x                                 ||
               Returns  the  _c_h_a_r_I_n_d_e_x'th character of the _s_t_r_i_n_g  |
               argument.  A _c_h_a_r_I_n_d_e_x of  0  corresponds  to  the  |
               first  character  of  the string.  If _c_h_a_r_I_n_d_e_x is  |
               less than 0 or greater than or equal to the length  |
               of the string then an empty string is returned.

          ssttrriinngg llaasstt _s_t_r_i_n_g_1 _s_t_r_i_n_g_2
               Search _s_t_r_i_n_g_2 for a sequence of  characters  that
               exactly  match  the  characters  in  _s_t_r_i_n_g_1.   If
               found, return the index of the first character  in
               the  last  such match within _s_t_r_i_n_g_2.  If there is
               no match, then return -1.

          ssttrriinngg lleennggtthh _s_t_r_i_n_g                                          ||
               Returns  a  decimal  string  giving  the number of  |
               characters in _s_t_r_i_n_g.

          ssttrriinngg mmaattcchh _p_a_t_t_e_r_n _s_t_r_i_n_g
               See if _p_a_t_t_e_r_n matches  _s_t_r_i_n_g;  return  1  if  it
               does,  0  if  it  doesn't.   Matching is done in a
               fashion similar to that used by the C-shell.   For
               the  two  strings to match, their contents must be
               identical  except  that  the   following   special
               sequences may appear in _p_a_t_t_e_r_n:

               **         Matches any sequence  of  characters  in



Sprite v1.0                                                    43






Tcl                   C Library Procedures                    Tcl



                         _s_t_r_i_n_g, including a null string.

               ??         Matches any single character in _s_t_r_i_n_g.

               [[_c_h_a_r_s]]   Matches any character in the  set  given
                         by _c_h_a_r_s.  If a sequence of the form _x--_y
                         appears in  _c_h_a_r_s,  then  any  character
                         between _x and _y, inclusive, will match.

               \\_x        Matches the single  character  _x.   This
                         provides  a  way of avoiding the special
                         interpretation of the  characters  **??[[]]\\
                         in _p_a_t_t_e_r_n.

          ssttrriinngg rraannggee _s_t_r_i_n_g _f_i_r_s_t _l_a_s_t                                ||
               Returns  a  range  of  consecutive characters from  |
               _s_t_r_i_n_g, starting with the character whose index is  |
               _f_i_r_s_t and ending with the character whose index is  |
               _l_a_s_t.  An index of 0 refers to the first character  |
               of  the string.  _L_a_s_t may be eenndd (or any abbrevia-  |
               tion of it) to refer to the last character of  the  |
               string.   If  _f_i_r_s_t  is  less than zero then it is  |
               treated as if it were zero, and if _l_a_s_t is greater  |
               than  or equal to the length of the string then it  |
               is treated as if it were eenndd.  If _f_i_r_s_t is greater  |
               than _l_a_s_t then an empty string is returned.         |

          ssttrriinngg ttoolloowweerr _s_t_r_i_n_g                                         ||
               Returns  a  value  equal to _s_t_r_i_n_g except that all  |
               upper case letters have been  converted  to  lower  |
               case.                                               |

          ssttrriinngg ttoouuppppeerr _s_t_r_i_n_g                                         ||
               Returns  a  value  equal to _s_t_r_i_n_g except that all  |
               lower case letters have been  converted  to  upper  |
               case.                                               |

          ssttrriinngg ttrriimm _s_t_r_i_n_g ?_c_h_a_r_s?                                    ||
               Returns  a  value  equal to _s_t_r_i_n_g except that any  |
               leading or trailing characters from the set  given  |
               by  _c_h_a_r_s  are removed.  If _c_h_a_r_s is not specified  |
               then white space is removed  (spaces,  tabs,  new-  |
               lines, and carriage returns).                       |

          ssttrriinngg ttrriimmlleefftt _s_t_r_i_n_g ?_c_h_a_r_s?                                ||
               Returns  a  value  equal to _s_t_r_i_n_g except that any  |
               leading characters from the set given by _c_h_a_r_s are  |
               removed.   If  _c_h_a_r_s  is  not specified then white  |
               space is removed (spaces, tabs, newlines, and car-  |
               riage returns).                                     |

          ssttrriinngg ttrriimmrriigghhtt _s_t_r_i_n_g ?_c_h_a_r_s?                               ||



Sprite v1.0                                                    44






Tcl                   C Library Procedures                    Tcl



               Returns  a  value  equal to _s_t_r_i_n_g except that any  |
               trailing characters from the set  given  by  _c_h_a_r_s  |
               are removed.  If _c_h_a_r_s is not specified then white  |
               space is removed (spaces, tabs, newlines, and car-  |
               riage returns).                                     |

     tteellll _f_i_l_e_I_d                                                        ||
          Returns  a  decimal  string  giving  the current access  |
          position in _f_i_l_e_I_d.  _F_i_l_e_I_d must have been  the  return  |
          value from a previous call to ooppeenn, or it may be ssttddiinn,  |
          ssttddoouutt, or ssttddeerrrr to refer to one of the  standard  I/O  |
          channels.

     ttiimmee _c_o_m_m_a_n_d ?_c_o_u_n_t?
          This command will call the Tcl interpreter _c_o_u_n_t  times
          to  execute _c_o_m_m_a_n_d (or once if _c_o_u_n_t isn't specified).
          It will then return a string of the form

               550033 mmiiccrroosseeccoonnddss ppeerr iitteerraattiioonn
          which indicates the average amount of time required per
          iteration,   in  microseconds.   Time  is  measured  in
          elapsed time, not CPU time.

     ttrraaccee _o_p_t_i_o_n ?_a_r_g _a_r_g ...?
          Cause Tcl commands  to  be  executed  whenever  certain  |
          operations  are  invoked.   At  present,  only variable  |
          tracing is implemented. The legal _o_p_t_i_o_n's  (which  may  |
          be abbreviated) are:                                     |

          ttrraaccee vvaarriiaabbllee _n_a_m_e _o_p_s _c_o_m_m_a_n_d                               ||
               Arrange  for _c_o_m_m_a_n_d to be executed whenever vari-  |
               able _n_a_m_e is accessed in one of the ways given  by  |
               _o_p_s.  _N_a_m_e may refer to a normal variable, an ele-  |
               ment of an array, or to an array as a whole  (i.e.  |
               _n_a_m_e  may  be  just  the name of an array, with no  |
               parenthesized index).  If _n_a_m_e refers to  a  whole  |
               array,  then  _c_o_m_m_a_n_d is invoked whenever any ele-  |
               ment of the array is manipulated.                   |

               _O_p_s indicates which operations  are  of  interest,  |
               and  consists  of  one  or  more  of the following  |
               letters:                                            |

                    rr                                                   ||
                         Invoke  _c_o_m_m_a_n_d whenever the variable is  |
                         read.                                     |

                    ww                                                   ||
                         Invoke  _c_o_m_m_a_n_d whenever the variable is  |
                         written.                                  |

                    uu                                                   ||



Sprite v1.0                                                    45






Tcl                   C Library Procedures                    Tcl



                         Invoke  _c_o_m_m_a_n_d whenever the variable is  |
                         unset.  Variables can  be  unset  expli-  |
                         citly  with the uunnsseett command, or impli-  |
                         citly when  procedures  return  (all  of  |
                         their local variables are unset).  Vari-  |
                         ables are also unset  when  interpreters  |
                         are  deleted,  but  traces  will  not be  |
                         invoked because there is no  interpreter  |
                         in which to execute them.                 |

               When  the  trace  triggers,  three  arguments  are  |
               appended  to _c_o_m_m_a_n_d so that the actual command is  |
               as follows:                                         |

                    _c_o_m_m_a_n_d _n_a_m_e_1 _n_a_m_e_2 _o_p                         |
               _N_a_m_e_1 and _n_a_m_e_2 give the name(s) for the  variable  |
               being  accessed:  if the variable is a scalar then  |
               _n_a_m_e_1 gives the variable's name and  _n_a_m_e_2  is  an  |
               empty  string; if the variable is an array element  |
               then _n_a_m_e_1 gives the name of the array  and  name2  |
               gives the index into the array; if an entire array  |
               is being deleted and the trace was  registered  on  |
               the  overall  array, rather than a single element,  |
               then _n_a_m_e_1 gives the array name and  _n_a_m_e_2  is  an  |
               empty  string.   _O_p  indicates  what  operation is  |
               being performed on the variable, and is one of  rr,  |
               ww, or uu as defined above.                           |

               _C_o_m_m_a_n_d executes in the same context as  the  code  |
               that  invoked  the traced operation:  if the vari-  |
               able was accessed as part of a Tcl procedure, then  |
               _c_o_m_m_a_n_d  will  have access to the same local vari-  |
               ables as code in the procedure.  This context  may  |
               be  different  than the context in which the trace  |
               was  created.   If  _c_o_m_m_a_n_d  invokes  a  procedure  |
               (which  it  normally does) then the procedure will  |
               have to use uuppvvaarr  or  uupplleevveell  if  it  wishes  to  |
               access  the traced variable.  Note also that _n_a_m_e_1  |
               may not necessarily be the same as the  name  used  |
               to set the trace on the variable;  differences can  |
               occur if the access is  made  through  a  variable  |
               defined with the uuppvvaarr command.                     |

               For read and write traces, _c_o_m_m_a_n_d can modify  the  |
               variable to affect the result of the traced opera-  |
               tion.  If _c_o_m_m_a_n_d modifies the value of a variable  |
               during  a  read or write trace, then the new value  |
               will be returned  as  the  result  of  the  traced  |
               operation.   The  return  value  from   _c_o_m_m_a_n_d is  |
               ignored except that if it returns an error of  any  |
               sort  then the traced operation is aborted with an  |
               error message saying that the  access  was  denied  |



Sprite v1.0                                                    46






Tcl                   C Library Procedures                    Tcl



               (this mechanism can be used to implement read-only  |
               variables, for example).  For write  traces,  _c_o_m_-  |
               _m_a_n_d  is  invoked  after  the variable's value has  |
               been changed; it can write a new  value  into  the  |
               variable  to override the original value specified  |
               in the write operation.   To  implement  read-only  |
               variables,  _c_o_m_m_a_n_d  will  have to restore the old  |
               value of the variable.                              |

               While _c_o_m_m_a_n_d is executing during a read or  write  |
               trace, traces on the variable are temporarily dis-  |
               abled.  This means that reads and  writes  invoked  |
               by  _c_o_m_m_a_n_d  will occur directly, without invoking  |
               _c_o_m_m_a_n_d (or any other traces) again.                |

               When an unset trace is invoked, the  variable  has  |
               already  been deleted:  it will appear to be unde-  |
               fined with no traces.  If an unset occurs  because  |
               of  a  procedure  return,  then  the trace will be  |
               invoked in the variable context of  the  procedure  |
               being returned to:  the stack frame of the return-  |
               ing procedure will no longer  exist.   Traces  are  |
               not  disabled  during unset traces, so if an unset  |
               trace command creates a new trace and accesses the  |
               variable, the trace will be invoked.                |

               If there are multiple traces on  a  variable  they  |
               are  invoked  in  order  of  creation, most-recent  |
               first.  If one trace returns  an  error,  then  no  |
               further  traces  are invoked for the variable.  If  |
               an array element has a trace  set,  and  there  is  |
               also  a  trace  set  on  the array as a whole, the  |
               trace on the overall array is invoked  before  the  |
               one on the element.                                 |

               Once created, the trace remains in  effect  either  |
               until  the trace is removed with the ttrraaccee vvddeelleettee  |
               command described below,  until  the  variable  is  |
               unset,   or  until  the  interpreter  is  deleted.  |
               Unsetting an element  of  array  will  remove  any  |
               traces on that element, but will not remove traces  |
               on the overall array.                               |

               This command returns an empty string.               |

          ttrraaccee vvddeelleettee _n_a_m_e _o_p_s _c_o_m_m_a_n_d                                ||
               If  there is a trace set on variable _n_a_m_e with the  |
               operations and command given by _o_p_s  and  _c_o_m_m_a_n_d,  |
               then  the  trace  is removed, so that _c_o_m_m_a_n_d will  |
               never again be invoked.  Returns an empty string.   |

          ttrraaccee vviinnffoo _n_a_m_e                                              ||



Sprite v1.0                                                    47






Tcl                   C Library Procedures                    Tcl



               Returns  a  list  containing  one element for each  |
               trace currently set on variable _n_a_m_e.   Each  ele-  |
               ment  of  the list is itself a list containing two  |
               elements, which are the _o_p_s and _c_o_m_m_a_n_d associated  |
               with  the trace.  If _n_a_m_e doesn't exist or doesn't  |
               have any traces set, then the result of  the  com-  |
               mand will be an empty string.                       |

     uunnkknnoowwnn _c_m_d_N_a_m_e ?_a_r_g _a_r_g ...?                                      ||
          This command doesn't actually exist as part of Tcl, but  |
          Tcl will invoke it if it does exist.  If the Tcl inter-  |
          preter encounters a command name for which there is not  |
          a defined command, then Tcl checks for the existence of  |
          a  command named uunnkknnoowwnn.  If there is no such command,  |
          then the interpeter returns an error.  If  the  uunnkknnoowwnn  |
          command  exists, then it is invoked with arguments con-  |
          sisting of the fully-substituted name and arguments for  |
          the original non-existent command.  The uunnkknnoowwnn command  |
          typically does things like  searching  through  library  |
          directories  for  a  command  procedure  with  the name  |
          _c_m_d_N_a_m_e, or  expanding  abbreviated  command  names  to  |
          full-length,  or  automatically  executing unknown com-  |
          mands as UNIX sub-processes.  In some  cases  (such  as  |
          expanding abbreviations) uunnkknnoowwnn will change the origi-  |
          nal command slightly and  then  (re-)execute  it.   The  |
          result of the uunnkknnoowwnn command is used as the result for  |
          the original non-existent command.                       |

     uunnsseett _n_a_m_e ?_n_a_m_e _n_a_m_e ...?                                         ||
          Remove  one or more variables.  Each _n_a_m_e is a variable  |
          name, specified in any of the ways  acceptable  to  the  |
          sseett  command.   If  a  _n_a_m_e  refers to an element of an  |
          array, then that element is removed  without  affecting  |
          the  rest of the array.  If a _n_a_m_e consists of an array  |
          name with no parenthesized index, then the entire array  |
          is  deleted.  The uunnsseett command returns an empty string  |
          as result.  An error occurs if  any  of  the  variables  |
          doesn't exist.

     uupplleevveell ?_l_e_v_e_l? _c_o_m_m_a_n_d ?_c_o_m_m_a_n_d ...?
          All of the _c_o_m_m_a_n_d arguments  are  concatenated  as  if
          they  had  been  passed  to  ccoonnccaatt; the result is then
          evaluated in the variable context indicated  by  _l_e_v_e_l.
          UUpplleevveell  returns  the  result  of  that evaluation.  If
          _l_e_v_e_l is an integer, then it gives a distance  (up  the
          procedure  calling  stack) to move before executing the
          command.  If _l_e_v_e_l consists of ## followed by  a  number
          then  the  number  gives  an absolute level number.  If
          _l_e_v_e_l is omitted then it defaults to 11.   _L_e_v_e_l  cannot
          be  defaulted if the first _c_o_m_m_a_n_d argument starts with
          a digit or ##.  For example, suppose  that  procedure  aa
          was  invoked  from top-level, and that it called bb, and



Sprite v1.0                                                    48






Tcl                   C Library Procedures                    Tcl



          that bb called cc.  Suppose that cc  invokes  the  uupplleevveell
          command.   If  _l_e_v_e_l  is  11 or ##22  or omitted, then the
          command will be executed in the variable context of  bb.
          If  _l_e_v_e_l  is 22 or ##11 then the command will be executed
          in the variable context of aa.  If _l_e_v_e_l is 33 or ##00 then
          the  command will be executed at top-level (only global
          variables will be visible).  The uupplleevveell command causes
          the  invoking procedure to disappear from the procedure
          calling stack while the command is being executed.   In
          the above example, suppose cc invokes the command

               uupplleevveell 11 {{sseett xx 4433;; dd}}
          where dd is another Tcl procedure.  The sseett command will
          modify  the  variable xx in bb's context, and dd will exe-
          cute at level 3, as if called from bb.  If  it  in  turn
          executes the command

               uupplleevveell {{sseett xx 4422}}
          then the sseett command will modify the same variable xx in
          bb's  context:  the procedure cc does not appear to be on
          the call stack when dd is executing.  The command ``iinnffoo
          lleevveell''  may be used to obtain the level of the current
          procedure.  UUpplleevveell makes it possible to implement  new
          control  constructs  as  Tcl  procedures  (for example,
          uupplleevveell could be used to implement the wwhhiillee  construct
          as a Tcl procedure).

     uuppvvaarr ?_l_e_v_e_l? _o_t_h_e_r_V_a_r _m_y_V_a_r ?_o_t_h_e_r_V_a_r _m_y_V_a_r ...?
          This command arranges for one or more  local  variables  |
          in  the  current  procedure to refer to variables in an  |
          enclosing procedure call or to global variables.  _L_e_v_e_l  |
          may  have  any  of  the forms permitted for the uupplleevveell  |
          command, and may be omitted if the first letter of  the  |
          first  _o_t_h_e_r_V_a_r  isn't ## or a digit (it defaults to 11).  |
          For each _o_t_h_e_r_V_a_r argument, uuppvvaarr makes the variable by  |
          that  name in the procedure frame given by _l_e_v_e_l (or at  |
          global level, if _l_e_v_e_l is ##00) accessible in the current  |
          procedure  by the name given in the corresponding _m_y_V_a_r  |
          argument.  The variable  named  by  _o_t_h_e_r_V_a_r  need  not  |
          exist  at the time of the call;  it will be created the  |
          first time _m_y_V_a_r is referenced, just like  an  ordinary  |
          variable.   UUppvvaarr  may only be invoked from within pro-  |
          cedures.  Neither _o_t_h_e_r_V_a_r or _m_y_V_a_r  may  refer  to  an  |
          element of an array.  UUppvvaarr returns an empty string.     |

          The uuppvvaarr  command  simplifies  the  implementation  of  |
          call-by-name procedure calling and also makes it easier  |
          to build new control constructs as Tcl procedures.  For  |
          example, consider the following procedure:               |

               pprroocc aadddd22 nnaammee {{                                    |
                   uuppvvaarr $$nnaammee xx                                   |



Sprite v1.0                                                    49






Tcl                   C Library Procedures                    Tcl



                   sseett xx [[eexxpprr $$xx++22]]                               |
               }}                                                   |
          AAdddd22 is invoked with an argument giving the name  of  a  |
          variable,  and  it  adds two to the value of that vari-  |
          able.  Although aadddd22 could have been implemented  using  |
          uupplleevveell  instead  of  uuppvvaarr, uuppvvaarr makes it simpler for  |
          aadddd22 to access the variable in the  caller's  procedure  |
          frame.

     wwhhiillee _t_e_s_t _b_o_d_y
          The _w_h_i_l_e command evaluates _t_e_s_t as an  expression  (in  |
          the  same  way  that eexxpprr evaluates its argument).  The  |
          value of the expression must be numeric; if it is  non-  |
          zero  then  _b_o_d_y  is  executed by passing it to the Tcl  |
          interpreter.  Once _b_o_d_y has been executed then _t_e_s_t  is  |
          evaluated  again, and the process repeats until eventu-  |
          ally _t_e_s_t evaluates to a zero numeric value.   CCoonnttiinnuuee  |
          commands  may  be executed inside _b_o_d_y to terminate the  |
          current iteration of the loop, and bbrreeaakk  commands  may  |
          be  executed inside _b_o_d_y to cause immediate termination  |
          of the wwhhiillee command.  The wwhhiillee command always returns  |
          an empty string.


BBUUIILLTT--IINN VVAARRIIAABBLLEESS
     The following  global  variables  are  created  and  managed
     automatically by the Tcl library.  Except where noted below,
     these variables should normally be treated as  read-only  by
     application-specific code and by users.

     eennvv
          This variable is maintained by Tcl as  an  array  whose  |
          elements are the environment variables for the process.  |
          Reading  an  element  will  return  the  value  of  the  |
          corresponding environment variable.  Setting an element  |
          of the array will modify the corresponding  environment  |
          variable  or  create  a  new  one if it doesn't already  |
          exist.  Unsetting an element of  eennvv  will  remove  the  |
          corresponding environment variable.  Changes to the eennvv  |
          array will affect the environment passed to children by  |
          commands  like  eexxeecc.  If the entire eennvv array is unset  |
          then Tcl will stop monitoring eennvv accesses and will not  |
          update environment variables.                            |

     eerrrroorr--  |
          CCooddee                                                          ||
          After an error has occurred, this variable will be  set  |
          to  hold  additional  information  about the error in a  |
          form that is easy to process with programs.   eerrrroorrCCooddee  |
          consists  of a Tcl list with one or more elements.  The  |
          first element of the list identifies a general class of  |
          errors,  and  determines  the format of the rest of the  |



Sprite v1.0                                                    50






Tcl                   C Library Procedures                    Tcl



          list.  The following formats for eerrrroorrCCooddee are used  by  |
          the  Tcl core; individual applications may define addi-  |
          tional formats.                                          |

          CCHHIILLDDKKIILLLLEEDD _p_i_d _s_i_g_N_a_m_e _m_s_g                                   ||
               This  format is used when a child process has been  |
               killed because of a signal.  The second element of  |
               eerrrroorrCCooddee  will  be  the  process's identifier (in  |
               decimal).  The third element will be the  symbolic  |
               name of the signal that caused the process to ter-  |
               minate; it will be  one  of  the  names  from  the  |
               include  file  signal.h,  such  as  SSIIGGPPIIPPEE.   The  |
               fourth element will be a short human-readable mes-  |
               sage  describing  the  signal,  such as ``write on  |
               pipe with no readers'' for SSIIGGPPIIPPEE.                 |

          CCHHIILLDDSSTTAATTUUSS _p_i_d _c_o_d_e                                          ||
               This  format  is  used  when  a  child process has  |
               exited with a non-zero exit  status.   The  second  |
               element  of  eerrrroorrCCooddee will be the process's iden-  |
               tifier (in decimal) and the third element will  be  |
               the  exit  code  returned  by the process (also in  |
               decimal).                                           |

          CCHHIILLDDSSUUSSPP _p_i_d _c_o_d_e                                            ||
               This  format is used when a child process has been  |
               suspended because of a signal.  The second element  |
               of  eerrrroorrCCooddee will be the process's identifier, in  |
               decimal.  The third element will be  the  symbolic  |
               name  of  the  signal  that  caused the process to  |
               suspend; this will be one of the  names  from  the  |
               include  file  signal.h,  such  as  SSIIGGTTTTIINN.   The  |
               fourth element will be a short human-readable mes-  |
               sage  describing  the signal, such as ``background  |
               tty read'' for SSIIGGTTTTIINN.                             |

          NNOONNEE                                                          ||
               This format is used for errors where no additional  |
               information is available for an error besides  the  |
               message  returned  with the error.  In these cases  |
               eerrrroorrCCooddee will consist of a list containing a sin-  |
               gle element whose contents are NNOONNEE.                |

          UUNNIIXX _e_r_r_N_a_m_e _m_s_g                                              ||
               If  the  first  element of eerrrroorrCCooddee is UUNNIIXX, then  |
               the error occurred during a UNIX kernel call.  The  |
               second  element  of the list will contain the sym-  |
               bolic name of the error  that  occurred,  such  as  |
               EENNOOEENNTT;  this will be one of the values defined in  |
               the include file errno.h.  The  third  element  of  |
               the   list   will   be  a  human-readable  message  |
               corresponding to _e_r_r_N_a_m_e, such as ``no  such  file  |



Sprite v1.0                                                    51






Tcl                   C Library Procedures                    Tcl



               or directory'' for the EENNOOEENNTT case.                 |

          To set eerrrroorrCCooddee, applications should use library  pro-  |
          cedures  such as TTccll__SSeettEErrrroorrCCooddee and TTccll__UUnniixxEErrrroorr, or  |
          they may invoke the eerrrroorr command.   If  one  of  these  |
          methods hasn't been used, then the Tcl interpreter will  |
          reset the variable to NNOONNEE after the next error.         |

     eerrrroorrIInnffoo
          After an error has occurred, this string  will  contain
          one or more lines identifying the Tcl commands and pro-
          cedures that were being executed when the  most  recent
          error  occurred.  Its contents take the form of a stack
          trace showing the various nested Tcl commands that  had
          been invoked at the time of the error.


AAUUTTHHOORR
     John  Ousterhout,  University  of  California  at   Berkeley
     (ouster@sprite.berkeley.edu)

     Many people have contributed to Tcl in various ways, but the
     following people have made unusually large contributions:

     Bill Carpenter
     Peter Da Silva
     Mark Diekhans
     Karl Lehenbauer
     Mary Ann May-Pumphrey


























Sprite v1.0                                                    52



