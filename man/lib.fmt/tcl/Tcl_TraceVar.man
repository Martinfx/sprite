


Tcl_TraceVar      Tcl Command Language Library       Tcl_TraceVar



_________________________________________________________________

NNAAMMEE
     Tcl_TraceVar,  Tcl_UnTraceVar,  Tcl_VarTraceInfo  -  monitor
     accesses to a variable

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ttccll..hh>>

     int
     TTccll__TTrraacceeVVaarr((_i_n_t_e_r_p, _v_a_r_N_a_m_e, _g_l_o_b_a_l, _f_l_a_g_s, _p_r_o_c, _c_l_i_e_n_t_D_a_t_a))

     TTccll__UUnnTTrraacceeVVaarr((_i_n_t_e_r_p, _v_a_r_N_a_m_e, _g_l_o_b_a_l))

     int
     TTccll__VVaarrTTrraacceeIInnffoo((_i_n_t_e_r_p, _v_a_r_N_a_m_e, _g_l_o_b_a_l, _p_r_o_c_P_t_r, _c_l_i_e_n_t_D_a_t_a_P_t_r))

AARRGGUUMMEENNTTSS
     Tcl_Interp   *_i_n_t_e_r_p          (in)      Interpreter contain-
                                             ing variable.

     char         *_v_a_r_N_a_m_e         (in)      Name of variable.

     int          _g_l_o_b_a_l           (in)      If  non-zero,   then
                                             treat   _v_a_r_N_a_m_e   as
                                             global     variable,
                                             ignoring  any active
                                             Tcl        procedure
                                             frames.    If  zero,
                                             look up variable  in
                                             current  procedure's
                                             context.

     int          _f_l_a_g_s            (in)      OR-ed combination of
                                             the           values
                                             TCL_TRACE_READS,
                                             TCL_TRACE_WRITES,
                                             and
                                             TCL_TRACE_DELETES.
                                             Indicates      which
                                             operations are to be
                                             traced.

     char         *((*_p_r_o_c)())     (in)      Procedure to  invoke
                                             whenever  one of the
                                             traced    operations
                                             occurs.

     ClientData   _c_l_i_e_n_t_D_a_t_a       (in)      Arbitrary   one-word
                                             value   to  pass  to
                                             _p_r_o_c.




Sprite v.1.0         Printed:  July 31, 1990                    1






Tcl_TraceVar      Tcl Command Language Library       Tcl_TraceVar



     char         *((**_p_r_o_c_P_t_r)()) (out)     Pointer to  word  in
                                             which    to    store
                                             address  of  current
                                             trace  procedure for
                                             _v_a_r_N_a_m_e, if any.

     ClientData   *_c_l_i_e_n_t_D_a_t_a_P_t_r   (out)     Pointer to  word  in
                                             which    to    store
                                             ClientData       for
                                             current   trace  for
                                             _v_a_r_N_a_m_e, if any.

_________________________________________________________________


DDEESSCCRRIIPPTTIIOONN
     TTccll__TTrraacceeVVaarr allows an arbitrary C procedure  to  be  inter-
     posed in the access path to a variable, so that all reads or
     writes to that variable are mediated by the procedure.   The
     _f_l_a_g_s  argument  to  TTccll__TTrraacceeVVaarr indicates which operations
     are to cause _p_r_o_c to be invoked;  it consists  of  an  OR-ed
     combination of any of the following values:

     TTCCLL__TTRRAACCEE__RREEAADDSS
          Invoke _p_r_o_c whenever an attempt is  made  to  read  the
          variable.

     TTCCLL__TTRRAACCEE__WWRRIITTEESS
          Invoke _p_r_o_c whenever an attempt is made to  modify  the
          variable.

     TTCCLL__TTRRAACCEE__DDEELLEETTEESS
          Invoke _p_r_o_c whenever  the  trace  on  the  variable  is
          removed.  This can happen either because TTccll__UUnnTTrraacceeVVaarr
          is called, or because the variable was deleted (e.g. it
          is a local variable and the procedure is returning).

     If the  trace  is  created  successfully  then  TTccll__TTrraacceeVVaarr
     returns TCL_OK.  If an error occurred (e.g. there is already
     a trace set on the variable) then TCL_ERROR is returned  and
     an error message will be left in _i_n_t_e_r_p->_r_e_s_u_l_t.

     Whenever one of the specified operations occurs,  _p_r_o_c  will
     be invoked.  It should have the following structure:
          char *
          _p_r_o_c(_c_l_i_e_n_t_D_a_t_a, _i_n_t_e_r_p, _v_a_r_N_a_m_e, _g_l_o_b_a_l, _f_l_a_g_s, _o_l_d_V_a_l_u_e, _n_e_w_V_a_l_u_e)
               ClientData _c_l_i_e_n_t_D_a_t_a;
               Tcl_Interp *_i_n_t_e_r_p;
               char *_v_a_r_N_a_m_e;
               int _g_l_o_b_a_l;
               int _f_l_a_g_s;
               char *_o_l_d_V_a_l_u_e;
               char *_n_e_w_V_a_l_u_e;
          {



Sprite v.1.0         Printed:  July 31, 1990                    2






Tcl_TraceVar      Tcl Command Language Library       Tcl_TraceVar



          }
     The _c_l_i_e_n_t_D_a_t_a, _i_n_t_e_r_p, and _v_a_r_N_a_m_e parameters will have the
     same  values  as those passed to TTccll__TTrraacceeVVaarr when the trace
     was   created.    _C_l_i_e_n_t_D_a_t_a   typically   points   to    an
     application-specific  data  structure that describes what to
     do when _p_r_o_c is invoked.  _G_l_o_b_a_l indicates  whether  or  not
     the  variable  is a global one;  it may be needed by _p_r_o_c if
     _p_r_o_c calls TTccll__GGeettVVaarr or TTccll__SSeettVVaarr.   The  _f_l_a_g_s  parameter
     will have one of the bits TCL_TRACE_READS, TCL_TRACE_WRITES,
     or TCL_TRACE_DELETES set;  this indicates which operation is
     being  performed  on  the  variable.   In  addition, the bit
     corresponding to TCL_VARIABLE_UNDEFINED will be set in _f_l_a_g_s
     if  the  variable has never been assigned a value.  _O_l_d_V_a_l_u_e
     gives the variable's current value;  it points to  an  empty
     string if TCL_VARIABLE_UNDEFINED is set.  _N_e_w_V_a_l_u_e gives the
     new value being stored in the variable, if this is  a  write
     operation;  otherwise it points to an empty string.

     For read tracing, the return value from _p_r_o_c  is  the  value
     that  will be returned to the reader;  if _p_r_o_c returns NULL,
     this is a signal to the reader that the  variable  is  unde-
     fined.   _P_r_o_c  may  return  _o_l_d_V_a_l_u_e or something completely
     different, at its discretion.  For write tracing, the return
     value  from  _p_r_o_c  is ignored.  However, it is up to _p_r_o_c to
     change the variable's value, if it wishes to allow the write
     to  proceed.   To do this, _p_r_o_c should call TTccll__SSeettVVaarr.  For
     delete tracing, the return value from _p_r_o_c is also  ignored;
     the  primary  purpose of this trace call is to allow _p_r_o_c to
     free up its data structures associated with the trace.

     Tracing is temporarily disabled on the variable  while  _p_r_o_c
     is  executing.  This means that _p_r_o_c may call TTccll__GGeettVVaarr and
     TTccll__SSeettVVaarr without fear of infinite recursion on itself: the
     calls  will  operate  directly  on the variable, as if there
     were no tracing.  Once _p_r_o_c returns the trace is re-enabled.

     TTccll__UUnnSSeettTTrraaccee may be used to remove a trace from the  vari-
     able  given  by _i_n_t_e_r_p, _v_a_r_N_a_m_e, and _g_l_o_b_a_l.  If the current
     trace includes TCL_TRACE_DELETES, then the  trace  procedure
     will  be invoked one last time as part of the TTccll__UUnnSSeettTTrraaccee
     call.  If there is currently no trace on the selected  vari-
     able then TTccll__UUnnSSeettTTrraaccee has no effect.

     TTccll__VVaarrTTrraacceeIInnffoo is used to find out about the current trace
     on  a variable, if any.  The arguments _p_r_o_c_P_t_r and _c_l_i_e_n_t_D_a_-
     _t_a_P_t_r point to variables that TTccll__VVaarrTTrraacceeIInnffoo fills in with
     the  _p_r_o_c  and  _c_l_i_e_n_t_D_a_t_a arguments (respectively) from the
     call that created the current trace.  The  return  value  is
     the  _f_l_a_g_s  argument  from the call that created the current
     trace.  If there is no trace on the indicated  variable,  or
     if  the  variable  doesn't  exist,  then  0  is returned and
     *_p_r_o_c_P_t_r and *_c_l_i_e_n_t_D_a_t_a_P_t_r are both set to NULL.



Sprite v.1.0         Printed:  July 31, 1990                    3






Tcl_TraceVar      Tcl Command Language Library       Tcl_TraceVar



KKEEYYWWOORRDDSS
     clientData, trace, variable





















































Sprite v.1.0         Printed:  July 31, 1990                    4



