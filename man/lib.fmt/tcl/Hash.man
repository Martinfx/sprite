


Tcl_Hash              C Library Procedures               Tcl_Hash



_________________________________________________________________

NNAAMMEE
     Tcl_InitHashTable, Tcl_DeleteHashTable, Tcl_CreateHashEntry,
     Tcl_DeleteHashEntry, Tcl_FindHashEntry, Tcl_GetHashValue,
     Tcl_SetHashValue, Tcl_GetHashKey, Tcl_FirstHashEntry,
     Tcl_NextHashEntry, Tcl_HashStats - procedures to manage hash
     tables

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ttccllHHaasshh..hh>>

     TTccll__IInniittHHaasshhTTaabbllee(_t_a_b_l_e_P_t_r, _k_e_y_T_y_p_e)

     TTccll__DDeelleetteeHHaasshhTTaabbllee(_t_a_b_l_e_P_t_r)

     Tcl_HashEntry *
     TTccll__CCrreeaatteeHHaasshhEEnnttrryy(_t_a_b_l_e_P_t_r, _k_e_y, _n_e_w_P_t_r)

     TTccll__DDeelleetteeHHaasshhEEnnttrryy(_e_n_t_r_y_P_t_r)

     Tcl_HashEntry *
     TTccll__FFiinnddHHaasshhEEnnttrryy(_t_a_b_l_e_P_t_r, _k_e_y)

     ClientData
     TTccll__GGeettHHaasshhVVaalluuee(_e_n_t_r_y_P_t_r)

     TTccll__SSeettHHaasshhVVaalluuee(_e_n_t_r_y_P_t_r, _v_a_l_u_e)

     char *
     TTccll__GGeettHHaasshhKKeeyy(_t_a_b_l_e_P_t_r, _e_n_t_r_y_P_t_r)

     Tcl_HashEntry *
     TTccll__FFiirrssttHHaasshhEEnnttrryy(_t_a_b_l_e_P_t_r, _s_e_a_r_c_h_P_t_r)

     Tcl_HashEntry *
     TTccll__NNeexxttHHaasshhEEnnttrryy(_s_e_a_r_c_h_P_t_r)

     char *
     TTccll__HHaasshhSSttaattss(_t_a_b_l_e_P_t_r)

AARRGGUUMMEENNTTSS
     Tcl_HashTable    *_t_a_b_l_e_P_t_r    (in)      Address of hash
                                             table structure (for
                                             all procedures but
                                             TTccll__IInniittHHaasshhTTaabbllee,
                                             this must have been
                                             initialized by pre-
                                             vious call to
                                             TTccll__IInniittHHaasshhTTaabbllee).

     int              _k_e_y_T_y_p_e      (in)      Kind of keys to use



Sprite v1.0                                                     1






Tcl_Hash              C Library Procedures               Tcl_Hash



                                             for new hash table.
                                             Must be either
                                             TCL_STRING_KEYS,
                                             TCL_ONE_WORD_KEYS,
                                             or an integer value
                                             greater than 1.

     char             *_k_e_y         (in)      Key to use for probe
                                             into table.  Exact
                                             form depends on _k_e_y_-
                                             _T_y_p_e used to create
                                             table.

     int              *_n_e_w_P_t_r      (out)     The word at *_n_e_w_P_t_r
                                             is set to 1 if a new
                                             entry was created
                                             and 0 if there was
                                             already an entry for
                                             _k_e_y.

     Tcl_HashEntry    *_e_n_t_r_y_P_t_r    (in)      Pointer to hash
                                             table entry.

     ClientData       _v_a_l_u_e        (in)      New value to assign
                                             to hash table entry.
                                             Need not have type
                                             ClientData, but must
                                             fit in same space as
                                             ClientData.

     Tcl_HashSearch   *_s_e_a_r_c_h_P_t_r   (in)      Pointer to record to
                                             use to keep track of
                                             progress in
                                             enumerating all the
                                             entries in a hash
                                             table.
_________________________________________________________________


DDEESSCCRRIIPPTTIIOONN
     A hash table consists of zero or more entries, each consist-
     ing of a key and a value.  Given the key for an entry, the
     hashing routines can very quickly locate the entry, and
     hence its value.  There may be at most one entry in a hash
     table with a particular key, but many entries may have the
     same value.  Keys can take one of three forms:  strings,
     one-word values, or integer arrays.  All of the keys in a
     given table have the same form, which is specified when the
     table is initialized.

     The value of a hash table entry can be anything that fits in
     the same space as a ``char *'' pointer.  Values for hash



Sprite v1.0                                                     2






Tcl_Hash              C Library Procedures               Tcl_Hash



     table entries are managed entirely by clients, not by the
     hash module itself.  Typically each entry's value is a
     pointer to a data structure managed by client code.

     Hash tables grow gracefully as the number of entries
     increases, so that there are always less than three entries
     per hash bucket, on average.  This allows for fast lookups
     regardless of the number of entries in a table.

     TTccll__IInniittHHaasshhTTaabbllee initializes a structure that describes a
     new hash table.  The space for the structure is provided by
     the caller, not by the hash module.  The value of _k_e_y_T_y_p_e
     indicates what kinds of keys will be used for all entries in
     the table.  _K_e_y_T_y_p_e must have one of the following values:

     TTCCLL__SSTTRRIINNGG__KKEEYYSS          Keys are null-terminated ASCII
                              strings.  They are passed to hash-
                              ing routines using the address of
                              the first character of the string.

     TTCCLL__OONNEE__WWOORRDD__KKEEYYSS        Keys are single-word values;  they
                              are passed to hashing routines and
                              stored in hash table entries as
                              ``char *'' values.  The pointer
                              value is the key;  it need not (and
                              usually doesn't) actually point to
                              a string.

     _o_t_h_e_r                    If _k_e_y_T_y_p_e is not TCL_STRING_KEYS
                              or TCL_ONE_WORD_KEYS, then it must
                              be an integer value greater than 1.
                              In this case the keys will be
                              arrays of ``int'' values, where
                              _k_e_y_T_y_p_e gives the number of ints in
                              each key.  This allows structures
                              to be used as keys.  All keys must
                              have the same size.  Array keys are
                              passed into hashing functions using
                              the address of the first int in the
                              array.

     TTccll__DDeelleetteeHHaasshhTTaabbllee deletes all of the entries in a hash
     table and frees up the memory associated with the table's
     bucket array and entries.  It does not free the actual table
     structure (pointed to by _t_a_b_l_e_P_t_r), since that memory is
     assumed to be managed by the client.  TTccll__DDeelleetteeHHaasshhTTaabbllee
     also does not free or otherwise manipulate the values of the
     hash table entries.  If the entry values point to
     dynamically-allocated memory, then it is the client's
     responsibility to free these structures before deleting the
     table.




Sprite v1.0                                                     3






Tcl_Hash              C Library Procedures               Tcl_Hash



     TTccll__CCrreeaatteeHHaasshhEEnnttrryy locates the entry corresponding to a
     particular key, creating a new entry in the table if there
     wasn't already one with the given key.  If an entry already
     existed with the given key then *_n_e_w_P_t_r is set to zero.  If
     a new entry was created, then *_n_e_w_P_t_r is set to a non-zero
     value and the value of the new entry will be set to zero.
     The return value from TTccll__CCrreeaatteeHHaasshhEEnnttrryy is a pointer to
     the entry, which may be used to retrieve and modify the
     entry's value or to delete the entry from the table.

     TTccll__DDeelleetteeHHaasshhEEnnttrryy will remove an existing entry from a
     table.  The memory associated with the entry itself will be
     freed, but the client is responsible for any cleanup associ-
     ated with the entry's value, such as freeing a structure
     that it points to.

     TTccll__FFiinnddHHaasshhEEnnttrryy is similar to TTccll__CCrreeaatteeHHaasshhEEnnttrryy except
     that it doesn't create a new entry if the key doesn't exist;
     instead, it returns NULL as result.

     TTccll__GGeettHHaasshhVVaalluuee and TTccll__SSeettHHaasshhVVaalluuee are used to read and
     write an entry's value, respectively.  Values are stored and
     retrieved as type ``ClientData'', which is large enough to
     hold a pointer value.  On almost all machines this is large
     enough to hold an integer value too.

     TTccll__GGeettHHaasshhKKeeyy returns the key for a given hash table entry,
     either as a pointer to a string, a one-word (``char *'')
     key, or as a pointer to the first word of an array of
     integers, depending on the _k_e_y_T_y_p_e used to create a hash
     table.  In all cases TTccll__GGeettHHaasshhKKeeyy returns a result with
     type ``char *''.  When the key is a string or array, the
     result of TTccll__GGeettHHaasshhKKeeyy points to information in the table
     entry;  this information will remain valid until the entry
     is deleted or its table is deleted.

     TTccll__FFiirrssttHHaasshhEEnnttrryy and TTccll__NNeexxttHHaasshhEEnnttrryy may be used to scan
     all of the entries in a hash table.  A structure of type
     ``Tcl_HashSearch'', provided by the client, is used to keep
     track of progress through the table.  TTccll__FFiirrssttHHaasshhEEnnttrryy
     initializes the search record and returns the first entry in
     the table (or NULL if the table is empty).  Each susequent
     call to TTccll__NNeexxttHHaasshhEEnnttrryy returns the next entry in the
     table or NULL if the end of the table has been reached.  A
     call to TTccll__FFiirrssttHHaasshhEEnnttrryy followed by calls to
     TTccll__NNeexxttHHaasshhEEnnttrryy will return each of the entries in the
     table exactly once, in an arbitrary order.  It is unadvis-
     able to modify the structure of the table, e.g.  by creating
     or deleting entries, while the search is in progress.

     TTccll__HHaasshhSSttaattss returns a dynamically-allocated string with
     overall information about a hash table, such as the number



Sprite v1.0                                                     4






Tcl_Hash              C Library Procedures               Tcl_Hash



     of entries it contains, the number of buckets in its hash
     array, and the utilization of the buckets.  It is the
     caller's responsibility to free the result string by passing
     it to ffrreeee.

     The header file ttccllHHaasshh..hh defines the actual data structures
     used to implement hash tables.  This is necessary so that
     clients can allocate Tcl_HashTable structures and so that
     macros can be used to read and write the values of entries.
     However, users of the hashing routines should never refer
     directly to any of the fields of any of the hash-related
     data structures; use the procedures and macros defined here.


KKEEYYWWOORRDDSS
     hash table, key, lookup, search, value







































Sprite v1.0                                                     5



