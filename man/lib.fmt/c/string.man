


STRING                C Library Procedures                 STRING



NNAAMMEE
     strcat, strncat, strcmp, strncmp, strcasecmp, strncasecmp,
     strcpy, strncpy, strdup, strlen, strchr, index, strrchr,
     rindex, strstr, strspn, strcspn, strpbrk - string operations

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttrriinngg..hh>>

     cchhaarr **ssttrrccaatt((ss,, aappppeenndd))
     cchhaarr **ss,, **aappppeenndd;;

     cchhaarr **ssttrrnnccaatt((ss,, aappppeenndd,, ccoouunntt))
     cchhaarr **ss,, **aappppeenndd;;
     iinntt ccoouunntt;;

     ssttrrccmmpp((ss11,, ss22))
     cchhaarr **ss11,, **ss22;;

     ssttrrnnccmmpp((ss11,, ss22,, ccoouunntt))
     cchhaarr **ss11,, **ss22;;
     iinntt ccoouunntt;;

     ssttrrccaasseeccmmpp((ss11,, ss22))
     cchhaarr **ss11,, **ss22;;

     ssttrrnnccaasseeccmmpp((ss11,, ss22,, ccoouunntt))
     cchhaarr **ss11,, **ss22;;
     iinntt ccoouunntt;;

     cchhaarr **ssttrrccppyy((ttoo,, ffrroomm))
     cchhaarr **ttoo,, **ffrroomm;;

     cchhaarr **ssttrrnnccppyy((ttoo,, ffrroomm,, ccoouunntt))
     cchhaarr **ttoo,, **ffrroomm;;
     iinntt ccoouunntt;;

     cchhaarr **ssttrrdduupp((ss))
     cchhaarr **ss;;

     ssttrrlleenn((ss))
     cchhaarr **ss;;

     cchhaarr **ssttrrcchhrr((ss,, cc))
     cchhaarr **ss;;
     iinntt cc;;

     cchhaarr **iinnddeexx((ss,, cc))
     cchhaarr **ss,, cc;;

     cchhaarr **ssttrrrrcchhrr((ss,, cc))
     cchhaarr **ss;;
     iinntt cc;;



Sprite v1.0              April 12, 1991                         1






STRING                C Library Procedures                 STRING



     cchhaarr **rriinnddeexx((ss,, cc))
     cchhaarr **ss,, cc;;

     cchhaarr **ssttrrssttrr((ss,, ss22))
     cchhaarr **ss,, **ss22;;

     iinntt ssttrrssppnn((ss,, ss22))
     cchhaarr **ss,, **ss22;;

     iinntt ssttrrccssppnn((ss,, ss22))
     cchhaarr **ss,, **ss22;;

     cchhaarr **ssttrrppbbrrkk((ss,, ss22))
     cchhaarr **ss,, **ss22;;

DDEESSCCRRIIPPTTIIOONN
     These functions operate on null-terminated strings.  They do
     not check for overflow of any receiving string.

     _S_t_r_c_a_t appends a copy of string _a_p_p_e_n_d to the end of string
     _s. _S_t_r_n_c_a_t copies at most _c_o_u_n_t characters.  Both return a
     pointer to the null-terminated result.

     _S_t_r_c_m_p compares its arguments and returns an integer greater
     than, equal to, or less than 0, according as _s_1 is lexico-
     graphically greater than, equal to, or less than _s_2.
     _S_t_r_n_c_m_p makes the same comparison but looks at at most _c_o_u_n_t
     characters.  _S_t_r_c_a_s_e_c_m_p and _s_t_r_n_c_a_s_e_c_m_p are identical in
     function, but are case insensitive.  The returned lexico-
     graphic difference reflects a conversion to lower-case.

     _S_t_r_c_p_y copies string _f_r_o_m to _t_o, stopping after the null
     character has been moved.  _S_t_r_n_c_p_y copies exactly _c_o_u_n_t
     characters, appending nulls if _f_r_o_m is less than _c_o_u_n_t char-
     acters in length; the target may not be null-terminated if
     the length of _f_r_o_m is _c_o_u_n_t or more.  Both return _t_o.

     _S_t_r_d_u_p allocates storage for a copy of _s, copies _s into it,
     and returns the copied string.  The copy may be freed by
     calling _f_r_e_e(3).

     _S_t_r_l_e_n returns the number of non-null characters in _s.

     _S_t_r_c_h_r and _i_n_d_e_x both return pointers to the first
     occurrence of character _c in string _s or NNUULLLL if _c does not
     occur in the string.  The two procedures are identical
     except for their names and the argument _c, which is an iinntt
     in _s_t_r_c_h_r and a cchhaarr in _i_n_d_e_x.  With the ANSI C standard,
     _i_n_d_e_x is becoming obsolete.

     _S_t_r_r_c_h_r and _r_i_n_d_e_x are identical to _s_t_r_c_h_r and _i_n_d_e_x except
     that the return the address of the last occurrence of _c



Sprite v1.0              April 12, 1991                         2






STRING                C Library Procedures                 STRING



     instead of the first.  _R_i_n_d_e_x is also becoming obsolete.

     _S_t_r_s_t_r locates the first occurrence in the string pointed to
     by _s of the sequence of characters (not including the ter-
     minating null character) in the string pointed to by _s_2.  If
     a match is found, the return value is the address of the
     first character in the matching substring.  Otherwise, NNUULLLL
     is returned.  If _s_2 points to a string with zero length,
     then _s is returned.

     _S_t_r_s_p_n returns the length of the longest initial segment of
     _s that consists entirely of characters from the string
     pointed to by _s_2.  _S_t_r_c_s_p_n returns the length of the longest
     initial segment of _s that consists entirely of characters
     not in the string pointed to by _s_2.

     _S_t_r_p_b_r_k returns the address of the first character in the
     string pointed to by _s of any character in the string
     pointed to by _s_2.  If no character from _s_2 occurs in _s_1,
     then NNUULLLL is returned.


KKEEYYWWOORRDDSS
     compare, copy, string































Sprite v1.0              April 12, 1991                         3



