


Sync                  C Library Procedures                   Sync



_________________________________________________________________

NNAAMMEE
     Sync - Synchronization overview

SSYYNNOOPPSSIISS
     This section provides an overview of the Sprite SSyynncc__ system
     routines.

_________________________________________________________________

DDEESSCCRRIIPPTTIIOONN
     Sprite provides system calls to allow processes to synchron-
     ize execution using Mesa-style monitors.

     The following set of macros are used  to  emulate  monitored
     procedures  of  Mesa.   The  LLOOCCKK__MMOONNIITTOORR and UUNNLLOOCCKK__MMOONNIITTOORR
     macros depend on a  constant  LLOOCCKKPPTTRR.   LLOOCCKKPPTTRR  should  be
     defined as the address of the lock variable used to lock the
     monitor. Something like the  following  two  lines  of  code
     should  appear  at the beginning of a file of monitored pro-
     cedures.

         #include <sync.h>

         Sync_Lock modMonitorLock;
         #define LOCKPTR (&modMonitorLock)

     The pseudo-keywords IINNTTEERRNNAALL and EENNTTRRYY denote  internal  and
     entry procedures of a monitor.  IINNTTEERRNNAALL procedures can only
     be called when the monitor lock is held.   EENNTTRRYY  procedures
     are  procedures  that  acquire  the lock.  There may also be
     External procedures.  They are the default and there  is  no
     special  keyword.   An External procedure doesn't explicitly
     acquire the monitor lock, but may call an EENNTTRRYY procedure.


     Condition variables represent  events  that  are  associated
     with  locks.   The  operations  on  a condition variable are
     SSyynncc__WWaaiitt and SSyynncc__BBrrooaaddccaasstt. SSyynncc__WWaaiitt allows a process  to
     wait   for   a   particular   monitor  condition  to  occur.
     SSyynncc__BBrrooaaddccaasstt wakes up all processes waiting on a  particu-
     lar  condition.  The  lock must be acquired before a call to
     these routines is made.  The lock is released while  a  pro-
     cess  waits on a condition, and is then re-acquired when the
     condition is notified via SSyynncc__BBrrooaaddccaasstt.

     SSyynncc__BBrrooaaddccaasstt is the only mechanism for  awakening  waiting
     processes.   For example, there is no means to notify only a
     single process awaiting a particular condition.  If  several
     processes  are  awaiting the availability of a single shared
     resource, all processes awaiting the condition must be noti-
     fied;  they  must  each  recheck for the availability of the
     resource, and all but one will find the resource unavailable



Sprite v.1.0        Printed:  April 10, 1989                    1






Sync                  C Library Procedures                   Sync



     and wait again.

     SSyynncc__WWaaiittTTiimmee is used to cause the process to  sleep  for  a
     specific  amount  of time. The process will be woken up if a
     signal arrives.

SSEEEE AALLSSOO
     Sync_Broadcast, Sync_Wait, Sync_WaitTime

KKEEYYWWOORRDDSS
     synchronization, wait, block, process, event, wakeup, broad-
     cast











































Sprite v.1.0        Printed:  April 10, 1989                    2



